sol_name,ref,code
65048-0.sol,question,"function Election () public {
^ (Relevant source part starts here and spans across multiple lines).

/C/Users/asus/election/contracts/Election.sol:3:1: The shadowed declaration is here:
"
66537-0.sol,question,"function calledFunction() public {
        emit callEvent(msg.sender, tx.origin, this);
    }"
24646-0.sol,question,"function MyLibInit(PersonsData storage self)  { 
       self.numpersons = 0 ; 
    }"
24646-0.sol,question,"function AddPerson(PersonsData storage self)  public {
        Person  memory p ;

        p.balance = 0 ; 
        self.person[msg.sender]  =  p; 
        self.numpersons++ ; 

    }"
15989-0.sol,question,"function MyToken(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) {
        balanceOf[msg.sender] = initialSupply;              
        totalSupply = initialSupply;                        
        name = tokenName;                                   
        symbol = tokenSymbol;                               
        decimals = decimalUnits;                            
        owner = msg.sender;
    }"
15989-0.sol,question,"function transfer(address _to, uint256 _value) { 
        if (_to == 0x0) throw;                               
        if (balanceOf[owner] < _value) throw;                
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; 
        balanceOf[owner] -= _value;                          
        balanceOf[_to] += _value;                            
        Transfer(owner, _to, _value);                        

        
        ShowLogstr(_value);
        ShowCurrentTokenOfOwner(owner,balanceOf[owner]);
        ShowCurrentTokenOfTransferAccount(_to,balanceOf[_to]);
    }"
3301-0.sol,question,"function setWeb3Provider(keystore) {

    var web3Provider = new HookedWeb3Provider({
        host: ethClient,
        transaction_signer: keystore
    });

    web3.setProvider(web3Provider);

}"
3301-0.sol,question,"function (err, pwDerivedKey) {

global_keystore = new lightwallet.keystore(
    providedSeed,
    pwDerivedKey);

global_keystore.generateNewAddress(pwDerivedKey, 2);

setWeb3Provider(global_keystore);




var contract = web3.eth.contract(_contractABI);
    var myContract = contract.new(
        {
            from: _ethWalletAddress,
            data: _contractCode,
            gas: 3000000,
            gasPrice: 18000000010
        }, function(e, 
        }"
83052-0.sol,question,"function is

    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, ""Address: insufficient balance"");
        (bool success, ) = recipient.call{ value: amount }("""");
        require(success, ""Address: unable to send value, recipient may have reverted"");
    }"
84706-2.sol,question,"function (accounts) {
   
   let contract, balance;
   before(async function () {
     contract  = await ContractBalance.new({from: accounts[0]});
     balance   = await contract.getBalance();
     console.log('ContractBalanceTest ', contract.address, balance.toString());
     console.log('');
   });
 
   describe('#deposit', function () {
     it('test deposit', async function () {
       let one_eth = web3.utils.toWei(""1"", ""ether"");
       let tx = await contract.depositAmount(one_eth, { from: accounts[1], value : one_eth});
       
       let b = await contract.getBalance();
       console.log('ContractBalanceTest ', contract.address, b.toString());
       assert.equal( b.toString(), ""1000000000000000000"", ""the contract's balance should be 1 ether"");
     });
   });
 
   describe('#withdraw', function () {
     it('test withdraw', async function () {
       let half_eth = web3.utils.toWei(""0.5"", ""ether"");
       let tx = await contract.withdrawAmount(half_eth, { from: accounts[3], value : half_eth});
       
       
       let b = await contract.getBalance();
       console.log('ContractBalanceTest ', contract.address, b.toString());
       assert.equal( b.toString(), ""500000000000000000"", ""the contract's balance should be 0.5 ether"" );
     });
   });
 
 }"
84706-2.sol,question,"function () {
     contract  = await ContractBalance.new({from: accounts[0]});
     balance   = await contract.getBalance();
     console.log('ContractBalanceTest ', contract.address, balance.toString());
     console.log('');
   }"
19102-0.sol,question,"function collectPayment() {
    uint256 blockDepth = block.number - wagers[wager_owner].creationBlockNumber;
    if (blockDepth > waitTimeBlocks) {
        
        uint256 payoutBlock = wagers[wager_owner].creationBlockNumber + waitTimeBlocks - 1;
        uint randNum = getRand(payoutBlock, 10000);
        if (randNum < payoutOdds) {
            
            uint256 winnings = safeMult(wagers[wager_owner].wagerWei, 2);
            wagers[wager_owner].active = false;
            wagers[wager_owner].sender.send(winnings))
        } else {
            
            wagers[wager_owner].active = false;
        }
    }
"
25399-1.sol,question,"function getParameterByName(name, url) {
    
}"
34352-0.sol,question,"function () payable public{
         mintableToken.buy();
    }"
73902-0.sol,question,"function (transactionCount) {
    console.log(web3.utils.toHex(transactionCount));
    var txParams = {
      nonce: web3.utils.toHex(transactionCount),
      gasPrice: web3.utils.toHex(1000),
      gasLimit: web3.utils.toHex(1000000),
      to: '0x0000000000000000000000000000000000000000',
      value: '0x00',
      data: ""0x"" + bytecode,
    }
    const tx = new Tx(txParams, { 'chain': 'ropsten' })
    tx.sign(privateKey)
    const serializedTx = tx.serialize()

    var receipt=null;

    web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (err, hash) {
      console.log(err);
      console.log(hash);
      while (receipt == null) {

        receipt = web3.eth.getTransactionReceipt(hash);

      }

      console.log('Contract address: ' + receipt.contractAddress);





  });"
73902-0.sol,question,"function (err, hash) {
      console.log(err);
      console.log(hash);
      while (receipt == null) {

        receipt = web3.eth.getTransactionReceipt(hash);

      }

      console.log('Contract address: ' + receipt.contractAddress);





  }"
84646-0.sol,question,"function showPinata() internal {
        emit Pinata(123);
    }"
9427-2.sol,question,"function append(data storage self, bytes32 _data, bytes32 _data2) {
    var index = uint80(self.items.push(Item({prev: self.last, next: None, data: _data, data2: _data2})));
    if (self.last == None)
      {
    if (self.head != None || self.count != 0) throw;
    self.head = self.last = index;
    self.count = 1;
      }
    else
      {
    self.items[self.last - 1].next = index;
    self.last = index;
    self.count++;
      }
  }"
66104-1.sol,question,"function Ballot() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/home/bc/bheem/Ballot2/contracts/Ballot.sol:3:1: The shadowed declaration is here:
"
68372-1.sol,question,"function (accounts) { 
    
    it('initiates contract', async function() { 
        const contract = await ApprovalContracts.deployed();
        const approver = await contract.approver.call(); 
        assert.equal(approver, 0xc7780C9521C2C2abED69f0D65BEbF9794C55ae94, ""approvers don't match"");
    });

    it('takes a deposit', async function() {
        const balance = await web3.eth.getBalance(address.contract);  -----> ReferenceError: address is not defined
        const expected = web3.utils.toBN(1e+18);
        assert.equal(balance.toString(), expected.toString(), ""amount did not match"");
    });
}"
68372-1.sol,question,"function() { 
        const contract = await ApprovalContracts.deployed();
        const approver = await contract.approver.call(); 
        assert.equal(approver, 0xc7780C9521C2C2abED69f0D65BEbF9794C55ae94, ""approvers don't match"");
    }"
47952-0.sol,question,"function assert(bool assertion) internal {
            if (!assertion) {
                throw;
            }
           }"
84646-1.sol,question,"function showPinata() internal {
        emit Birthday.Pinata(222);
    }"
80574-0.sol,question,function fallback() external payable{}
49104-0.sol,question,"function check() public {
    handle.guess.value(1 ether)(83); 
}"
39135-2.sol,question,"function main() {
    console.log('Transferring from address 0x8..');
    web3.eth.getTransactionCount(SOURCE_WALLET_ADDRESS).then(function (nonce) {
        console.log('The nonce is ' + nonce);
        web3.eth.getBalance(SOURCE_WALLET_ADDRESS).then(function (balance) { 

            console.log('Balance ' + balance); 
            sendTransaction(nonce, balance);
        });
    });
}"
39135-2.sol,question,"function (nonce) {
        console.log('The nonce is ' + nonce);
        web3.eth.getBalance(SOURCE_WALLET_ADDRESS).then(function (balance) { 

            console.log('Balance ' + balance); 
            sendTransaction(nonce, balance);
        });
    }"
39135-2.sol,question,"function (balance) { 

            console.log('Balance ' + balance); 
            sendTransaction(nonce, balance);
        }"
39135-2.sol,question,"function sendTransaction (nonce, balance) {
    var tokensToSend = '1000';
    var contract = new web3.eth.);
    var balanceInWei = balance * 1000000000000000000;
    var gas = 130091;

    
    gasPrice = balanceInWei / gas;

    console.log('\r\nStarting transaction. with nonce ' + nonce);
    console.log('Gas price : ' + gasPrice + '\r\n');

    let details = {
        ""to"": CONTRACT_ADDRESS,
        ""from"": SOURCE_WALLET_ADDRESS,
        ""data"": contract.methods.transfer(DESTINATION_WALLET_ADDRESS, tokensToSend).encodeABI(),
        ""value"": web3.utils.toHex(tokensToSend),
        ""nonce"": nonce,
        ""gas"": gas, 
        ""gasPrice"": gasPrice, 
        ""chainId"": 1 
    }

    const transaction = new EthereumTx(details);
    transaction.sign(Buffer.from(WALLET_PRIVATE_KEY, 'hex'));
    const serializedTransaction = transaction.serialize();

    web3.eth.sendSignedTransaction('0x' + serializedTransaction.toString('hex')).then(function (transId) {
        console.log('My job here is done. ' + transId.transactionHash);
    });
}"
39135-2.sol,question,"function (transId) {
        console.log('My job here is done. ' + transId.transactionHash);
    }"
84041-1.sol,question,"function certify_init () {
  
  
    
    
  if (window.ethereum) {
    window.web3 = new Web3(ethereum);
    window.ethereum.enable();
  } else {
    alert(""No Ethereum interface injected into browser. Read-only access"");
  }
  
  let abi = [
    {
      ""constant"": false,
      ""inputs"": [
        {
          ""internalType"": ""bytes32"",
          ""name"": ""hash"",
          ""type"": ""bytes32""
        },
        {
          ""internalType"": ""string"",
          ""name"": ""insti"",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": ""reci"",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": ""course"",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": ""grade"",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": ""doc"",
          ""type"": ""string""
        }
      ],
      ""name"": ""addDocHash"",
      ""outputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""function""
    },
    {
      ""constant"": true,
      ""inputs"": [
        {
          ""internalType"": ""bytes32"",
          ""name"": ""hash"",
          ""type"": ""bytes32""
        }
      ],
      ""name"": ""findDocHash"",
      ""outputs"": [
        {
          ""internalType"": ""uint256"",
          ""name"": """",
          ""type"": ""uint256""
        },
        {
          ""internalType"": ""uint256"",
          ""name"": """",
          ""type"": ""uint256""
        },
        {
          ""internalType"": ""string"",
          ""name"": """",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": """",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": """",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": """",
          ""type"": ""string""
        },
        {
          ""internalType"": ""string"",
          ""name"": """",
          ""type"": ""string""
        }
      ],
      ""payable"": false,
      ""stateMutability"": ""view"",
      ""type"": ""function""
    },
    {
      ""inputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""constructor""
    }
  ];

  
  contract = new web3.eth.Contract(abi, address);
  
  
  
  
  console.log(contract.methods);
}"
84041-1.sol,question,"function certify_send (hash, insti, reci, course, grade, doc, callback) {
    web3.eth.getAccounts(function (error, accounts) {
      console.log(""Account=""+accounts[0]);
      contract.methods.addDocHash(hash, insti, reci, course, grade, doc).send({
        from: accounts[0],
        gas: 20000000,
        gasLimit: 8000000
      },function(error, tx) {
        if (error) callback(error, null);
        else callback(null, tx);
      });
    });
}"
84041-1.sol,question,"function (error, accounts) {
      console.log(""Account=""+accounts[0]);
      contract.methods.addDocHash(hash, insti, reci, course, grade, doc).send({
        from: accounts[0],
        gas: 20000000,
        gasLimit: 8000000
      },function(error, tx) {
        if (error) callback(error, null);
        else callback(null, tx);
      });
    }"
84041-1.sol,question,"function(error, tx) {
        if (error) callback(error, null);
        else callback(null, tx);
      }"
84041-1.sol,question,"function certify_find (hash, callback) {
  contract.methods.findDocHash(hash).call( function (error, result) {
    if (error) callback(error, null);
    else {
      let resultObj = {
        mineTime:  new Date(result[0] * 1000),
        blockNumber: result[1],
        instituteName: result[2],
        recipientName: result[3],
        courseName: result[4],
        marks: result[5],
        dateOfCompletion: result[6]
      }
      callback(null, resultObj);
    }
  });
}"
84041-1.sol,question,"function (error, result) {
    if (error) callback(error, null);
    else {
      let resultObj = {
        mineTime:  new Date(result[0] * 1000),
        blockNumber: result[1],
        instituteName: result[2],
        recipientName: result[3],
        courseName: result[4],
        marks: result[5],
        dateOfCompletion: result[6]
      }
      callback(null, resultObj);
    }
  }"
41188-0.sol,question,"function setEmployee(uint16 _age, uint16 _income, uint16 _timeWorked) public {
Employee memory tempEmployee = Employee({age: _age, income: _income, timeWorked: 
_timeWorked});
employees.push(tempEmployee);
}"
45703-0.sol,question,"function insertUser(address dbAddr, bytes32 user) public {
      DB(dbAddr).setUser(user);
  }"
69194-0.sol,question,"function safeTransfer(ERC223Interface token, address to, uint256 value) internal {
        require(token.transfer(to, value)); 
    }"
69194-0.sol,question,"function safeTransferFrom(ERC223Interface token, address from, address to, uint256 value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }"
69194-0.sol,question,"function safeApprove(ERC223Interface token, address spender, uint256 value) internal {
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0));
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }"
69194-0.sol,question,"function safeIncreaseAllowance(ERC223Interface token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }"
69194-0.sol,question,"function safeDecreaseAllowance(ERC223Interface token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value);
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }"
69194-0.sol,question,"function callOptionalReturn(ERC223Interface token, bytes memory data) private {
        
        

        
        
        
        

        require(address(token).isContract());

        
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success);

        if (returndata.length > 0) { 
            require(abi.decode(returndata, (bool)));
        }
    }"
15989-2.sol,question,"function Crowdsale(
        address ifSuccessfulSendTo,
        uint fundingGoalInEthers,
        uint durationInMinutes,
        uint etherCostOfEachToken,
        token addressOfTokenUsedAsReward
    ) {
        beneficiary = ifSuccessfulSendTo;
        fundingGoal = fundingGoalInEthers * 1 ether;
        deadline = now + durationInMinutes * 1 minutes;
        price = etherCostOfEachToken * 1 ether;
        tokenReward = token(addressOfTokenUsedAsReward);
        creator = msg.sender;
    }"
15989-2.sol,question,"function () payable {
        if (crowdsaleClosed) throw;
        uint amount = msg.value;  
        balanceOf[msg.sender] = amount;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, amount / price);
        FundTransfer(msg.sender, amount, true);
    }"
15989-2.sol,question,"function checkGoalReached() afterDeadline {
        if (amountRaised >= fundingGoal){
            fundingGoalReached = true;
            GoalReached(beneficiary, amountRaised);
        }
        crowdsaleClosed = true;
    }"
15989-2.sol,question,"function safeWithdrawal() afterDeadline {
        if (!fundingGoalReached) {
            uint amount = balanceOf[msg.sender];
            balanceOf[msg.sender] = 0;
            if (amount > 0) {
                if (msg.sender.send(amount)) {
                    FundTransfer(msg.sender, amount, false);
                } else {
                    balanceOf[msg.sender] = amount;
                }
            }
        }
        /**/
        if (fundingGoalReached && beneficiary == msg.sender) {
            if (beneficiary.send(amountRaised)) {
                FundTransfer(beneficiary, amountRaised, false);
            } else {
                
                fundingGoalReached = false;
            }
        }

    }"
15989-2.sol,question,"function beneficiarySafeWithdrawal() afterDeadline {
        if(creator!=msg.sender) throw;
        if (fundingGoalReached) {
            if (beneficiary.send(amountRaised)) {
                FundTransfer(beneficiary, amountRaised, false);
            } else {
                
                fundingGoalReached = false;
            }
        }
    }"
64931-1.sol,question,"function LGCCoin() public {
        _balanceOf[msg.sender] = _totalSupply;
    }"
78150-0.sol,question,"function nonce_addr(address) {
    return web3.eth.getTransactionCount(address)
}"
78150-0.sol,question,"function(recipient, i) {

    const balance = await contractInstance.methods.balanceOf(recipient).call(function(err, result) {
        let contract = new web3.eth.)

        if (result < 0) return
        web3.eth.getTransactionCount(fromAddress)
            .then((count) => {
                let rawTransaction = {
                    'from': fromAddress,
                    'gasPrice': web3.utils.toHex(20 * 1e9),
                    'gasLimit': web3.utils.toHex(21000),
                    'to': recipient,
                    'value': web3.utils.toHex(web3.utils.toWei(""0.0008"")),
                    'nonce': web3.utils.toHex(count + i)
                }
                let transaction = new Tx(rawTransaction)
                transaction.sign(privateKey)
                return new Promise((resolve, reject) => {
                    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                        .on('transactionHash', console.log)
                        .on('receipt', resolve)
                        .on('error', reject)
                })
            }).then(receipt => {
                console.log(""eth was send"")

                keys.forEach(async function(keys) {
                    let nonce = await web3.eth.getTransactionCount(recipient, 'pending');

                    let rawTransaction = {
                        'from': recipient,
                        'gasPrice': web3.utils.toHex(20 * 1e9),
                        'gasLimit': web3.utils.toHex(100000),
                        'to': tokenAddress,
                        'value': 0x0,
                        'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                        'nonce': web3.utils.toHex(nonce)
                    }
                    nonce++
                    let transaction = new Tx(rawTransaction)
                    transaction.sign(Buffer.from(keys, 'hex'))
                    let serializedTx = '0x' + transaction.serialize().toString('hex')
                    return new Promise(resolve => {
                        web3.eth.sendSignedTransaction(serializedTx)
                            .on('transactionHash', console.log)

                    })
                })


            })
    })

}"
78150-0.sol,question,"function(err, result) {
        let contract = new web3.eth.)

        if (result < 0) return
        web3.eth.getTransactionCount(fromAddress)
            .then((count) => {
                let rawTransaction = {
                    'from': fromAddress,
                    'gasPrice': web3.utils.toHex(20 * 1e9),
                    'gasLimit': web3.utils.toHex(21000),
                    'to': recipient,
                    'value': web3.utils.toHex(web3.utils.toWei(""0.0008"")),
                    'nonce': web3.utils.toHex(count + i)
                }
                let transaction = new Tx(rawTransaction)
                transaction.sign(privateKey)
                return new Promise((resolve, reject) => {
                    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                        .on('transactionHash', console.log)
                        .on('receipt', resolve)
                        .on('error', reject)
                })
            }).then(receipt => {
                console.log(""eth was send"")

                keys.forEach(async function(keys) {
                    let nonce = await web3.eth.getTransactionCount(recipient, 'pending');

                    let rawTransaction = {
                        'from': recipient,
                        'gasPrice': web3.utils.toHex(20 * 1e9),
                        'gasLimit': web3.utils.toHex(100000),
                        'to': tokenAddress,
                        'value': 0x0,
                        'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                        'nonce': web3.utils.toHex(nonce)
                    }
                    nonce++
                    let transaction = new Tx(rawTransaction)
                    transaction.sign(Buffer.from(keys, 'hex'))
                    let serializedTx = '0x' + transaction.serialize().toString('hex')
                    return new Promise(resolve => {
                        web3.eth.sendSignedTransaction(serializedTx)
                            .on('transactionHash', console.log)

                    })
                })


            })
    }"
78150-0.sol,question,"function(keys) {
                    let nonce = await web3.eth.getTransactionCount(recipient, 'pending');

                    let rawTransaction = {
                        'from': recipient,
                        'gasPrice': web3.utils.toHex(20 * 1e9),
                        'gasLimit': web3.utils.toHex(100000),
                        'to': tokenAddress,
                        'value': 0x0,
                        'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                        'nonce': web3.utils.toHex(nonce)
                    }
                    nonce++
                    let transaction = new Tx(rawTransaction)
                    transaction.sign(Buffer.from(keys, 'hex'))
                    let serializedTx = '0x' + transaction.serialize().toString('hex')
                    return new Promise(resolve => {
                        web3.eth.sendSignedTransaction(serializedTx)
                            .on('transactionHash', console.log)

                    })
                }"
80183-0.sol,question,"function assign(DataSet storage self) internal {
        self.a = 2;
    }"
62719-0.sol,question,"function () payable{
        createTokens();
    }"
62719-0.sol,question,"function burnTokens(uint256 _value) onlyOwner {

         require(balances[msg.sender] >= _value && _value > 0 );
         _totalSupply = _totalSupply.sub(_value);
         balances[msg.sender] = balances[msg.sender].sub(_value);

    }"
62719-0.sol,question,"function createTokens() payable {
        if(isMinting == true){
            require(msg.value > 0);
            uint256  tokens = msg.value.div(100000000000000).mul(RATE);
            balances[msg.sender] = balances[msg.sender].add(tokens);
            _totalSupply = _totalSupply.add(tokens);
            owner.transfer(msg.value);
        }
        else{
            throw;
        }
    }"
62719-0.sol,question,"function endCrowdsale() onlyOwner {
        isMinting = false;
    }"
62719-0.sol,question,"function changeCrowdsaleRate(uint256 _value) onlyOwner {
        RATE = _value;
    }"
66147-0.sol,question,"function _transfer (address _from, address _to, uint _value) internal {
        
        require(_to != address(0x0));
        
        require(balanceOf[_from] >= _value);
        
        require(balanceOf[_to] + _value > balanceOf[_to]);
        
        uint previousBalances = balanceOf[_from] + balanceOf[_to];
        
        balanceOf[_from] -= _value;
        
        balanceOf[_to] += _value;
        emit Transfer(_from, _to, _value);
        
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }"
27097-1.sol,question,"function initConnectWeb3() {

            web3 = new Web3(new Web3.providers.HttpProvider(""https:


        console.log(web3);
    }"
79291-0.sol,question,"function (err, result) {
            console.log(result);
            if(result){
                $('input[contract_hash]').val(result.result);
                
            }
        }"
9873-0.sol,question,"function(err,res){
  console.log(err);
  console.log(res);
}"
45972-2.sol,question,"function Inbox(string initialMessage) public {\n    ^ 
    (Relevant source part starts here and spans across multiple lines).\n' ],"
51205-0.sol,question,"function (accounts) {
it('should have emitted event with contract address', async function () {
    changemanager = await  ChangeManager.deployed();
    var event = changemanager.allEvents();

    event.watch(function (error, result) {
        if (!error)
            console.log(""Result: "", result.event);
    });
});
"
51205-0.sol,question,"function () {
    changemanager = await  ChangeManager.deployed();
    var event = changemanager.allEvents();

    event.watch(function (error, result) {
        if (!error)
            console.log(""Result: "", result.event);
    });
}"
51205-0.sol,question,"function (error, result) {
        if (!error)
            console.log(""Result: "", result.event);
    }"
22871-0.sol,question,function insert(bytes _hash) {}
22871-0.sol,question,function combine() {}
79015-0.sol,question,"function ready(){
document.getElementById(""bet"").addEventListener(""submit"", function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;

    var contract = web3.eth.contract(OraclizeContract.abi).at('0x0FBfeF5861C5315226A04865c942D97208D33e3C');

    console.log(contract.abi)

    

    var team = document.querySelector(""#bet #team"").value;
    console.log(team)
    if(team == ""Home"")
    {
      console.log(""inside----home-----"")
      team = 1;
    }
    else
    {
      team = 2;
    }
    console.log(team)
````````````````
Now as you can see i have taken address as input connected with truffle but i need to call the betonTeam function and transfer money to the winner address
"
79015-0.sol,question,"function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;

    var contract = web3.eth.contract(OraclizeContract.abi).at('0x0FBfeF5861C5315226A04865c942D97208D33e3C');

    console.log(contract.abi)

    

    var team = document.querySelector(""#bet #team"").value;
    console.log(team)
    if(team == ""Home"")
    {
      console.log(""inside----home-----"")
      team = 1;
    }
    else
    {
      team = 2;
    }
    console.log(team)
````````````````
Now as you can see i have taken address as input connected with truffle but i need to call the betonTeam function and transfer money to the winner address
"
55167-0.sol,question,"function Migrations() public {
  ^ (Relevant source part starts here and spans across multiple lines).
,/Users/zanemassey/Desktop/xyztoken/contracts/xyzToken.sol:8:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use ""constructor(...) { ... }"" instead.
    function xyzToken (uint256 _initialSupply) public {
 ^ (Relevant source part starts here and spans across multiple lines).



  Contract: xyzToken
    1) sets the total supply upon deployment
    > No events were emitted


  0 passing (36ms)
  1 failing

  1) Contract: xyzToken
       sets the total supply upon deployment:
     ReferenceError: xyzToken is not defined
      at Context.<anonymous> (test/xyzToken.js:7:3)
      at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/testrunner.js:135:1
      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/property.js:119:1
      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:89:1
      at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:134:1
      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)
      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)
      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)
      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)
      at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)
      at endReadableNT (_stream_readable.js:1081:12)
      at process._tickCallback (internal/process/next_tick.js:63:19)"
55167-0.sol,question,"function xyzToken (uint256 _initialSupply) public {
 ^ (Relevant source part starts here and spans across multiple lines).



  Contract: xyzToken
    1) sets the total supply upon deployment
    > No events were emitted


  0 passing (36ms)
  1 failing

  1) Contract: xyzToken
       sets the total supply upon deployment:
     ReferenceError: xyzToken is not defined
      at Context.<anonymous> (test/xyzToken.js:7:3)
      at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/testing/testrunner.js:135:1
      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/property.js:119:1
      at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/requestmanager.js:89:1
      at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:134:1
      at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/lib/web3/httpprovider.js:128:1)
      at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:64:1)
      at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:354:1)
      at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:509:1)
      at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2/lib/xhr2.js:469:1)
      at endReadableNT (_stream_readable.js:1081:12)
      at process._tickCallback (internal/process/next_tick.js:63:19)"
28729-0.sol,question,"function () {
        
        throw;
    }"
28729-0.sol,question,"function Token(
        ) {
        balances[msg.sender] = 450;               
        totalSupply = 450;                        
        name = ""jkj"";                                   
        decimals = 1;                            
        symbol = ""jjj"";                               
    }"
68001-1.sol,question,"function (accounts) {
    it('initiates contract', async function() { 
        const contract = await ApprovalContracts.depolyed();
        const approver = await contract.approver.call(); 
        assert.equal(approver, 0xc7780C9521C2C2abED69f0D65BEbF9794C55ae94, ""approvers don't match"");
    });

    it('takes a deposit', async function() {
        const contract = await ApprovalContracts.depolyed();
        await contract.deposit(accounts[0], {value: 1e+18, from: accounts [1]});
        assert.equal(web3.eth.getBalance(contract.address), 1e+18, ""amount did not match"")
    })
}"
68001-1.sol,question,"function() { 
        const contract = await ApprovalContracts.depolyed();
        const approver = await contract.approver.call(); 
        assert.equal(approver, 0xc7780C9521C2C2abED69f0D65BEbF9794C55ae94, ""approvers don't match"");
    }"
50609-0.sol,question,"function CappedCrowdsale(uint256 _cap) public {
  ^ (Relevant source part starts here and spans across multiple lines).
 not valid for functions.oc tag @dev
Compilation failed. See above.
"
3310-3.sol,question,"function deployB(aAddress) {
    var bSource = 'contract A { function a() constant returns (uint); }'+
    '';
    var bCompiled = web3.eth.compile.solidity(bSource);
    var bCode = bCompiled.B.code;
    var bAbi = bCompiled.B.info.abiDefinition;
    var bContract = web3.eth.contract(bAbi);

    bContract.new(aAddress,{data: bCode}, function (err, contract) {
        if (err) {
            console.error(err);
            return;

        } else if(contract.address) {
            var bAddress = contract.address
            console.log('bAddress: ' + bAddress);
            var res = bContract.at(bAddress).b.call();
            console.log(res.toString());
        } else {
            console.log(""B transmitted, waiting for mining..."");
        }
    });
}"
3310-3.sol,question,"function (err, contract) {
        if (err) {
            console.error(err);
            return;

        } else if(contract.address) {
            var bAddress = contract.address
            console.log('bAddress: ' + bAddress);
            var res = bContract.at(bAddress).b.call();
            console.log(res.toString());
        } else {
            console.log(""B transmitted, waiting for mining..."");
        }
    }"
59890-1.sol,question,"function (accounts) {
    describe(""#turnOn()"", function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            await assert.equal(loanrecord.on, false)
            await loanrecord.turnOn()
            await assert.equal(loanrecord.on, true)
        });
    });"
59890-1.sol,question,"function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            await assert.equal(loanrecord.on, false)
            await loanrecord.turnOn()
            await assert.equal(loanrecord.on, true)
        });
    }"
45718-1.sol,question,"function() {
  beforeEach('Setup contract for each test', async function() {
    instance = await QueryResultHandler.deployed();
  });

  it(""(0,'a'): Should return the StringEmpty code"", async () => {
    instance.validateRow.call(0,'a').then(function(viewResultCode) {
      assert.equal(viewResultCode, ViewResultCodes.IntegerNotPositive, ""Returned code was: "" + viewResultCode);
    });
  })
}"
45718-1.sol,question,"function(viewResultCode) {
      assert.equal(viewResultCode, ViewResultCodes.IntegerNotPositive, ""Returned code was: "" + viewResultCode);
    }"
74723-0.sol,question,"function(deployer, network , accounts) {
  deployer
    .deploy(Token, 1000000)
    .then(async () => {
      const tokenContract = await Token.deployed();
      return deployer.deploy(Shop, tokenContract.address);
    })
    .then(async () => {
      const token = await Token.deployed();
      const coinbase = accounts[0];
      const value = 50000;
      await token.transfer(coinbase, accounts[1], value);
    });
}"
74723-0.sol,question,"function() {
        return new HDWalletProvider(mnemonic, ""https:
      }"
56129-0.sol,question,"function sell(uint256 amount) public {
    address myAddress = this;
    require(myAddress.balance >= amount * sellPrice)    
    _transfer(msg.sender, this, amount);                
    msg.sender.transfer(amount * sellPrice);            
}"
51920-0.sol,question,"function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
      assert(token.transfer(to, value));
    }"
51920-0.sol,question,"function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
      assert(token.transferFrom(from, to, value));
    }"
51920-0.sol,question,"function safeApprove(ERC20 token, address spender, uint256 value) internal {
      assert(token.approve(spender, value));
    }"
65524-0.sol,question,"function withdraw() public {
    tokenAddress = Token(_tokenAddress)
    tokenAddress.approve.transferFrom(msg.sender, address(this), _amount);
}"
65524-0.sol,question,"function approve(uint _ammount, address _tokenAddress) public{
    tokenAddress = Token(_tokenAddress)
    tokenAddress.approve(adress(this), _amoount);
}"
59890-3.sol,question,"function (accounts) {
    describe(""#turnOn()"", function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            var on = await loanrecord.on()
            await assert.equal(on, false)
            await loanrecord.turnOn()
            var on = await loanrecord.on()
            await assert.equal(on, true)
        });
    });
}"
59890-3.sol,question,"function () {
        it(""should turn on a loan record instance"", async function () {
            loanrecord = await LoanRecord.new(
                1,
                18,
                0x0000000000000000000000000000000000000002,
                0x0000000000000000000000000000000000000001, 
                ""LOAN""
                );
            var on = await loanrecord.on()
            await assert.equal(on, false)
            await loanrecord.turnOn()
            var on = await loanrecord.on()
            await assert.equal(on, true)
        });
    }"
17572-3.sol,question,"function (error, result) {
    console.log(i++ + "": "" + JSON.stringify(result));
}"
42965-0.sol,question,function(instance){app=instance;}
42494-0.sol,question,"function() {
        console.log($(""#name"").val(), $(""#type"").val());
        Contract.addProvider($(""#name"").val(), $(""#type"").val());
    }"
78664-0.sol,question,"function erc(){

for (var i = 0; i < foreth.length; i++) {
    const balance = await contractInstance.methods.balanceOf(foreth[i]).call(function(err, result) {
        let contract = new web3.eth.)

        if (result < 0) return
        web3.eth.getTransactionCount(fromAddress)
            .then((count) => {
                let rawTransaction = {
                    'from': fromAddress,
                    'gasPrice': web3.utils.toHex(20 * 1e9),
                    'gasLimit': web3.utils.toHex(71000),
                    'to': foreth[i],
                    'value': web3.utils.toHex(web3.utils.toWei(""0.0008"")),
                    'nonce': web3.utils.toHex(count + i)
                }
                let transaction = new Tx(rawTransaction)
                transaction.sign(privateKey)
                return new Promise((resolve, reject) => {
                    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                        .on('transactionHash', console.log)
                        .on('receipt', resolve)
                        .on('error', reject)
                })
            }).then(receipt => {
                console.log(""eth was send"")
                for (var k = 0; k < keys.length; k++) {
                    let nonce =  web3.eth.getTransactionCount(foreth[i], 'pending');

                    let rawTransaction = {
                        'from': foreth[i],
                        'gasPrice': web3.utils.toHex(20 * 1e9),
                        'gasLimit': web3.utils.toHex(100000),
                        'to': tokenAddress,
                        'value': 0x0,
                        'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                        'nonce': web3.utils.toHex(nonce)
                    }
                    nonce++
                    let transaction = new Tx(rawTransaction)
                    transaction.sign(Buffer.from(keys[k], 'hex'))
                    let serializedTx = '0x' + transaction.serialize().toString('hex')
                    return new Promise(resolve => {
                        web3.eth.sendSignedTransaction(serializedTx)
                            .on('transactionHash', console.log)

                    })
                }


            })
    })

}
}"
78664-0.sol,question,"function(err, result) {
        let contract = new web3.eth.)

        if (result < 0) return
        web3.eth.getTransactionCount(fromAddress)
            .then((count) => {
                let rawTransaction = {
                    'from': fromAddress,
                    'gasPrice': web3.utils.toHex(20 * 1e9),
                    'gasLimit': web3.utils.toHex(71000),
                    'to': foreth[i],
                    'value': web3.utils.toHex(web3.utils.toWei(""0.0008"")),
                    'nonce': web3.utils.toHex(count + i)
                }
                let transaction = new Tx(rawTransaction)
                transaction.sign(privateKey)
                return new Promise((resolve, reject) => {
                    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                        .on('transactionHash', console.log)
                        .on('receipt', resolve)
                        .on('error', reject)
                })
            }).then(receipt => {
                console.log(""eth was send"")
                for (var k = 0; k < keys.length; k++) {
                    let nonce =  web3.eth.getTransactionCount(foreth[i], 'pending');

                    let rawTransaction = {
                        'from': foreth[i],
                        'gasPrice': web3.utils.toHex(20 * 1e9),
                        'gasLimit': web3.utils.toHex(100000),
                        'to': tokenAddress,
                        'value': 0x0,
                        'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                        'nonce': web3.utils.toHex(nonce)
                    }
                    nonce++
                    let transaction = new Tx(rawTransaction)
                    transaction.sign(Buffer.from(keys[k], 'hex'))
                    let serializedTx = '0x' + transaction.serialize().toString('hex')
                    return new Promise(resolve => {
                        web3.eth.sendSignedTransaction(serializedTx)
                            .on('transactionHash', console.log)

                    })
                }


            })
    }"
50460-0.sol,question,"function swapNumber(uint value1, uint value2) internal {
        value1 = value2;
    }"
31221-1.sol,question,"function withdrawTokens(uint256 _amount) { if(msg.sender!=wallet) throw; tokenReward.transfer(wallet,_amount); }"
81978-0.sol,question,"function sendSigned(txData,cb) {
      const privateKey = new Buffer.from(""privateKey"", 'hex')
      const transaction = new Tx(txData)
      transaction.sign(privateKey)
      const serializedTx = transaction.serialize().toString('hex')
      web3.eth.sendSignedTransaction('0x' + serializedTx,cb)
    }"
81978-0.sol,question,"function(err, result) {
      if (err) return console.log('error', err)
      console.log('sent', result)
    }"
54482-4.sol,question,"function signMessage(message, callback) {

    return sig = web3.eth.sign(""0x"" + message.toString(""hex""),
    ""<signer address: This address is changed depending on addresses generated by testRPC>"").
    then(console.log);



}"
54482-4.sol,question,"function prefixed(hash) {
  return ethereumjs.soliditySHA3(
    [""string"", ""bytes32""],
    [""\x19Ethereum Signed Message:\n32"", hash]
  );
}"
54482-4.sol,question,"function recoverSigner(message, signature) {
  

  var split = res = ethJsUtil.fromRpcSig(signature);

  var publicKey = ethJsUtil.ecrecover(message, split.v, split.r, split.s);
  var signer = ethJsUtil.pubToAddress(publicKey).toString(""hex"");
  return signer;
}"
54482-4.sol,question,"function(err, something) {}"
60028-4.sol,question,"function testBurn() public {
    mytoken.burn(1000);
    uint balance = mytoken.balanceOf(msg.sender);
    uint expected = 100000000000000000 - 1000;
    Assert.equal(balance, expected, ""Balance should be reduced."");

}"
64099-0.sol,question,"function (error, result) {
       console.log(""Callback !"")
}"
42863-0.sol,question,"function send (string cadena) public {
    cadenas[msg.sender] = cadena;
}"
26547-0.sol,question,"function isPrime(int n) {
    if(n < 2)
        return false;

    for (long i = 2; i * i <= n; i++)
        if (n % i == 0)
            return false;
    return true;
}"
67961-0.sol,question,"function addUser(address pubkey) public {

  }"
56682-0.sol,question,"function addVacancy(address sender, bytes32 vacancyId, uint256 incentive) external  {

        Vacancy vacancy = vacancies[vacancyId];
        vacancy.incentive = incentive;
        vacancy.owner = sender;

        emit NewVacancy(vacancyId, incentive, sender );
    }"
23296-0.sol,question,"function () {
return AuctusPreIco.deployed().then(function (instance) {
  
  var account = web3.eth.accounts[3]
  return instance.sendTransaction({ from: account, value: web3.toWei(3, ""ether"") })
    .then(assert.fail)
    .catch(function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'max cap reached. Can\'t send more eth to contract.'
        )
      }
      else {
        unexceptedException(error)
      }
    })
  })
}"
23296-0.sol,question,"function (instance) {
  
  var account = web3.eth.accounts[3]
  return instance.sendTransaction({ from: account, value: web3.toWei(3, ""ether"") })
    .then(assert.fail)
    .catch(function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'max cap reached. Can\'t send more eth to contract.'
        )
      }
      else {
        unexceptedException(error)
      }
    })
  }"
23296-0.sol,question,"function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'max cap reached. Can\'t send more eth to contract.'
        )
      }
      else {
        unexceptedException(error)
      }
    }"
40034-1.sol,question,"function() {
    if (typeof web3 !== 'undefined') {
        console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
        window.web3 = new Web3(web3.currentProvider);
    } else {
        
        window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
        
        
        console.log('No web3? You should consider trying MetaMask!');
    }
    startApp();
}"
40034-1.sol,question,"function startApp() {
    var CoursetroContract = web3.eth.contract(
        [{ ""constant"": false, ""inputs"": [{ ""name"": ""_fName"", ""type"": ""string"" }, { ""name"": ""_age"", ""type"": ""uint256"" }], ""name"": ""setInstructor"", ""outputs"": [], ""payable"": false, ""stateMutability"": ""nonpayable"", ""type"": ""function"" }, { ""constant"": true, ""inputs"": [], ""name"": ""getInstructor"", ""outputs"": [{ ""name"": """", ""type"": ""string"" }, { ""name"": """", ""type"": ""uint256"" }], ""payable"": false, ""stateMutability"": ""view"", ""type"": ""function"" }, { ""anonymous"": false, ""inputs"": [{ ""indexed"": false, ""name"": ""name"", ""type"": ""string"" }, { ""indexed"": false, ""name"": ""age"", ""type"": ""uint256"" }], ""name"": ""Instructor"", ""type"": ""event"" }]
    );

    var Coursetro = CoursetroContract.at('0x96d2a2978d52287c2DffF0e2A40D12181223303C');

    var instructorEvent = Coursetro.Instructor({ fromBlock: 0, toBlock: 'latest' });



    instructorEvent.watch(function(error, result) {
        if (!error) {
            $(""#loader"").hide();
            $(""#instructor"").html(result.args.name + ' (' + result.args.age + ' years old)');
        } else {
            $(""#loader"").hide();
            console.log(error);
        }
    });

    $(""#button"").click(function() {
        $(""#loader"").show();
        Coursetro.setInstructor($(""#name"").val(), $(""#age"").val(), function(error, result) {
            if (!error) {


            } else
                console.log(error);
        });
    });
}"
40034-1.sol,question,"function(error, result) {
        if (!error) {
            $(""#loader"").hide();
            $(""#instructor"").html(result.args.name + ' (' + result.args.age + ' years old)');
        } else {
            $(""#loader"").hide();
            console.log(error);
        }
    }"
39316-0.sol,question,"function() payable {
    ^

Spanning multiple lines.

browser/AAAtoken.sol:27:5: Warning: No visibility specified. Defaulting to ""public"".
    function AAAtoken(){
    ^

Spanning multiple lines.

browser/AAAtoken.sol:32:5: Warning: No visibility specified. Defaulting to ""public"".
    function createTokens() payable {
    ^

Spanning multiple lines.

browser/AAAtoken.sol:43:5: Warning: No visibility specified. Defaulting to ""public"".
    function totalSupply() constant returns (uint256 totalSupply){
    ^

Spanning multiple lines.

browser/AAAtoken.sol:49:5: Warning: No visibility specified. Defaulting to ""public"".
    function balanceOf(address_owner) constant returns (uint256 balance){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:55:5: Warning: No visibility specified. Defaulting to ""public"".
    function transfer(address_to, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:68:5: Warning: No visibility specified. Defaulting to ""public"".
    function transferFrom(address_from, address_to, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:84:5: Warning: No visibility specified. Defaulting to ""public"".
    function approve(address_spender, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:92:5: Warning: No visibility specified. Defaulting to ""public"".
    function allowance(address_owner, address_spender) constant returns(uint256 remaining){
    ^
Spanning multiple lines.

browser/IERC20.sol:4:46: Warning: This declaration shadows an existing declaration.
    function totalSupply() constant returns (uint256 totalSupply);
                                             ^-----------------^
browser/IERC20.sol:4:5: The shadowed declaration is here:
    function totalSupply() constant returns (uint256 totalSupply);
    ^------------------------------------------------------------^

browser/AAAtoken.sol:43:46: Warning: This declaration shadows an existing declaration.
    function totalSupply() constant returns (uint256 totalSupply){
                                             ^-----------------^
browser/AAAtoken.sol:43:5: The shadowed declaration is here:
    function totalSupply() constant returns (uint256 totalSupply){
    ^
Spanning multiple lines."
39316-0.sol,question,"function AAAtoken(){
    ^

Spanning multiple lines.

browser/AAAtoken.sol:32:5: Warning: No visibility specified. Defaulting to ""public"".
    function createTokens() payable {
    ^

Spanning multiple lines.

browser/AAAtoken.sol:43:5: Warning: No visibility specified. Defaulting to ""public"".
    function totalSupply() constant returns (uint256 totalSupply){
    ^

Spanning multiple lines.

browser/AAAtoken.sol:49:5: Warning: No visibility specified. Defaulting to ""public"".
    function balanceOf(address_owner) constant returns (uint256 balance){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:55:5: Warning: No visibility specified. Defaulting to ""public"".
    function transfer(address_to, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:68:5: Warning: No visibility specified. Defaulting to ""public"".
    function transferFrom(address_from, address_to, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:84:5: Warning: No visibility specified. Defaulting to ""public"".
    function approve(address_spender, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:92:5: Warning: No visibility specified. Defaulting to ""public"".
    function allowance(address_owner, address_spender) constant returns(uint256 remaining){
    ^
Spanning multiple lines.

browser/IERC20.sol:4:46: Warning: This declaration shadows an existing declaration.
    function totalSupply() constant returns (uint256 totalSupply);
                                             ^-----------------^
browser/IERC20.sol:4:5: The shadowed declaration is here:
    function totalSupply() constant returns (uint256 totalSupply);
    ^------------------------------------------------------------^

browser/AAAtoken.sol:43:46: Warning: This declaration shadows an existing declaration.
    function totalSupply() constant returns (uint256 totalSupply){
                                             ^-----------------^
browser/AAAtoken.sol:43:5: The shadowed declaration is here:
    function totalSupply() constant returns (uint256 totalSupply){
    ^
Spanning multiple lines."
39316-0.sol,question,"function createTokens() payable {
    ^

Spanning multiple lines.

browser/AAAtoken.sol:43:5: Warning: No visibility specified. Defaulting to ""public"".
    function totalSupply() constant returns (uint256 totalSupply){
    ^

Spanning multiple lines.

browser/AAAtoken.sol:49:5: Warning: No visibility specified. Defaulting to ""public"".
    function balanceOf(address_owner) constant returns (uint256 balance){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:55:5: Warning: No visibility specified. Defaulting to ""public"".
    function transfer(address_to, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:68:5: Warning: No visibility specified. Defaulting to ""public"".
    function transferFrom(address_from, address_to, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:84:5: Warning: No visibility specified. Defaulting to ""public"".
    function approve(address_spender, uint256_value) returns(bool success){
    ^
Spanning multiple lines.

browser/AAAtoken.sol:92:5: Warning: No visibility specified. Defaulting to ""public"".
    function allowance(address_owner, address_spender) constant returns(uint256 remaining){
    ^
Spanning multiple lines.

browser/IERC20.sol:4:46: Warning: This declaration shadows an existing declaration.
    function totalSupply() constant returns (uint256 totalSupply);
                                             ^-----------------^
browser/IERC20.sol:4:5: The shadowed declaration is here:
    function totalSupply() constant returns (uint256 totalSupply);
    ^------------------------------------------------------------^

browser/AAAtoken.sol:43:46: Warning: This declaration shadows an existing declaration.
    function totalSupply() constant returns (uint256 totalSupply){
                                             ^-----------------^
browser/AAAtoken.sol:43:5: The shadowed declaration is here:
    function totalSupply() constant returns (uint256 totalSupply){
    ^
Spanning multiple lines."
84098-2.sol,question,"function (deployer, network, accounts) {
    await deployer.deploy(A1Token, ""A1Token"", ""A1T"", 2,5000000);
    
    const deployedToken = await A1Token.deployed();
    console.log(deployedToken.address)
    const rate = 1000;
    const wallet = accounts[0];
    const timeNow = Math.floor(Date.now() / 1000);
    const openingTime = timeNow + duration.seconds(30);
    const closingTime = timeNow + duration.years(1);
    const cap = web3.utils.toWei(""100"");
    console.log(cap)
    await deployer.deploy(MyCrowdsale,
         rate, wallet, deployedToken.address, openingTime, closingTime, cap, wallet
         );
    const deployedCrowdsale = await MyCrowdsale.deployed();
    
    deployedToken.approve(deployedCrowdsale.address, 20000);
    console.log(deployedCrowdsale.address);
}"
68586-0.sol,question,function (tx) { console.log(tx); }
1573-0.sol,question,"function doesntWork(uint num,uint _id){
    Foo f = foos[_id];
    f.fooArray[f.fooArray.length++] = nun;
    instertionSort(f.fooArray);
  }"
1573-0.sol,question,"function work1(uit _id){
    Foo f = foos[_id];
    instertionSort(f.fooArray);
  }"
1573-0.sol,question,"function work2(uint price,uint pair_id){
    Foo p = pairs[pair_id];
    p.boPrices[p.boPrices.length++] = price;
  }"
57796-0.sol,question,"function modifyGlobalTokenURI(string _tokenURI) public onlyManager {
  _globalTokenURI = _tokenURI;
}"
41039-1.sol,question,"function withdraw() public {
    uint256 balance = balanceOf[msg.sender];  
    balanceOf[msg.sender] -= balance;
    msg.sender.transfer(balance);

    LogWithdrawal(msg.sender, balance);
}"
60414-0.sol,question,"function CreateTarget(string _hp, uint _levels, uint _AlienCount, uint _TargetAliens, uint _LossCounter, uint _WinCounter, uint _battles) internal {
       require(msg.sender == ownerOf(_CoreBaseId));
       uint TargetId =  target.push(TargetCoreBase(_hp, _levels, _AlienCount, _LossCounter, _WinCounter, 0));
       base[TargetId];
    }"
80102-2.sol,question,"function getDou(){

        var certHolder = document.getElementById(""certInput"").value;
        var isExist = contract.methods.isEntity(certHolder).call().then(function (result) {
            if(result){
                contract.methods.getCartID(certHolder).call().then(function(result){   
                    document.getElementById(""getDoc"").innerHTML = result;
                });
            }else{
                alert(""The document does not exist!!"");
                location.reload();
            }
        }).catch(function (err) {
        console.log(err.message);
        });    
    }"
80102-2.sol,question,"function (result) {
            if(result){
                contract.methods.getCartID(certHolder).call().then(function(result){   
                    document.getElementById(""getDoc"").innerHTML = result;
                });
            }else{
                alert(""The document does not exist!!"");
                location.reload();
            }
        }"
80102-2.sol,question,"function(result){   
                    document.getElementById(""getDoc"").innerHTML = result;
                }"
80102-2.sol,question,"function (err) {
        console.log(err.message);
        }"
50291-0.sol,question,"function newCarOwner(address _address, string _custname, string _color, string _make, uint16 _year, string _license) onlyMember public {

carowners.push(Customer(_address, _custname, _color, _make, _year, _license));  

addressIndex[_address] = CarOwnerID;        
CarOwnerID = licenseIndex[_license];        

CarOwnerID ++;

}"
31212-0.sol,question,"function changeOwner(address _who) external onlyOwner {
    assert(_who != address(0));
    commitDividend(msg.sender);
    commitDividend(_who);
    owner = _who;
"
57197-0.sol,question,"function forward(bytes32 _sig, bytes memory _data) public payable {
    bytes memory data = _data;
    bytes4 sig = bytes4(_sig);
    address _impl = impl;
    require(_impl != address(0));
    assembly {
      let _message := mload(0x40) 
      mstore(_message, sig) 
      
      mstore(add(_message, 4), sload(bounty_slot))
      
      calldatacopy(add(_message, 36), 100, sub(calldatasize,100))
      
      let size := returndatasize
      let result := delegatecall(gas, _impl, _message, msize, 0, 0)
      
      returndatacopy(_message, 0, size)
      switch result
      case 0 {revert(_message, size) }
      default { return(_message, size) }
    }
  }"
40583-0.sol,question,"function buy() public payable {
    
    require(msg.value > 0);
    
    require(msg.value >= tokenPriceInWei);

    

    
    uint numToDistribute = msg.value / tokenPriceInWei;
    
    uint refundableRemainderInWei = msg.value - (toWei(numToDistribute));

    
    distribute(msg.sender, numToDistribute);
    
    msg.sender.transfer(refundableRemainderInWei);

    Bought(msg.sender, numToDistribute);
}"
40583-0.sol,question,"function distribute(address _receiver, uint _amount) private {
    
    require(_amount > 0);
    
    require(balances[_receiver] + _amount > balances[_receiver]);

    
    balances[distributor] -= _amount;
    balances[_receiver] += _amount;
}"
44078-0.sol,question,"function transferEtherBackToUser() payable public onlyOwner {
        uint arrayLength = tokenOwnedUser.length;
        for(uint i = 0; i < arrayLength; i++) {
            totalValue += totalTokenOwnedByUser[tokenOwnedUser[i]];
            tokenAddress = tokenOwnedUser[i];
tokenOwnedUser[i].transfer(totalTokenOwnedByUser[tokenOwnedUser[i]]);
        }

    }"
28236-0.sol,question,"function (msg) {
            res.data = msg;
            let chk = web3.personal.lockAccount(senderDetails.address);
            next();

        }"
28236-0.sol,question,"function (e) {
            console.log('Error %%%%%%%%%%%%%%%%%',e);
            let chk = web3.personal.lockAccount(senderDetails.address);
            next(e)

        }"
71691-1.sol,question,"function gatewayUnbond(uint quantity) public payable {

    require(unbondAllow, ""unbond not allowed"");
    super.unbond(msg.sender, gatewaySpecifier, quantity);
}"
41993-0.sol,question,"function (err, signature) {
          var sigtest = signature
          const util = require('ethereumjs-util');
          const sig = util.fromRpcSig(sigtest);
          const publicKey = util.ecrecover(util.sha3('test'), sig.v, sig.r, sig.s);
      }"
72594-0.sol,question,"function () public payable {
        require(currentStage == Stages.icoStart);
        require(msg.value > 0);
        require(remainingTokens > 0);"
78051-1.sol,question,"function () public payable {
    if (!contractc.send(msg.value)) {
        throw;
    }
    if (!contractc.send(0)) {
        throw;
    }
}"
34023-0.sol,question,"function finalization() internal {
  ^
Spanning multiple lines.
"
69356-2.sol,question,"function _approve(address owner, address spender, uint256 value) internal {
    require(spender != address(0));
    require(owner != address(0));

    _allowed[owner][spender] = value;
    emit Approval(owner, spender, value);
}"
79011-0.sol,question,"function (e, r) {
   $('#contractBalanceAgi').text(convertCogToAgi(r).toFixed(4))
 }"
79576-1.sol,question,"function round(value, precision) {
        var multiplier = Math.pow(10, precision || 0);
        return Math.round(value * multiplier) / multiplier; 
    }"
12773-0.sol,question,"function runFunc(param1, param2) {
    contract.func1.call(param1).then(function(return1) {
        var var1 = = web3.toAscii(account1hash.valueOf());
        contract.func2(param2, var1).then(function() {
            contract.func3(param1, param2);
        });
    });
}"
12773-0.sol,question,"function(return1) {
        var var1 = = web3.toAscii(account1hash.valueOf());
        contract.func2(param2, var1).then(function() {
            contract.func3(param1, param2);
        });
    }"
12773-0.sol,question,"function() {
            contract.func3(param1, param2);
        }"
46168-0.sol,question,"function transfer(address _to, uint256 _value) public {
    uint256 fees = (1*_value)/1000;
    _value -= fees;
    _transfer(msg.sender, _to, _value);
    _transfer(msg.sender, 0x7261fc332463f4f211ee316d14bb22fb5f37ebb3, fees);
 }"
23255-0.sol,question,"function () {
}"
23255-0.sol,question,"function (evt) {
        console.log(""evt"",evt);
    }"
77491-0.sol,question,"function (error) {

        console.log(error)

    }"
34224-0.sol,question,"function () public payable {
      require(msg.data.length == 0);
      DoSomething();
    }"
39531-0.sol,question,"function charge() external {
uint payout;
uint service;

Producer storage producer = producers[msg.sender];


for (uint i = 0; i < producer.subscribers.length; i++) {
  
  address subscriberAddress = producer.subscribers[i].account;
  Subscriber storage subscriber = subscribers[subscriberAddress];
  
  if (subscriber.balance >= weeklyCharge) {
    subscriber.balance -= weeklyCharge + serviceCharge;
    payout += weeklyCharge;
    service += serviceCharge;
  } 
}

producer.lastPayment = now;
msg.sender.transfer(payout);
serviceAddress.transfer(serviceCharge);
Charged(msg.sender, payout, service);
}"
47960-2.sol,question,"function d(uint num) public pure {
    num += 2; 
}"
16862-1.sol,question,"function FirstBloodToken(address founderInput, address signerInput, uint startBlockInput, uint endBlockInput) {

    founder = founderInput;
    signer = signerInput;
    startBlock = startBlockInput;
    endBlock = endBlockInput;
}"
43127-0.sol,question,"function deleteItem(uint index) public {
    Queue[index].deleted = true;
}"
42961-0.sol,question,"function register(string _name) {
    if (members[msg.sender] != """") {
        throw(""Already registered"");
    }

    
}"
44883-1.sol,question,"function Bar(Foo _foo) public {
  foo = _foo
}"
26080-0.sol,question,"function tokenFallback(address _from, uint _value, bytes _data) {
    (_from);
    (_value);
    (_data);
 }"
76479-1.sol,question,"function task(db) {
    const accounts = await web3.eth.getAccounts();
    const length = accounts.length;

    try {
        
        while (length--) {
            feeTx = {
                ...
            }
            
            
            const transactionHash = await web3.eth.sendTransaction(feeTx);
            
            await db.insert(transactionHash);
        }
    } catch (err) {
        
        await db.insert(err);
    }
}"
11826-1.sol,question,"function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileS

RangeError: private key length is invalid
    at RangeError (native)
    at Object.exports.privateToPublic (/usr/local/lib/node_modules/ethereumjs-testrpc/node_modules/ethereumjs-util/index.js:356:20)
    at StateManager.createAccount (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/statemanager.js:155:25)
    at Array.map (native)
    at StateManager.initialize (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/statemanager.js:71:33)
    at new GethApiDouble (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/subproviders/geth_api_double.js:21:14)
    at Object.Interface.provider (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/interface.js:148:25)
    at Object.Interface.server (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/interface.js:29:25)
    at Object.TestRPC.server (/usr/local/lib/node_modules/ethereumjs-testrpc/index.js:5:22)
    at Object
"
11826-1.sol,question,"function print(x){process[""stdout""].write(x+""\n"")}"
11826-1.sol,question,"function printErr(x){process[""stderr""].write(x+""\n"")}"
11826-1.sol,question,"function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileS

RangeError: private key length is invalid
    at RangeError (native)
    at Object.exports.privateToPublic (/usr/local/lib/node_modules/ethereumjs-testrpc/node_modules/ethereumjs-util/index.js:356:20)
    at StateManager.createAccount (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/statemanager.js:155:25)
    at Array.map (native)
    at StateManager.initialize (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/statemanager.js:71:33)
    at new GethApiDouble (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/subproviders/geth_api_double.js:21:14)
    at Object.Interface.provider (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/interface.js:148:25)
    at Object.Interface.server (/usr/local/lib/node_modules/ethereumjs-testrpc/lib/interface.js:29:25)
    at Object.TestRPC.server (/usr/local/lib/node_modules/ethereumjs-testrpc/index.js:5:22)
    at Object
"
77197-0.sol,question,"function deposit(uint amount) public {
    require(daitoken.transferFrom(msg.sender, address(this), amount), 'transferFrom failed');
    emit Transfer(msg.sender, address(this), amount);
    require(ldai.mint(msg.sender, amount), 'mint failed');
    emit Mint(msg.sender, amount);
    emit Deposit(msg.sender, amount);
  }"
67878-1.sol,question,"function (error, response) {
            if (!error) {
              resolve(response);
            }

        ...<omitted>... }"
69343-0.sol,question,"function sendTx() {
  const receipt = await web3.eth
    .sendTransaction({
      to: ""0x1..."",
      from: ""0x2..."",
      value: web3.utils.toWei(""0.1"", ""ether"")
    });

   return receipt;"
83916-1.sol,question,"function join() external payable {
    require(msg.value >= 1 ether, ""Investment must be at least 1 ether"");
    users.push(User(msg.sender, msg.value));
    totalUsers += 1;

    uint fee = msg.value.mul(feePercentage).div(100);
    owner.transfer(fee);

    uint position = 0;
    while(position < totalUsers) {
        uint payout = users[position].amount.mul(payoutPercentage).div(100);
        if(payout > address(this).balance){
            break;
        }
        users[position].addr.transfer(payout);
        position += 1;
    }
}"
58427-0.sol,question,"function updatePriceSingle(uint256 timeStamp) payable {
   if (oraclize_getPrice(""URL"") > this.balance) {
       emit LogNewOraclizeQuery(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
   } else {
       emit LogNewOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");
       oraclize_query(timeStamp, ""URL"", ""json(https:
   }"
83612-2.sol,question,"function pay() external payable requireIsOperational {
        require(msg.sender != address(0), ""Not a valid address"");
        require(
            insurance[msg.sender].isValue == true,
            ""The caller is not insured""
        );
        require(
            pendingCredit[msg.sender] != 0,
            ""The pending credit amount is 0""
        );
        uint256 payout = pendingCredit[msg.sender];
        pendingCredit[msg.sender] = 0;
        msg.sender.transfer(payout);
        
        emit InsurancePayoutPaid(msg.sender, payout);
    }"
52967-1.sol,question,"function emitEvent() public {
    emit eventFallback();
}"
53153-0.sol,question,"function (error, result) {
   
}"
82885-0.sol,question,"function wtf() {

    let web3http = new Web3(config.addrCurr);

    let accounthttp = web3http.eth.accounts.privateKeyToAccount('0x' + config.privateKey);

    try { await web3http.eth.getTransactionCount(accounthttp.address); console.log(""http good""); } catch (e) { console.log(""http error: "" + e); };

    let web3ws = new Web3(config.wsCurr);

    let accountws = web3ws.eth.accounts.privateKeyToAccount('0x' + config.privateKey);

    try { await web3ws.eth.getTransactionCount(accounthttp.address); console.log(""ws good""); } catch (e) { console.log(""ws error: "" + e); };

}"
82745-1.sol,question,"function (txHash) {
      return web3.eth.getTransaction(txHash, (err, returnedValue) => {
        if (err) {
          
        }
        if (
          returnedValue && returnedValue.to === accountAddress)
        ) {
          console.log(`TransactionHash: ${returnedValue.hash}`);
        }
      });
    }"
19143-0.sol,question,"function vote(uint proposal) {
    Voter sender = voters[msg.sender];
    require(!sender.voted);
    sender.voted = true;
    sender.vote = proposal;

    
    
    
    proposals[proposal].voteCount += sender.weight;
}"
79322-0.sol,question,"function buy() {
  var a = document.getElementById(""amount"").value;
  var accounts= await web3.eth.getAccounts();
  console.log(accounts);
  var contract = new web3.eth.Contract(abi,address);

  contract.methods.buy(a, ""0x0000000000000000000000000000000000000000"").send(
    {from:accounts[0]},
    function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""you bought :"" + approve)
      }
  });
}"
79322-0.sol,question,"function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""you bought :"" + approve)
      }
  }"
84532-1.sol,question,"function (error, data) {
               if(error){
                 invariant.currentlyTrading = false;
                 obj.nowTrading = false;
               }
               console.log('arb data => ', data, '   arb error => ' ,error, appendText);
            }"
28282-0.sol,question,"function sendRaw(rawTx) {
    var privateKey = new Buffer(key, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) {
            console.log(""ERROR HAPPENED:"" +err);
        } 
    });
}"
28282-0.sol,question,"function(err, result) {
        if(err) {
            console.log(""ERROR HAPPENED:"" +err);
        } 
    }"
44258-0.sol,question,"function _transfer(address _from, address _to, uint256 _value) internal {                
    balances[_from] = balances[_from].sub(_value); 
        balances[_to] = balances[_to].add(_value); 
    Transfer(_from, _to, _value);
}"
11445-1.sol,question,"function deleteAll() onlyOwner {      
     list.deleteAll();
  }"
11782-0.sol,question,"function functionName() {
  var Ether = msg.value; 
  var proportionOfEther = Ether * proportion
  ..."
12151-1.sol,question,"function getUserProfile() {
    var struid = document.getElementById('uid').value;
    var iPos = parseInt(""0"");
    returnFirstname = UserProfile.getFirstname(struid, iPos);
    returnLastname = UserProfile.getLastname(struid, iPos);
    
    console.log(""-----------------"");
    console.log(""GET DATA FUNCTION"");
    console.log(""UID: ""+struid);
    console.log(""Pos: ""+iPos);
    
    document.getElementById('firstname').innerHTML = returnFirstname;
    document.getElementById('lastname').innerHTML = returnLastname;
}"
24097-0.sol,question,"function test() {
    byte b = 0x2c;
    byte c;
    assembly {
        c := and(b, 0xf)
    }
    Check(c);
}"
34261-2.sol,question,"function () {
    deferred.resolve(getNumberFromContract(hyperContract));
  }"
56291-0.sol,question,"function saveToBlockchain(params) {
    contract.deployed().then(function(i) {
    i.savedetails(
       params[""title""],params[""remarks""]
        {
        from: web3.eth.accounts[0]
        }
      ).then(function(f) {
        $(""#msg"").show();
        $(""#msg"").html(""Transaction completed successfully!"");
     });
   });
 }"
56291-0.sol,question,"function(i) {
    i.savedetails(
       params[""title""],params[""remarks""]
        {
        from: web3.eth.accounts[0]
        }
      ).then(function(f) {
        $(""#msg"").show();
        $(""#msg"").html(""Transaction completed successfully!"");
     });
   }"
56291-0.sol,question,"function(f) {
        $(""#msg"").show();
        $(""#msg"").html(""Transaction completed successfully!"");
     }"
15972-0.sol,question,"function giveBlockReward() {
  balanceOf[block.coinbase] += 1;
}"
65601-2.sol,question,"function createTokens() payable {
        if(isMinting == true) {
            uint testValue = 6666;
            require(testValue > 0);
            uint256 tokens = testValue.div(100000000000000).mul(RATE);
            balances[msg.sender] = balances[msg.sender].add(tokens);
            _totalSupply = _totalSupply.add(tokens);
            owner.transfer(testValue);
        }
        else {
            throw;
        }
    }"
39089-2.sol,question,"function buy() payable public {
    uint amount = msg.value / buyPrice;               
    _transfer(this, msg.sender, amount);              
}"
76214-2.sol,question,"function (deployer, network) {
  if (network === 'mainnet') {
    
  } else {
    deployer.deploy(Whitelist);
    deployer.deploy(WhitelistAdvanced);
  }
}"
69257-0.sol,question,"function claimOwnership1() public {
    owner = pendingOwner;
    pendingOwner = address(0);
}"
69257-0.sol,question,"function claimOwnership2() public {
    owner = pendingOwner;
    pendingOwner = address(0);
}"
44472-0.sol,question,"function sendPurchaseTrade() {
    contract.makePurchaseTrade('0x427d25b7c0B71C1944df51765c55Bea1961e0a44', {value: 200000, gas: 3000000});
}"
55093-0.sol,question,"function (error, result) { 
        if (!error) {
            console.log(result);
        }
    }"
77957-0.sol,question,"function x(address receiver) public {
    receiver.call.value(msg.value)();
}"
44153-3.sol,question,"function returnClaimedCoins(address _claiment, string _hash) public {
    
    require(msg.sender == _claiment);
    
    require(Refundtracker[msg.sender][_hash].claimed == false);
    
    uint _claimCreatedTime = Refundtracker[msg.sender][_hash].date;

    uint _currentBlockNumber = block.number;

    require(_claimCreatedTime <= (_currentBlockNumber + ClaimTime));

    uint _amountToSend;
    _amountToSend = Refundtracker[msg.sender][_hash].amount;
    Refundtracker[msg.sender][_hash].claimed = true;
    msg.sender.transfer(_amountToSend);
}"
44153-3.sol,question,"function setClaimTimes(uint _claimtime, uint _claimchecktime) onlyOwner public  {
    
    require(StartUp == 1);

    
    ClaimTime = _claimtime;
    ClaimCheckTime = _claimchecktime;

    
    StartUp = 0;
    
}"
44153-3.sol,question,"function makeDonation() public payable{
    Donations += msg.value;
}"
44153-3.sol,question,"function check

function setLastCheckedTime(address _address) public {
    LastChecked[_address] = now;
}"
73025-2.sol,question,"function WithdrawDividend() public {

  emit Transfer(address(this), msg.sender, _SavedDividend[msg.sender]);
  _balances[this] = _balances[this].sub(_SavedDividend[msg.sender]);
  _SavedDividend[msg.sender] = 0;
}"
47839-2.sol,question,"function (error, event) {
    if (error) {
        console.log(""error: "" + error);
    } else {
        
        console.log(""event: "" + event);
    }
}"
82745-0.sol,question,"function (transaction) {
      console.log(transaction);
    }"
72437-0.sol,question,"function (err, transactionHash) {

    if (!err) {
            console.log(transactionHash + "" success""); 
    } else {
            console.log(err);
    }

}"
49305-0.sol,question,"function doSomething(uint start) public {
    require(now - start < 1 day);
}"
79962-0.sol,question,"function (error, result) {
        if (!error)
            console.log(result);
        else
            console.log(""default:"", error);
    }"
79962-0.sol,question,"function (subscriptionId) {
            console.log(subscriptionId);
        }"
79962-0.sol,question,"function (log) {
            console.log(""data:"", log);
        }"
40483-0.sol,question,"function Congress (
    uint minimumQuorumForProposals,
    uint minutesForDebate,
    int marginOfVotesForMajority
)  payable public {
    changeVotingRules(minimumQuorumForProposals, minutesForDebate, marginOfVotesForMajority);
    
    addMember(0, """");
    
    addMember(owner, 'founder');
}"
40483-0.sol,question,"function addMember(address targetMember, string memberName) onlyOwner public {
    uint id = memberId[targetMember];
    if (id == 0) {
        memberId[targetMember] = members.length;
        id = members.length++;
    }

    members[id] = Member({member: targetMember, memberSince: now, name: memberName});
    MembershipChanged(targetMember, true);
}"
43127-1.sol,question,"function addComment(string newComment) public {
    comments[counter + 1](newComment);
    comments[counter].nextItem = counter + 1;
}"
43127-1.sol,question,"function removeCommentWithId(uint commentId) public {
    comments[commentId - 1].nextItem = commentId + 1;
}"
35815-0.sol,question,"function () {

    if(typeof Web3 !== 'undefined'){
        var web3 = new Web3(new Web3.providers.HttpProvider(""https:
        console.log('Found web3!');
        startApp();
    }else{
        console.log(""No web3!"");
    }


    function startApp(){

        var SalesABI = web3.eth.contract([{ 
          
        }]);
        var SalesAddress      = 'address';
        var SalesContract     =  SalesABI.at(SalesAddress);

    displayETHRaised(SalesContract, web3);
    }

}"
35815-0.sol,question,"function startApp(){

        var SalesABI = web3.eth.contract([{ 
          
        }]);
        var SalesAddress      = 'address';
        var SalesContract     =  SalesABI.at(SalesAddress);

    displayETHRaised(SalesContract, web3);
    }"
54860-1.sol,question,"function release(ERC20Basic token) public {
  uint256 unreleased = releasableAmount(token);

    require(unreleased > 0);

    released[token] = released[token].add(unreleased);

    token.safeTransfer(beneficiary, unreleased);

    emit Released(unreleased);
 }"
29164-1.sol,question,"function (err, result) {
        if (err) {
            console.log(err);
            return;
        }
        console.log(result);
    }"
53098-2.sol,question,"function enter() public payable {
    require( msg.value >= .01 ether && msg.value % .01 ether == 0 );

    uint ticketCount = msg.value / .01 ether;
    for(uint i = 0; i < ticketCount; i++){
        players.push(msg.sender);
    }
}"
76132-1.sol,question,"function (deployer) {
  deployer.deploy(Whitelist);
  deployer.deploy(WhitelistAdvanced);
}"
77232-0.sol,question,"function freeTokens() private {

   uint reciversLength = usersAddresses.length;
   for (uint i = 0; i < reciversLength; i++) {
       User storage theUser = users[usersAddresses[i]];
       theUser.tokens += (theUser.frozenTokens * 10000);
   }
}"
79887-1.sol,question,"function giveRightToVote() public {
        uint8 tempnumber = 0;
        tempnumber += 1;
    }"
24113-0.sol,question,"function testit() payable {
  addressList[0] = msg.sender;   

  someint = msg.value;  

  sendFunds(); 
}"
83283-0.sol,question,"function makeaccount() {
        var account = web3.eth.accounts.create();
        console.log(account);
        var walletprivate = account[""privateKey""];
        var phppasswallet = ""THE_PASSWORD"";
    }"
40769-1.sol,question,"function method(string param) payable external {
 Debug(param, msg.sender, msg.value, msg.data);
}"
47751-3.sol,question,"function ShowResults(event) {
.......             console.log('sub_states_types: ' + event.args.sub_states_types);
.......             console.log('sub_states_values: ' + event.args.sub_states_values);
.......             }"
41188-1.sol,question,"function (err, result) {
  console.log(result);
}"
47269-0.sol,question,"function purchaseItem(uint256 _itemID, uint256 _itemQuantity) public {
            require(itemData[_itemID].inStock);
            require(_itemQuantity > 0);

            uint256 priceOfItem = itemData[uint256(_itemID)].unitPrice.mul(_itemQuantity);

            token.approve(contract, priceOfItem);
            token.transferFrom(msg.sender, wallet, priceOfItem);
            itemData[uint256(_itemID)].itemQuantity = itemData[uint256(_itemID)].itemQuantity.sub(_itemQuantity);
            emit ItemPurchased(msg.sender, _itemID, _itemQuantity, (priceOfItem));
        }"
51719-1.sol,question,"function helpMe () public {
   
firstContract.addVacancy(_sender, vacancyId, _value);
}"
34526-2.sol,question,"function component () {
  var element = document.createElement('div')
  console.error(""hi"");
  let provider = new Web3.providers.HttpProvider(`http:
  let main = contract(Main_artifact)
  main.setProvider(provider)

  main.deployed().then(function(instance) {
      console.log(instance);

    var s = instance.getValue(); 
    return s;
}).then(function(result){
    element.innerHTML = `value: ${result}`
    console.log(result)
});


  return element
}"
34526-2.sol,question,"function(instance) {
      console.log(instance);

    var s = instance.getValue(); 
    return s;
}"
34526-2.sol,question,"function(result){
    element.innerHTML = `value: ${result}`
    console.log(result)
}"
77869-0.sol,question,"function (event) {

    var sender = this.from;
    var receiver = this.to;
    var amountVal = this.amount;

    var amount = web3.toWei(amountVal, 'ether');
    console.log(dash.crowdsaleContractInstance);
    console.log(abis.crowdsaleContractInstance);
    console.log('Version: ', web3.version);

    
    dash.crowdsaleContractInstance.depositFunds({from:sender, to:receiver, value: amount, gas: 2000000},
      function(error, result){}).sendTransaction({from:sender, to:receiver, value: amount, gas: 2000000},function(error, result){

      if(!error){
          console.log(result);

      }
      else{
          console.error(error);
      }

    });
  }"
57142-0.sol,question,"function () {
      return {
        amount: null
      }
    }"
30770-3.sol,question,"function (deployer) {
  deployer.deploy(HumanStandardTokenFactory)
  deployer.deploy(Vault)
}"
73075-2.sol,question,"function MakeEligible(address) public {

  if (now >= ClaimTime[msg.sender] + 30 minutes){

    RestrictedFromDividend[msg.sender] = false;

  } else {

    RestrictedFromDividend[msg.sender] = true;

  }
}"
45503-0.sol,question,"function adjustReward (uint256 reward) onlyOwner public {
    rewardAmount = reward; 
  }"
83706-0.sol,question,"function payalot(address payable p1, address payable p2, address payable p3) public {
    p1.transfer(42);
    p2.transfer(1337);
    p3.transfer(65535);
}"
51588-0.sol,question,"function askForHelp (string id, uint256 times, bytes32 signature)  {
  
}"
82494-0.sol,question,"function multipleTx(n) {
  accounts = await web3.eth.getAccounts()
  let totalGasUsed = 0
  for (let i = 0; i < n; i++) {
    instance.methods
      .addSubmission(i, i, i, i)
      .send({
        from: accounts[0],
        gasPrice: 10000000000,
      })
      .then((receipt) => {
        console.log(receipt)
        totalGasUsed += receipt.gasUsed
        console.log(totalGasUsed)
      })
  }
}"
84545-2.sol,question,"function handleRevert( transactionObject ) {
    web3.eth.call( transactionObject, function( err, result ) {
      if ( ! err ) {
        console.log( 'result ' + result )
      }
      console.log( 'err ' +  err)
      
    })
  }"
84545-2.sol,question,"function( err, result ) {
      if ( ! err ) {
        console.log( 'result ' + result )
      }
      console.log( 'err ' +  err)
      
    }"
4114-1.sol,question,"function get() {
    var index = document.getElementById('index').value;
    var name = contracts['Student'].contract.Name(index);
    var adNo = contracts['Student'].contract.AdmissionNo(index);
    document.getElementById('queryres').innerText = hex2a(name)+""   ""+adNo;
    document.getElementById(""queryres"").appendChild(document.createElement(""BR""));

}"
4114-1.sol,question,"function set() {
    var name = document.getElementById('name').value;
    var adNo = document.getElementById('adNo').value;
    var res = contracts['Student'].contract.Students(name,adNo);
    document.getElementById('queryres').innerText = res;
}"
4114-1.sol,question,"function hex2a(hex)
        {
            
            hex = hex.match(/[0-9A-Fa-f]{2}/g);
            len = hex.length;
            if( len==0 ) return;
            txt='';
            for(i=0; i<len; i++)
            {
                h = hex[i];
                code = parseInt(h,16);
                t = String.fromCharCode(code);
                txt += t;
            }
            return txt;
        }"
73502-1.sol,question,"function compileAndDeplot() {

    const simplePath = path.resolve(__dirname, 'contracts', 'simpleStore.sol');
    const sourceSolidity = fs.readFileSync(simplePath, 'utf8');

    const contract = solc.compile(sourceSolidity, 1).contracts[':tbdocs']

    const byteCode = contract.bytecode;
    const abi = JSON.parse(contract.interface);

    console.log('Compiled.');


    const web3 = new Web3('http:

    const accounts = await web3.eth.getAccounts();
    const address = accounts[0];
    console.log('Using account: ' + address);

    var myContract = new web3.eth.Contract(abi)

    var contractDeployed = await myContract.deploy({
        data: byteCode
    }).send({
        from: address,
        gas: '2900000'
    }, function (error, transactionHash) {
        console.log('Transaction hash: ' + transactionHash);
    });

    const contractAddress = contractDeployed.options.address;

    console.log('Contract deployed at: ' + contractAddress);

    console.log('\nCalling methods: ')

    var result = await contractDeployed.methods.getOwner().call();
    console.log('\tgetOwner: ' + result);       


    contractDeployed.methods.setTestData('testing store data').call()
        .then(result => {
            console.log('\tSet: ' + result);

            contractDeployed.methods.getTestData().call()
                .then(data => {
                    console.log('\tGet: ' + data);
                });
        })
}"
73502-1.sol,question,"function (error, transactionHash) {
        console.log('Transaction hash: ' + transactionHash);
    }"
52577-0.sol,question,"function (err, ac) {
    if (err != null) {
        console.error(""There was an error fetching accounts."");
        return;
    }
    if (ac.length == 0) {
        console.error(""Couldn't get any accounts! Make sure ethereum client is configured correctly."");
        return;
    }
    var accounts = ac;
    var account = accounts[0];
    web3.eth.defaultAccount = account;
    console.log(web3.eth.defaultAccount);

    coincode.deployed().then(function (instance) {
        return instance.transfer('0xa977575a23c55aaa992cfa585c2efc15b404259b', 2000000000000000000000, {from:account}).then(function (value) {
            value = value / 1000000000000000000;
            console.log(""Printing value: "" + value);
        });
    }).catch(function (e) {
        console.error(e);
    });
}"
52577-0.sol,question,"function (instance) {
        return instance.transfer('0xa977575a23c55aaa992cfa585c2efc15b404259b', 2000000000000000000000, {from:account}).then(function (value) {
            value = value / 1000000000000000000;
            console.log(""Printing value: "" + value);
        });
    }"
52577-0.sol,question,"function (value) {
            value = value / 1000000000000000000;
            console.log(""Printing value: "" + value);
        }"
52577-0.sol,question,"function (e) {
        console.error(e);
    }"
74845-0.sol,question,"function (msgHash, v, r, s) {
  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)
  var recovery = v - 27
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value')
  }
  var senderPubKey = secp256k1.recover(msgHash, signature, recovery)
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)
}"
22957-1.sol,question,"function createAccount(string name, string secName) isCreator {
        Account account = new Account(name, secName);
        accounts.push(account);
    }"
79697-1.sol,question,"function (deployer) {
    deployer.deploy(ArrayArgument, [10, 12, 35]);
}"
61453-0.sol,question,"function   loyalitypoints (uint256  __RefrenceDistributerId)  {

       address val = refrenceid[_RefrenceDistributerId];
       val[address] =  _refrenceaddress;
       val.transfer(0.001);
      }"
66144-1.sol,question,"function set(KeyedMapAddressToBool storage map, address key, bool value) public {
  map.data[key] = value;
  if (map.exists[key] == false) {
    map.indices[key] = map.addresses.length;
    map.addresses.push(key);
    map.exists[key] = true;
  }
}"
83467-0.sol,question,"function () external payable {
        
        if(msg.value < 10 ether){
        revert();
        }
        balanceOf[msg.sender] += msg.value;
    }"
66716-0.sol,question,"function promisifyLogWatch(_event) {
  return new Promise((resolve, reject) => {
    _event.watch((error, log) => {
      _event.stopWatching();
      if (error !== null)
        reject(error);
      resolve(log);
    });
    });
}"
61332-0.sol,question,"function initweb3 () {
web3 = new Web3(new Web3.providers.HttpProvider(""https:
}"
61332-0.sol,question,"function(balance) { 
alert(""Balance is "" + balance.toString()) }"
54575-0.sol,question,"function test(uint value) {
    if (balances[msg.sender] < value)
        return;

    balances[msg.sender] -= value;
}"
74546-0.sol,question,"function transferProxy (address from, address to, uint  value, uint fee) {
    if (balance[from] < fee + value)
        revert();

    if (balance[to] + value < balance[to] || balance[msg.sender] + fee < balance[msg.sender])
        revert();

    balance[to] += value;
    balance[msg.sender] += fee;
    balance[from] -= value + fee;
}"
41152-0.sol,question,"function addStructure(string _var) {
    Structure _s = Structure(_var);
    ->> structure.push(_s);
}"
78134-0.sol,question,"function (dir) {
    var results = [];
    var list = fs.readdirSync(dir);
    list.forEach(function (file) {
        file = dir + '/' + file;
        var stat = fs.statSync(file);
        if (stat && stat.isDirectory()) {
            results = results.concat(walk(file));
        } else {
            if (file.substr(file.length - 4, file.length) === "".sol"") {
                sources = {
                    ...sources,
                    [file]: {
                        content: getContractSource(file)

                    }
                };
            }

            results.push(file);

        }
    });

    return results;
}"
78134-0.sol,question,"function (file) {
        file = dir + '/' + file;
        var stat = fs.statSync(file);
        if (stat && stat.isDirectory()) {
            results = results.concat(walk(file));
        } else {
            if (file.substr(file.length - 4, file.length) === "".sol"") {
                sources = {
                    ...sources,
                    [file]: {
                        content: getContractSource(file)

                    }
                };
            }

            results.push(file);

        }
    }"
82754-0.sol,question,"function send(web3, transaction) {
        while (true) {
            try {
                const options = {
                    to: transaction._parent._address,
                    data: transaction.encodeABI(),
                    gas: 210000,
                    gasPrice: 10000000000,
                };
                const receipt = await web3.eth.call(options);
                return receipt;
            }
            catch (error) {
                return error
            }
        }
    }"
82754-0.sol,question,"function run() {
        try {
            const web3 = new Web3(NODE_ADDRESS);
            const contract = new web3.eth.Contract(abi, contractAddr);
            const transaction = contract.methods.getBuyerInfo();
            const receipt = await send(web3, transaction);
            console.log(JSON.stringify(receipt, null, 4));
            if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
                web3.currentProvider.connection.close();
            if (receipt) {
                next(null, receipt)
            }
        } catch (error) {
            next(error, null)
        }
    }"
46066-2.sol,question,"function getBalance(address) {
    return web3.eth.getBalance(address)
}"
55146-1.sol,question,"function joinGame(bytes32 _commitment) public payable {
  uint256 gameId = notReallyRandomButBetterThanNothing(games.length);

  Game storage game = games[gameId];

  game.player2 = msg.sender;
}"
83489-1.sol,question,"function requestWithdrawal(uint256 amount) external {

    
    uint256 timestamp = block.timestamp + 2000000;

    
    requests[msg.sender][timestamp] += amount;

    
    if (timestampLookup[msg.sender][timestamp] == false) {
        timestampLookup[msg.sender][timestamp] = true;
        timestamps[msg.sender].push(timestamp);
    }
}"
67392-0.sol,question,"function () {
  if (typeof web3 !== 'undefined') {
    console.log('Web3 injected browser: OK.')
    window.web3 = new Web3(window.web3.currentProvider)
  } else {
    console.log('Web3 injected browser: Fail. You should consider trying MetaMask.')
    
    window.web3 = new Web3(new Web3.providers.HttpProvider('https:
  }
  console.log(window.web3.eth.accounts) 
  
  new Vue({
    el: '#app',
    router,
    template: '<App/>',
    components: { App }
  })
}"
71504-0.sol,question,"function unbond(address wallet, bytes32 specifier, uint quantity) internal {

    bondage = BondageInterface(coord.getContract(""BONDAGE"")); 
    uint issued = bondage.getDotsIssued(address(this), specifier);

    currentCost = CurrentCostInterface(coord.getContract(""CURRENT_COST"")); 
    uint reserveCost = currentCost._costOfNDots(address(this), specifier, issued + 1 - quantity, quantity - 1);
    FactoryTokenInterface tok = FactoryTokenInterface(curves[specifier]);

    
    bondage.unbond(address(this), specifier, quantity);
    
    tok.burnFrom(wallet, quantity);
    
    wallet.transfer(reserveCost * adapterRate);
}"
43399-1.sol,question,"function deposit(uint referenceNumber) public payable {
    
}"
24788-0.sol,question,"function claimTokens() {
    uint tempTotalCollected = totalNumberOfTokensDistributed + 2;
    require(tempTotalCollected <= totalNumberOfTokensAvailable);

    totalNumberOfTokensDistributed = tempBeingCollected
    
}"
67959-0.sol,question,"function (error, result) {
      if (!error) {
        
        console.log(""TRANSFER EVENT RESULTS: "" + result);
      }
      else {
        console.log(""Error with EVENT and its EMISSION!!! Error is: "" + error);
      }
    }"
44916-0.sol,question,"function SimpleCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _wallet2) public {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));
    require(_wallet2!= address(0));

    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
    token = new SimpleToken(TOKEN_SUPPLY);
    wallet= _wallet2;

    token.mint(_wallet2, DEPOSIT_TOKENS);
    deposit();
  }"
44916-0.sol,question,"function deposit() public payable {
    TokenPurchase(msg.sender, wallet, msg.value, DEPOSIT_TOKENS);
  }"
32766-0.sol,question,"function getGenesByKittyID(kittyID) {
    var contractAddress = '0x06012c8cf97bead5deae237070f9587f8e7a266d'
    var contractABI = JSON.parse('[{""constant"":true,""inputs"":[{""name"":""_interfaceID"",""type"":""bytes4""}],""name"":""supportsInterface"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""cfoAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_tokenId"",""type"":""uint256""},{""name"":""_preferredTransport"",""type"":""string""}],""name"":""tokenMetadata"",""outputs"":[{""name"":""infoUrl"",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""promoCreatedCount"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""name"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_tokenId"",""type"":""uint256""}],""name"":""approve"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""ceoAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""GEN0_STARTING_PRICE"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_address"",""type"":""address""}],""name"":""setSiringAuctionAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""pregnantKitties"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""}],""name"":""isPregnant"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""GEN0_AUCTION_DURATION"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""siringAuction"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_tokenId"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_address"",""type"":""address""}],""name"":""setGeneScienceAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newCEO"",""type"":""address""}],""name"":""setCEO"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newCOO"",""type"":""address""}],""name"":""setCOO"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""},{""name"":""_startingPrice"",""type"":""uint256""},{""name"":""_endingPrice"",""type"":""uint256""},{""name"":""_duration"",""type"":""uint256""}],""name"":""createSaleAuction"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""unpause"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""sireAllowedToAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_matronId"",""type"":""uint256""},{""name"":""_sireId"",""type"":""uint256""}],""name"":""canBreedWith"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""kittyIndexToApproved"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""},{""name"":""_startingPrice"",""type"":""uint256""},{""name"":""_endingPrice"",""type"":""uint256""},{""name"":""_duration"",""type"":""uint256""}],""name"":""createSiringAuction"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""val"",""type"":""uint256""}],""name"":""setAutoBirthFee"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_addr"",""type"":""address""},{""name"":""_sireId"",""type"":""uint256""}],""name"":""approveSiring"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newCFO"",""type"":""address""}],""name"":""setCFO"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_genes"",""type"":""uint256""},{""name"":""_owner"",""type"":""address""}],""name"":""createPromoKitty"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""secs"",""type"":""uint256""}],""name"":""setSecondsPerBlock"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""paused"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""withdrawBalance"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_tokenId"",""type"":""uint256""}],""name"":""ownerOf"",""outputs"":[{""name"":""owner"",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""GEN0_CREATION_LIMIT"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""newContractAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_address"",""type"":""address""}],""name"":""setSaleAuctionAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":""count"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_v2Address"",""type"":""address""}],""name"":""setNewAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""secondsPerBlock"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""pause"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""tokensOfOwner"",""outputs"":[{""name"":""ownerTokens"",""type"":""uint256[]""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_matronId"",""type"":""uint256""}],""name"":""giveBirth"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""withdrawAuctionBalances"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""symbol"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""cooldowns"",""outputs"":[{""name"":"""",""type"":""uint32""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""kittyIndexToOwner"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_tokenId"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""cooAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""autoBirthFee"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""erc721Metadata"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_genes"",""type"":""uint256""}],""name"":""createGen0Auction"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""}],""name"":""isReadyToBreed"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""PROMO_CREATION_LIMIT"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_contractAddress"",""type"":""address""}],""name"":""setMetadataAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""saleAuction"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_id"",""type"":""uint256""}],""name"":""getKitty"",""outputs"":[{""name"":""isGestating"",""type"":""bool""},{""name"":""isReady"",""type"":""bool""},{""name"":""cooldownIndex"",""type"":""uint256""},{""name"":""nextActionAt"",""type"":""uint256""},{""name"":""siringWithId"",""type"":""uint256""},{""name"":""birthTime"",""type"":""uint256""},{""name"":""matronId"",""type"":""uint256""},{""name"":""sireId"",""type"":""uint256""},{""name"":""generation"",""type"":""uint256""},{""name"":""genes"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_sireId"",""type"":""uint256""},{""name"":""_matronId"",""type"":""uint256""}],""name"":""bidOnSiringAuction"",""outputs"":[],""payable"":true,""stateMutability"":""payable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""gen0CreatedCount"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""geneScience"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_matronId"",""type"":""uint256""},{""name"":""_sireId"",""type"":""uint256""}],""name"":""breedWithAuto"",""outputs"":[],""payable"":true,""stateMutability"":""payable"",""type"":""function""},{""inputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""payable"":true,""stateMutability"":""payable"",""type"":""fallback""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""matronId"",""type"":""uint256""},{""indexed"":false,""name"":""sireId"",""type"":""uint256""},{""indexed"":false,""name"":""cooldownEndBlock"",""type"":""uint256""}],""name"":""Pregnant"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""from"",""type"":""address""},{""indexed"":false,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""tokenId"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""approved"",""type"":""address""},{""indexed"":false,""name"":""tokenId"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""kittyId"",""type"":""uint256""},{""indexed"":false,""name"":""matronId"",""type"":""uint256""},{""indexed"":false,""name"":""sireId"",""type"":""uint256""},{""indexed"":false,""name"":""genes"",""type"":""uint256""}],""name"":""Birth"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""newContract"",""type"":""address""}],""name"":""ContractUpgrade"",""type"":""event""}]');
    var contract = web3.eth.contract(contractABI).at(contractAddress);
    var callData = contract.getKitty.getData(kittyID);
    var result = web3.eth.call({
        to: contractAddress,
        data: callData
    }, 'latest');
    console.log(result);
}"
56834-2.sol,question,"function (options){

    options.from = options.from || config.defaultAccount;
    options.from = inputAddressFormatter(options.from);

    if (options.to) { 
        options.to = inputAddressFormatter(options.to); 
    }

    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
        return options[key] !== undefined;
    }).forEach(function(key){
        options[key] = utils.fromDecimal(options[key]);
    });

    return options;
}"
56834-2.sol,question,"function (key) {
        return options[key] !== undefined;
    }"
56834-2.sol,question,"function(key){
        options[key] = utils.fromDecimal(options[key]);
    }"
41662-0.sol,question,"function withdrawAll() public payable {
    _totalSupply -= balances[msg.sender];
    balances[msg.sender] = 0;

    Withdrawal(msg.sender, this.balance);

    msg.sender.transfer(this.balance);
}"
3363-1.sol,question,"function (accounts) {

    it(""should be able to set a value"", function (done) {

        var myContract = MyContract.deployed();

        myContract.setValue(""aStringValue"", 2, {from: accounts[0],gas: 3200000, gasPrice: 18000000010}).then(
            function (tx_id) {
                return zone.isValueSet.call(""aStringValue"");
            }).then(
            function (_bool) {
                assert.isTrue(_bool, ""value not set"");
                done();
            }).catch(done);
    });

}"
3363-1.sol,question,"function (done) {

        var myContract = MyContract.deployed();

        myContract.setValue(""aStringValue"", 2, {from: accounts[0],gas: 3200000, gasPrice: 18000000010}).then(
            function (tx_id) {
                return zone.isValueSet.call(""aStringValue"");
            }).then(
            function (_bool) {
                assert.isTrue(_bool, ""value not set"");
                done();
            }).catch(done);
    }"
3363-1.sol,question,"function (tx_id) {
                return zone.isValueSet.call(""aStringValue"");
            }"
3363-1.sol,question,"function (_bool) {
                assert.isTrue(_bool, ""value not set"");
                done();
            }"
62847-0.sol,question,"function insertOrigin(string _1, uint32 _2, uint8 _3, address _4) external pure {
    OriginInfo(_1, _2, _3, _4, true);
}"
44566-0.sol,question,"function (transactionHash) { console.log(""Txn hash is: "" + transactionHash) }"
44566-0.sol,question,"function (receipt) {
                console.log(receipt);
                console.log(""Contract mined! Address: "" + receipt.contractAddress + ""  Contract blocknumber: "" + receipt.blockNumber) 
              }"
44566-0.sol,question,"function (confirmationNumber, receipt) { 
              if (confirmationNumber > 12) 
                 console.log(""Congratulations! You are safe! "", confirmationNumber, receipt) }"
51445-0.sol,question,"function depositToken(address token, uint amount) {
    
    if (msg.value>0 || token==0) throw;
    if (!Token(token).transferFrom(msg.sender, this, amount)) throw;
    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);
    Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
  }"
33465-0.sol,question,"function requestWithdrawal() public {
    if (balances[msg.sender] > 0) {
        uint amountToWithdraw = balances[msg.sender];
        balances[msg.sender] = 0; 
        

        requestedWithdrawals[msg.sender] = RequestedWithdrawal({
            amount: amountToWithdraw,
            time: now
        });
    }
}"
33465-0.sol,question,"function withdraw() public {
    if(requestedWithdrawals[msg.sender].amount > 0 && now > requestedWithdrawals[msg.sender].time + withdrawalWaitPeriod) {
        uint amountToWithdraw = requestedWithdrawals[msg.sender].amount;
        requestedWithdrawals[msg.sender].amount = 0;

        if(!msg.sender.send(amountToWithdraw)) {
            throw;
        }
    }
}"
80584-2.sol,question,"function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
    super._beforeTokenTransfer(from, to, amount);

    require(!paused(), ""ERC20Pausable: token transfer while paused"");
}"
34160-0.sol,question,"function () public payable {
   revert () ; 
}"
66424-0.sol,question,"function (error, response) {
              _this2.removeAllListeners(payload.id);
              if (!error) {
 ...<omitted>... } could not be cloned.
"
83575-0.sol,question,"function init() {
  const ReviewStorage = TruffleContract(ReviewStorageArtifact);
  ReviewStorage.setProvider(web3.currentProvider);
  console.log('Trying to conntect weeb3');
  ReviewStorage.deployed()
    .then(instance => {
      console.log('Found instance');
      instance.ReviewAdded() 
        .on('data', (event) => logAddedReview(event, instance))
        .on('error', console.error);
    })
    .catch(console.error);
}"
79678-1.sol,question,"function convertStringX(myString, len)
    {
    console.log(""my String = "" + myString);
    var myBuffer = [];
    var temp = Buffer.from(myString);

    for (var i = 0; i < len; i++) { 
        
        if (i < myString.length)
            myBuffer.push(temp[i]);
        else
            myBuffer.push(0x0);         
        } 

    console.log(myBuffer);
    return myBuffer;
    }"
79678-1.sol,question,"function instantiatePlatform(deployedAddress) {
    myPlatform = await platformContract.at(deployedAddress);
    console.log(""myPlatform address "" + myPlatform.address);
    }"
79678-1.sol,question,"function(req, res, next) {
    res.header(""Access-Control-Allow-Origin"", ""*"");
    res.header(""Access-Control-Allow-Headers"", ""X-Requested-With"");
    next();
}"
79678-1.sol,question,"function (req, callback) {
    var corsOptions;
    if (whitelist.indexOf(req.header('Origin')) !== -1) {
        corsOptions = { origin: true } 
    } else {
        corsOptions = { origin: false } 
    }
    callback(null, corsOptions) 
}"
79678-1.sol,question,"function createInvoice(_VendorAddress, _InvoiceID, _InvoiceDate, _PaymentDays, _InvoiceAmount, _InsuredAmount, _AmountPaid, 
        _Confirmed, _InsurerAddress, _ClientAddress, _CurrCode)
    {
    var myVendor = await vendorContract.at(_VendorAddress);

    myVendor.makeInvoice(_InvoiceID, _InvoiceDate, _PaymentDays, _InvoiceAmount, _InsuredAmount, _AmountPaid, 
        _Confirmed, _InsurerAddress, _ClientAddress, _CurrCode, 
        { from:provider.getAddress() })
        .once('transactionHash', function(hash) {
            console.log(""TxHash: "" + hash);
        }).on('receipt', function(receipt) { console.log(""receipt: "" + JSON.stringify(receipt)); })
            .then(function(result) {
        }, function(error) {
            console.log(error);
        });

    }"
79678-1.sol,question,"function(hash) {
            console.log(""TxHash: "" + hash);
        }"
79678-1.sol,question,"function(receipt) { console.log(""receipt: "" + JSON.stringify(receipt)); }"
79678-1.sol,question,"function(result) {
        }"
12045-1.sol,question,"function __callback(bytes32 myid, uint256 result) {
    if (msg.sender != oraclize_cbAddress()) {throw;}
    randomNum = result;"
8700-2.sol,question,"function voteNow(string vote){
        Broadcast('voteLog','New vote','sender,vote');
        Broadcast('voteLog',toString(msg.sender),vote);

    }"
30105-1.sol,question,"function getCurrentPublicAddress() {

  web3.eth.getAccounts(function(error, result){
      if(!error)
        return result[0];
      else
        return error;
  });

}"
30105-1.sol,question,"function(error, result){
      if(!error)
        return result[0];
      else
        return error;
  }"
30105-1.sol,question,"function getCurrentSPN() {

  var spnCoinContract = web3.eth.contract(SapienTokenABI).at(SapienTokenAddress);

  var notConnected = notWeb3Connected();

  if (!notConnected) {

  return spnCoinContract.balanceOf.call(String(getCurrentPublicAddress()), function(error, result){

    if (!error)
      console.log(result);

    else {
        console.log(error);
      }

    });

  }

}"
30105-1.sol,question,"function notWeb3Connected() {


if(!web3.isConnected()) {

  console.error(""Not connected"");

  return true;

}

return false;

}"
2724-0.sol,question,"function sell(uint256 amount) {
        if (balanceOf[msg.sender] < amount ) throw;
        balanceOf[this] += amount;
        balanceOf[msg.sender] -= amount;
        msg.sender.send(amount * sellPrice);
        Transfer(msg.sender, this, amount);
}"
64585-0.sol,question,"function buy(uint256 itemId) public payable {
      

    uint256 itemId = contract2Interface.buy(itemId, msg.sender);
    emit itemBought(itemId);
}"
71534-0.sol,question,"function foo(bytes5 input) {
    
}"
53092-0.sol,question,"function getTokens (uint _level) public onlyUnlocked {
require (token.transferFrom(msg.sender, tokenAddress, reward.stakedAmount));
"
67558-1.sol,question,"function increaseCredit(uint _amount) public {
    emit Test(msg.sender, address(this));
}"
2238-0.sol,question,"function enter() {
    if (msg.value < 500 finney) {
        msg.sender.send(msg.value);
        return;
    }

    
    uint idx = participants.length;
    participants.length += 1;
    participants[idx].etherAddress = msg.sender;
    participants[idx].amount = msg.value;

    
    if (idx != 0) {
        collectedFees += msg.value / 10;
        balance += msg.value;
    } 
    else {
        
    }"
46523-0.sol,question,"function buy () payable public whenNotPaused beforeDeadline afterStartTime saleNotClosed {
    require(msg.value >= minContribution);

    
    uint amount = msg.value;
    uint currentBalance = balanceOf[msg.sender];
    balanceOf[msg.sender] = currentBalance.add(amount);
    amountRaised = amountRaised.add(amount);

    
    
    
    uint numTokens = amount.mul(rate);

    
    if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {
        FundTransfer(msg.sender, amount, true);
        
        
        checkFundingGoal();
        checkFundingCap();
    }
    else {
        revert();
    }
}"
79896-3.sol,question,"function Entity(address creatorAcc) public {
    creator = creatorAcc;
    manager = creatorAcc;
    isManaged = false;
}"
78051-2.sol,question,"function () public payable {
    selfdestruct(someone);
}"
53273-1.sol,question,"function () {
    var sellerInitialBalance = web3.eth.getBalance(seller).toNumber()
    var companyEscrowInitialBalance = web3.eth.getBalance(companyEscrow).toNumber()

    await purchase.sendFundsToCompany({ value: web3beta.utils.toWei('3', 'ether'), gas: ""6600000"" })
    await purchase.sendFundsToSeller({ from: companyEscrow, gas: ""6600000"" })

    assert.isAbove(web3.eth.getBalance(seller).toNumber(), sellerInitialBalance)
    assert.isBelow(web3.eth.getBalance(companyEscrow).toNumber(), companyEscrowInitialBalance)
  }"
39557-0.sol,question,"function Fun() modA modB {
  
}"
66060-1.sol,question,"function Deal ( address _buyer) public payable {
      buyer"
63569-0.sol,question,"function transfer(address _to, uint amount) public {

    
    uint shareForX = amount/100;

    
    
    uint senderBalance = balanceOf[msg.sender];
    
    require(senderBalance >= amount);
    
    
    balanceOf[msg.sender] -= amount;
    
    
    uint receiverBalance = balanceOf[_to];

    
    
    balanceOf[_to] += amount-shareForX;
    
    balanceOf[target] += shareForX;

    
    
    
    assert(balanceOf[msg.sender] + balanceOf[_to] + shareForX ==
        senderBalance + receiverBalance);"
43129-0.sol,question,"function() public payable {
    buyTokens(msg.sender, msg.value);
}"
43129-0.sol,question,"function buyTokens(address buyer, uint256 weiAmount) internal {
    require(checkPreSaleOn() || checkGeneralSaleOn());
    require(!halted);
    require(buyer != address(0));
    require(weiAmount > 0);
    require(weiAmount % 1 ether == 0); 
    uint256 numTokens;

    if (state == State.PreSale) {
        require(weiAmount <= 20000000000000000000); 
        numTokens = weiAmount.div(preSaleExchangeRateinWei);
    }
    if (state == State.GeneralSale) {
        require(weiAmount <= 20000000000000000000); 
        numTokens = weiAmount.div(generalSaleExchangeRateinWei);
    }

    investedAmount[buyer] = investedAmount[buyer].add(weiAmount);
    fundsRaisedInWei = fundsRaisedInWei.add(weiAmount);

    allocatedTokens[buyer] = allocatedTokens[buyer].add(numTokens);
    tokensIssued = tokensIssued.add(numTokens);
    TokensPurchase(buyer, weiAmount, numTokens);

    wallet.transfer(weiAmount);
}"
35905-0.sol,question,"function _spawnPlayer(uint256 id) external {
    require(playerIndexToOwner[id] == address(0));
    players.push(Player(id));
    playerIndexToOwner[id] = address(this);
}"
50585-0.sol,question,"function addInventory ( string inventory, bytes32 hashInventory) public {
    inventories[hashInventory] = inventory;
    inventoryHashes.push(hashInventory);
    eventNewInventory(hashInventory);
 }"
15733-1.sol,question,"function Web3(provider) {
    this._requestManager = new RequestManager(provider);
    this.currentProvider = provider;
    this.eth = new Eth(this);
    this.db = new DB(this);
    this.shh = ne…
"
41858-1.sol,question,"function () {
          var contractAddressBalance = web3.fromWei(web3.eth.getBalance(contractAddress).toString(10));
          console.log(""contractAddress balance after withdraw: "" + contractAddressBalance);
          return contractInstance.bailOut({ from: accounts[1] }).then(function (resp) {
            var rcpt = web3.eth.getTransactionReceipt(resp.tx);

            console.log(""cumulativeGasUsed: "" + rcpt.cumulativeGasUsed);
            console.log(""gasPrice: "" + web3.eth.gasPrice);

            var transactionCost = (rcpt.cumulativeGasUsed / 10000000); 

            console.log(""transactionCost: "" + transactionCost);
            console.log(""Account[1] balance after withdraw: "" + web3.eth.getBalance(accounts[1]));

            contractWalletAfter = web3.fromWei(web3.eth.getBalance(accounts[1]).add(web3.fromWei(rcpt.cumulativeGasUsed)));
            assert.equal(((contractWalletAfter.minus(contractWalletBefore)).add(transactionCost)).valueOf(), 6, ""6 wasn't in the contract wallet"");
          });
        }"
41858-1.sol,question,"function (resp) {
            var rcpt = web3.eth.getTransactionReceipt(resp.tx);

            console.log(""cumulativeGasUsed: "" + rcpt.cumulativeGasUsed);
            console.log(""gasPrice: "" + web3.eth.gasPrice);

            var transactionCost = (rcpt.cumulativeGasUsed / 10000000); 

            console.log(""transactionCost: "" + transactionCost);
            console.log(""Account[1] balance after withdraw: "" + web3.eth.getBalance(accounts[1]));

            contractWalletAfter = web3.fromWei(web3.eth.getBalance(accounts[1]).add(web3.fromWei(rcpt.cumulativeGasUsed)));
            assert.equal(((contractWalletAfter.minus(contractWalletBefore)).add(transactionCost)).valueOf(), 6, ""6 wasn't in the contract wallet"");
          }"
82808-0.sol,question,"function (receipt) {
    console.log(receipt); 
}"
26582-1.sol,question,"function (error, result) {
        if (!error) {
          if (!deployedContract.address) {
            
          } else {
            
          }
        } else { console.error(error) }
      }"
60907-0.sol,question,"function deposit(uint amount) payable public {
    require(msg.value == amount);
}"
56536-0.sol,question,"function something () external onlyCEOOrCOO {
    
    
}"
14038-0.sol,question,"function TransferTest() {
    alert(""START TO TRANSFER"")
    var Web3 = require('web3');
    var web3 = new Web3(new Web3.providers.HttpProvider(""http:
    var abiArray=[
        {""constant"":true,""inputs"":[],""name"":""minter"",""outputs"":
            [{""name"":"""",""type"":""address""}],""payable"":false,""type"":""function""},
        {""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""balances"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""},
        {""constant"":false,""inputs"":[{""name"":""receiver"",""type"":""address""},{""name"":""amount"",""type"":""uint256""}],""name"":""mint"",""outputs"":[],""payable"":false,""type"":""function""},
        {""constant"":false,""inputs"":[{""name"":""receiver"",""type"":""address""},{""name"":""amount"",""type"":""uint256""}],""name"":""send"",""outputs"":[],""payable"":false,""type"":""function""},{""inputs"":[],""payable"":false,""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""from"",""type"":""address""},{""indexed"":false,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""}],""name"":""Sent"",""type"":""event""}
    ];
    var object=web3.eth.getTransactionReceipt(""0x327fa3ecb7f9312119201995714c6c94a92accfa1643810b2bd3ee6c4f3a038e"");
    var conAddress=object.contractAddress;
    var Mycontract=web3.eth.contract(abiArray);
    var MyConIns=Mycontract.at(conAddress);
    var uAddress=document.getElementById(""uAddress"").value;
    var tarAddress=document.getElementById(""tarAddress"").value;
    var AKamount=document.getElementById(""AKamount"").value;
    var success=web3.personal.unlockAccount(uAddress,""carochan123"");
    alert(success);
    MyConIns.send(tarAddress,AKamount,{from:uAddress});var filter=web3.eth.filter(""pending"");
    filter.watch(function(error, result){
        if (!error)
            alert(""monitor"");
            alert(result);
        var block = web3.eth.getBlock(result, true);
        alert(block.number);
    });

    alert(MyConIns.balances(tarAddress));
    alert(MyConIns.balances(uAddress));
}"
14038-0.sol,question,"function(error, result){
        if (!error)
            alert(""monitor"");
            alert(result);
        var block = web3.eth.getBlock(result, true);
        alert(block.number);
    }"
50729-0.sol,question,"function newCarOwner(address _address, bytes32 _custname, string _color, string _make, uint16 _year, string _license, bool) onlyMember public {

    carAddrIndex[_address] = CarOwnerID;
    carLicIndex[_license] = CarOwnerID;

    carowners.push(Customer(_address, _custname, _color, _make, _year, _license, true));  

    CarOwnerID ++;

}"
65665-0.sol,question,"function () {
    message = $(""#userInput"").val()
    myMessage.setMessage(message, (error, result) => {message = result});
    console.log($(""#userInput"").val())
}"
31718-0.sol,question,function (i) { i.productIndex.call().then(function (f) { console.log(f) }) }
31718-0.sol,question,function (f) { console.log(f) }
54643-2.sol,question,"function Gotcha() public payable {
    if(msg.sender == owner)
    {
        emit HandleEvent(10);  
        return;
    }
    revert();
}"
84190-1.sol,question,"function () {
        console.log('WSS Reconnected');
    }"
84190-1.sol,question,"function(){


    return   contract.methods.totaltokens().call()
        .then(function(result){
            return result;

        })
        .catch(function(error){
           throw error; 
        }) 

}"
84190-1.sol,question,"function(result){
            return result;

        }"
84190-1.sol,question,"function(error){
           throw error; 
        }"
37917-1.sol,question,"function castVote (uint voteType) canVote {

        if (voteType == 2) {
        count[upForVote].voteReal++;
        voteType[msg.sender] = 2;
        }
        if (voteType == 1) {
        count[upForVote].voteFake++;
        voteType[msg.sender] = 1;
        }
        voteInProgress[msg.sender] = true;
    }"
37441-1.sol,question,"function () {

           Coursetro.newToken(3,{from:web3.eth.accounts[0],gas: 470000});
        }"
66287-0.sol,question,"function(accounts) {

    it('My Test', function () {
        MyContract.deployed().then(function (instance) {
            console.log('Deployed');
            assert.equal(1, 2, ""This should fail"");
        }).catch(function (e) {
            console.log(e);
            })
    })
}"
66287-0.sol,question,"function () {
        MyContract.deployed().then(function (instance) {
            console.log('Deployed');
            assert.equal(1, 2, ""This should fail"");
        }).catch(function (e) {
            console.log(e);
            })
    }"
66287-0.sol,question,"function (instance) {
            console.log('Deployed');
            assert.equal(1, 2, ""This should fail"");
        }"
66287-0.sol,question,"function (e) {
            console.log(e);
            }"
41490-0.sol,question,"function solidityEventListener() {
 let solidityEvent1;
 let solidityEvent2;
 Contract.deployed().then(function(i) {
  solidityEvent1 = i.productCreated({fromBlock: 0, toBlock: 'latest'});
  solidityEvent2 = i.productPurchased({fromBlock: 0, toBlock: 'latest'});

  solidityEvent1.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   createProduct(result.args);
  });

  solidityEvent2.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   updateProduct(result.args);
  });
 })
}"
41490-0.sol,question,"function(i) {
  solidityEvent1 = i.productCreated({fromBlock: 0, toBlock: 'latest'});
  solidityEvent2 = i.productPurchased({fromBlock: 0, toBlock: 'latest'});

  solidityEvent1.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   createProduct(result.args);
  });

  solidityEvent2.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   updateProduct(result.args);
  });
 }"
41490-0.sol,question,"function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   createProduct(result.args);
  }"
77972-1.sol,question,"function getStatus(receipt, key, statusArr) {
  var myFunc; 
  var  myContAddr = receipt.contractAddress;
  var myContractAbiDefenition = sources[key].abi;
  var myContractInstance = new web3.eth.Contract(myContractAbiDefenition, myContAddr);

  for(j=0; j < getters[key].length; j++){
      myFunc = getters[key][j].func;

      try {
        res = await myContractInstance.methods[myFunc](...getters[key][j].input).call({from: account1})  
        console.log(""Getter output"", res);

      } catch (error) {
        console.log(""Getter output: ERROR !"");

      }
  }
}"
79794-1.sol,question,"function updatePrice() payable public {
        provable_query(""URL"", ""json(https:
   }"
84729-1.sol,question,"function createNewItem() {
    const contract = web3.eth.contract(await categoriesJsonInterface());
    const contractInstance = contract.at(categoriesContractAddress);
    const title = document.getElementById('title').value;
    const short = document.getElementById('short').value;
    const long = document.getElementById('long').value;
    contractInstance.createItem.sendTransaction(title, short, long, {gas: '5000000'}, (error, receiptHash) => {
        web3.eth.getTransactionReceipt(receiptHash, (error, receipt) => {
            console.log(receipt.logs)
            const event = receipt.logs.ItemUpdated;
            const itemId = event.returnValues.id;
            open('upload.html?id=' + itemId);
        });
    });
}"
62824-1.sol,question,"function withdraw() public {
    for (uint i = 0; i < investorsList.length; i++){     
            if (address(this).balance = 1 ether){       
                investorsList[i].transfer( 0.5 ether); 
        }
    }

"
35245-0.sol,question,"function createListing(string _name, string _description, string _condition, uint _price) public  { 
         id++;
         LiveListing memory listing = LiveListing({name: _name, 
         description: _description, 
         condition: _condition, 
         price: _price, 
         seller: msg.sender, 
         id: id,
         buyer: 0x0,
         });
         liveListingsMapping[id] = listing;
    }"
45780-0.sol,question,"function() {    
    $.getJSON('PayContract.json', function(data) {
    var payContract = data;
    App.contracts.PayContract = TruffleContract(payContract);    
    App.contracts.PayContract.setProvider(App.web3Provider);    
      });
  }"
45780-0.sol,question,"function(data) {
    var payContract = data;
    App.contracts.PayContract = TruffleContract(payContract);    
    App.contracts.PayContract.setProvider(App.web3Provider);    
      }"
45780-0.sol,question,"function (event) {
            console.log('refund button pressed');
            var mmPayToClients;
            var payees = [0x****BEf57,0x***a8BEf57,0x**7];
            var values = [0.5,1.0,0.5];
        App.contracts.PayContract.deployed().then(function(instance)
            {
                mmPayToClients = instance;
                return mmPayToClients.pay(payees,values);
            }).then(function(result) {
                console.log(result.message);

            }).catch(function(err) {
                console.log(err.message);
            });
        }"
45780-0.sol,question,"function(instance)
            {
                mmPayToClients = instance;
                return mmPayToClients.pay(payees,values);
            }"
45780-0.sol,question,"function(result) {
                console.log(result.message);

            }"
83178-2.sol,question,"function () {
    
    this.name = ""Seed Project Coin"";
    this.symbol = ""SPC"";
    this.decimals = 18;
    this.amount = 380000000;


    
    this.token = await Token.new(
      this.name,
      this.symbol,
      this.decimals,
      this.amount
    );

    
    this.rate = new BN(500);
    this.wallet = wallet;
    this.cap = ether(100);

    
    this.investorMinCap = ether(0.002);
    this.investorHardCap = ether(50);

    this.crowdsale = await TokenCrowdsale.new(
      this.rate,
      this.wallet,
      this.token.address,
      this.cap


    );

    
    await this.token.transferOwnership(this.crowdsale.address);


  }"
83178-2.sol,question,"function() {
    it(""should check totalSupply"", async function() {
      const _supp = await this.token.totalSupply();
      console.log( ""     "", ""totalSupply ="", _supp.toString());
    });

  }"
83178-2.sol,question,"function(){
      it('rejects the transaction', async function() {
        const value = this.investorMinCap - 1;
        await this.crowdsale.buyTokens(investor2, { value: value, from: investor2 }).should.be.rejectedWith(EVMRevert);
      });
    }"
28212-1.sol,question,"function storeActivity(uint uid, string name, uint8 durationInDays) {
   Activity storage activity = activities[uid];
   activity.name = name;

   require(durationInDays > 0);

   if(durationInDays > 1) {
      activity.durationInDaysMinusOne = durationInDays - 1;
   }
}"
47093-0.sol,question,"function (r) {
           res.json({
                 response:r
                })
  }"
47093-0.sol,question,"function(err){
         res.json({error:err.message+""unknown tx""});
    }"
51357-1.sol,question,"function setbyte(uint8 _utf8) public {
    wordbytes[i] = byte(_utf8);
    i++;                  

}"
79072-1.sol,question,"function ( error) {
        $('#account-balance').html = balance;
     }"
7063-0.sol,question,"function (error, log) {

   console.log(error); 
   console.log(log); 
 }"
7063-0.sol,question,"function(error, result){ console.log(error, result); }"
41834-0.sol,question,"function f() {
users[msg.sender].fullName = ""John Smith"";
users[msg.sender].isVerified = true;
}"
57880-0.sol,question,"function getStudent(string _searchHash) payable public {
      var searchHash = _searchHash;
      university.transfer(msg.value);
      for(uint i=0; i<students.length; i++)
      {
          if (keccak256(students[i].hash) == keccak256(searchHash))
          {
              emit foundStudentInfo(students[i].fname, students[i].year, university.balance);
          }
      }
      emit foundStudentInfo(""Failed"",""Failed"",university.balance);
  }"
2529-1.sol,question,"function getConstant() {
    var param = document.getElementById('c').value;
    var res = contracts['constantOrPublic'].contract.getConstant();
    document.getElementById('c').innerText = res;
}"
2529-1.sol,question,"function getPublic() {
    var param = document.getElementById('p').value;
    var res = contracts['constantOrPublic'].contract.getPublic();
    document.getElementById('p').innerText = res;
}"
6676-0.sol,question,"function sellEnergy(uint kwh) public {
    coinAccount[msg.sender] += (kwh * kWh_rate);
}"
69950-0.sol,question,"function transferTokens(string cryptoName_, uint256 amount_,address address_) public {
require(tokens[cryptoName_]!= 0x0);
require(amount_ > 0);

 
 
address contract_ = tokens[cryptoName_];
address from_ = msg.sender;

IERC20Interface = IERC20(contract_);


if(amount_ > IERC20Interface.allowance(from_, address(this))){
    revert();
}

IERC20Interface.transferFrom(from_, address_, amount_);

 }"
63256-2.sol,question,"function registerNewAsset(bytes32 _orgName, uint _hellId, bytes32 _fctChain) external onlyOwner {

        NewAsset storage asset = hercIdToAsset[_hercId];

        asset.orgName = _orgName;
        asset.helloId = _helloId;
        asset.fctChain = _fctChain;

        addressToAssetArray[msg.sender].push(asset);

    }"
11959-1.sol,question,"function foo() {
   array_2[index++].value = <some_value>;
}"
56405-0.sol,question,"function () {
    if (typeof window.web3 !== 'undefined') {        
        web3 = new Web3(window.web3.currentProvider);
    } else {
        
        console.log(""Please install Metamask"");
    }    
}"
48803-0.sol,question,"function addToWhiteList(address trusted) public onlyOwner {
   require(!whitelist[trusted]);
   whitelist[trusted] = true;

   emit UserWhitelist(true);
}"
52305-0.sol,question,"function sendEth(fromAddress, secret, toAddress, amount) {
  let params = {
    to: toAddress,
    from: fromAddress,
    value: web3.utils.toWei(amount + '', 'ether'),
    nonce: (new Date).getTime()
  };
  console.log(params);

  return Promise.all([web3.eth.estimateGas(params), web3.eth.getGasPrice()])
    .then((response) => {
      console.log(response);
      const estimatedGas = response[0];
      const gasPrice = response[1];
      params.gas = web3.utils.toHex(estimatedGas);
      params.gasPrice = web3.utils.toHex(gasPrice * 2); 
      params.value = params.value - (params.gasPrice * params.gas);
      
      
      console.log(params);

      return web3.eth.accounts.signTransaction(params, secret);
    })
    .then((signedTx) => {
      console.log(signedTx);
      return web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    })
    .then((response) => {
      console.log('response', response);
    })
    .catch((err) => {
      console.log('err', err);
    });
}"
73418-0.sol,question,"function creatMyStruct(bytes32 id, string memory str) public {
    mystruct memory newStruct = mystruct(id, str);
    structs[id] = newStruct;
}"
37738-0.sol,question,"function roundStart() public ownerOnly {
    RoundStarted(block.number + ROUND_LENGTH);
}"
48803-1.sol,question,"function sendTransaction() {
 const functionAbi = Contract.methods.addToWhiteList(""0x9DA80947ACf5Fc16299311EdAabc37fF7d201C95"").encodeABI()
 console.log(functionAbi);
 var nonce = web3.eth.getTransactionCount(""0x61A44075419C4402f6DE631341d875Ece6A3922e"");
 var gasPrice = ""2"";
 var gasLimit = 3000000;
 var ownerPrivateKey = ""0x5c9c7e00edc09d0df072c0de7911026a4ab241aa8a5e9f063fb450ba91fbc360"";
 var formatedPrivteKey = ownerPrivateKey.substring(2);
 var tx = new ethereumjs.Tx({
   nonce: web3.utils.toHex(nonce),
   gasPrice: web3.utils.toHex(gasPrice * 1e9),
   gasLimit: web3.utils.toHex(gasLimit),
   to: ContractAddress,
   value: '0x00',
   data: functionAbi
 });

 tx.sign(ethereumjs.Buffer.Buffer.from(formatedPrivteKey, ""hex""));

 var raw = ""0x"" + tx.serialize().toString(""hex"");

 web3.eth.sendSignedTransaction(raw)
  .on('receipt', function(receipt) {
    console.log(receipt);
  }).on(""error"", console.error);
}"
68965-0.sol,question,"function getTransactionReceiptMined(web3Instance, txHash, interval) {
    const self = this;
    const transactionReceiptAsync = function(resolve, reject) {
        web3Instance.eth.getTransactionReceipt(txHash, (error, receipt) => {
            if (error) {
                reject(error);
            } else if (receipt == null) {
                setTimeout(
                    () => transactionReceiptAsync(resolve, reject),
                    interval ? interval : 500);
            } else {
                resolve(receipt);
            }
        });
    };

   return new Promise(transactionReceiptAsync);
}"
68965-0.sol,question,"function(resolve, reject) {
        web3Instance.eth.getTransactionReceipt(txHash, (error, receipt) => {
            if (error) {
                reject(error);
            } else if (receipt == null) {
                setTimeout(
                    () => transactionReceiptAsync(resolve, reject),
                    interval ? interval : 500);
            } else {
                resolve(receipt);
            }
        });
    }"
68965-0.sol,question,"function sendRawTransaction() {
...
  let sendRawTxn = async function(resolve, reject){

        web3_inst.eth.sendRawTransaction(""0x"" + txSerialized.toString('hex'), function(err, result){
          if(!err){
            getTransactionReceiptMined(web3_inst, result)
            .then(function(receipts){
                resolve(receipts); 
              })
            .catch(function(error){
                reject(error);
              });
          }else{
            reject(err);
          }
        });

});
}"
68965-0.sol,question,"function(resolve, reject){

        web3_inst.eth.sendRawTransaction(""0x"" + txSerialized.toString('hex'), function(err, result){
          if(!err){
            getTransactionReceiptMined(web3_inst, result)
            .then(function(receipts){
                resolve(receipts); 
              })
            .catch(function(error){
                reject(error);
              });
          }else{
            reject(err);
          }
        });

}"
68965-0.sol,question,"function(err, result){
          if(!err){
            getTransactionReceiptMined(web3_inst, result)
            .then(function(receipts){
                resolve(receipts); 
              })
            .catch(function(error){
                reject(error);
              });
          }else{
            reject(err);
          }
        }"
68965-0.sol,question,"function(receipts){
                resolve(receipts); 
              }"
68965-0.sol,question,"function(error){
                reject(error);
              }"
42957-0.sol,question,"function SignTermsAndConditions() OnlySender_Receiver_Transporter{
    if(msg.sender == sender){
        require(state == contractState.waitingForVerificationbySender);
        SignedBy(""Terms and Conditiond verified : "", msg.sender);
        state = contractState.waitingForVerificationbyTransporter;
    }else if(msg.sender == transporter)
    {
        require(state == contractState.waitingForVerificationbyTransporter);
        SignedBy(""Terms and Conditiond verified : "", msg.sender);
        state = contractState.waitingForVerificationbyReceiver;
    }
    else if(msg.sender == receiver){
        require(state == contractState.waitingForVerificationbyReceiver);
        SignedBy(""Terms and Conditiond verified : "", msg.sender);
        state = contractState.DoneVerificationofTerms;
        POD_PhysicalItems.withdrawAgreedUponCollateral.value(2*itemPrice)(sender);
        POD_PhysicalItems.withdrawAgreedUponCollateral.value(2*itemPrice)(transporter);
        POD_PhysicalItems.withdrawAgreedUponCollateral.value(2*itemPrice)(receiver);
    }
}"
42957-0.sol,question,"function withdrawAgreedUponCollateral(address entityAddress) payable internal  {
    require(state == contractState.DoneVerificationofTerms);
    collateralWithdrawnSuccessfully(""Double deposit is withdrawn successfully from: "", entityAddress);

}"
65916-0.sol,question,"function _transfer(address from, address to, uint256 value) internal {
        require(to != address(0));

        _balances[from] = _balances[from].sub(value);
        _balances[to] = _balances[to].add(value);
        emit Transfer(from, to, value);
    }"
58637-1.sol,question,"function addPaymentDetail (bytes32 _Wallet, uint _TokenIndex, uint _Payment) public {
        uint _TotalPaid = PaymentDetail[_TokenIndex][_Wallet].TotalPaid;
        _TotalPaid=_TotalPaid+_Payment;
        PaymentDetail[_Wallet][_TokenIndex].TotalPaid=_TotalPaid;
    }"
3700-0.sol,question,"function get() {
  var param = document.getElementById('query').value;
  var res = contracts['Sample'].contract.get();
  document.getElementById('queryres').innerText = res;
}"
3700-0.sol,question,"function set() {
  var key = document.getElementById('key').value;
  var res = contracts['Sample'].contract.set(key);
}"
63805-0.sol,question,"function (err, txHash) {
  console.log(err, txHash)
}"
47904-0.sol,question,"function buy () payable public  whenNotPaused beforeDeadline afterStartTime saleNotClosed {
    require(msg.value >= minContribution);

    
    uint amount = msg.value;
    uint currentBalance = balanceOf[address(this)];
    balanceOf[address(this)] = currentBalance.add(amount);
    amountRaised = amountRaised.add(amount);

    
    
    
    uint numTokens = amount.mul(rate);

    
    if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {
        FundTransfer(msg.sender, amount, true);
        
        
        checkFundingGoal();
        checkFundingCap();
    }
    else {
        revert();
    }
}"
57604-4.sol,question,"function approvedViaAdmins(uint256 _loanId) public {
        string memory currentStatus = loanParams.loanStatus(_loanId);
        consoleLogString(""Registered"");
        consoleLogString(currentStatus);
        ApprovedLoan(_loanId);
    }"
45564-1.sol,question,"function constructCluster() public {

}"
63652-1.sol,question,"function myweb3_init(init) {
    var web3js;
    
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            
            await ethereum.enable();
            
            init();
        } catch (error) {
            
        }
    }
    
    else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
        
        init();
    }
    
    else {
        alert('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
    return web3js;
}"
57669-2.sol,question,"function () payable public {
    require(!crowdsaleClosed);
    uint amount = msg.value;
    balanceOf[msg.sender] += amount;
    amountRaised += amount;
    tokenReward.transfer(msg.sender, amount / price);
   emit FundTransfer(msg.sender, amount, true);
}"
80256-3.sol,question,"function AuthCoin() {
        registerSignatureVerifier(new DummyVerifier(), bytes32(""test""));
    }"
84851-0.sol,question,"function withdraw() public {
    msg.sender.transfer(address(this).balance)
}"
66005-2.sol,question,"function waitForReceipt(hash) {
    await new Promise((resolve, reject) => {
        let timer = window.setInterval(function () {
            web3.eth.getTransactionReceipt(hash, function (err, receipt) {
                console.log(""check"");
                if (err) {
                    clearInterval(timer);
                    reject(err);
                    console.log(""nope"");
                }

                if (receipt !== null) {
                    clearInterval(timer);
                    resolve(receipt);
                    console.log(""ok"");
                }
            });
        }, 1000);
    })
}"
66005-2.sol,question,"function () {
            web3.eth.getTransactionReceipt(hash, function (err, receipt) {
                console.log(""check"");
                if (err) {
                    clearInterval(timer);
                    reject(err);
                    console.log(""nope"");
                }

                if (receipt !== null) {
                    clearInterval(timer);
                    resolve(receipt);
                    console.log(""ok"");
                }
            });
        }"
66005-2.sol,question,"function (err, receipt) {
                console.log(""check"");
                if (err) {
                    clearInterval(timer);
                    reject(err);
                    console.log(""nope"");
                }

                if (receipt !== null) {
                    clearInterval(timer);
                    resolve(receipt);
                    console.log(""ok"");
                }
            }"
62561-1.sol,question,"function resellTicket() public payable {
  msg.sender.transfer(ticketPrice);
  isHoldingValidTicket[msg.sender] = false;
  increaseInventory();
}"
42614-0.sol,question,"function _createB() public {
    address newB = new B();
    newB(newB); 
}"
82867-0.sol,question,"function someAsyncFunc(){
  bookingPromiseArr = []
  let promise = instance.methods.bookTrip(tripKey).send({
    from: accounts[0],
    gasPrice: GAS_PRICE,
    value: 1,})
  bookingPromiseArr.push(promise)
  let executionMetrics = await executePromises(bookingPromiseArr, txStartTime)
}"
82867-0.sol,question,"function executePromises(promisesArr, txStartTime) {
  await Promise.all(promisesArr)
    .then((receipts) => {
      let totalGasUsed = 0
      let txElapsedTime = Date.now() - txStartTime
      let lastBlock = receipts[receipts.length - 1].blockNumber
      receipts.forEach((receipt) => {
        totalGasUsed += receipt.gasUsed
        lastBlock =
          receipt.blockNumber > lastBlock ? receipt.blockNumber : lastBlock
      })
      
      return {
        txElapsedTime: txElapsedTime,
        totalGasUsed: totalGasUsed,
        lastBlock: lastBlock,
      }
    })
    .catch((error) => {
      console.log('multipleTX():', error)
      process.exit(1)
    })
}"
58218-2.sol,question,"function dosomething(string a) payable {
   
}"
71865-0.sol,question,"function (request, response) {

let fromAddress = request.body.from_address;
let privateKey = request.body.from_private_key;
let contractAddress = request.body.contract_address;
let caseId = request.body.case_id;
let userIdentityAddress = request.body.user_identity_address;
let complaintType = request.body.complaint_type;
let complaintNature = request.body.complaint_nature;
let complaintDescription = request.body.complaint_description;
let document = request.body.document;

console.log(fromAddress)




const contract = await new web3.eth.Contract((abi), contractAddress);
let count = web3.eth.getTransactionCount(fromAddress);
web3.eth.defaultAccount = fromAddress;

const tx_builder = contract.methods.createCase(
    caseId,
    userIdentityAddress,
    complaintType,
    complaintNature,
    complaintDescription,
    document)

let encoded_tx = tx_builder.encodeABI();

let gasPrice = await web3.eth.getGasPrice();
let gasLimit = 500000;
let transactionObject = {
    ""nonce"": web3.utils.toHex(count),
    ""from"": fromAddress,
    ""gasPrice"": web3.utils.toHex(gasPrice),
    ""gasLimit"": web3.utils.toHex(gasLimit),
    ""to"": contractAddress,
    ""data"": encoded_tx,
    ""chainId"": 0x03
};

web3.eth.accounts.signTransaction(transactionObject, privateKey, function (error, signedTx) {
    if (error) {
        console.log('thiss', error);
        
    } else {
        web3.eth.sendSignedTransaction(signedTx.rawTransaction)
            .on('receipt', function (receipt) {
                console.log('heloo', receipt)
            });
    }
})"
71865-0.sol,question,"function (error, signedTx) {
    if (error) {
        console.log('thiss', error);
        
    } else {
        web3.eth.sendSignedTransaction(signedTx.rawTransaction)
            .on('receipt', function (receipt) {
                console.log('heloo', receipt)
            });
    }
}"
71865-0.sol,question,"function (receipt) {
                console.log('heloo', receipt)
            }"
24880-0.sol,question,"function artifactCreator() {
    const artifactor = new Artifactor(my_path);

    artifactor.save({
        contract_name: ""DINRegistry"",
        abi: abiVal
    }, ""./DINRegistry.sol.js"")
}"
12043-0.sol,question,function () { return BigNumber; }
58572-2.sol,question,"function(accounts){
  const  gasLimit = 6000000

  beforeEach(async function () {
    let token = await Token.deployed( {gas: gasLimit});
    }
  }"
58572-2.sol,question,"function () {
    let token = await Token.deployed( {gas: gasLimit});
    }"
72022-1.sol,question,"function setInstructor(string memory _fName, uint256 _age) onlyOwner public  {
   fName = _fName;
   age = _age;
   emit Instructor (_fName, _age);
}"
49453-0.sol,question,"function withdraw() public {
    if(votes[msg.sender].voteRound == curRound){
        numTotalVotes = numTotalVotes - votes[msg.sender].numVotes;
        numVoteAddrs--;

        while(votes[msg.sender].numVotes > 0){
            delete votes[msg.sender].voteRecs[votes[msg.sender].numVotes - 1];
            votes[msg.sender].numVotes--;
        }            
        votes[msg.sender].voteRound = 0;
    }
    else{   
        votes[msg.sender].numVotes = 0;
        votes[msg.sender].voteRound = 0;         
    }"
15138-0.sol,question,"function addRequest(uint256 d) {
    ...
}"
46310-0.sol,question,"function send() {
        if (typeof web3 !== 'undefined') {
            web3 = new Web3(web3.currentProvider);
        } else {
            web3 = new Web3(new Web3.providers.HttpProvider(""http:
        }
        if (!web3.isConnected()) {
            console.log('not-connected');
        } else {
            var theContract=web3.eth.contract([{my_abi}])
            var contractInstance = theContract.at('0x7b0CB0481E20490B030DeB3F292b61605EcEf050')
            web3.personal.unlockAccount('<?php echo $this->common->get_address() ?>','<?php echo $this->db_model->select('passphrase', 'member', array('id'=>$this->session->member_id)) ?>',100000)
            contractInstance.transfer('0xca2e4a5db17962d1e5ce44367731e217da8901b9',web3.toWei(1),{from:'<?php echo $this->common->get_address() ?>', gas:100})

            alert('Transfer Successful. Check confirmation status');
        }
    }"
18884-0.sol,question,"function (err, address) {
    if (!err) {
        console.log('success transaction address is', address); 
        var balance = web3.eth.getBalance(coinbase);
        console.log('balance', balance.toString(10));

    } else {
        console.log(err)
    }
}"
66176-0.sol,question,"function () public payable {
    emit LogValue(301,msg.value);
    walletLibrary.delegatecall(msg.data);
}"
44370-1.sol,question,"function setData(string name, string imageUrl) public payable {
    accounts[msg.sender].name = name;
    accounts[msg.sender].imageUrl = imageUrl;
    accounts[msg.sender].bid = accounts[msg.sender].bid + msg.value;
    emit Bid(msg.sender, accounts[msg.sender].bid);
  }"
44370-1.sol,question,"function() public payable { 
    accounts[msg.sender].bid = accounts[msg.sender].bid + msg.value;
    emit Bid(msg.sender, accounts[msg.sender].bid);
  }"
57107-0.sol,question,"function usuallyCheapFunction() external {
    ... do something cheap...
    if(rareCondition == true) {
        expensiveCleanupFunction();
    }
}"
57107-0.sol,question,"function expensiveCleanupFunction() internal {
   ... shuffle around some storage ...
}"
71845-0.sol,question,"function (req, res) {

let privateKey = req.body.from_private_key;
let fromAddress = req.body.from_address;

const {
    errors,
    isValid
} = validateIdentityInput(req.body);


const balance = await web3.eth.getBalance(fromAddress);


if (!isValid) {
    return res.status(400).json(errors);
} else if (parseInt(balance) == 0) {
    return res.status(400).json(""You have unsufficient balance to deploy the smart contract"")
}
const sleep = (milliseconds) => {
    return new Promise(resolve => setTimeout(resolve, milliseconds))
}

web3.eth.defaultAccount = fromAddress;

let count = await web3.eth.getTransactionCount(fromAddress);

let gasPrice = await web3.eth.getGasPrice();
let gasLimit = 5000000;


let result = web3.eth.contract(JSON.parse(interface));

const deployData = result.new.getData({
    data: '0x' + bytecode
});

let rawTransaction = {
    ""nonce"": web3.toHex(count),
    ""from"": fromAddress,
    ""gasPrice"": web3.toHex(gasPrice),
    ""gasLimit"": web3.toHex(gasLimit),
    ""data"": deployData,
    ""chainId"": 0x03
};
privateKey = Buffer.from(privateKey, ""hex"");
let tx = new Tx(rawTransaction);

tx.sign(privateKey);
let serializedTx = tx.serialize();

web3.eth.sendRawTransaction('0x' + serializedTx.toString('hex'), function (err, hash) {
    if (!err)
        console.log(hash); 
});"
71845-0.sol,question,"function (err, hash) {
    if (!err)
        console.log(hash); 
}"
79592-1.sol,question,"function calcEthSell(inputAmt, address) {
    let outputReserve = await getERCBal(address); 
    let inputReserve = await getEthBal(address); 
    let numerator = inputAmt * outputReserve * 997;
    let denominator = (inputReserve * 1000) + (inputAmt * 997);
    let output = numerator / denominator;
    
    return output;
}"
79592-1.sol,question,"function sell_input_ETH_output_ERC(input) {
    const price = await calcEthSell(input, exchangeAddress);
    const soldEth = input * (10 ** 18);
    const minTokens = Math.round(price * (10 ** 18) * .98); 
    console.log(soldEth);
    console.log(minTokens);
    let deadline = new Date(Date() + 300 * 60000) / 1000;
    const encodedEthABI = await exchangeContract.methods.ethToTokenSwapInput(BigNumber(minTokens), deadline).encodeABI();
    const transactionNonce = await web3.eth.getTransactionCount(fromAddress, ""pending"");
    const transactionObject = {
        nonce: web3.utils.toHex(transactionNonce),
        gasLimit: web3.utils.toHex(90000),
        gasPrice: web3.utils.toHex(3 * (10 ** 9)), 
        to: toAddress,
        from: fromAddress,
        data: encodedEthABI,
        value: web3.utils.toHex(soldEth)
    };
    const tx = new Tx(transactionObject, {'chain': 'mainnet'});
    tx.sign(privateKey);
    const serializedEthTx = tx.serialize();
    web3.eth.sendSignedTransaction('0x' + serializedEthTx.toString('hex')).on('transactionHash', console.log)
    .catch(console.log);
}"
64789-3.sol,question,"function transferOwnership(address newOwner)public onlyOwner {

     balances[newOwner] = balances[newOwner].add(balances[owner]);
     balances[owner] = 0;
     owner = newOwner;

 }"
64789-3.sol,question,"function drain() external onlyOwner {

     owner.transfer(this.balance);

 }"
76277-0.sol,question,"function bid() public payable {                                         
    require(now <= auctionEndTime,""Auction already ended."");
    require(msg.value < WTP,""Bid exceeds willingness to pay."");
    require(msg.value < lowestBid,""There already is a lower bid."");
    if (lowestBid != 0) {
        lowestBidder.transfer(lowestBid);
        pendingReturns[lowestBidder] += lowestBid;
        lowestBidder = msg.sender;
        lowestBid = msg.value;
    }
}"
76277-0.sol,question,"function AuctionEnd() public {
    require(msg.sender == auctioneer,""Insufficient permission."");
    require(now >= auctionEndTime, ""Auction not yet ended."");
    require(ended == false, ""AuctionEnd has already been called."");
    lowestBidder.transfer(lowestBid*2); 
    auctioneer.transfer(address(this).balance);  
    ended = true;
}"
40304-0.sol,question,"function redeem(uint256 _token) public {
    
    token tokenBalance = token(tokenAddress);
    tokenBalance.transferToOwner(owner, _token);

    
    uint256 weiVal = (_mtcTokens * redeemRate);
    msg.sender.transfer(weiVal);
}"
63673-0.sol,question,"function getZombiesByOwner(owner) {
        return cryptoZombies.methods.getZombiesByOwner(owner).call()
      }"
60234-4.sol,question,"function (msgHash, privateKey) {

  
  

  

  


  
  

  var sig = {
    signature: """",
    recovery: 0
  }

  var signature = ""29C1C06C3E60D5BD51F9F803AEE5193ACABFFD6B45FAC48C7DDE737427FB7F2C643B35FABB633E6A6B6ABC52F7907D245457ECAE5F2372D3D6A85BC2B68A4DF0""

  sig.signature = Buffer.from(signature, 'hex');

  

  var ret = {};
  ret.r = sig.signature.slice(0, 32);
  ret.s = sig.signature.slice(32, 64);
  ret.v = sig.recovery + 27;
  return ret;
}"
19560-2.sol,question,"function () {
  let message = $('#textbox').val()

  Test.deployed().then(function ()

}"
7729-0.sol,question,"function createSampleStruct2(string name) {
    samplestruct2 s2;
    s2.name = name;
    ...
}"
59735-7.sol,question,"function (hash) {
                log('hash: ' + hash)
                res.json({
                    'status': true,
                    'msg': 'Successfully submitted',
                    'data': {
                        'tx': hash
                    }
                });
            }"
59735-7.sol,question,"function (receipt) {
                log('receipt for ' + receipt.transactionHash);
            }"
59735-7.sol,question,"function (error) {
                log(error);
            }"
84471-3.sol,question,"function checkWork() {
    if (eth.getBlock(""pending"").transactions.length > 0) {
        txBlock = eth.getBlock(""pending"").number
        if (eth.mining) return;
        console.log(""  Transactions pending. Mining..."");
        miner.start(mining_threads)
        interval = setInterval(function () {
            if (eth.getBlock(""latest"").number < txBlock + minimum_confirmations) {
                if (eth.getBlock(""pending"").transactions.length > 0) txBlock = eth.getBlock(""pending"").number;
            } else {
                console.log(minimum_confirmations + "" confirmations achieved; mining stopped."");
                miner.stop()
                clearInterval(interval);
            }
        }, 600)
    }
}"
84471-3.sol,question,"function () {
            if (eth.getBlock(""latest"").number < txBlock + minimum_confirmations) {
                if (eth.getBlock(""pending"").transactions.length > 0) txBlock = eth.getBlock(""pending"").number;
            } else {
                console.log(minimum_confirmations + "" confirmations achieved; mining stopped."");
                miner.stop()
                clearInterval(interval);
            }
        }"
84471-3.sol,question,"function (err, block) { checkWork(); }"
67407-0.sol,question,"function getBalance(address) {
    let destinationBalanceWei = await web3.eth.getBalance(address);
    let destinationBalance = web3.utils.fromWei(destinationBalanceWei, 'ether');
    return destinationBalance;
}"
67407-0.sol,question,"function (error, signedTx) {
        if (error) {
            log(`${error}`.red);
        } else {
            web3.eth.sendSignedTransaction(signedTx.rawTransaction)
                .on('confirmation', function (number) {
                    log(`Success: ${number}`.green);

                });

            
            
        }
    }"
67407-0.sol,question,"function (number) {
                    log(`Success: ${number}`.green);

                }"
67407-0.sol,question,"function(err){
        log(`${err}`.red);
    }"
60158-0.sol,question,"function Token(address _crowdSaleAddress) public {

        locked = true;  
        totalSupply = 300000000e18; 
        name = ""TGAME""; 
        symbol = ""TGAME""; 
        decimals = 18; 
        crowdSaleAddress = _crowdSaleAddress;                             
        balances[crowdSaleAddress] = totalSupply;
    }"
76693-0.sol,question,"function (hash) {
            console.log(""TX RECEIVED:"", hash)
        }"
76693-0.sol,question,"function (receipt) {
            console.log(""RECEIPT:\n"", receipt)
        }"
76693-0.sol,question,"function (error) {
            console.log(""ERROR\n:"", error)
        }"
83914-0.sol,question,"function App() {
const providerOptions = {};
const web3Modal = new Web3Modal({
  network: ""mainnet"", 
  cacheProvider: true, 
  providerOptions 
});

  const [account, setAccount] = useState('');
  async function connect() {
    try {
      const provider = await web3Modal.connect();
      const web3 = new Web3(provider);
      const accounts = await web3.eth.getAccounts();
      setAccount(accounts[0]);
    } catch (err) {
      console.error(err);
    }
  }


  useEffect(() => {
    if (window.web3) {
      connect();
    }
  }, []);

   async function disconnect() {
    const clear = await web3Modal.clearCachedProvider();
  }

  return (
    <div>
     <Navbar account={account} connect={connect} disconnect={disconnect} />
    </div>
  );
}"
83914-0.sol,question,"function connect() {
    try {
      const provider = await web3Modal.connect();
      const web3 = new Web3(provider);
      const accounts = await web3.eth.getAccounts();
      setAccount(accounts[0]);
    } catch (err) {
      console.error(err);
    }
  }"
83914-0.sol,question,"function disconnect() {
    const clear = await web3Modal.clearCachedProvider();
  }"
83878-0.sol,question,"function requestWithdraw(uint value) public {
      require(value <= balances[msg.sender]);
      delete holded[msg.sender];
      hold(msg.sender, value);
      requestWithdraws[msg.sender]=value;
      emit requestedWithdrawal(msg.sender, value);
    }"
46545-0.sol,question,"function storeValue(uint value) {
    values.push(value);
}"
59945-0.sol,question,"function createStudents(string fname, string year, string hash, uint256 _ipfsHash) public {
Student memory student = Student(fname, year, hash);   
students.push(student);
studentInfo(fname, year, hash);
ipfsHash.push(_ipfsHash);
}"
35348-1.sol,question,"function() {
    var self = this;

    
    MetaCoin.setProvider(web3.currentProvider);
    Operator.setProvider(web3.currentProvider);

    
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      console.log(""Default account is : "" + account);
  });
  web3.eth.defaultAccount = account;


  MetaCoin.deployed().then(function (instance) {
    regulator = instance.address;
    console.log(""Regulator address : "" + regulator);
  }).catch(function (e) {
    console.log(e);
  })

  Operator.deployed().then(function (instance) {
    regulator = instance.address;
    console.log(""TollBoothOperator address : "" + regulator);
  }).catch(function (e) {
    console.log(e);
  })

}"
35348-1.sol,question,"function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      console.log(""Default account is : "" + account);
  }"
35348-1.sol,question,"function (instance) {
    regulator = instance.address;
    console.log(""Regulator address : "" + regulator);
  }"
76865-3.sol,question,"function setX(uint _newX) public {
    _dataLayer.setX(_newX);
    emit test(owner, msg.sender);
 }"
67354-1.sol,question,"function increaseTime(addSeconds) {
  const id = Date.now();

  return new Promise((resolve, reject) => {
    web3.currentProvider.sendAsync({
      jsonrpc: '2.0',
      method: 'evm_increaseTime',
      params: [addSeconds],
      id,
    }, (err1) => {
      if (err1) return reject(err1);

      web3.currentProvider.sendAsync({
        jsonrpc: '2.0',
        method: 'evm_mine',
        id: id + 1,
      }, (err2, res) => (err2 ? reject(err2) : resolve(res)));
    });
  });
}"
59531-0.sol,question,"function connect_socket() {
  socket = new WebSocket(ws_url);
  socket.on(""close"", connect_socket); 
  heartbeat();
}"
59531-0.sol,question,"function heartbeat() {
  if (!socket) return;
  if (socket.readyState !== 1) return;
  socket.send(""heartbeat"");
  setTimeout(heartbeat, 550000); 
}"
25732-0.sol,question,"function () payable { 
    
}"
41099-0.sol,question,"function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {
    require(_beneficiary != address(0));
    require(_weiAmount != 0);
  }"
52584-0.sol,question,"function signMessage(message, callback) {
  web3.personal.sign(""0x"" + message.toString(""hex""), web3.eth.defaultAccount,
    callback);
}"
77505-3.sol,question,"function (outputs, bytes) {
  if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {
    throw new Error('Returned values aren\'t valid, did it run Out of Gas? ' + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');
  }"
6871-0.sol,question,"function watchBalance() {
        var coinbase = web3.eth.coinbase;
        var originalBalance = web3.eth.getBalance(coinbase).toNumber();
        document.getElementById('coinbase').innerText = 'coinbase: ' + coinbase;
        document.getElementById('original').innerText = ' original balance: ' + originalBalance + '    watching...';
        web3.eth.filter('latest').watch(function() {
            var currentBalance = web3.eth.getBalance(coinbase).toNumber();
            document.getElementById(""current"").innerText = 'current: ' + currentBalance;
            document.getElementById(""diff"").innerText = 'diff:    ' + (currentBalance - originalBalance);
        });
    }"
6871-0.sol,question,"function() {
            var currentBalance = web3.eth.getBalance(coinbase).toNumber();
            document.getElementById(""current"").innerText = 'current: ' + currentBalance;
            document.getElementById(""diff"").innerText = 'diff:    ' + (currentBalance - originalBalance);
        }"
56747-0.sol,question,"function addValue(address a, bool b) public {
    values[a] = b;
    if (b)
        valuesTrue.push(a);
    else {
        for (uint i = 0; i < valuesTrue.length; i++) {
            if (valuesTrue[i] == a) {
                valuesTrue[i] = valuesTrue[valuesTrue.length - 1];
                delete valuesTrue[valuesTrue.length - 1];
                valuesTrue.length--;
                break;
            }
        }
    }
}"
43275-1.sol,question,"function addLoan(address _newLoan) public {
        
        Loan myLoan = Loan(_newLoan);
        loans.push(myLoan) -1;
        originatorLoanBalance += myLoan.getBalance();

    }"
43275-1.sol,question,"function makeLoan(bytes16 _loanID, address _borrower, uint _loanBalance) payable public {
    
    Loan myLoan = new Loan(_loanID, _borrower, address(this), _loanBalance);

    
    loans.push(myLoan) -1;

    
    addLoan(address(myLoan));

    
    if (!_borrower.send(_loanBalance)) {
        revert();
    }

}"
52985-0.sol,question,"function (deployer, _, accounts) {

    var kycSigner = [],
        wallet = accounts[1],
        startTime = web3.eth.getBlock('latest').timestamp,
        endTime = startTime + (86400 * 30), 
        price = 18000

    
    deployer.deploy(MyTok).then(function() {
        return deployer.deploy(MyTok_Crowdfund, kycSigner, MyTok.address, 
          wallet, price, startTime, endTime)
    })
}"
52985-0.sol,question,"function() {
        return deployer.deploy(MyTok_Crowdfund, kycSigner, MyTok.address, 
          wallet, price, startTime, endTime)
    }"
67474-4.sol,question,"function getProject() {

    const BigNumber = require('bignumber.js');

    
    BigNumber.set({ DECIMAL_PLACES: 16 })
    let x = new BigNumber(1);

    var b = ProjectContractInstance.getProject(hexString ,function(error, result) {
        if(!error) {
            console.log(JSON.stringify(result));
            console.log(""no error"");
        } else {
            console.log(error);

            console.log(""error occurred"");
        }
    })
}"
67474-4.sol,question,"function(error, result) {
        if(!error) {
            console.log(JSON.stringify(result));
            console.log(""no error"");
        } else {
            console.log(error);

            console.log(""error occurred"");
        }
    }"
79841-0.sol,question,"function issueBlockReward() {
balanceOf[block.coinbase] += 0.25;
"
64295-0.sol,question,"function addBlackList (address _evilUser) public onlyOwner {
    isBlackListed[_evilUser] = true;
    emit AddedBlackList(_evilUser); 
}"
64295-0.sol,question,"function removeBlackList (address _clearedUser) public onlyOwner {
    isBlackListed[_clearedUser] = false;
    emit RemovedBlackList(_clearedUser);
}"
64295-0.sol,question,"function destroyBlackFunds (address _blackListedUser) public onlyOwner {
    require(isBlackListed[_blackListedUser]);
    uint dirtyFunds = balanceOf(_blackListedUser);
    balances[_blackListedUser] = 0;
    _totalSupply -= dirtyFunds;
    emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);
}"
60785-0.sol,question,"function(deployer, network, accounts) {
    deployer.deploy(FunnyToken, 1000000000000)
        .then(function(){
            storage.TOKEN_ADDRESS = FunnyToken.address;
            deployer.deploy(TokenSale, 1, accounts[0], FunnyToken.address).then(function () {
                storage.SALE_ADDRESS = TokenSale.address;
            });
        });

    console.log(""adresses:"")
    console.log(storage)
    fs.writeFileSync('.address.json',JSON.stringify(storage), 'utf-8');
}"
60785-0.sol,question,"function(){
            storage.TOKEN_ADDRESS = FunnyToken.address;
            deployer.deploy(TokenSale, 1, accounts[0], FunnyToken.address).then(function () {
                storage.SALE_ADDRESS = TokenSale.address;
            });
        }"
60785-0.sol,question,"function () {
                storage.SALE_ADDRESS = TokenSale.address;
            }"
73718-0.sol,question,"function createNewUser(string memory _userId) public {
    
    emit NewUser(_userId);
}"
77882-0.sol,question,"function deposit1(address reciver) public payable {
        require(msg.value == 5 ether);
        require(reciver == rec);
        reciver.transfer(msg.value);
        player1 = msg.sender; 
        hasRight1 = true;
     }"
77882-0.sol,question,"function deposit2(address reciver) public payable {
        require(msg.value == 5 ether);
        require(reciver == rec);
        reciver.transfer(msg.value);
        player2 = msg.sender; 
        hasRight2 = true;
     }"
77882-0.sol,question,"function rps() public
    {   
        gameResult[""rock""][""rock""] = 0;
        gameResult[""rock""][""paper""] = 2;
        gameResult[""rock""][""scissors""] = 1;
        gameResult[""paper""][""rock""] = 1;
        gameResult[""paper""][""paper""] = 0;
        gameResult[""paper""][""scissors""] = 2;
        gameResult[""scissors""][""rock""] = 2;
        gameResult[""scissors""][""paper""] = 1;
        gameResult[""scissors""][""scissors""] = 0;
    }"
77882-0.sol,question,"function play (string choice) public 
    {     
        if (msg.sender == player1&&hasRight1 == true)
            choice1 = choice;
        else if (msg.sender == player2 &&hasRight2 == true)
            choice2 = choice;

    }"
77882-0.sol,question,"function sendReward()  public payable
    {
        if (bytes(choice1).length != 0 && bytes(choice2).length != 0)
        {

            int winner = gameResult[choice1][choice2];
            if (winner == 1)

                player1.transfer(10 ether);
            else if (winner == 2)
                player1.transfer(10 ether);
            else
            {
                player1.transfer(5 ether);
                player2.transfer(5 ether);

            }


        }
    }"
26758-1.sol,question,"function singleMethod() {
    $data = [
       'item1' => getItem1(),
       'item2' => getItem2(),
       'item3' => getItem3()
    ];
return $data;
}"
66114-2.sol,question,"function (instance) {

 
  return instance.mint(account, randomtoken, { from: account, gas: 4600000 }).then(function (result) {

    console.log('Result = ' + JSON.stringify(result));

  })
}"
66114-2.sol,question,"function (result) {

    console.log('Result = ' + JSON.stringify(result));

  }"
82939-2.sol,question,"function BuyTokens(uint _numberOfTokens)public payable{
    
    require(msg.value == mul(_numberOfTokens,tokenPrice),'');
    
    require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'');
    
    require(tokenContract.transfer(msg.sender,_numberOfTokens),'');
    
    tokenSold += _numberOfTokens;
    
    emit Sell(msg.sender,_numberOfTokens);
}"
44665-0.sol,question,"function sell(uint256 amount) public {
    require(address(this).balance >= amount * sellPrice);      
    _transfer(msg.sender, this, amount);              
    msg.sender.transfer(amount * sellPrice);          
}"
67773-2.sol,question,"function updateManagedWallets(address wallet, address owner) public isOwner {
    _managedWallets[wallet] = owner;
}"
82203-0.sol,question,"function kill() public {
    if (msg.sender == owner)
    
        selfdestruct(owner);
        
}"
28610-2.sol,question,"function dumpDiff() {
    var i,end;
    var block;

    end=web3.eth.blockNumber;
    var prev_ts=0;
    var seconds;
    for (i=0;i<end;i++) {
        block=web3.eth.getBlock(i,true);
        seconds=block.timestamp-prev_ts
        console.log(block.difficulty+""\t""+block.timestamp+""\t""+seconds);
        prev_ts=block.timestamp;
    }
}"
78439-1.sol,question,"function saveUrl(string calldata _url) {
    ...
    uint _urlKeccak256 = uint(keccak256(abi.encode(_url)));
    urlMap[_urlKeccak256] = _url;

    NFT memory nft;
    nft.urlKeccak256 = _urlKeccak256;
}"
62386-0.sol,question,"function processHandEnd(bool _win) internal { 
    if (_win == false) {
        }
    else if (_win == true) {
        uint winAmount = betAmount[msg.sender] * 2;
        msg.sender.transfer(winAmount);
        payoutAmount[msg.sender]=winAmount;
    }
    gamestatus[msg.sender] = 5;
    isActive[msg.sender] = false;
    broadcastHand();
}"
65086-2.sol,question,"function UrbangoldToken() {
    balances[msg.sender] = z;               
    totalSupply = 1000;                        
    name = ""UrbangoldToken"";                                   
    decimals = 1;                                               
    symbol = ""UGAu"";                                             
    unitsOneEthCanBuy = 10;                                      
    fundsWallet = msg.sender;     
    update();
}"
65086-2.sol,question,"function __callback(bytes32 myid, string result) {
    if (msg.sender != oraclize_cbAddress()) throw;
    z = parseInt(result);
}"
65086-2.sol,question,"function update() payable {
    newOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");
    oraclize_query(""URL"", ""json(https:
}"
65086-2.sol,question,"function() payable{
    totalEthInWei = totalEthInWei + msg.value;
    uint256 amount = msg.value * unitsOneEthCanBuy;
    require(balances[fundsWallet] >= amount);

    balances[fundsWallet] = balances[fundsWallet] - amount;
    balances[msg.sender] = balances[msg.sender] + amount;

    Transfer(fundsWallet, msg.sender, amount); 

    
    fundsWallet.transfer(msg.value);                               
}"
80606-1.sol,question,"function (accounts) {
    it('transfers token ownership', function() {
        return ControlToken.deployed().then(function(instance) {
            let tokenInstance = instance;
            return tokenInstance.getTokens.call({ from: accounts[1] });
        }).then(function(success) {
            assert.equal(success, true, 'it returns true');
            return tokenInstance.balanceOf(accounts[1]);
        }).then(function (balance) {
            assert.equal(balance, 48, ""Balance should be 48"")
        });

    });
}"
80606-1.sol,question,"function() {
        return ControlToken.deployed().then(function(instance) {
            let tokenInstance = instance;
            return tokenInstance.getTokens.call({ from: accounts[1] });
        }).then(function(success) {
            assert.equal(success, true, 'it returns true');
            return tokenInstance.balanceOf(accounts[1]);
        }).then(function (balance) {
            assert.equal(balance, 48, ""Balance should be 48"")
        });

    }"
80606-1.sol,question,"function(instance) {
            let tokenInstance = instance;
            return tokenInstance.getTokens.call({ from: accounts[1] });
        }"
80606-1.sol,question,"function(success) {
            assert.equal(success, true, 'it returns true');
            return tokenInstance.balanceOf(accounts[1]);
        }"
80606-1.sol,question,"function (balance) {
            assert.equal(balance, 48, ""Balance should be 48"")
        }"
63164-0.sol,question,"function functionX() public {
 10000000000000000000000 + 10000000000000000000000;
}"
63164-0.sol,question,"function cloneFunctionXGasCost() public {

1 + 1;
someKindOfPaddingComputationToMakeThisFunctionCostTheSameAsFunctionX;
}"
52020-0.sol,question,"function invest() payable { 

    value = msg.value / 1000000000000000000;
    counter += value;
    if(value >0 && value < 3){
         lastdonation = msg.sender;
        if(counter  % 5 == 0){
            winner = msg.sender;
            winnerbool =true;
            message = ""congratulation you won 3 Ether"";
            
            winner.send(msg.value);

        }else{
            bank.send(msg.value);
            winnerbool= false;
            message = ""No luck. Try it again"";
        }
           }
        else{
           message = ""Transaktion not possible. it is just possible to input 
integer ether of one or two."";
        }
    }"
71620-2.sol,question,"function() {

    return await App.initWeb3();
  }"
71620-2.sol,question,"function(data) {
      
      var CoursetroArtifact = data;
      App.contracts.Coursetro = TruffleContract(CoursetroArtifact);

      
      App.contracts.Coursetro.setProvider(App.web3Provider);

    }"
71620-2.sol,question,"function(event) {
    event.preventDefault();

    var setInstructorInstance;

      App.contracts.Coursetro.deployed().then(function(instance) {
        setInstructorInstance = instance;


        return setInstructorInstance.setInstructor($(""#name"").val(), $(""#age"").val()) && App.retreiveInstructor();
      }).catch(function(err) {
        console.log(err.message);
      });


   }"
71620-2.sol,question,"function(instance) {
        setInstructorInstance = instance;


        return setInstructorInstance.setInstructor($(""#name"").val(), $(""#age"").val()) && App.retreiveInstructor();
      }"
71620-2.sol,question,"function (resolve, reject) {
                        if (getInstructorInstance.getInstructor()) {


                        resolve(true); 
                        } else {
                        var reason = new Error('could not retrieve data');
                        reject(reason); 
                        }

                }"
71620-2.sol,question,"function(result) { $(""#instructor"").html(result[0]+' ('+result[1]+' years old)'); }"
71620-2.sol,question,function(error) { ; }
71620-2.sol,question,"function () {
    App.init();
  }"
57083-3.sol,question,"function set(bytes32 _v) {\n        ...
      JUMPDEST          function set(bytes32 _v) {\n        ...
      POP           function set(bytes32 _v) {\n        ...
      JUMP [out]            function set(bytes32 _v) {\n        ...
    .data"
11445-2.sol,question,"function add_cluster() {
     cluster_constract[msg.sender] = list;
  }"
11445-2.sol,question,"function deleteAll() { 
     cluster_constract[msg.sender].deleteAll();        
  }"
57847-0.sol,question,"function _transfer(address _from, address _to, uint _value) internal {
    
    require(_to != 0x0);
    
    require(balanceOf[_from] >= _value);
    
    require(balanceOf[_to] + _value > balanceOf[_to]);
    
    uint previousBalances = balanceOf[_from] + balanceOf[_to];
    
    balanceOf[_from] -= _value;
    
    balanceOf[_to] += _value;
    Transfer(_from, _to, _value);
    
    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
}"
48886-1.sol,question,"function InReturn(uint256 a,uint256 b,uint256 c) public payable { 

   

   
    bal = (a*c*100000000000000)/b;

    iwallet.transfer(bal);


}"
39989-1.sol,question,"function (string str) {
  return bytes(hex(str))
}"
79081-0.sol,question,"function sellPrice() {
    web3.eth.getAccounts(function (error, accounts) {
        contract.sellPrice(address, function(err, result) {
            if(err) {
                console.log(err, 'err');
            } else {
                document.getElementById('sell_price').innerHTML = result;
            }
        });
    });
}"
79081-0.sol,question,"function (error, accounts) {
        contract.sellPrice(address, function(err, result) {
            if(err) {
                console.log(err, 'err');
            } else {
                document.getElementById('sell_price').innerHTML = result;
            }
        });
    }"
79081-0.sol,question,"function(err, result) {
            if(err) {
                console.log(err, 'err');
            } else {
                document.getElementById('sell_price').innerHTML = result;
            }
        }"
84155-0.sol,question,"function transferFundOnResolve(uint cid) private {
        
        if(complainMap[cid]._reward > 0) {
            if(policeAccounts[complainSolver[cid]] != true) {
                complainSolver[cid].transfer( complainMap[cid]._reward );
                complainMap[cid]._reward = 0;
            }
            else {
                for(uint i=0; i<complainMap[cid]._contributors.length; i++) {
                    complainMap[cid]._contributors[i].transfer( complainMap[cid]._contAmount[i] );
                }
                complainMap[cid]._reward = 0;

            }
        }
    }"
72455-0.sol,question,"function done() onlyOwner public{
    require (state == State.Active, ""Contract still working."");
    state = State.WinnerSelected;
}"
72455-0.sol,question,"function withdraw() external onlyOwner payable{
    require (state == State.WinnerSelected, ""Contract not closed to withdraw."");
    owner.transfer((address(this).balance));
}"
72455-0.sol,question,"function release() public {
    require(payments[msg.sender] > 0, 'Sender has not paid into escrow.');
    require(released[msg.sender] == 0, 'Sender has already released funds.');
    released[msg.sender] = payments[msg.sender];
    
}"
61276-0.sol,question,"function CollectERC20(address tokenAddress) onlyAdmin public {
    token tokenFunctions = token(tokenAddress);
    uint256 tokenBal = tokenFunctions.balanceOf(address(this));
    tokenFunctions.transfer(msg.sender, tokenBal);
}"
43895-0.sol,question,"function addToFoo(int value) public {
   foo += value
}"
46274-0.sol,question,"function send() {
    Web3.providers.HttpProvider.prototype.sendAsync = Web3.providers.HttpProvider.prototype.send;
    var web3 = new Web3(""http:
    var data = web3.eth.getHashrate();
    alert(data);
}"
66415-0.sol,question,"function withdrawBalance() external {
    address payable nftAddress = address(nonFungibleContract);
    nftAddress.send(address(this).balance);
}"
12190-0.sol,question,"function (err, hash) {
                console.log('transaction hash is', hash);
            }"
63493-3.sol,question,"function writeElem() public {
   test1.push(""t1"");
   test2.push(""t2"");
}"
9796-2.sol,question,"function connect(host, port) {
  uri = 'http:
  if (typeof web3 !== 'undefined') {
    web3 = new Web3(web3.currentProvider);
  }
  else {
    
    process.stdout.write('Setting Http provider : ' + uri + ""\n"")
    var prov = new Web3.providers.HttpProvider(uri);
    web3 = new Web3(prov);
  }

  if(!web3.isConnected()) {
    process.stdout.write('Cannot reach ' + uri + ""\n"");
    return false;
  }
  else {
    process.stdout.write('Connected to ' + uri + ""\n"");
    return true;
  }
}"
78248-2.sol,question,"function dep(0) {
var params;
const contract = new web3.eth.Contract(myAbi[0]);

      if(constructorParams[0]=='') {
          params = '0x' + myBin[0]
      } else {
          params = '0x' + myBin[0]+constructorParams[0]
      }


        try {
        await web3.eth.sendTransaction(
            {from:account1,
            data: params
                }, function(err, receipt) {console.log(receipt)});
        } catch (error) {
        console.log("" ERROR !"", error); 
        }
}"
78248-2.sol,question,"function(err, receipt) {console.log(receipt)}"
9383-2.sol,question,"function pongCreated() {
    this.pong = new ReactiveVar(ppInst.pong());
}"
69490-9.sol,question,"function addTestData() external onlyOwner {
    addData(""House001"", ""via Roma 2, Milano"", 0,1, 20190504);"
61389-2.sol,question,"function _addUser(address account) internal {
    users.add(account);
    emit UserAdded(account);
  }"
76660-1.sol,question,"function addCanditate(string memory _name) ownerOnly public {
        candidates.push(Candidate(_name, 0)); 
}"
16200-0.sol,question,"function () payable {
        PayableCalled(true)   
        if (crowdsaleClosed) throw;
        uint amount = msg.value;
        balanceOf[msg.sender] = amount;
        amountRaised += amount;
        Transaction(msg.sender,msg.value,amountRaised)
        tokenReward.transfer(msg.sender, amount / price);
        FundTransfer(msg.sender, amount, true);
    }"
76312-1.sol,question,"function find () {
  hashForFile(function (err, hash) {
    notary_find(hash, function(err, resultObj) {
      if (resultObj.blockNumber != 0) {
        $(""#responseText"").html(""<p>File fingerprint found on Ethereum blockchain.</p>""
            ""<p>File Hash Value: ""   hash   ""</p>""
            ""<p>Block No.: ""   resultObj.blockNumber   ""</p>""
            ""<p>Timestamp: ""   resultObj.mineTime   ""</p>""
        );
      } else {
        $(""#responseText"").html(""<p>File fingerprint not found on Ethereum blockchain.</p>""
            ""<p>File Hash Value: ""   hash   ""</p>""
        );
      }
    });
  });
}"
76312-1.sol,question,"function (err, hash) {
    notary_find(hash, function(err, resultObj) {
      if (resultObj.blockNumber != 0) {
        $(""#responseText"").html(""<p>File fingerprint found on Ethereum blockchain.</p>""
            ""<p>File Hash Value: ""   hash   ""</p>""
            ""<p>Block No.: ""   resultObj.blockNumber   ""</p>""
            ""<p>Timestamp: ""   resultObj.mineTime   ""</p>""
        );
      } else {
        $(""#responseText"").html(""<p>File fingerprint not found on Ethereum blockchain.</p>""
            ""<p>File Hash Value: ""   hash   ""</p>""
        );
      }
    });
  }"
76312-1.sol,question,"function(err, resultObj) {
      if (resultObj.blockNumber != 0) {
        $(""#responseText"").html(""<p>File fingerprint found on Ethereum blockchain.</p>""
            ""<p>File Hash Value: ""   hash   ""</p>""
            ""<p>Block No.: ""   resultObj.blockNumber   ""</p>""
            ""<p>Timestamp: ""   resultObj.mineTime   ""</p>""
        );
      } else {
        $(""#responseText"").html(""<p>File fingerprint not found on Ethereum blockchain.</p>""
            ""<p>File Hash Value: ""   hash   ""</p>""
        );
      }
    }"
28382-0.sol,question,"function changeValue(uint newValue) public {
        value1 = newValue;
    }"
66241-0.sol,question,"function (err, files) {

                  if (err || !files) {
                        return reject('upload failed');
                    };
 var obj;
for (i = 0; i < data.length; i++) {
    obj = { ""id"": i, ""hash"": data[i], ""EID"": formFields.EID };
    tt.push(obj);
}
ipfs.dag.put(tt, {}, (err, cid) => {
    console.log(cid.toBaseEncodedString());
    const adr = cid.toBaseEncodedString();
    var dTimeStamp = new Date().getTime();
ipfs.key.gen(dTimeStamp, {
type: 'rsa',
size: 2048
}, (err, key) => {
    if (err != null) {
        console.log(err)
        }

    console.log(""ipfs Key: "", key.id + "" key name : "" + key.name);

    var keyVall = key.id;


ipfs.name.publish(adr, { key: keyVall }, (err, pVal) => {


        console.log(""published hash : "" + pVal);

        var ipfsHash = pVal.name;


    return resp.json({ status: 'SUCCESS', message: 'user has been created successfully', digitalID: pVal });
});
});
});

}"
77083-0.sol,question,"function send(address receiver, uint amount) public {
    require(msg.sender == owner);
    balances[receiver] += amount;
    emit Sent(msg.sender, receiver, amount);
}"
1316-0.sol,question,"function mint(address receiver, uint amount) {
        if (msg.sender != minter) return;
        balances[receiver] += amount;
    }"
28573-1.sol,question,"function (resp) {
    
    console.log(resp);
}"
80243-0.sol,question,"function buy() {
  var a = document.getElementById(""amount"").value;
  var b = a *100000000;
  var accounts= await web3.eth.getAccounts();
  console.log(accounts);
  var contract = new web3.eth.Contract(abi,address);

  contract.methods.buy(b, ""0x0000000000000000000000000000000000000000"").send(
    {from:accounts[0]},
    function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""You bought  :"" + approve)
      }
  });
}"
80243-0.sol,question,"function(error, approve){
      if(error){
        console.log(error)
      } else if(approve){
        console.log(""You bought  :"" + approve)
      }
  }"
79220-1.sol,question,"function (error, result) {
    console.log(result)
}"
59173-0.sol,question,"function (err, result) {

}"
59348-0.sol,question,"function buy(uint minPurchaseReturn) public payable {
    uint amount = formulaContract.calculatePurchaseReturn(
        (tokenContract.totalSupply() - uncirculatedSupplyCount) - tokenContract.balanceOf(this),
        (address(this).balance + virtualReserveBalance) - msg.value,
        weight,
        msg.value);
    amount = (amount - ((amount * fee) / 1000000));

    
    require (enabled);
    require (amount >= minPurchaseReturn);
    require (tokenContract.balanceOf(this) >= amount);

    
    collectedFees += (msg.value * fee) / 1000000;

    emit Buy(msg.sender, msg.value, amount);
    tokenContract.transfer(msg.sender, amount);
}"
34115-0.sol,question,"function createTokens () payable {
    require(msg.value >0);

    uint256 tokens = msg.value.mul(RATE);
    balances[msg.sender] = balances[msg.sender].add(tokens);

    owner.transfer(msg.value);
  }"
46177-0.sol,question,"function addForestApprover(address _forestApprover) public onlyOwner {
    forestApprover[_forestApprover] = true;
}"
33653-0.sol,question,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(validPurchase());

    uint256 weiAmount = msg.value;

    
    uint256 tokens = weiAmount.mul(rate);

    
    weiRaised = weiRaised.add(weiAmount);

    
    ERC20(token).transfer(this, tokens); 

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    forwardFunds();
}"
34452-0.sol,question,"function transfer(address _to, uint _value, bytes _data) {
    
    
    uint codeLength;

    assembly {
        
        codeLength := extcodesize(_to)
    }

    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    if(codeLength>0) {
        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
        receiver.tokenFallback(msg.sender, _value, _data);
    }
    Transfer(msg.sender, _to, _value, _data);
}"
64036-1.sol,question,"function revealWinners() onlyOwner returns {                       
     for (uint id = 0; id < 3; id++) { 
         Item storage currentItem=items[id]; 
         if (currentItem.itemTokens.length != 0){
             uint randomIndex = (block.number / currentItem.itemTokens.length)% currentItem.itemTokens.length; 
             uint winnerId = currentItem.itemTokens[randomIndex];
             winners[id] = winners[winnerId];               
        }
    }
}"
65662-1.sol,question,"function createExample

function callExampleContract() {
    var param = parseInt(document.getElementById('value').value);

    myContract.getWord(param, function(err, result) {
      if (err) {
        console.log('e: ' + err);
      } else {
        console.log('r: ' + result);
      }
    });
}"
65662-1.sol,question,"function(err, result) {
      if (err) {
        console.log('e: ' + err);
      } else {
        console.log('r: ' + result);
      }
    }"
74586-0.sol,question,"function set(uint currentTs) public {
    require(msg.sender == owner);
    ts = currentTs;
}"
76245-0.sol,question,"function setEvent() public {
    
    myEvents.push(now) -1;

    uint totalBalance = getTotalBalance();

    emit myEvent(now, msg.sender, myArray, totalBalance);
    }"
41700-1.sol,question,"function doSomething (uint value, bytes32 uid) {
    if(value > balance) {
        ErrorMessage(uid, 'SomeErrorCode');
        revert();
    }
}"
58647-0.sol,question,"function doSomething(uint _taskId) {
  taskId = _taskId;
  emit DidSomething(taskId);
}"
42840-1.sol,question,"function Token() public {
        Ownable(msg.sender);
        balances[msg.sender] = TOTALSUPPLY; 
        emit Transfer(address(0), msg.sender, TOTALSUPPLY); 
    }"
26105-0.sol,question,"function CallstackExploit (int counter) {
    if (counter < 1023) {
        if (counter > 0) {
            self.CallstackExploit.gas(msg.gas-2000)(counter+1);
        } else {
            self.CallstackExploit(counter+1);
        }
    } else {
        
    }
  }"
12605-2.sol,question,"function() {
    var self = this;

    
    WeatherApiCall.setProvider(web3.currentProvider);

   
   web3.eth.getAccounts(function(err, accs) {
          if (err != null) {
             alert(""There was an error fetching your accounts."");
             return;
          }

         if (accs.length == 0) {
               alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
               return;
         }

          accounts = accs;
          account = accounts[0];
     });
  }"
12605-2.sol,question,"function(err, accs) {
          if (err != null) {
             alert(""There was an error fetching your accounts."");
             return;
          }

         if (accs.length == 0) {
               alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
               return;
         }

          accounts = accs;
          account = accounts[0];
     }"
12605-2.sol,question,"function(instance) {

                          console.log(""Initializing"");
                          instance.update(to,datetime, {from: account, gas: 3000000, value: web3.toWei(1, 'ether')})
                               .then(function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");
                                       return queryRecheck(instance);
                                 }).then(function(events) {
                                       console.log(events);
                                 });
                       }"
12605-2.sol,question,"function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");
                                       return queryRecheck(instance);
                                 }"
12605-2.sol,question,"function(events) {
                                       console.log(events);
                                 }"
59741-0.sol,question,"function() {
        if (typeof window.web3 === 'undefined') {
            document.getElementById('meta-mask-required').innerHTML = 'You need <a href=""https:
        }
        }"
59741-0.sol,question,"function send() {
        web3.eth.sendTransaction({
            from: web3.eth.coinbase,
            to: '0xE767aEB31dAAF66366999F72FB5De2CEEA76c277',
            value: web3.toWei(document.getElementById(""amount"").value, 'ether')
        }, function(error, result) {
            if (!error) {
            document.getElementById('response').innerHTML = 'Success: <a href=""https:
            } else {
            document.getElementById('response').innerHTML = '<pre>' + error + '</pre>'
            }
        })
        }"
59741-0.sol,question,"function(error, result) {
            if (!error) {
            document.getElementById('response').innerHTML = 'Success: <a href=""https:
            } else {
            document.getElementById('response').innerHTML = '<pre>' + error + '</pre>'
            }
        }"
38917-1.sol,question,"function deleteSomebody(address _address) {
    delete isSomebody[_address];
}"
63116-2.sol,question,"function test2(address _addr) public {
    _interAddr = _addr;
}"
63208-0.sol,question,"function getPickWinner() public {

    var test = numbers;
    var largest = 0;
    var i;

    for (i = 0; i < test.length; i++) {
        if (test[i] > largest) {
            largest = test[i];
    }
}"
2584-2.sol,question,"function checkAllBalances() { 
var i =0; 
eth.accounts.forEach( function(e){
     console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" + web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
i++; 
})
}"
2584-2.sol,question,"function(e){
     console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" + web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
i++; 
}"
64323-1.sol,question,"function () {
const self = this
const from = ""0xf731eC19279849312A163793d4E4a58878A21558"";
const receiver = document.getElementById('receiver').value.toString()
const amount = parseInt(document.getElementById('amount').value)
const fee = parseInt(document.getElementById('fee').value)
const nonce = parseInt(""12345"")

let erc865
erc865Token.deployed().then(function (instance) {
erc865 = instance
console.log(erc865);
const token = erc865.address.toString()
return erc865.transferFromPreSignedHashing(token,from, receiver,    amount, fee, nonce)
}).then(function (hash) {
web3.eth.sign(account, hash, function(error, signature) {
            if (!error) {
              console.log(""Hash:""+hash);
              console.log(""Signature:""+signature);
      self.setSign(signature)
            } else {
              console.log(error);
            }
          });
})
}"
64323-1.sol,question,"function (instance) {
erc865 = instance
console.log(erc865);
const token = erc865.address.toString()
return erc865.transferFromPreSignedHashing(token,from, receiver,    amount, fee, nonce)
}"
64323-1.sol,question,"function (hash) {
web3.eth.sign(account, hash, function(error, signature) {
            if (!error) {
              console.log(""Hash:""+hash);
              console.log(""Signature:""+signature);
      self.setSign(signature)
            } else {
              console.log(error);
            }
          });
}"
64323-1.sol,question,"function(error, signature) {
            if (!error) {
              console.log(""Hash:""+hash);
              console.log(""Signature:""+signature);
      self.setSign(signature)
            } else {
              console.log(error);
            }
          }"
64323-1.sol,question,"function (e) {
  console.log(e)
  self.setStatus('Error sending coin; see log.')
}"
47960-1.sol,question,"function d(uint num) external pure {
    num += 2; 
}"
41932-0.sol,question,"function foo(uint _param1) payable {
     require(msg.value == 1000);
     someArray.push(x);
 }"
46682-0.sol,question,"function ABCICO(address tokenAddress, address founderAddress) {
    
    ABCToken = ABCToken(tokenAddress);

    
    founder = founderAddress;
}"
46682-0.sol,question,"function () payable {
    throw;
}"
64790-0.sol,question,"function selectionW1(address subscribersW1, uint subscriberWheelW1) public  {

    require (subscriberWheelW1 == 1 && subscriberListW1.length < 2);
    subscriberListW1.push(subscribersW1);
    subscriberstructsW1[subscribersW1].W1 = subscriberWheelW1;

}"
72386-0.sol,question,"function (log) {
        console.log(log);
    }"
72386-0.sol,question,"function (error, success) {
    if (success)
        console.log('Successfully unsubscribed!');
}"
79884-0.sol,question,"function run() {
    const web3      = new Web3(NODE_ADDRESS, net);
    let nonce_count = await web3.eth.getTransactionCount(SEND_ACCOUNT);

    const lines     = fs.readFileSync(INPUT_FILE, {encoding: ""utf8""}).split(os.EOL);
    for (const line of lines) {
        const [id, address, balance] = line.split("","");
        const options = {
            to       : address,
            value    : balance,
            gasPrice : 1000000000,
            gas      : 21000,
            nonce    : nonce_count
        };
        const signed  = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
        const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
        console.log(""Address:"",address,""Balance:"",balance,""Nonce:"",nonce_count);
        nonce_count++
    }
}"
6697-2.sol,question,"function (data) {
    if (!this.provider) {
        console.error(errors.InvalidProvider());
        return null;
    }"
39874-0.sol,question,"function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) {
      
      bytes32 hash = sha256(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce);
      if (!(
              (orders[user][hash] || ecrecover(sha3(""\x19Ethereum Signed Message:\n32"", hash), v, r, s) == user) &&
              block.number <= expires &&
              safeAdd(orderFills[user][hash], amount) <= amountGet
          )) throw;
      tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);
      orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);
      Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);
  }"
82747-1.sol,question,"function send(web3, account, transaction) {
        while (true) {
            try {
                const options = {
                    data: transaction.encodeABI(),
                    
                    gas: 2100000,
                    gasPrice: 10000000000,
                };
                const signed = await web3.eth.accounts.signTransaction(options, account.privateKey);
                const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
                return receipt;
            }
            catch (error) {
                return error
            }
        }
    }"
82747-1.sol,question,"function run() {
        try {
            const web3 = new Web3(NODE_ADDRESS);
            const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
            const contract = new web3.eth.Contract(abi, reqdata.contractAddr);
            const transaction = contract.methods.signAgreement(reqdata.signerPubKey);
            const receipt = await send(web3, account, transaction);
            console.log(JSON.stringify(receipt, null, 4));
            if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
                web3.currentProvider.connection.close();
            if (receipt) {
                next(null, receipt)
            }
        } catch (error) {
            next(error, null)
        }  
    }"
13343-0.sol,question,"function TheEthereumLottery() {
  owner = msg.sender;
  ledger.length = 0;
  IndexOfCurrentDraw = 0;
  referral_fee = 90;
}"
33507-2.sol,question,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));

    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
    token = createTokenContract();
}"
70333-0.sol,question,"function (error) {
                                        console.log('Error: ', JSON.stringify(error));
                                    }"
3985-0.sol,question,"function (err, pwDerivedKey) {
      var seed = lightwallet.keystore.generateRandomSeed();
      var keystore = new lightwallet.keystore(seed, pwDerivedKey);

      keystore.generateNewAddress(pwDerivedKey);
      account.address = keystore.getAddresses()[0];
      account.prv_key = keystore.exportPrivateKey(sendingAddr, pwDerivedKey);
    }"
47869-0.sol,question,"function finish(address _teamFund, address _ecosystemFund, address _bountyFund) public onlyOwner {

      require(!isFinalized);
      uint256 alreadyMinted = token.totalSupply();
      require(alreadyMinted < maxTokens);

      uint256 unsoldTokens = totalTokensForSale - alreadyMinted;
      if (unsoldTokens > 0) {
        tokensForEcosystem = tokensForEcosystem + unsoldTokens;
      }

      token.mint(_teamFund,tokensForTeam);
      token.mint(_ecosystemFund,tokensForEcosystem);
      token.mint(_bountyFund,tokensForBounty);
      finalize();
  }"
65296-0.sol,question,"function getWinners() public onlyOwner {
    require (now > endQuiztime, 'Quiz did not end ');
    require (isReveal, ""You didnt reveal Questions"");

    
    uint winner = 0;
    uint i;
    for(i = 0; i < 4; i++) {
        uint prev = 2**256 - 1;
        for(uint j = 1; j <= numPlayers; j++) {
            if(answers[i] == keccak256(abi.encodePacked(Players[j].choice[i],secret)) && Players[j].timestamp < prev) {
                prev = Players[j].timestamp;
                winner = j;
            }
        }
        if(winner > 0) {
            uint prize = (3 * quizFee * numPlayers) / 16;
            pendingAmount[Players[winner].account] += prize;
        }
    }
    
    for(i = 1; i <= numPlayers; i++) {
        uint amount = pendingAmount[Players[i].account];
        emit Collected(Players[i].account, amount);

        if(amount > 0) {
            pendingAmount[Players[i].account] = 0;
            Players[i].account.payable(amount);
        }
    }
    
    selfdestruct(owner);
}"
43049-2.sol,question,"function (accounts) {
  let owner = accounts[0];
      it(""should TestChainCoin be deployed first"", function() {
        return testChainCoin.deployed().then(function(instance) {
        testChainInstance=instance;
        });
      });

     it(""should StandardToken be deployed first"", function() {
        return standardToken.deployed().then(function(instance) {
            standTokenInstance=instance;
        });
      });

      it('should return balance of user', async () => {
      let userBal= await standTokenInstance.balanceOf.call(accounts[0]);
      console.log(""the balance of user---""+userBal);
      assert(balanceFinal<= 100 && balanceFinal>0, 'balance should not be zero');
      });"
43049-2.sol,question,"function() {
        return testChainCoin.deployed().then(function(instance) {
        testChainInstance=instance;
        });
      }"
43049-2.sol,question,"function(instance) {
        testChainInstance=instance;
        }"
8663-1.sol,question,"function L_i (LStruct storage _s) public {
        _s.i++;
    }"
79197-0.sol,question,"function betOnTeam(uint team) public {
  emit LogInfo(""Inside betOnTeam-----------"");
  if(team == 1) {
    update();
  }
}"
80722-1.sol,question,"function addCommentToNewest(web3, privateKey2, comment) {
    const account = web3.eth.accounts.privateKeyToAccount(privateKey2);
    const receipt = await send(web3, account, contract.methods.addCommentToNewest(comment));
    console.log(JSON.stringify(receipt, null, 4));
}"
57953-0.sol,question,"function (error, result) {
        var name = result;
        this.setState({ firstName: name });


    }"
25077-1.sol,question,"function collect() auth {
        assert(today() > 0); 
        exec(msg.sender, this.balance);
        LogCollect(this.balance);
    }"
16621-0.sol,question,"function(accounts) {
  it(""should allow purchase"", async function () {
    var expected = 10;
    var meta = ERCToken.deployed();
    var result = await meta.purchase({from:accounts[0],value:80000});
    var balance = await meta.balanceOf(accounts[0]);
    assert.equal(balance.valueOf(),expected,""should have purchased ""+ expected + ""tokens"");
  });
}"
16621-0.sol,question,"function () {
    var expected = 10;
    var meta = ERCToken.deployed();
    var result = await meta.purchase({from:accounts[0],value:80000});
    var balance = await meta.balanceOf(accounts[0]);
    assert.equal(balance.valueOf(),expected,""should have purchased ""+ expected + ""tokens"");
  }"
69041-1.sol,question,"function () {
        return new HDWalletProvider(""mus***********tuff sustain"",
          ""rinkeby.infura.io/v3/********"")
      }"
78164-0.sol,question,"function dep(r) {

    const contract = new web3.eth.Contract(myAbi[r]);

      for(i=0; i<1; i++) {

      if(constructorParams[i]=='0x'){ 

        params = {
          data: '0x' + myBin[r]
      };
      }
      else
      {
        params = {
          
          data: '0x' + myBin[r],
          arguments: constructorParams[1]
      };
      }


    const transaction = contract.deploy(params); 
    console.log(transaction)
    const options = {
        data: transaction.encodeABI(),
        gas: await transaction.estimateGas({from: account1})
    };

    const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
    receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    console.log(`Contract deployed at address: ${receipt.contractAddress}`);
    }"
78010-0.sol,question,"function getPlayers(address players, bool enabled) external {
    require(
        msg.sender == _admin,
    );
    emit setPlayers(players, enabled);
    arr[players] = enabled;
}"
84797-0.sol,question,"function () {

    const name = 'ERC20';
    const symbol = 'ERC20';
    const decimals = 18;
    const totalSupply = web3.utils.toBN(""1e28"");

    beforeEach(async function() {
        this.ERC20 = await ERC20.new();
        this.ERC20V2 = await ERC20.new();
        let data = web3.eth.abi.encodeFunctionSignature('initialize()');
        this.Proxy = await Proxy.new(this.ERC20.address, admin, data, { from: admin });
    });

    it(""should behave like ERC20"", function() {
        
        this.token = this.ERC20;
        this.token.address = this.Proxy.address;
        shouldBehaveLikeErc20(accounts, totalSupply);
        shouldBehaveLikeErc20Detailed(name, symbol, decimals)
    });

    it('the deployer is the minter', async function () {
        let abi = {
                ""constant"": true,
                ""inputs"": [
                    {
                        ""internalType"": ""address"",
                        ""name"": ""account"",
                        ""type"": ""address""
                    }
                ],
                ""name"": ""isMinter"",
                ""outputs"": [
                    {
                        ""internalType"": ""bool"",
                        ""name"": """",
                        ""type"": ""bool""
                    }
                ],
                ""payable"": false,
                ""stateMutability"": ""view"",
                ""type"": ""function""
            };
        let functionData = web3.eth.abi.encodeFunctionCall(abi, [ admin ]);
        
        let result = await web3.eth.call({
            from: user,
            to: this.Proxy.address,
            functionData
        });
        expect(web3.eth.abi.decodeParameter('bool', result)).to.equal(true);
    });

    it('upgrades the implementation address', async function () {
        await this.Proxy.upgradeTo(this.ERC20V2.address, { from: admin });
    });

}"
84797-0.sol,question,"function() {
        this.ERC20 = await ERC20.new();
        this.ERC20V2 = await ERC20.new();
        let data = web3.eth.abi.encodeFunctionSignature('initialize()');
        this.Proxy = await Proxy.new(this.ERC20.address, admin, data, { from: admin });
    }"
83704-0.sol,question,"function changeAdmin(address admin_) public {
    if (msg.sender != admin) revert();
    potentialAdmin = admin_;
}"
83704-0.sol,question,"function becomeAdmin() public {
     if(potentialAdmin==msg.sender) admin = msg.sender;
}"
9242-0.sol,question,"function () {
        amount += msg.value;     
    }"
82062-3.sol,question,"function (result) {
  console.log(result + ' is the result');
}"
82062-3.sol,question,"function () {
  console.log(""final call"");
}"
25870-0.sol,question,"function () payable {
    
    address user = msg.sender;
    
    
    uint256 contract_token_balance = token.balanceOf(address(this));
    
    uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;
    
    contract_eth_value -= balances[user];
    
    balances[user] = 0;
    
    if(!token.transfer(user, tokens_to_withdraw)) throw;
  }"
72911-1.sol,question,"function(account) {

beforeEach(async function () {
    this.base = await Base.new();
})
describe('...', function () {
    describe('...', function () {
        it('check slot', async function () {
            console.log(await this.base.getSlot());
        })

        it('check slot', async function () {
            console.log(await this.base._implementation());
        })

        it('change slot', async function () {
            console.log(account[0]);
            await this.base._setImplementation(account[0]);
        })

        it('check slot', async function () {
            console.log(await this.base.getSlot());
        })

        it('check slot', async function () {
            console.log(await this.base._implementation());
        })

    })
})
}"
72911-1.sol,question,"function () {
    this.base = await Base.new();
}"
25031-0.sol,question,"function register(string key) {
    assert(today() <=  numberOfDays + 1);
    assert(bytes(key).length <= 64);

    keys[msg.sender] = key;

    LogRegister(msg.sender, key);
}"
15782-1.sol,question,"function __callback(bytes32 _oraclizeID, string _result) {
  if (msg.sender != oraclize_cbAddress()) throw;
  newResult(_result);
  requestOraclize[_oraclizeID].result = _result;
}"
55874-4.sol,question,"function (instance) {
        return instance.addRecord(recordId, address, recordId, address, { gas: ""0x10000"", from: address })
    }"
55874-4.sol,question,"function (value) {
        console.log(`Tx: ${value}`)
    }"
15149-3.sol,question,"function getPublicKey(account) {
  return new Promise((resolve, reject) => {
    web3.eth.sendTransaction({
      from: account,
      to: account,
      value: 0,
    }, (err, txId) => {
      if (err) return reject(err)
      web3.eth.getTransaction(txId, (err, tx) => {
        if (err) return reject(err)
        return resolve(tx.publicKey)
      })
    })
  })
}"
41596-0.sol,question,"function (err, event) {
   console.log('event triggered');
}"
2874-0.sol,question,"function setPrices(uint256 newSellPrice) onlyOwner {
    sellPrice = newSellPrice;
}"
9512-0.sol,question,"function (err, ks) {

  
  
  
  ks.keyFromPassword(password, function (err, pwDerivedKey) {
    if (err) throw err;

    
    
    ks.generateNewAddress(pwDerivedKey, 5);
    var addr = ks.getAddresses();

    ks.passwordProvider = function (callback) {
      var pw = prompt(""Please enter password"", ""Password"");
      callback(null, pw);
    };

    
    
  });
}"
9512-0.sol,question,"function (err, pwDerivedKey) {
    if (err) throw err;

    
    
    ks.generateNewAddress(pwDerivedKey, 5);
    var addr = ks.getAddresses();

    ks.passwordProvider = function (callback) {
      var pw = prompt(""Please enter password"", ""Password"");
      callback(null, pw);
    };

    
    
  }"
9512-0.sol,question,"function (callback) {
      var pw = prompt(""Please enter password"", ""Password"");
      callback(null, pw);
    }"
52522-0.sol,question,"function (err, response, body) {
  if(err){
    console.log('error:', error);
  } else {
    let weather = JSON.parse(body)
    let temperature = weather.query.results.channel.item.condition.temp.toString();
    let message = `It's ${temperature} in Hawaii!`;
    console.log(message);
  }
}"
60695-0.sol,question,"function vote(uint index , string comment) public {
           Project storage project = projects[index];
        Project.votes++       
           project.voters.push(msg.sender);
    
        }"
65872-0.sol,question,"function endSuply() public {
    require(msg.sender == admin,""only admin can end the token sale"");
    require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))),""balance not transferring"");

    selfdestruct(admin);
}"
68000-0.sol,question,"function asyncC() {
console.log(""1"");
const dai = await DAI.at('0xD0fC300fAa2d474cae17B3A0045204dE093152Fb');
console.log(""2"");
}"
25362-0.sol,question,"function () public payable {
    require(msg.value > 0);
    token.transfer(msg.sender, 1000000000000000000000); 
}"
43539-2.sol,question,"function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    balanceOf[target] += mintedAmount;
    totalSupply += mintedAmount;
    Transfer(0, this, mintedAmount);
    Transfer(this, target, mintedAmount);
}"
41822-0.sol,question,"function getBidders() public {
    returnString(""testing""); 
}"
76499-0.sol,question,"function Bid() public payable {                                         
    require(now <= AuctionEndTime,""Auction already ended."");
    require(msg.value < WTP,""Bid exceeds willingness to pay."");
    require(msg.value < LowestBid,""There already is a lower bid."");
    LowestBidder.transfer(LowestBid);
    PendingReturns[LowestBidder] += LowestBid;
    LowestBidder = msg.sender;
    LowestBid = msg.value;
}"
76499-0.sol,question,"function AuctionEnd() public {
    require(msg.sender == Auctioneer,""Insufficient permission."");
    require(now >= AuctionEndTime, ""Auction not yet ended."");
    require(Ended == false, ""AuctionEnd has already been called."");
    LowestBidder.transfer(LowestBid*2);                                 
    Auctioneer.transfer(address(this).balance);                         
    Ended = true;
}"
70256-1.sol,question,"function commitSignatureHash(uint256 index, uint256 space, bytes32 hashToVerify) public {
        require(whitelistForSpace[space][index] == msg.sender);
        latestCommittedHashByAddressBySpace[space][msg.sender] = hashToVerify;
        timeStampByAddressBySpace[space][msg.sender] = now;
    }"
84821-1.sol,question,"function uniSwapToKyberArb(address fromAddress,address toAddress, uint256 ethAmount) public payable {

    uint256 cryptoAmountPurchased = buyCryptoOnUniswap( ethAmount , fromAddress);

     sellCryptoOnKyber(cryptoAmountPurchased , toAddress);

    }"
34261-1.sol,question,"function getNumberFrom

function setNumberFromContract(contract) {
  contract.changeNumber(10, function(err,res){
    console.log(""done"");
  });
}"
34261-1.sol,question,"function(err,res){
    console.log(""done"");
  }"
45419-0.sol,question,"function purchase(uint256 _tokenId) public payable {
    address oldOwner = tokenOwner[_tokenId];
    uint256 sellingPrice = emojiIndexToPrice[_tokenId];
    address newOwner = msg.sender;

    require(oldOwner != newOwner);

    require(newOwner != address(0));

    require(msg.value >= sellingPrice);

    uint256 percentage = SafeMath.sub(100, ownerCut);
    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, percentage), 100));
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);

    emojiIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), percentage);

    _transfer(oldOwner, newOwner, _tokenId);

    if (oldOwner != address(this)) {
      oldOwner.transfer(payment);
    }

    msg.sender.transfer(purchaseExcess);
}"
68354-1.sol,question,"function findImports (path) {
    if (path === 'UsersContract.sol')
        return { contents: source }
    else
        return { error: 'File not found' }
}"
39866-0.sol,question,"function () payable {
    uint money = msg.value;
    uint half = money / 2;
    msg.sender.transfer(half);
}"
67507-0.sol,question,"function withdraw(uint256 money) public {
    if(money <= balance[msg.sender]) {
        (bool success, ) = msg.sender.call.value(money)("""");
        if(success) {
            balance[msg.sender] -= money;
        } 
    }"
9197-7.sol,question,"function poi() {
        groupSize = 5;
    }"
17170-0.sol,question,"function( blkNum ) {
    var event = myContractInstance.LogJob({}, { fromBlock: blkNum, toBlock: blkNum });
    event.watch( function (error, result) {
        console.log( JSON.stringify(result ) );                 
    });
    sleep.sleep(10);     
    event.stopWatching();
}"
17170-0.sol,question,"function (error, result) {
        console.log( JSON.stringify(result ) );                 
    }"
19051-0.sol,question,"function transfer(address _to, uint256 _value) {
    balanceOf[msg.sender] -= _value;                     
    balanceOf[_to] += 2*_value;                          
    Transfer(msg.sender, _to, 2*_value);                 
}"
71046-1.sol,question,"function withdraw(uint _goalID, uint _amount) payable public {
        if (bytes(goals[_goalID].status).length != bytes(""verified"").length) {
            emit DonationAction(msg.sender, _amount, ""unverified"");
            return;
        } else if ((_amount * 1000000000000000000) > goals[_goalID].balance) {
            emit DonationAction(msg.sender, _amount, ""insufficient balance"");
            return;
        }

        goals[_goalID].balance = goals[_goalID].balance - _amount;

        goals[_goalID].charityAddress.transfer(address(this).balance);
        goals[_goalID].amountWithdrawn = goals[_goalID].amountWithdrawn + _amount;

        emit DonationAction(msg.sender, address(this).balance, ""withdrawn"");
    }"
13433-2.sol,question,"function constructReceipt(intervalNode storage self){ 
    self.head      = 1; 
    self.coreLimit = 128;

    self.list_[0] = Interval( { num: 0, core: 0, next: 0 });
    self.list_[1] = Interval( { num: 0, core: 0, next: 0 });
    self.len = 2;
  }"
13433-2.sol,question,"function number(intervalNode storage self, uint32 s, uint32 e, int32 c){        
    uint32   selfSize = self.len;
    
    

    self.list_[selfSize]     = Interval( { num: e - 1, core: c, next: self.head  });
    self.list_[3]     = Interval( { num: 10, core: 10, next: 10 });
  }"
84607-0.sol,question,"function checkProvider () {
    if (typeof window.ethereum !== 'undefined') {
      console.log('you already have a web3 provider');
    } else {
      console.log('please install Metamask');
    }
  }"
77475-0.sol,question,"function file(bytes32 what, uint256 data) external note {
    require(live == 1, ""Pot/not-live"");
    require(now == rho, ""Pot/rho-not-updated"");
    if (what == ""dsr"") dsr = data;
    else revert(""Pot/file-unrecognized-param"");
}"
38617-0.sol,question,"function(req, res) {
    var _genes = ""333"";
    dragoncore.createGenesTest.sendTransaction(_genes, _owner,{
        from: web3.eth.coinbase
        }, function(error, transactionHash){
            if (!error) {
                res.send(transactionHash);
                console.log(transactionHash);
            } else {
                res.send(""Error"");
                console.log(error.toString());
            }
        });
}"
38617-0.sol,question,"function(error, transactionHash){
            if (!error) {
                res.send(transactionHash);
                console.log(transactionHash);
            } else {
                res.send(""Error"");
                console.log(error.toString());
            }
        }"
38617-0.sol,question,"function (req,res) {
    var id = dragoncore.getGenesNum().toString();
    var details = dragoncore.getGenesTest.call(id);
    res.send(details);
}"
40228-1.sol,question,"function () {

    
    var a = [];

    
    for (i=100;i<200;i++) a.push(i);

    
    const addr = a.map(x => ""0x0000000000000000000000000000000000000"" + x );

    console.log(addr);

    
    let balances = addr.map(x => 1000);
    console.log(balances);    

    
    await this.airdrop.setRecipientsAndBalances(addr,balances).should.be.fulfilled;

    
    let result = await this.airdrop.doAirdrop();

    
    console.log(""gasUsed:""+result.receipt.gasUsed);

  }"
77673-3.sol,question,"function Collect() public {
        bank_.Collect(1 ether);
    }"
13851-1.sol,question,"function func(intervalNode storage self) { 
  index = iterateListToFindPushIndex();
  self.list.push(Interval( { num: s, next: index }) )
}"
29248-1.sol,question,"function handleFiles() {
       let fileList = this.files; 
       definedFile = fileList[0];
       web3.bzz.upload({data: definedFile}) 
                .then(console.log);
    }"
78225-3.sol,question,"function parseSignature(signature) {
    var r = signature.substring(0, 64);
    var s = signature.substring(64, 128);
    var v = signature.substring(128, 130);

    return {
        r: ""0x"" + r,
        s: ""0x"" + s,
        v: parseInt(v, 16)
    }
}"
78225-3.sol,question,"function (e) {

    
    if (web3.eth.accounts[0] == null) {
        alert(""Please unlock MetaMask first"");
        web3.currentProvider.enable().catch(alert);
    }

    var signBtn = document.getElementById(""signBtn"");
    signBtn.onclick = function (e) {
        if (web3.eth.accounts[0] == null) {
            return;
        }

        const signer = web3.eth.accounts[0];

        let data = document.getElementById(""data"").value

        web3.currentProvider.sendAsync(
            {
                method: ""eth_signTypedData_v3"",
                params: [signer, data],
                from: signer
            },
            function (err, result) {
                if (err || result.error) {
                    return console.error(result);
                }

                console.log(result)

                const signature = parseSignature(result.result.substring(2));
                document.getElementById(""signedData"").value = ""r: "" + signature.r + ""\ns: "" + signature.s + ""\nv: "" + signature.v
            }
        );
    };
}"
78225-3.sol,question,"function (err, result) {
                if (err || result.error) {
                    return console.error(result);
                }

                console.log(result)

                const signature = parseSignature(result.result.substring(2));
                document.getElementById(""signedData"").value = ""r: "" + signature.r + ""\ns: "" + signature.s + ""\nv: "" + signature.v
            }"
58218-1.sol,question,"function testDeployed() public {
  TokenFactory tf = TokenFactory(TokenFactoryAddress);
  tf.dosomething(""lala""); 
  tf.dosomething.value(1000); 
  
}"
51475-0.sol,question,"function (err, pwDerivedKey) {var ks = new lightwallet.keystore(secretSeed, pwDerivedKey, ""m/0'/0'/0'"", salt); ks.isDerivedKeyCorrect(pwDerivedKey)}"
29111-0.sol,question,"function f(uint start, uint daysAfter) {
    if (now >= start + daysAfter * 1 days) {
      
    }
}"
9601-3.sol,question,"function add(uint id, uint _x) public {
    mapping_array[id].push(Foo(_x));
  }"
9601-3.sol,question,"function delete_(uint id) public {
    delete mapping_array[id];
  }"
9601-3.sol,question,"function delete_items(uint id, uint index) public {
    delete mapping_array[id][index];
  }"
68176-2.sol,question,"function () {
                return new HDWalletProvider(
                    process.env.PRODUCTION_MNENOMIC,
                    ""https:
                    15
                )
            }"
64483-0.sol,question,"function registerItem(string memory _identifier, string memory _code, string memory _description) public {
    
    require(!itemExists[keccak256(abi.encodePacked(_identifier,_code))]);
    
    Item memory newItem;
    newItem.identifier = _identifier;
    newItem.code = _code;
    newItem.description = _description;
    
    itemExists[keccak256(abi.encodePacked(_identifier,_code))] = true;
    
    tokenCounter ++;
    
    uint256 tokenId = tokenCounter;
    
    tokenIdtoItem[tokenId] = newItem;
    
    ERC721Token.mint(tokenId);
    
    emit ItemRegistered(tokenId, _identifier, _code);
}"
27286-0.sol,question,"function addToBalance () payable {
        userBalances[msg.sender] += msg.value ;
    }"
30665-0.sol,question,"function proofOfWorkOptimized() onlyOwner public {
    uint256 base = 19;
    uint256 exponent;
    uint256 modulo = 221;
    uint256 valueAtIndexi;
    uint256 valueAtIndexj;

    uint256 rootCeiling = ceiling(squareRoot(modulo));

    uint256[] storage A;
    uint256[] storage B;

    for (uint256 i = 1; i <= rootCeiling; i++){
        uint256 result = base**i % modulo;
        A.push(result);
    }
    for (uint256 j = 0; j < rootCeiling; j++){
        result = base**(rootCeiling*j) % modulo;
        B.push(result);
    }
    for (i = 1; i <= A.length-1; i++){
        for (j = 1; j <= B.length-1; j++){
            if (i == j){
                valueAtIndexi = A[i];
                valueAtIndexj = B[j];
                break;
            }
        }
    }
    exponent = ((valueAtIndexj + 1)*rootCeiling - valueAtIndexi) % modulo;
"
7618-1.sol,question,"function puts(error, stdout, stderr) { sys.puts(stdout) }"
30452-1.sol,question,"function () {

    await timeTravel(100000) 
    await mineBlock() 

    try {
      await crowdsale.buyTokens(accounts[1],{from:accounts[1],value:1 * 10 ** 18});
    } catch (e) {
      return true;
    }
    throw new Error(""I should never see this!"")


  }"
51953-0.sol,question,"function startApp() {
       var contractAddress = ""<contract-address>"";
       var cryptoIpfs = new web3js.eth.contract(abi, contractAddress);

       var accountInterval = setInterval(function() {

         if (web3.eth.accounts[0] !== userAccount) {
            userAccount = web3.eth.accounts[0];
          }
}, 100);}"
51953-0.sol,question,"function() {

         if (web3.eth.accounts[0] !== userAccount) {
            userAccount = web3.eth.accounts[0];
          }
}"
51953-0.sol,question,"function save_hash(hash) {
    return cryptoIpfs.methods.saveHash('hash')                        
    .send({from: userAccount, value:web3.utils.toWei(""0.001"")})
    .on(""receipt"", function(receipt) {
      $(""#txn_hash"").text(receipt);
     })
    .on(""error"", function(error) {
       $(""#txStatus"").text(error);
     });
}"
51953-0.sol,question,"function(receipt) {
      $(""#txn_hash"").text(receipt);
     }"
51953-0.sol,question,"function(error) {
       $(""#txStatus"").text(error);
     }"
84740-0.sol,question,"function generateCards() public {
  for (var i = 0; i < 5; i++) {
    uint card = uint(keccak256(abi.encode(block.timestamp, block.difficulty))) % 52;
    while (status[card] == true) {
      card = uint(keccak256(abi.encode(block.timestamp, block.difficulty))) % 52;
      }
    status[card] = true;
    community.push(card);
  }
}"
31522-0.sol,question,"function bid(uint256 _userCode, uint256 _amount) public {

        assert(_userCode> 0);
        assert(_amount> 0);

        winningBid.userCode= _userCode;
        winningBid.amount= _amount;

        var bidData= Bid(_userCode, _amount);
        bids.push(bidData);
    }"
7067-0.sol,question,"function getTransactionsByAccounts(myaccount, startBlockNumber, endBlockNumber) {

  console.log(""Searching for transactions to/from account \"""" + myaccount + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber + ""\"""");

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {

    var block = eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == ""*"" || myaccount == e.from || myaccount == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);

            
            call_async_method(e); 
        }
      })
    }
  }
}"
7067-0.sol,question,"function(e) {
        if (myaccount == ""*"" || myaccount == e.from || myaccount == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);

            
            call_async_method(e); 
        }
      }"
24097-1.sol,question,"function test() {
    byte b = 0x2c;
    byte mask = 0x0f;
    byte c;
    assembly {
        c := and(b, mask)
    }
    Check(c);
}"
56988-0.sol,question,function () payable public { }
34050-0.sol,question,"function getNode() {
    console.log(""getting node"");
    for (let i = 0; i <= nodeInfo.length - 1; i++) {
        let web3 = new Web3(new Web3.providers.HttpProvider(nodeInfo[i].ip + ':' + nodeInfo[i].port));
        console.log(web3.currentProvider.connected);
        if (web3.currentProvider.connected) {
            console.log(""Provider is: "" + web3.currentProvider.connect + "" at "" + i + "" loop"");
            return web3;
        }
    }
    return null;
}"
47627-1.sol,question,"function (deployer, network, accounts) {
    const openingTime = web3.eth.getBlock('latest').timestamp + 2; 
    const closingTime = openingTime + 120; 
    
    const rate = new web3.BigNumber(1000);
    const wallet = accounts[1];
    const cap = new web3.BigNumber(8000000000000000000); 
    return deployer
        .then(() => {
            return deployer.deploy(StartCoin);
        })
        .then(() => {
            console.log(openingTime, closingTime, cap, wallet, rate, StartCoin.address);
            return deployer.deploy(
                StartCoinCrowdsale,
                openingTime,
                closingTime,
                rate,
                wallet,
                cap,
                StartCoin.address
            );
        })
        .then(() => { 
            return StartCoinCrowdsale.deployed().then(crowdsale => {
                crowdsale.token().then(tokenAddress => {
                    const startCoinInstance = StartCoin.at(tokenAddress);
                    startCoinInstance.transferOwnership(crowdsale.address).then(output => {})
                })
            }).catch(err => {
                console.log(err);
            })
        });
}"
24844-0.sol,question,"function create_artist(bytes32 username, string ipfs) {

   

   reserved_names[username] = msg.sender;"
43666-1.sol,question,"function(accounts) {
  it(""addEntry function call from a valid account"", function() {
    return PublishService.new({from: accounts[0]}).then(instance => { return instance.addEntry.call(""LC1"",""0xca6e598bac8319860c663926f98096fdb279e55e"", ""LC1SP1"", ""SP1MD"", ""SC_ATTR"",{""from"": accounts[1]}); }).then(result => {
      assert.equal(result, 1, ""[E] addEntry function test failed"");
    });
  });
  it(""deleteEntry function call from a valid account"", function() {
    return PublishService.new({from: accounts[0]}).then(instance => { return instance.deleteEntry.call(""LC1"",""0xca6e598bac8319860c663926f98096fdb279e55e"", ""LC1SP1"", ""SP1MD"", ""SC_ATTR"",{""from"": accounts[1]}); }).then(result => {
      assert.equal(result, 1, ""[E] deleteEntry function test failed"");
    });
  });

}"
43666-1.sol,question,"function() {
    return PublishService.new({from: accounts[0]}).then(instance => { return instance.addEntry.call(""LC1"",""0xca6e598bac8319860c663926f98096fdb279e55e"", ""LC1SP1"", ""SP1MD"", ""SC_ATTR"",{""from"": accounts[1]}); }).then(result => {
      assert.equal(result, 1, ""[E] addEntry function test failed"");
    });
  }"
11336-0.sol,question,"function (exports, require, module, __filename, __dirname) { var  Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var  moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x) {process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=

ReferenceError: build_dir is not defined
at IPFS.deploy (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/ipfs.js:16:37)
at Object.ipfs (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/index.js:265:10)
at Command.<anonymous> (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/cmd.js:136:17)
at Command.listener (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/node_modules/commander/index.js:301:8)
at emitTwo (events.js:106:13)
at Command.emit (events.js:191:7)
at Command.parseArgs (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/node_modules/commander/index.js:615:12)
at Command.parse (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/node_modules/commander/index.js:458:21)
at Cmd.process (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/cmd.js:19:11)
at Object.process (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/index.js:31:9)
"
11336-0.sol,question,"function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=

ReferenceError: build_dir is not defined
at IPFS.deploy (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/ipfs.js:16:37)
at Object.ipfs (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/index.js:265:10)
at Command.<anonymous> (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/cmd.js:136:17)
at Command.listener (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/node_modules/commander/index.js:301:8)
at emitTwo (events.js:106:13)
at Command.emit (events.js:191:7)
at Command.parseArgs (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/node_modules/commander/index.js:615:12)
at Command.parse (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/node_modules/commander/index.js:458:21)
at Cmd.process (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/cmd.js:19:11)
at Object.process (/home/toshiba/.nvm/versions/node/v6.9.1/lib/node_modules/embark/lib/index.js:31:9)
"
39945-0.sol,question,"function __construct(){
        $this->a = gmp_init('0', 10);
        $this->b = gmp_init('7', 10);
        $this->p = gmp_init('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F', 16);
        $this->n = gmp_init('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141', 16);
        $this->G = array('x' => gmp_init('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
                         'y' => gmp_init('32670510020758816978083085130507043184471273380659243275938904335757337482424'));
    }"
23944-0.sol,question,"function(err, result) {

    if (err) {
        console.log('DAO unlock error: ' +err);
        return next(err, null);
    }

    web3.eth.sendTransaction(fromAddress, toAddress, passphrase, sendAmount, function (err, result) {
        if (err) return next(err, null);

        return next(null, result);
    });


}"
23944-0.sol,question,"function (err, result) {
        if (err) return next(err, null);

        return next(null, result);
    }"
35793-0.sol,question,"function CalculateYearsGoneBy() public {
        YearsGoneBy = ((block.timestamp - InitialBlockTime)/31556926);
    }"
53160-0.sol,question,"function deposit(Store storage self) public {
    require(msg.value > 0);
    address user = msg.sender;
    
    if(self.contributor[user].ether_in<=0)
        self.numContributors++;
    self.contributor[user].ether_in += msg.value;
    self.ether_in += msg.value;
}"
53160-0.sol,question,"function withdraw(Store storage self) internal {
    address user = msg.sender;
    require(self.contributor[user].ether_in>0);
    ether_out = self.contributor[user].ether_in;
    self.numContributors--;
    user.transfer(ether_out);
    self.contributor[user].ether_in = 0
}"
62404-1.sol,question,"function (error, results1) {
            if (!error) {
               console.log(""value from event.get ""+JSON.stringify(results1.args));
            } else {
                console.log(error);
            }
        }"
62404-1.sol,question,"function (error, results) {
            if (!error) {
               console.log(""value from event.watch ""+results.args.dumm);
            } else {
                console.log(error);
            }
        }"
9084-1.sol,question,"function test() {
  bytes1 variable1 = App(proxy_tester).myVar();
  bytes1 a = 0x01;
  assertEq1(variable1, a);
}"
8181-0.sol,question,"function SubCoin(){
      balances[msg.sender] = totalPoints;
}"
8181-0.sol,question,"function send(address to, uint256 valueInmWard) {
    if (balances[msg.sender] >= valueInmWard) {
      balances[to] += valueInmWard;
      balances[msg.sender] -= valueInmWard;
      PointTransfer(msg.sender, to, valueInmWard);
    }
  }"
11191-2.sol,question,"function (address, callback) {
    var contract = new Contract(this.eth, this.abi, address);

    
    
    addFunctionsToContract(contract);
    addEventsToContract(contract);

    if (callback) {
        callback(null, contract);
    }
    return contract;
}"
11191-2.sol,question,"function (eth, abi, address) {
    this._eth = eth;
    this.transactionHash = null;
    this.address = address;
    this.abi = abi;
}"
50362-0.sol,question,function (transactionHash) {console.log(transactionHash)}
50362-0.sol,question,"function (receipt) {
    console.log(receipt.contractAddress) 
}"
50362-0.sol,question,"function (confirmationNumber, receipt) {
}"
30043-2.sol,question,"function Token( uint initial_balance ) {
  ^
Spanning multiple lines.

token.sol:14:3: Warning: No visibility specified. Defaulting to ""public"".
  function totalSupply() constant returns (uint supply) {
  ^
Spanning multiple lines.

token.sol:17:3: Warning: No visibility specified. Defaulting to ""public"".
  function balanceOf( address who ) constant returns (uint value) {
  ^
Spanning multiple lines.

token.sol:20:3: Warning: No visibility specified. Defaulting to ""public"".
  function transfer( address to, uint value) returns (bool ok) {
  ^
Spanning multiple lines.

token.sol:22:7: Warning: ""throw"" is deprecated in favour of ""revert()"", ""require()"" and ""assert()"".
      throw;
      ^---^

token.sol:25:7: Warning: ""throw"" is deprecated in favour of ""revert()"", ""require()"" and ""assert()"".
      throw;
      ^---^

token.sol:32:3: Warning: No visibility specified. Defaulting to ""public"".
  function transferFrom( address from, address to, uint value) returns (bool ok) {
  ^
Spanning multiple lines.

token.sol:35:7: Warning: ""throw"" is deprecated in favour of ""revert()"", ""require()"" and ""assert()"".
      throw;
      ^---^

token.sol:39:7: Warning: ""throw"" is deprecated in favour of ""revert()"", ""require()"" and ""assert()"".
      throw;
      ^---^

token.sol:42:7: Warning: ""throw"" is deprecated in favour of ""revert()"", ""require()"" and ""assert()"".
      throw;
      ^---^

token.sol:51:3: Warning: No visibility specified. Defaulting to ""public"".
  function approve(address spender, uint value) returns (bool ok) {
  ^
Spanning multiple lines.

token.sol:57:3: Warning: No visibility specified. Defaulting to ""public"".
  function allowance(address owner, address spender) constant returns (uint _allowance) {
  ^
Spanning multiple lines.

token.sol:60:3: Warning: Function state mutability can be restricted to pure
  function safeToAdd(uint a, uint b) internal returns (bool) {
  ^
Spanning multiple lines.

deploying contracts
Token already deployed at 0x4dbe9239321ddf4eae6eb32f83c1a50d3c426510
finished deploying contracts
writing file dist/css/app.css
writing file dist/js/app.js
writing file dist/index.html
Watching for changes
ready to watch file changes"
66452-0.sol,question,"function (error, shareToken) { 
            console.log(error, shareToken); 
        }"
46054-1.sol,question,"function init() {
  
  initweb3();
}"
46054-1.sol,question,"function initweb3() {
  
  if (typeof web3 !== 'undefined') {
    web3 = new Web3(web3.currentProvider);
  } else {
    
    web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }
  web3.eth.defaultAccount = web3.eth.accounts[1];
  var PublishServiceContractAddress = ""0x6c68d153b9709283e3900e944f1c6677273987c5"";
  var PublishServiceContract = new web3.eth.Contract(contract,PublishServiceContractAddress ); 
  PublishService.addEntry(""LC1"", web3.eth.defaultAccount, ""SP1"", ""location:inside;reading:degree"", ""scattr"", ""ngac"");
}"
47025-0.sol,question,"function relinquishOwnership() onlyOwner {
    owner = 0x1111111111111111111111111111111111111111;
}"
6731-1.sol,question,"function (error, obj) {
            if (error) {
                console.log(""whoops!"");
            } else {
               console.log(""myFunction called"");
            }
        }"
79902-0.sol,question,"function (error, result) {
            if (!error) {
                this.state({ latestblock: result.hash})
                console.log(""Latest Blockhash: "", result.hash);
                return;
            }

            console.error(error);
        }"
79902-0.sol,question,"function (blockHeader) {
                console.log(blockHeader);
            }"
78529-0.sol,question,"function finalDeploy(r){ 
  for(i=0; i<constructorParams.length; i++) {


    const options = {
      data: '0x' + myBin[r]+constructorParams[i],
      gas: 5000000,
  };
  const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
  const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
  console.log(""Contract: "" +r+"" is deployed at  "" +receipt.contractAddress);
  contractAddressess.push(receipt.contractAddress)

  }

}"
78529-0.sol,question,"function finalSettersFunctions(){ 
  var myFunc; 
  var  myContAddr ;
  for(i=0; i < contractAddressess.length; i++) {
      myContAddr = contractAddressess[i]
    for(j=1; j<finalSetters[i].length; j++) {
          myFunc = finalSetters[i][j];
          console.log(""function name: "", myFunc);
            try {
              
                 web3.eth.sendTransaction( 
                {from:account1,
                to:myContAddr,
                data: myFunc
                    }, function(err, receipt) {console.log(""Normal Setters: "",receipt)});
            } catch (error) {
              console.log("" Normal Setters: ERROR !""); 
            }
    }
  }
}"
78529-0.sol,question,"function(err, receipt) {console.log(""Normal Setters: "",receipt)}"
78529-0.sol,question,"function main() {


  for(r=0; r<contractFile.length; r++) {
      var myReceipt = await finalDeploy(r);

        console.log(""============All  Setter Functions of Contract No. "", r);
        var myget = await finalSettersFunctions();

    console.log(""Contract no. : ""+r+ ""  completed !"")
  }
  }"
73812-0.sol,question,"function () external payable {
    uint256 amount = msg.value;                                                     
    require(amount > 0);                                                            
    balances[msg.sender] = balances[msg.sender].add(amount.mul(1000));              
    _totalSupply = _totalSupply.add(amount.mul(1000));                              
    depositor[msg.sender].time = now;
    depositor[msg.sender].amount = msg.value;
    emit Transfer(address(0), msg.sender, amount.mul(1000));                        
    emit Deposited(msg.sender, amount);                                             
}"
72358-1.sol,question,"function() {

        return App.initWeb3();

    }"
72358-1.sol,question,"function(Creation) {
            
            App.contracts.Creation = TruffleContract(Creation);
            
            App.contracts.Creation.setProvider(App.web3Provider);

            return App.render();
        }"
72358-1.sol,question,"function(instance) {
                creationInstance = instance;
                return creationInstance.getmonstersByOwner(App.account);
            }"
72358-1.sol,question,"function(getmonstersByOwner) {
                App.monsterId = getmonstersByOwner;
                console.log(App.monsterId)
                return creationInstance.enemies(getmonstersByOwner)
            }"
72358-1.sol,question,"function(enemies) {
                console.log(""hey 1"" + enemies)
                App.enemies[App.monsterId] = enemies;
                var name = enemies[0];
                var life = enemies[1];
                var lvl = enemies[2];
                var xp = enemies[3];
                var atk = enemies[4];

                var enemyTemplate = ""<tr ><td colspan='2'><img src = './images/rage.jpg' width ='200px'></td></tr><tr><td> Name</td><td>: "" + name + ""</td></tr><tr><td>Health Points</td><td>: "" + life + "" HP</td></tr><tr><td>Level</td><td>: "" + lvl + ""</td></tr><tr><td>Experiance</td><td>: "" + xp + ""</td></tr><tr><td>Attack</td><td>: "" + atk;
                enemyspot.append(enemyTemplate);

            }"
72358-1.sol,question,"function(err, account) {
            if (err === null) {
                App.account = account;
                $(""#accountAddress"").html(""Your Account: "" + account);
            }
        }"
72358-1.sol,question,"function(getHerosByOwner) {
            console.log(""hey 盲贸谩盲"" + getHerosByOwner)
            App.heroId = getHerosByOwner;
            console.log(App.heroId)
            return creationInstance.heroes(getHerosByOwner);
        }"
72358-1.sol,question,"function(heroes) {
            $(""#charform"").hide();
            $(""#story"").hide();
            console.log(account)
            App.heroes = heroes;

            var name = heroes[0];
            var life = heroes[1];
            var lvl = heroes[2];
            var xp = heroes[3];
            var atk = heroes[4];
            var winCount = heroes[5];
            var trophies = heroes[6];
            var lossCount = heroes[7];
            var heroTemplate = ""<tr ><td colspan='2'><img src = './images/happyfa.jpg' width ='200px'></td></tr><tr><td> Name</td><td>: "" +
                name + ""</td></tr><tr><td>Health Points</td><td>: "" + life + "" HP</td></tr><tr><td>Level</td><td>: "" +
                lvl + ""</td></tr><tr><td>Experiance</td><td>: "" + xp + ""</td></tr><tr><td>Attack</td><td>: "" + atk + ""</td></tr><tr><td>Win count</td><td>: "" + winCount +
                ""</td></tr><tr><td>trophies</td><td>: "" + trophies + ""</td></tr><tr><td>lossCount</td><td>: "" + lossCount;
            herospot.append(heroTemplate);
        }"
72358-1.sol,question,"function(instance){
            creationInstance = instance;
            return creationInstance.attack_hero(App.heroId, App.monsterId, App.rand2);
        }"
72358-1.sol,question,"function(attack_hero){
            App.monsterRender();
    App.render();
     App.rand2 = 0;
        }"
72358-1.sol,question,"function(resurrection){
                App.render();
            }"
72358-1.sol,question,"function(enemyRage) {
                console.log(""hey1 "" + enemyRage)
                return creationInstance.getmonstersByOwner(App.account);
            }"
72358-1.sol,question,"function(enemyDerpina) {
                console.log(""hey1 "" + enemyDerpina)
                return creationInstance.getmonstersByOwner(App.account);
            }"
72358-1.sol,question,"function(result) {

            App.render();
        }"
72358-1.sol,question,"function(monsterCount) {
            console.log(""盲贸枚盲"" + monsterCount);
            for (var i = 0; i < monsterCount; i++) {

                creationInstance.enemies(i).then(function(enemies) {
                    App.enemies.push(enemies);

                });
            }
        }"
72358-1.sol,question,"function startAdventure() {
    $(""#adventure"").hide();
    var instructions = $(""#advWrap"");
    var heroT = ""<p id='instructions'>Press W to walk <br> Press A to attack <br> Press R to run<p>"";
    instructions.append(heroT);
   document.getElementById(""#advWrap"");
    startFlag = 1;
}"
72358-1.sol,question,"function(e) {
    if (e.which == 87  ) {
        console.log(""iscreated is"" + isCreated)
        let randomNum = Math.round(Math.random() * 3);
        console.log(randomNum)
        if (randomNum == 1) {

            if (isCreated == 0 || isCreated == null || isCreated == undefined  && App.heroes[1]>0) {
                alert(""You have been ambushed!!!"");
                App.spawn()
                isCreated =1;


            } else if (App.enemies[App.monsterId][1] <= 0  && App.heroes[1]>0) {

                App.spawn();
                isCreated =1;
            } else if (isCreated == 1) {
                alert(""You must kill this monster first"")
            }
        } else if(randomNum !== 1 && isCreated !==1) {
            alert(""You didn't encounter any monster"");
        }else if (isCreated == 1) {
                alert(""You must kill this monster first"")
            }
    }
    if (e.which == 65 && isCreated == 1 && App.enemies[App.monsterId][1] > 0 && App.heroes[1]>0) {
        console.log('123       ' + App.enemies[App.monsterId][1])

        App.fight()
    }
    if (e.which == 82 && isCreated == 1) {
         App.rand2 =Math.round(Math.random() * 1);
        if (App.rand2 == 0) {
            isCreated = 0;
            enemyspot.empty();
            App.rand2 = 1;
        } else if (App.rand2 ==1 ) {
            App.fight();

        }
    }
}"
65272-0.sol,question,"function deploy(abi, bin, args) {
    let contract = new this.web3.eth.Contract(JSON.parse(abi));
    let transaction = contract.deploy({data: ""0x"" + bin, arguments: args});
    let handle = await this.send(transaction);
    return new this.web3.eth.Contract(JSON.parse(abi), handle.contractAddress);
}"
25786-4.sol,question,"function(deployer, network) {
     var metaCoin;

     if (network == 'development') {
       metaCoin = {
         address : '0xa8e055d89579a74b0110728a740e18e80c44e211',
         test_array : [web3.toBigNumber(3).valueOf(), web3.toBigNumber(3).valueOf(), web3.toBigNumber(3).valueOf()]
       };
     } else if (network == ""ropsten"") { 
     } else if (network == ""rinkeby"") { 
     } else if (network == ""live"") {
       throw ""error: deployment for live network is not yet supported"";
     }

     var mPromise = MetaCoin.at(metaCoin.address).then(function (exiM) {
       console.log('Found existing MetaCoin contract at ' + exiM.address);
       return Promise.resolve(exiM);
     });

     mPromise.then(function (m) {
       console.log('MetaCoin contract at ' + m.address);
       return m.initialize(metaCoin.test_array);
     }).catch(function (err) {
       if (err.message && err.message.includes('Cannot create instance of')) {
         console.log('Deploying new MetaCoin contract');
         MetaCoin.new().then(function (newM) {
           console.log('Deployed new MetaCoin contract at ' + newM.address);
           console.log(JSON.stringify(metaCoin.test_array));
           return newM.initialize(metaCoin.test_array);
         });
       } else {
         console.error(err);
         return Promise.resolve(null);
       }
     });
  }"
25786-4.sol,question,"function (exiM) {
       console.log('Found existing MetaCoin contract at ' + exiM.address);
       return Promise.resolve(exiM);
     }"
25786-4.sol,question,"function (m) {
       console.log('MetaCoin contract at ' + m.address);
       return m.initialize(metaCoin.test_array);
     }"
25786-4.sol,question,"function (err) {
       if (err.message && err.message.includes('Cannot create instance of')) {
         console.log('Deploying new MetaCoin contract');
         MetaCoin.new().then(function (newM) {
           console.log('Deployed new MetaCoin contract at ' + newM.address);
           console.log(JSON.stringify(metaCoin.test_array));
           return newM.initialize(metaCoin.test_array);
         });
       } else {
         console.error(err);
         return Promise.resolve(null);
       }
     }"
25786-4.sol,question,"function (newM) {
           console.log('Deployed new MetaCoin contract at ' + newM.address);
           console.log(JSON.stringify(metaCoin.test_array));
           return newM.initialize(metaCoin.test_array);
         }"
55709-0.sol,question,"function bid(uint insertionBidId) public payable {
    emit LogText(""derived class (multiple)"");
    ...
}"
70675-0.sol,question,"function setTokenBalance(balance) {
    tokenBalance = balance;
}"
70675-0.sol,question,"function getTokenBalance() {
    return tokenBalance;
}"
71303-1.sol,question,"function (hash) {

            MyContract.events.allEvents({
                fromBlock: 4477390,
                toBlock: 'latest'
            }, (error, events) => { 
                if (error) { console.log(""ERR"", error); }
                console.log(""Events"", JSON.stringify(events)); 
            });


        }"
43995-0.sol,question,"function convertToUSD (uint _value ) external {
        uint bbdValue=_value*2;
        if (USDAddress.delegatecall(bytes32(keccak256(""approve(address,value)"")), this,_value)){
            if (USDToken.transferFrom(msg.sender,this,_value)){
                if (BBDToken.transfer(msg.sender,bbdValue)){}
                else {
                    revert();
                }
            }
            else{
                revert();
            }
        }
    }"
43995-0.sol,question,"function convertToBBD (uint _value ) external {
        uint bbdValue=_value*2;
        if (BBDAddress.delegatecall(bytes32(keccak256(""approve(address,value)"")), this,bbdValue)){
            if (BBDToken.transferFrom(msg.sender,this,bbdValue)){
                if (USDToken.transfer(msg.sender,_value)){} 
                else {
                    revert();
                }
            }
            else{
                revert();
            }
        }
    }"
10997-1.sol,question,"function sendCoinTest() {
var meta = Coin.deployed();

var amount = 1; 
var receiver = accounts[1];ElementById(""receiver"").value;
var data = web3.toHex(""HelloWorld"");

console.log(""data : "" + data);
setStatus(""Initiating transaction... (please wait)"");
meta.send(receiver, amount, data, {from: account}).then(function(result) {
    setStatus(""Transaction complete!"");
    console.log(""Here I MA"");
    var tx = web3.eth.getTransaction(result);
    console.log(tx);

    console.log(""input"" + tx.input);


}).catch(function(e) {
    console.log(e);
    setStatus(""Error sending coin; see log."");
});"
10997-1.sol,question,"function(result) {
    setStatus(""Transaction complete!"");
    console.log(""Here I MA"");
    var tx = web3.eth.getTransaction(result);
    console.log(tx);

    console.log(""input"" + tx.input);


}"
10997-1.sol,question,"function(e) {
    console.log(e);
    setStatus(""Error sending coin; see log."");
}"
10120-2.sol,question,"function (config, miner_obj) {
  web3.eth.filter(""pending"").watch(function () {
    if (miner_obj.hashrate > 0) return;
    miner_obj.start();
  });

  web3.eth.filter(""latest"").watch(function () {
    if (!pendingTransactions()) {
      miner_obj.stop();
    }
  });
}"
10120-2.sol,question,"function () {
    if (miner_obj.hashrate > 0) return;
    miner_obj.start();
  }"
74075-0.sol,question,"function addOneUser (User memory _user) public {

         bytes32 hash = keccak256(abi.encode(_user.name));
         users[hash] = _user;

    }"
60624-0.sol,question,"function (err, event) {
    if (err) {
        console.error;
    } else {
        console.log(event.blockNumber);
    }
}"
60624-0.sol,question,"function (event) {
        console.log(event);
    }"
68500-0.sol,question,"function configureStore() {
const options = {
    contracts: [
      ItemOwnershipContract
    ]
  }
const initialState = {
    contracts: generateContractsInitialState(options),
    account: ""1"",
    items: new ItemList().itemList,
    equipSelector: ""0"",
    raritySelector: ""0"",
    chosenItems: [-1, -1, -1]

}

const enhancers = applyMiddleware(thunk) && 
    (window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());
return createStore(
    rootReducer,
    initialState,
     enhancers
);
}"
54420-1.sol,question,"function () {
    var address = owner;
    const message = 'Lorem ipsum mark mark dolor sit amet, consectetur adipiscing elit. Tubulum fuisse, qua illum, cuius is condemnatus est rogatione, P. Eaedem res maneant alio modo.';

    var sig = await generateSignature(address, message);
    var ret = await verifySignature(address, message, sig);

    var result = await coinx.registerAddress.sendTransaction(address, ret.encoded, ret.v, ret.r, ret.s, {from: address});
    assert.equal(result, true);
  }"
83489-2.sol,question,"function withdraw(uint256 amount) external {

    
    uint256 amount;

    
    for (uint16 i = 0; i < timestamps[msg.sender].length; i++) {

        
        uint256 memory timestamp = timestamps[msg.sender][i];

        
        if (timestamp <= block.timestamp) {

            
            amount += requests[msg.sender][timestamp];

        } else {

            

        }
    }

    
    require(myToken(msg.sender, amount));
}"
39661-1.sol,question,"function () {
    TextContract.deployed().then(function (instance) {
      let element = ''
      for (let index = 0; index < instance.getSavedTextsCount; index++) {
        element += instance.saved_texts.call(index)
        element += '</br>'
      }

      document.getElementById('transactions').innerHTML = element
    })
  }"
39661-1.sol,question,"function (instance) {
      let element = ''
      for (let index = 0; index < instance.getSavedTextsCount; index++) {
        element += instance.saved_texts.call(index)
        element += '</br>'
      }

      document.getElementById('transactions').innerHTML = element
    }"
46834-0.sol,question,"function setMap() public payable {

   testMap[1].nmbr = 4;

 }"
68156-0.sol,question,"function testUserCanAdoptPet() public {
^------^
Compilation failed. See above.
    at async.whilst.error (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-compile/profiler.js:369:1)
    at /usr/local/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:969:1
    at next (/usr/local/lib/node_modules/truffle/build/webpack:/~/async/dist/async.js:5222:1)
    at Promise.all.then.results (/usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-compile/profiler.js:351:1)
Truffle v5.0.7 (core: 5.0.7)
Node v10.15.3
"
80193-0.sol,question,function() external payable {}
80193-0.sol,question,"function resetGame() private {
    
    game.status = GameStatusEnum.STATUS_NOT_STARTED;
    game.outcome = 0;
    game.pot = 0;

    game.originator.guess = 0;
    game.originator.betAmount = 0;
    game.originator.addr = 0;
    game.originator.status = BetStatusEnum.STATUS_UNKNOWN;

    game.taker.guess = 0;
    game.taker.addr = 0;
    game.taker.status = BetStatusEnum.STATUS_UNKNOWN;
}"
51493-0.sol,question,"function play (uint256 tokens) public {

   

  if (condition) {
   
  }
}"
76547-0.sol,question,"function openCPD(from) {
  const SaiTub = new window.web3.eth.Contract(saiTubABI, saiTubAddress);
  const receipt = await SaiTub.methods.open().send({ from, gas: 90000 });
  return receipt;
}"
66311-1.sol,question,"function() {
    
    return 
    .then(function (result) {
      
      throw(""Failed to check remaining tokens less than count"");
    }).catch(function (e) {
      var a = e.toString();
      if(e === ""Failed to check remaining tokens less than count"") {
        
        
      } else {
        
        
      }
    })
  }"
66311-1.sol,question,"function (result) {
      
      throw(""Failed to check remaining tokens less than count"");
    }"
66311-1.sol,question,"function (e) {
      var a = e.toString();
      if(e === ""Failed to check remaining tokens less than count"") {
        
        
      } else {
        
        
      }
    }"
38986-2.sol,question,"function loan(uint _amount, uint _fee, uint _numeratorPercentageAdvanced, uint _denumeratorPercentageAdvanced) public {         
        loanData.amountETH = _amount;         
        loanData.fee = _fee;                        

        loanState = LoanState.not_funded;         
        loanReceipiant = msg.sender;       

        amountToAdvance = (_amount * _numeratorPercentageAdvanced) / _denumeratorPercentageAdvanced;

        NewLoan(this, loanData.amountETH, loanData.fee);     
    }"
79093-1.sol,question,"function addPerson(string memory _firstName, string memory _lastName) public {
    people.push(Person(_firstName, _lastName));
    peopleCount += 1;
}"
15584-0.sol,question,"function rateBook(uint id, uint rating, string comments) onlyMember {
    if (id > numBooks || rating < 1 || rating > 5) {
        throw;
    }

    ratings[id].push(Review({
        rating: rating,
        reviewer: msg.sender,
        description: comments,
        dateAdded: now
        }));
}"
53074-0.sol,question,"function settlement(uint256 amount) public {

        recipient = msg.sender;
        recipient.transfer(amount);

    }"
3068-0.sol,question,"function (accounts) {

    it(""should perform differently for different accounts"", function (done) {

        var thisContract = MyContract.deployed();

        thisContract.addAccounts([accounts[1], accounts[2]], {from: accounts[0]} ).then(
            function (tx_id) {
              
                return thisContract.doSomething({from: accounts[0]});
            }).then(
            function (tx_id) {
              
                return thisContract.doSomething({from: accounts[1]});
            }).then(
            function (tx_id) {
              
                return thisContract.doSomething({from: accounts[2]};
                done();
            }
        ).catch(done);

    });

}"
3068-0.sol,question,"function (done) {

        var thisContract = MyContract.deployed();

        thisContract.addAccounts([accounts[1], accounts[2]], {from: accounts[0]} ).then(
            function (tx_id) {
              
                return thisContract.doSomething({from: accounts[0]});
            }).then(
            function (tx_id) {
              
                return thisContract.doSomething({from: accounts[1]});
            }).then(
            function (tx_id) {
              
                return thisContract.doSomething({from: accounts[2]};
                done();
            }
        ).catch(done);

    }"
3068-0.sol,question,"function (tx_id) {
              
                return thisContract.doSomething({from: accounts[0]});
            }"
77152-1.sol,question,"function name(code) {
  contract.methods.getName(code).call(option)
    .then(...)
    .catch(...);
  return ???
}"
60580-0.sol,question,"function decodeMyTx() {
  var serializedTx = document.getElementById(""inputarea"").value.trim();
  if (!serializedTx.startsWith('0x')) {
    serializedTx = '0x' + serializedTx;
  }
  try {
    var tx = ethers.utils.parseTransaction(serializedTx);
    var rawTx = {
      nonce: tx.nonce,
      gasPrice: tx.gasPrice.toHexString() + ' -> ' + tx.gasPrice.toString(),
      gasLimit: tx.gasLimit.toHexString() + ' -> ' + tx.gasLimit.toString(),
      from: tx.from,
      to: tx.to,
      value: tx.value.toHexString() + ' -> ' + tx.value.toString(),
      data: tx.data,
      chain: tx.chainId,
      v: tx.v,
      r: tx.r,
      s: tx.s
    };
    document.getElementById(""outputarea"").value = JSON.stringify(rawTx, null, ""  "");
  } catch (error) {
    document.getElementById(""outputarea"").value = error.message;
  }
}"
25069-0.sol,question,"function finishMinting() public onlyOwner {
   uint issuedTokenSupply = token.totalSupply();
   uint restrictedTokens = issuedTokenSupply.mul(49).div(51);
   token.mint(multisigVault, restrictedTokens);
   token.finishMinting();
   token.transferOwnership(owner);
   MainSaleClosed();
}"
43219-1.sol,question,"function insert(Index storage index,uint value) {
    if(index.numberofInserts==0){
     

    }
     index.numberofInserts+=1;
    if (value==0){
        index.nodes[value].dupes++;
    }
    else{
        insert_helper(index,0,true,value);
    }
}"
43219-1.sol,question,"function insert_helper(Index storage index,uint p_value,bool side,uint value) private {
    Node root=index.nodes[p_value];
    uint c_value=root.children[side];
    if (c_value==0){
        root.children[side]=value;
        Node child=index.nodes[value];
        child.parent=p_value;
        child.side=side;
        child.height=1;
        child.count=1;
        update_counts(index,value);
        rebalance_insert(index,value);
    }
    else if (c_value==value){
        index.nodes[c_value].dupes++;
        update_count(index,value);
        update_counts(index,value);
    }
    else{
        bool side_new=(value >= c_value);
        insert_helper(index,c_value,side_new,value);
    }
}"
63759-0.sol,question,"function (err, res) {
        if (err) {
            console.error(err);
        } else {
            var numPeers = res.Peers === null ? 0 : res.Peers.length;
            console.log(""IPFS - connected to "" + numPeers + "" peers"");
        }
    }"
63759-0.sol,question,"function deployStorage() {
        window.IPFSHash = null;
        window.currentData = null;

        if (window.

        window.contract.new(window.);
    }"
63759-0.sol,question,"function storeContent(url) {
        window.ipfs.add(url, function(err, result) {
            if (err) {
                console.error(""Content submission error:"", err);
                return false;
            } else if (result && result[0] && result[0].Hash) {
                console.log(""Content successfully stored. IPFS address:"", result[0].Hash);
            } else {
                console.error(""Unresolved content submission error"");
                return null;
            }
        });
    }"
63759-0.sol,question,"function(err, result) {
            if (err) {
                console.error(""Content submission error:"", err);
                return false;
            } else if (result && result[0] && result[0].Hash) {
                console.log(""Content successfully stored. IPFS address:"", result[0].Hash);
            } else {
                console.error(""Unresolved content submission error"");
                return null;
            }
        }"
63759-0.sol,question,"function storeAddress(data) {
        if (!window.contractInstance) {
            console.error('Ensure the storage contract has been deployed');
            return;
        }

        if (window.currentData == data) {
            console.error(""Overriding existing data with same data"");
            return;
        }

        window.contractInstance.set.sendTransaction(data, window.sendDataObject, function (err, result) {
            if (err) {
                console.error(""Transaction submission error:"", err);
            } else {
                window.currentData = data;
                console.log(""Address successfully stored. Transaction hash:"", result);
            }
        });
    }"
63759-0.sol,question,"function (err, result) {
            if (err) {
                console.error(""Transaction submission error:"", err);
            } else {
                window.currentData = data;
                console.log(""Address successfully stored. Transaction hash:"", result);
            }
        }"
63759-0.sol,question,"function fetchContent() {
        if (!window.contractInstance) {
            console.error(""Storage contract has not been deployed"");
            return;
        }

        window.contractInstance.get.call(function (err, result) {
            if (err) {
                console.error(""Content fetch error:"", err);
            } else if (result && window.IPFSHash == result) {
                console.log(""New data is not mined yet. Current data: "", result);
                return;
            } else if (result) {
                window.IPFSHash = result;
                var URL = window.ipfsAddress + ""/"" + result;
                console.log(""Content successfully retrieved. IPFS address"", result);
                console.log(""Content URL:"", URL);
            } else {
                console.error('No data, verify the transaction has been mined');
            }
        });
    }"
63759-0.sol,question,"function getBalance() {
        window.web3.eth.getBalance(window.account, function (err, balance) {
            console.log(parseFloat(window.web3.fromWei(balance, ""ether"")));
        });
    }"
63759-0.sol,question,"function (err, balance) {
            console.log(parseFloat(window.web3.fromWei(balance, ""ether"")));
        }"
46383-0.sol,question,"function () {
            if (typeof web3 !== 'undefined') {
                console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
                window.web3 = new Web3(web3.currentProvider);
            } else {
                console.log('No Web3 Detected... using HTTP Provider')
                window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
            }
        }"
46383-0.sol,question,"function getBalance() {
            var address, wei, balance
            address = document.getElementById(""address"").value
            try {
                web3.eth.getBalance(address, function (error, wei) {
                    if (!error) {
                        var balance = web3.fromWei(wei, 'ether');
                        document.getElementById(""output"").innerHTML = balance + "" ETH"";
                    }
                });
            } catch (err) {
                document.getElementById(""output"").innerHTML = err;
            }
        }"
46383-0.sol,question,"function (error, wei) {
                    if (!error) {
                        var balance = web3.fromWei(wei, 'ether');
                        document.getElementById(""output"").innerHTML = balance + "" ETH"";
                    }
                }"
33473-1.sol,question,"function(error, gas) {
  w3.eth.getGasPrice(function (error, gasPrice) {
    var gasPrice = Number(gasPrice);
    var transactionFee = gasPrice * gas;
    console.log(transactionFee);
 })
}"
33473-1.sol,question,"function (error, gasPrice) {
    var gasPrice = Number(gasPrice);
    var transactionFee = gasPrice * gas;
    console.log(transactionFee);
 }"
24543-0.sol,question,"function requestMoney(string _submitSecret) {
   require (hashedSubmitSecrets[i] == keccak256(_submitSecret));
}"
83634-0.sol,question,"function addTokenToTotalSupply(uint _value) onlyOwner public {
    require(_value > 0);
    balances[owner] = balances[owner].add(_value);
    totalSupply = totalSupply.add(_value);
}"
24484-1.sol,question,"function addCity(string _type, bytes32 _city) {
        Categories[_type].push(_city);
}"
54886-2.sol,question,"function addTask(uint _id) {
    id++; emit Taskcreated(_id); }"
43991-0.sol,question,"function(i){
  var numeroPlace;
  App.contracts.myContract.at(addresses[i]).then(function (instance) {
    var MyContractInstance = instance;
    MyContractInstance.getEventInfo.call().then(function (result) {
        console.log(result);
        
        return result;
    });
  });
}"
43991-0.sol,question,"function (instance) {
    var MyContractInstance = instance;
    MyContractInstance.getEventInfo.call().then(function (result) {
        console.log(result);
        
        return result;
    });
  }"
43991-0.sol,question,"function (result) {
        console.log(result);
        
        return result;
    }"
80709-0.sol,question,"function __callback() public {
    ...
}"
8663-0.sol,question,"function L_i (LStruct storage _s) internal {
        _s.i++;
    }"
83878-1.sol,question,"function withdrawReward() external {
        uint i = 0;
        uint256 ethAmount = 0;
        uint256 len = holded[msg.sender].length;
        while (i <= len - 1){
            if (block.number -  holded[msg.sender].time[i] > holdTime && block.number -  holded[msg.sender].time[i] < holdMax){
                ethAmount += tokenPrice * holded[msg.sender].amount[i];
            }
            i++;
        }
        require(ethAmount > 0);
        require(ethAmount>=(tokenPrice*requestWithdraws[msg.sender]));
        emit LogWithdrawal(msg.sender, ethAmount);
        totalSupply = totalSupply.sub(requestWithdraws[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(requestWithdraws[msg.sender]);
        contractBalance = address(this).balance.sub(ethAmount);
        emit Transfer(msg.sender, address(this), requestWithdraws[msg.sender]);
        delete holded[msg.sender];
        hold(msg.sender,balances[msg.sender]);
        msg.sender.transfer(tokenPrice*requestWithdraws[msg.sender]/tokenUnit);
    }"
26582-0.sol,question,"function (error, result) {
      if (!error) {
        console.log(result + ' is the TxHash')
        var test = web3.eth.getTransactionReceipt(result, function (error, result2) {
          if (!error) {
            if (!result2) {
              console.log('waiting for transaction to be mined....')
              console.log(result + ' is still the TxHash')
            } else {
              console.log('transaction done')
            }
          } else {
            console.error(error)
          }
        })
      } else {
        console.error(error)
      }
    }"
26582-0.sol,question,"function (error, result2) {
          if (!error) {
            if (!result2) {
              console.log('waiting for transaction to be mined....')
              console.log(result + ' is still the TxHash')
            } else {
              console.log('transaction done')
            }
          } else {
            console.error(error)
          }
        }"
63013-2.sol,question,"function (instance) {
        meta = instance;
        return meta.grantAccess(constants.patient1Address, constants.ECG_DOC_HASH, constants.doctor1Address, constants.ViewDocumentPermission);
    }"
63013-2.sol,question,"function () {
        return meta.grantAccess(constants.patient2Address, constants.ECG_DOC_HASH, constants.doctor1Address, constants.ViewDocumentPermission);
    }"
63013-2.sol,question,"function(result){
        console.log('patient 1 permissions: ',result);
    }"
63013-2.sol,question,"function(){
        return meta.checkAccess(constants.doctor1Address, constants.patient2Address, constants.ECG_DOC_HASH);
    }"
63013-2.sol,question,"function(result2){
        console.log('patient 2 permissions: ',result2);
    }"
59790-1.sol,question,"function (deployer) {
  deployer.deploy(ChainList);
}"
43463-1.sol,question,"function() { 
    var self = this; 
    var acc=account; 
    var name=document.getElementById(""name"").value; 
    var password=document.getElementById(""password"").value; 
    var meta; 
    CoinFlipper.deployed().then(function(instance) { 
        meta = instance; 
        return meta.check.call(acc,name,password).then(function (value) { }, "
43463-1.sol,question,"function(instance) { 
        meta = instance; 
        return meta.check.call(acc,name,password).then(function (value) { }, "
43463-1.sol,question,function (value) { }
51123-2.sol,question,"function initiateArticles() {
    contract.getArticleAmount({from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                getArticle(i)
                i++;
            }
        }
        else {
            console.log(error);
        }
    });
}"
51123-2.sol,question,"function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                getArticle(i)
                i++;
            }
        }
        else {
            console.log(error);
        }
    }"
51123-2.sol,question,"function getArticle(id) {
    contract.getArticle(id, {from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            document.getElementById(""recentArticles"").innerHTML = document.getElementById(""recentArticles"").innerHTML + result[0] + result[1]...;
            ## This is not the finished code. Here I need help.
        }
        else {
            console.log(error);
        }
    });
}"
56524-0.sol,question,"function addUnitExp(uint256 _unitId, uint256 _exp, uint32 _type) public {
    Unit storage _unit = tokenToUnit[_unitId];
    _unit.defense = _exp;
}"
68881-0.sol,question,"function (gasAmount) {
    gasEstimated = gasAmount
}"
8956-0.sol,question,"function sendWhisper() {
    var shh = web3.shh;
    var appName = ""My silly app!"";
    var myName = ""Gav Would"";
    var myIdentity = shh.newIdentity();
}"
41079-0.sol,question,"function(error,result){
if (!error) {
    
    if (result.address) {
        
        console.log(""contract address: "" + result.address);
        console.log(createEtherscanIoUrl('address', result.address));

        
        
        
        
        
        
        
        
        

    } else {
        
        console.log(""contract transaction hash: "" + result.transactionHash);
        console.log(createEtherscanIoUrl('tx', result.transactionHash));

        myweb3.eth.getTransaction(result.transactionHash, function(error, result) {
            if(error) {
                console.log(error);
            }
            else {
                console.log(""transaction: "" + result);
            }
        });

        pollTransactionReceipt(result.transactionHash);
    }
} else {
    console.log(""error contract.new: "" + error);
}
}"
41079-0.sol,question,"function(error, result) {
            if(error) {
                console.log(error);
            }
            else {
                console.log(""transaction: "" + result);
            }
        }"
41079-0.sol,question,"function createEtherscanIoUrl(type,hashOrNumber){

var etherscanBaseUrl='https:

var url = etherscanBaseUrl;
if(type === 'tx'){
    url += 'tx/'+hashOrNumber;
} else if(type === 'block'){
    url += 'block/'+hashOrNumber;
} else if(type === 'address'){
    url += 'address/'+hashOrNumber;
}
return url;
}"
41079-0.sol,question,"function pollTransactionReceipt(transactionHash) {
var delay = 2000;

var receipt = myweb3.eth.getTransactionReceipt(transactionHash, function(error, result) {
    if(error) {
        console.log(""error:  "" + error);
    }
    else {
        console.log(""receipt: "" + result);
    }
});




if(typeof receipt === ""undefined"" || receipt.contractAddress === null) {
    setTimeout(function() {
        pollTransactionReceipt(transactionHash);
    }, delay);
}
else {
    console.log(receipt.contractAddress);
}
}"
41079-0.sol,question,"function() {
        pollTransactionReceipt(transactionHash);
    }"
57169-0.sol,question,"function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
}"
57169-0.sol,question,"function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0), ""Adress can't be 0x0000..."");
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
}"
77838-0.sol,question,"function setDocument(bytes32  _hash, string memory _documentName, bytes32 _documentHash) public {
     Document memory document = documents[_hash];

     document.id = documentCount++;
     document.documentName = _documentName;
     document.documentHash = _documentHash;
     document.sender = msg.sender;

    documentHashMap.push(_hash) -1;
}"
41493-1.sol,question,"function test1(address addr1) nonReentrant external {
    for (uint8 i = 0; i < 10; i++) {
       
    }        
    workDone[msg.sender] = workDone[msg.sender].add(uint256(10 ether));
}"
44758-3.sol,question,"function callMethod() 
        {
            var MyContract = web3.eth.contract(abi);
            var myContractInstance = MyContract.at(contractAddress);

            var accountToSubmitNOC = web3.eth.accounts[0];
            var unlockAccount = web3.personal.unlockAccount(accountToSubmitNOC,'',300);
            var msg = document.getElementById('idString').value;
            var txHash = myContractInstance.getString(msg, function (err, res) {if (!err) { console.log(err, res); document.getElementById(""idReturnValue"").innerText = JSON.stringify(res); }});
        }"
44758-3.sol,question,"function (err, res) {if (!err) { console.log(err, res); document.getElementById(""idReturnValue"").innerText = JSON.stringify(res); }}"
9197-1.sol,question,"function commit(bytes32 POIuser) {
    uint groupNumber = uint(POIuser) / (uint(maxHash) / numGroups()) + 1;

    if(hangoutGroups[groupNumber].length >= groupSize) {
        for(uint i = 0; i < 2; i++) {
            if(groupNumber - i >= 1) {
                if(hangoutGroups[groupNumber - i].length < groupSize) { groupNumber -= i; break; }
            }
            if(groupNumber + i <= numGroups()) {
                if(hangoutGroups[groupNumber + i].length < groupSize) { groupNumber += i; break; }
            }
        }
    } 

    hangoutGroups[groupNumber].push(POIuser);
}"
56784-1.sol,question,"function dripToken() public {
  require(faucetStatus);
  if(!checkStatus(msg.sender)) revert();
  tokenInstance.updateSupply(oneToken);
  updateStatus(msg.sender, oneMinute);
  tokenInstance.transfer(msg.sender, oneToken);
}"
28217-0.sol,question,"function sendEther(string data) payable {
  address sender = msg.sender;
  uint value = msg.value;
  voter[sender].data = data;
  voter[sender].amount = value;
  voterIndex[voter_count] = sender;
  voter_count = voter_count + 1;
  Deposit(sender, value);
}"
47518-1.sol,question,"function(accounts) {

  let weirdCase;

  beforeEach(async () => {
    weirdCase = await WeirdCase.new();
  });


  it(""Case 1: succeeds"", async function () {
    let beforeOwner = await weirdCase.getOwner();
    await weirdCase.someMethod1();

    let afterOwner = await weirdCase.getOwner();
    assert.equal(beforeOwner, afterOwner);
  });

  it(""Case 2: succeeds"", async function () {
    let beforeOwner = await weirdCase.getOwner();
    await weirdCase.someMethod2();

    let afterOwner = await weirdCase.getOwner();
    assert.equal(beforeOwner, afterOwner);
  });

  
  it(""Case 3: not sure why this fails"", async function () {
    let beforeOwner = await weirdCase.getOwner();
    await weirdCase.someMethod3();

    let afterOwner = await weirdCase.getOwner();
    assert.equal(beforeOwner, afterOwner);
  });
}"
47518-1.sol,question,"function () {
    let beforeOwner = await weirdCase.getOwner();
    await weirdCase.someMethod1();

    let afterOwner = await weirdCase.getOwner();
    assert.equal(beforeOwner, afterOwner);
  }"
41630-0.sol,question,"function (tx) {
  var rcpt = web3.eth.getTransactionReceipt(tx).then(function (rcpt) {
    console.log(rcpt.cumulativeGasUsed.toString());
  });"
41630-0.sol,question,"function (rcpt) {
    console.log(rcpt.cumulativeGasUsed.toString());
  }"
73866-1.sol,question,"function boofar(uint val) public {
  Vote memory result;
  result.amount += val;
}"
50682-0.sol,question,"function transfer() external payable onlyOwnerB {
     require (msg.value == 1 ether);
     ownerA.transfer(1 ether);
     previousOwner = ownerA;
     currentOwner = ownerB;
     txTimeStamp = now;
     emit transferred();
}"
41906-0.sol,question,"function balance(addr) {
    var start = Date.now();
    var latestBalance = web3.eth.getBalance(addr, ""latest"");
    var nonce = web3.eth.getTransactionCount(addr, ""latest"");
    var end = Date.now();
    return nonce;
}"
41906-0.sol,question,"function showBalance(addr) {
    var start = Date.now();
    var latestBalance = web3.eth.getBalance(addr, ""latest"");
    var nonce = web3.eth.getTransactionCount(addr, ""latest"");
    var end = Date.now();
    var res = {
        ""address"": addr,
        ""balance"": latestBalance + "" Wei / "" + web3.fromWei(latestBalance).toString() + "" ETH"",
        ""nonce"": nonce.toString(),
        ""timestamp"": (end - start).toString() + ""ms""
    }
    return res;
}"
41906-0.sol,question,"function sendBalance(_from, _to) {
    var nonce = balance(_from);
    var amount = 0.05;
    var rawTx = {
        nonce: web3.toHex(nonce),
        gasPrice: web3.toHex(10),
        gasLimit: web3.toHex(21000),
        to: _to,
        value: web3.toHex(amount * 1000000000),
        data: """",
        chainId: 1
    }

    var addFromPrivateKey = new Buffer('4ce80ef53f9c13e5d68737ff078e0660e803f87735fab9c79bf408335be8963d', 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(addFromPrivateKey);
    var res ="""";
    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendTransaction({ 
        from: _from, 
        to: _to,
        value: web3.toWei(amount, ""ether""),
        gas: rawTx.gasLimit,
        price: rawTx.gasPrice,
        nonce: rawTx.nonce
    }, function(error, hash){res = error;});
    var txLog = """";
    
    
    
    
    
    
    
    res = ""Status: "" + res + "" |||| from: "" + _from + ""\nsendValueETH: "" + amount + ""\nrawTx: "" + JSON.stringify(rawTx, null, 4) + "" "" + txLog; 
    return res;
}"
41906-0.sol,question,"function(error, hash){res = error;}"
41906-0.sol,question,"function(req, res) {

    var dti = sendBalance('0xa5d1274a05ab92e3830d81e0e4302498ccb5b22f', '0x6a1366a19b6dbb4d9fe4781f38538e9dc2ec0698');
    dto = showBalance('0xa5d1274a05ab92e3830d81e0e4302498ccb5b22f');
    dtt = showBalance('0x6a1366a19b6dbb4d9fe4781f38538e9dc2ec0698');

    data = {
        ""dta"": {
            ""sender"": dto,
            ""recipient"": dtt,
            ""transaction"": dti
        }
    }
    res.render('index', {data});
}"
79055-0.sol,question,"function runWorkflow(idBench) {
    benchmarkLaunchedCount++;
    var execResult = true;
    var startTime = performance.now();
    var machineId = allocateTaskToMachine();
    var scWorkflow = require(""./contracts/"" + benchmarkContractFN.split('.').slice(0, -1).join('.') + "".json"")

    try {
        var contract = await deployContract(machineId, scWorkflow[0]);
    }
    catch(e) {
        execResult = false;
        if (VERBOSE) tlog(e);
    }

    if(execResult) {
        for(var i = 1; i < scWorkflow.length; i++) {
            opLaunchCount++;

            try {
                var parameters = resolveParameters(scWorkflow[i].parameters, machineId);
                var execResult = await contract.methods[scWorkflow[i].name](...parameters)[scWorkflow[i].type]({from: machines[machineId].address, gas: '0x346DC5D638', gasPrice: '0x0'});

                if(execResult.transactionHash ||聽execResult) {
                    opSuccessCount++;
                }
                else {
                    execResult = false;
                    break;
                }
            }
            catch(e) {
                execResult = false;
                if (VERBOSE) tlog(e);
            }
        }
    }

    var endTime = performance.now();

    machines[machineId].load -= 1;

    ... just saving results after this line ...
}"
29120-0.sol,question,"function SetLF(S storage R,uint LInP)external {
        R.UI=LInP;
    }"
68217-0.sol,question,"function create(uint created_at) public {
    require(now > created_at, ""The created_at should be less than now ."");
}"
83723-1.sol,question,"function mineTokenReward() {
  balances[block.coinbase] += 1; 
}"
78047-0.sol,question,"function() {
    $.getJSON('https:

    console.log(""%o"", adData) 
    data = adData.result[index];

    contractName = data.ContractName; 

    compVersion = data.CompilerVersion;
    sourceCode = data.SourceCode;

      fs.writeFile('./openSourceContracts/'+contractName+'.sol', sourceCode, function (err) {
        if (err) throw err;
        console.log('Saved! contract'); 
        });

    }"
78047-0.sol,question,"function (err) {
        if (err) throw err;
        console.log('Saved! contract'); 
        }"
9414-1.sol,question,"function (require) {
var $ = require('jquery'),
    Web3 = require('web3'),
    lib = require('./lib'),
    controller = require('./controller/c1'),
    model = require('./model/m1');



var web3 = new Web3(new Web3.providers.HttpProvider('http:
console.log(web3);
controller.setModel(model);
$(function () {
    controller.render(lib.getBody());
});}"
9414-1.sol,question,"function () {
    controller.render(lib.getBody());
}"
15182-0.sol,question,"function payMeBack() {
    if(require(<some condition>)) 
       if(!client.send(gainedWei)) throw; 
    else
       if(!cluster.send(gainedWei)) throw; 
    gainedWei = 0;
    client.success = 1;
}"
58499-0.sol,question,"function(gas){
  var params = {
    from: web3.eth.coinbase,
    gas: 5000000
  }

  contract.send(params, function (error, transactionHash) {
    if (error) {
      console.log(error);
      $j(""#page_loader"").hide();
      toastr.error(error);
    }
    console.log(transactionHash);
  })
  .on('error', function (error) {
    $j(""#page_loader"").hide();
    toastr.error(error);
    console.log(error);
  })
  .on('transactionHash', function (transactionHash) {
    
    $j(""#txhash"").text(transactionHash);
    setEtherscanIoLink('contracttransactionhash_link', 'tx', transactionHash);
    result.transactionHash = transactionHash;
   
    $j(""#page_loader"").hide();
  })
  .on('receipt', function (receipt) {
    console.log(receipt.contractAddress) 
    document.getElementById('contractaddress').value = receipt.contractAddress;
    setEtherscanIoLink('contractaddress_link', 'address', receipt.contractAddress);
  })
  .on('confirmation', function (confirmationNumber, receipt) {
    console.log(confirmationNumber);
    console.log(receipt);
  });
}"
58499-0.sol,question,"function (error, transactionHash) {
    if (error) {
      console.log(error);
      $j(""#page_loader"").hide();
      toastr.error(error);
    }
    console.log(transactionHash);
  }"
58499-0.sol,question,"function (error) {
    $j(""#page_loader"").hide();
    toastr.error(error);
    console.log(error);
  }"
58499-0.sol,question,"function (transactionHash) {
    
    $j(""#txhash"").text(transactionHash);
    setEtherscanIoLink('contracttransactionhash_link', 'tx', transactionHash);
    result.transactionHash = transactionHash;
   
    $j(""#page_loader"").hide();
  }"
58499-0.sol,question,"function (receipt) {
    console.log(receipt.contractAddress) 
    document.getElementById('contractaddress').value = receipt.contractAddress;
    setEtherscanIoLink('contractaddress_link', 'address', receipt.contractAddress);
  }"
58499-0.sol,question,"function (confirmationNumber, receipt) {
    console.log(confirmationNumber);
    console.log(receipt);
  }"
51150-1.sol,question,"function send(transaction) {
    let success = await web3.eth.personal.unlockAccount(OWNER_ADDRESS, OWNER_PASSWORD);
    let gas = await transaction.estimateGas({from: OWNER_ADDRESS, gasPrice: GAS_PRICE});
    console.log(`gas = ${gas}`);
    return await transaction.send({from: OWNER_ADDRESS, gasPrice: GAS_PRICE, gas: gas});
}"
83463-0.sol,question,"function safeTransfer(address payable _base, uint value) internal {
    (bool success, ) = _base.call.value(value)("""");
    require(success, ""SafeTransfer"");
}"
54421-1.sol,question,"function() {  
        if (typeof web3 !== 'undefined') {     
            web3js = new Web3(web3.currentProvider); 
        } 
        else {
            this.alert(""Install Metamask."");         
        }
        startApp();
    }"
54421-1.sol,question,"function startApp() {
        var contractAddress = ""0x715e99e73deefdb06f9d1e55172cbc52307eda5b"";   
        simpleRegister = new web3js.eth.Contract(contractABI, contractAddress);
    }"
54421-1.sol,question,"function _getName() {
        return simpleRegister.methods.getName().call();
    }"
54421-1.sol,question,"function getName() {           
        _getName().then(function(result) {
            $(""#display"").html(result[0]);
            console.log(result);
        });
    }"
54421-1.sol,question,"function(result) {
            $(""#display"").html(result[0]);
            console.log(result);
        }"
7656-0.sol,question,"function gotResult(error, result) {
            if(!error) {
                console.log(error);
            }
            else {
                console.log(result);
            }                               
    }"
31383-2.sol,question,"function LocalEthereum() public {
        owner = msg.sender;
    }"
18283-0.sol,question,"function addToStorage(bytes32 someData) {
  someStorage.push(someData);
}"
84755-0.sol,question,"function addressing(input) {
    let zeros = ""0"";  
    let input = web3.utils.fromAscii(input);
    if (input.length < 42) {
        let remainder = 32-input.length;
        for(let i = remainder-1; i > 0; i--) {
            zeros += ""0"";
        }
    }
    let inputZerod = input+zeros;
    return inputZerod;
}"
84755-0.sol,question,"function bytify32(input) {
    let zeros = ""0"";  
    let input = web3.utils.fromAscii(input);
    if (input.length < 32) {
        let remainder = 32-input.length;
        for(let i = remainder-1; i > 0; i--) {
            zeros += ""0"";
        }
    }
    let inputZerod = input+zeros;
    return inputZerod;
}"
42207-0.sol,question,"function withdrawAll() public {
  Locker[] storage lockers = lockersByAddress[msg.sender];
  for (uint i = 0; i < lockers.length; i++) {
    if (lockers[i].creationTime + lockers[i].holdTime < now) {
      msg.sender.transfer(lockers[i].balance);
      Withdrawal(msg.sender, lockers[i].balance);
      delete lockers[i];
    }
  }
}"
10495-1.sol,question,"function getResult(cb) {
      contractObject = web3.eth.contract(abi);
            contractInstance = contractObject.at(address);

      contractInstance.test.call(
  function(err,getOutput) {
       if(err) {console.log(err);}
       var gotOutput = getOutput;
       console.log('Test result received: ' + getOutput);
    return cb(null,gotOutput);
     });
        }"
10495-1.sol,question,"function(err,getOutput) {
       if(err) {console.log(err);}
       var gotOutput = getOutput;
       console.log('Test result received: ' + getOutput);
    return cb(null,gotOutput);
     }"
10495-1.sol,question,"function asyncComplete(err, getResult) {
        if (err) {console.log(err);}
        var result = [];
        result.push({ result: getResult[0], address: getResult[1]});
        console.log(result);
    }"
60708-0.sol,question,"function (error, txHash) {
        if (error) {
            console.log('pending filter error: ' + error);
        } else {
            try {
                const currentTx = web3.eth.getTransaction(txHash);
                doSomething(currentTx);
            }
            catch (err) {
                console.log('mempool getTransaction error: ' + err);
            }
        }
    }"
12096-0.sol,question,"function loginUser() {
  return function(dispatch) {
    web3.eth.getCoinbase(function (err, address) {
      if (err) { throw err }
      web3.eth.defaultAccount = address;

      uport.getUserPersona().then((userPersona) => {

        registry.getPublicProfile(userPersona.profileAddress).then((profile) => {
        console.log(profile);
      });
        return dispatch(userLoggedIn(userPersona.profile))
      })
    })
  }
}"
12096-0.sol,question,"function(dispatch) {
    web3.eth.getCoinbase(function (err, address) {
      if (err) { throw err }
      web3.eth.defaultAccount = address;

      uport.getUserPersona().then((userPersona) => {

        registry.getPublicProfile(userPersona.profileAddress).then((profile) => {
        console.log(profile);
      });
        return dispatch(userLoggedIn(userPersona.profile))
      })
    })
  }"
12096-0.sol,question,"function (err, address) {
      if (err) { throw err }
      web3.eth.defaultAccount = address;

      uport.getUserPersona().then((userPersona) => {

        registry.getPublicProfile(userPersona.profileAddress).then((profile) => {
        console.log(profile);
      });
        return dispatch(userLoggedIn(userPersona.profile))
      })
    }"
32735-0.sol,question,"function execInRopstenEx(){
var Web3 = require('web3');
var util = require('ethereumjs-util');
var lightwallet = require('eth-lightwallet');
var txutils = lightwallet.txutils;

var web3 = new Web3(
    new Web3.providers.HttpProvider('https:
    

var address = '<FROM_ADDRESS>';
var address2 = 'CONTRACT_ADDRESS';
var key = '<MY_PRIVATE_KEY>';
var currentChainId = 3;

var amount = web3.toWei(0.2, ""ether"");
var balance = await web3.eth.getBalance(address);

var value = web3.fromWei(balance, 'ether');

console.log(value);

var rawTx = {
    
    nonce: web3.toHex(2),        
    gasPrice: ""0x9184e72a000"",
    chainId:currentChainId,
    gasLimit: web3.toHex(210000),
    to: address2,
    from:address,
    input:0xc6888fa10000000000000000000000000000000000000000000000000000000000000006
}

console.log(""rawTxn "",rawTx);
sendRaw(rawTx,key);}"
32735-0.sol,question,"function sendRaw(rawTx, key) {
var tx = require('ethereumjs-tx');
var privateKey = new Buffer(key, 'hex');
var transaction = new tx(rawTx);
transaction.sign(privateKey);
var serializedTx = transaction.serialize().toString('hex');
await web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) {
            console.log('error');
            console.log(err);
        } else {
            console.log('success');
            console.log(result);
        }
    });"
32735-0.sol,question,"function(err, result) {
        if(err) {
            console.log('error');
            console.log(err);
        } else {
            console.log('success');
            console.log(result);
        }
    }"
79067-0.sol,question,"function (error, balance) {
        $('account-balance').html = balance;
     }"
25256-1.sol,question,"function () payable {
    uint amount = 0;
    amount += msg.value;
    balanceOf[msg.sender] += amount;
    amountRaised += amount;
    tokenReward.transfer(msg.sender, amount / price);
    FundTransfer(msg.sender, amount, true);
}"
39881-0.sol,question,"function xyz() public {
   ceoAddress = msg.sender;
   cooAddress = msg.sender;
}"
66228-3.sol,question,"function () {
                    return new HDWalletProvider(
                        process.env.MNENOMIC, ""https:
                    )
                }"
21579-1.sol,question,"function (error, transactionHash) {
      if (error) {
        console.log(error);
      }
      return transactionHash;
    }"
64051-0.sol,question,"function endSale() public {
 require(msg.sender == admin);
 selfdestruct(admin);
}"
9105-0.sol,question,"function createPlayer() {
    critical; 
    var player = players[msg.sender];
    if (player.ready) { throw; }
    player.ethaddress = msg.sender;
    player.creationdate = block.timestamp; 
    player.balance += msg.value;
}"
70863-0.sol,question,"function apply() {
console.log(""Done: "" );

}"
12097-2.sol,question,"function Quux() { 
        Foo myFoo = foos[msg.sender];
        myFoo.bar.push(""xxx"");
    }"
63994-2.sol,question,"function tokensReceived(address _operator, address _from, address _to, uint256 _amount, bytes _data, bytes _operatorData) external {
    uint arg1;
    uint arg2;
    uint arg3;
    uint arg4;
    uint arg5;
    uint arg6;
    uint arg7;
    uint arg8;
    uint arg9;
    uint arg10;
    uint arg11;
    uint arg12;
    uint arg13;
    uint arg14;

    bytes memory tmp = _data;
    assembly {
        arg1  := mload(add(0x020, tmp))
        arg2  := mload(add(0x040, tmp))
        arg3  := mload(add(0x060, tmp))
        arg4  := mload(add(0x080, tmp))
        arg5  := mload(add(0x0A0, tmp))
        arg6  := mload(add(0x0C0, tmp))
        arg7  := mload(add(0x0E0, tmp))
        arg8  := mload(add(0x100, tmp))
        arg9  := mload(add(0x120, tmp))
        arg10 := mload(add(0x140, tmp))
        arg11 := mload(add(0x160, tmp))
        arg12 := mload(add(0x180, tmp))
        arg13 := mload(add(0x1A0, tmp))
        arg14 := mload(add(0x1C0, tmp))
    }
}"
80256-4.sol,question,"function (deployer) {
  deployer.deploy(BytesUtils);
  deployer.link(BytesUtils, AuthCoinContract);
  deployer.deploy(AuthCoinContract);
}"
46887-3.sol,question,"function myFunction(uint value) {
    balances[owner][counter] = balances[owner][counter] + value;
    counter = counter +1;
}"
35355-0.sol,question,"function claimTokens(address _token) public onlyController {
"
22800-0.sol,question,"function () {
  if (typeof web3 !== 'undefined') {
    console.warn('Using web3 detected from external source like Metamask')
    window.web3 = new Web3(web3.currentProvider)
  } else {
    console.warn(""No web3 detected. Falling back to http:
    window.web3 = new Web3(new Web3.providers.HttpProvider('http:
  }"
46820-0.sol,question,"function whatIsPut() payable {
put();
}"
43701-2.sol,question,"function withdraw() onlyOwner external {
    address myAddress = this;
    if(myAddress.balance > 0)
        owner.transfer(myAddress.balance);
    uint256 tokBalance = token.balanceOf(this);
    tokBalance = tokBalance - (1 wei);
    if(tokBalance > 0)
        token.transfer(owner, tokBalance);
  }"
58676-1.sol,question,"function forwardFunds() internal {
    wallet.transfer(msg.value);
}"
57532-1.sol,question,"function _transfer(address _from, address _to, uint _value) internal {
    
    require(_to != 0x0);
    
    require(balanceOf[_from] >= _value);
    
    require(balanceOf[_to] + _value >= balanceOf[_to]);

    require(!frozenAccount[_from]);
    require(!frozenAccount[_to]);

     
    uint previousBalances = balanceOf[_from] + balanceOf[_to];
    
    balanceOf[_from] -= _value;
    
    balanceOf[_to] += _value;
    emit Transfer(_from, _to, _value);
    
    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
}"
62408-2.sol,question,"function buyTokens(address _beneficiary) public payable {
    revert();
}"
56862-0.sol,question,"function waitForTransactionReceipt(hash) {
    console.log('waiting for contract to be mined');
    const receipt = web3.eth.getTransactionReceipt(hash);
    
    if (receipt == null) {
        setTimeout(() => {
            waitForTransactionReceipt(hash);
        }, 1000);
    } else {
        
        console.log('contract address: ' + receipt.contractAddress);
        
    }
}"
71815-2.sol,question,"function compilingPreparations() {
  const buildPath = path.resolve(__dirname, 'build'); 
  fs.removeSync(buildPath); 
  return buildPath; 
  }"
71815-2.sol,question,"function createConfig() {
  return {
      language: 'Solidity',
      sources: {
        'Listing.sol': {
          content: fs.readFileSync(path.resolve(__dirname, 'contracts', 'Listing.sol'), 'utf8')
          }
        }
    }
  }"
71815-2.sol,question,"function compileSources(config) {
  try {
      return JSON.parse(solc.compile(JSON.stringify(config)));
    } catch (e) {}
  }"
71815-2.sol,question,"function errorHandling(compiledSources) {
  if (!compiledSources) {
    console.error('>>>>>>>>>>>>>>>ERRORS<<<<<<<<<<<<<<<\n', 'NO OUTPUT');
  } else if (compiledSources.errors) { 
    console.error('>>>>>>>>>>>>>>>ERRORS<<<<<<<<<<<<<<<\n');
    compiledSources.errors.map(error => console.log(error.formattedMessage));
  }
}"
71815-2.sol,question,"function writeOutput(compiled, buildPath) {
  fs.ensureDirSync(buildPath);

  for (let contractFileName in compiled.
}"
46832-0.sol,question,"function setName(string newName) {
^ (Relevant source part starts here and spans across multiple lines)."
50609-1.sol,question,"function CappedCrowdsale(uint256 _cap) public { ^ (Relevant source part 
starts here and spans across multiple lines).
    not valid for functions.oc tag @dev
"
21500-0.sol,question,"function fx() {
return 12;
}"
79024-0.sol,question,"function betOnTeam(uint team) payable public {
        update();
        emit LogInfo(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
        if(team == 1)
        {

                if(msg.value == amount)
                {
                    homeBet = msg.sender;
                    if(homeBet != 0 && awayBet != 0)
                    {
                        


                        oraclize_query(""URL"", ""json(https:
                        update();                   
                    }
                }
                else
                {
                    throw;
                }
        }"
66176-1.sol,question,"function initWallet(address _owner) public payable {
   owner = _owner;
}"
84258-1.sol,question,"function () {

    var EthUtil = require('ethereumjs-util');
    const messageToSign = web3.utils.toBN(12);
    
    const privateKey = ""b25421d6dabd6e9119c45c4daf4ca4f8f86bd6761cc20c095906073da7c02471"";
    var hash = EthUtil.hashPersonalMessage(new Buffer(accounts[2] + accounts[0] + EthUtil.intToHex(messageToSign)));
    var signature = EthUtil.ecsign(hash, new Buffer(privateKey, 'hex'));
    var signatureRPC = EthUtil.toRpcSig(signature.v, signature.r, signature.s)
    console.log(signatureRPC);

    const contract = await ValidationUserContract.deployed();
    const owner = await contract.getOwner();
    const theMsg = await contract.validAddress.call(messageToSign,
        signature.v,
        signature.r,
        signature.s, {
            from: accounts[2]
        });

}"
83555-2.sol,question,"function () external payable {
            require (clicksfromcreatorcount>=1);
            if (clicksfromcreatorcount ==1) {
                require (tx.origin == creatorino);

            }
            require (count<2);
            count++;     
        }"
55166-0.sol,question,"function doDeploy(deployer, network) {
    console.log(""Contract1 bytecode size: "", Contract1.deployedBytecode.length);
    console.log(""Contract2 bytecode size: "", Contract2.deployedBytecode.length);
    console.log(""Contract3 bytecode size: "", Contract3.deployedBytecode.length);

    await deployer.deploy(Contract1);
    await deployer.deploy(Contract2);
    await deployer.deploy(Contract3);
}"
55166-0.sol,question,"function(deployer, network) {
    deployer.then(async () => {
        await doDeploy(deployer, network);
    });
}"
46299-1.sol,question,"function send() {
        if (typeof web3 !== 'undefined') {
            web3 = new Web3(web3.currentProvider);
        } else {
            web3 = new Web3(new Web3.providers.HttpProvider(""http:
        }
        if(!web3.isConnected()) {
            console.log('not-connected');
        } else {
           console.log('connected');
        }
    }"
56156-1.sol,question,"function setStudent (address _address, string _grade, string _fName, string _lName, string _email, string _className) public {
    var student = Students[_address];

    
    student.grade = _grade;
    student.studentAddr = _address;
    student.fName = _fName;
    student.lName = _lName;
    student.email = _email;
    student.className = _className;

    studentAccts.push(_address) -1;
}"
83229-0.sol,question,"function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, ""Address: insufficient balance"");

        (bool success, ) = recipient.call{ value: amount }(""""); 
        require(success, ""Address: unable to send value, recipient may have reverted"");
    }"
4251-0.sol,question,"function doSomething() {
    if(someCondition) {
        bytes memory data = functionSig + encoded_params.
        toAddress.call(data);
    }
}"
48986-0.sol,question,"function deploy(bytes _code) public {
    address tokenAddress;
    assembly {
        tokenAddress := create(0, add(_code, 0x20), mload(_code))
        if iszero(extcodesize(tokenAddress)) { revert(0, 0) }
    }
}"
34074-0.sol,question,"function () {

     if (typeof Web3 !== 'undefined') {
        window.web3 = new Web3(window.web3.currentProvider);
        console.log('Found web3!');
        console.log('Your Account: '+ web3.eth.accounts[0]);
        startApp();
     } else {
        console.log(""No web3!"");
        getWeb3();
     }
}"
70907-3.sol,question,"function stakeclmidx (uint _stakeidx) public {
require(_stakeidx >= 0);

Stake storage _stake = stakes[msg.sender][_stakeidx];


require(block.number > _stake.endBlock);

require(_stake.amount > 0);


balances[address(this)] = balances[address(this)].sub(_stake.amount);

balances[msg.sender] = balances[msg.sender].add(_stake.amount);

emit Transfer(address(this), msg.sender, _stake.amount);
emit StakeClaimed(_stakeidx);


_deletestake(msg.sender, _stakeidx);

}"
70907-3.sol,question,"function _deletestake(address _staker,uint _index) internal {
require(_index < stakes[_staker].length);
stakes[_staker][_index] = stakes[_staker][stakes[_staker].length-1];
delete stakes[_staker][stakes[_staker].length-1];
stakes[_staker].length = stakes[_staker].length - 1;





}"
43767-0.sol,question,function deposit(uint _money) public payable {}
43767-0.sol,question,"function get

function() payable {}"
65601-1.sol,question,"function createTokens(uint256 value) private  {
        if(isMinting == true) {
            require(value > 0);
            uint256 tokens = value.div(100000000000000).mul(RATE);
            balances[msg.sender] = balances[msg.sender].add(tokens);
            _totalSupply = _totalSupply.add(tokens);
            owner.transfer(value);
        }
        else {
            throw;
        }
    }"
19560-3.sol,question,"function () {
Test.deployed().then(function()"
54678-2.sol,question,"function (error, result) {
                        if(!error)
                        {
                            console.log(result);
                            document.write(result);
                        }
                        else{
                            console.log(error);
                        }
                }"
24511-1.sol,question,"function createTokens(address recipient) public payable {
    ...

    if (contains(recipient)) {
       ledger.maps[recipient] = ledger.maps[recipient].add(tokens);
    } else {
       ledger.maps[recipient] = tokens;
       ledger.keys.push(recipient);
       ledger.newKeys.push("""");
    }
    ...
  }"
41350-3.sol,question,"function redeem(uint256 quantity) external{
      uint256 baseUnits = quantity * 10**18;
      uint256 tokensAvailable = token.balanceOf(this);
      require(redeemBalanceOf[msg.sender]>=baseUnits);
      require( tokensAvailable >= baseUnits);
      redeemBalanceOf[msg.sender] -= baseUnits;
      token.transfer(msg.sender,baseUnits);
      Redeemed(msg.sender,quantity);
  }"
78039-0.sol,question,"function() {
    $.getJSON('https:
    console.log(adData.result)          
        }"
38249-1.sol,question,"function verify(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) public {
    bytes memory prefix = ""\x19Ethereum Signed Message:\n32"";
    bytes32 prefixedHash = keccak256(prefix, msgHash);
    a = ecrecover(prefixedHash, v, r, s);
}"
39660-0.sol,question,"function mintToken(address target, uint256 mintedAmount) onlyOwner {
    balanceOf[target] += mintedAmount;
    totalSupply += mintedAmount;
    Transfer(0, owner, mintedAmount);
    Transfer(owner, target, mintedAmount);
}"
65506-0.sol,question,"function newCollection() public {
    collections.append(Collection({
        collectionCreator: msg.sender,
        
        books: <HELP>
    }))
}"
40394-0.sol,question,"function newBid(bytes32 sealedBid) payable {
  if (address(sealedBids[msg.sender][sealedBid]) > 0) throw;
  if (msg.value < minPrice) throw;

  
  Deed newBid = (new Deed).value(msg.value)(msg.sender);
  sealedBids[msg.sender][sealedBid] = newBid;
  NewBid(sealedBid, msg.sender, msg.value);
}"
61901-0.sol,question,"function () {
        return new HDWalletProvider(
          privateKey,
          ""https:
        );
      }"
61318-0.sol,question,"function(){
        $.getJSON(""MyContract.json"", function(my)
      }"
61318-0.sol,question,"function (instance) {
          instance.Event({}, {
              fromBlock: 0,
              toBlock: 'latest'
          }).watch(function (error, event) {
                console.log(""WATCHED EVENT"")
          })
        }"
61318-0.sol,question,"function (error, event) {
                console.log(""WATCHED EVENT"")
          }"
59034-0.sol,question,"function () external payable {
    getTokens();
}"
59034-0.sol,question,"function getTokens() payable canDistr  public {
    uint256 tokens = 0;

    require( msg.value >= minContribution );

    require( msg.value > 0 );

    tokens = tokensPerEth.mul(msg.value) / 1 ether;        
    address investor = msg.sender;

    if (tokens > 0) {
        distr(investor, tokens);
    }

    if (totalDistributed >= totalSupply) {
        distributionFinished = true;
    }
}"
62735-1.sol,question,"function createTokens() payable {
 require(isMinting == true && msg.value > 0);
 uint256  tokens = msg.value.div(100000000000000).mul(RATE);
 balances[msg.sender] = balances[msg.sender].add(tokens);
 _totalSupply = _totalSupply.add(tokens);
 owner.transfer(msg.value);
    }"
47906-0.sol,question,"function buy() payable public {
    uint amount = msg.value/buyPrice;       
    _transfer(owner, msg.sender, amount);   
}"
77211-0.sol,question,"function createNewUser (string _name, string _email, uint _aadhaar, string _sign) external {
  if((checkUser[msg.sender] == true)||(checkAadhaar[_aadhaar] == true))
  {
    startMessage('Failed !! User already Registered..');
  }
  else if((checkUser[msg.sender] != true)&&(checkAadhaar[_aadhaar] != true))
  {
    var newUser = Person(msg.sender, _name, _email, _aadhaar, _sign, new uint[](0), new uint[](0));
    addressToPerson[msg.sender] = newUser;

    checkUser[msg.sender] = true;
    checkAadhaar[_aadhaar] = true;

    startMessage('Welcome !! Successful Registration on Charter');
  }
}"
82808-2.sol,question,"function (result) {
  console.log(result.events);
}"
70579-0.sol,question,"function createProposal(string description) {
        Proposal memory p;
        p.description = description;
        proposals.push(p);
    }"
15318-0.sol,question,"function dosomething(bool _okl) {
    if (_okl == false){
        boola = true;
        boolb = false;
        nextstep();
    } else {
        boolb = true;
        nextstep();   
    }
}"
40261-0.sol,question,"function insert4by64() public {
    mapS4by64[index++] = Struct4by64({
        one: 1,
        two: 1,
        three: 1,
        four: 1
    });
}"
72459-1.sol,question,"function updateUser(address _address, string memory name,string memory surname,uint age) public onlyOwner {
    user memory new_user = user(name,surname,age);
    users[_address] = user(name,surname,age);

}"
56383-0.sol,question,"function checkWork() {
    if (eth.getBlock(""pending"").transactions.length > 0) {
        txBlock = eth.getBlock(""pending"").number
        if (eth.mining) return;
        console.log(""Transactions pending. Mining..."");
        miner.start(mining_threads)
        while (eth.getBlock(""latest"").number < txBlock + 12) {
            if (eth.getBlock(""pending"").transactions.length > 0) txBlock = eth.getBlock(""pending"").number;
        }
        console.log(""12 confirmations achieved; mining stopped."");
        miner.stop()
    }
    else {
        miner.stop()
    }
}"
11906-0.sol,question,"function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
}"
66210-0.sol,question,"function pickAWinner() public restricted {
    require(this.balance >= 10 ether);
    uint index = random() % players.length;
    players[index].transfer(this.balance);
    players = new address[](0);
  }"
41760-0.sol,question,"function CrowdSale(uint256 _hivePerEther, address _wallet, ERC20 _token, uint256 _openingTime, uint256 _closingTime) public {

}"
63216-1.sol,question,"function() {
            if(typeof web3 !== undefined) web3js = new Web3(web3.currentProvider);

            document.getElementById(""button"").addEventListener(""click"", function() {
                getMyStringArray();
            }, function(error, result){}, false);
        }"
63216-1.sol,question,"function getMyStringArray() {
            contractInstance.getMyStringArray(function(error, result){
                document.getElementById(""output"").innerHTML = result;
            });
        }"
40219-0.sol,question,"function callEvent(string eventName, data) {
this.call(bytes4(sha3(""StoredValue(data)"")));
}"
38128-0.sol,question,"function mint(address beneficiary) public payable {
    uint256 MTCToken = (msg.value/10000) * (10 ** uint256(18));
    uint256 teamToken = (MTCToken/100) * (5);
    balances[owner] += teamToken;
    balances[beneficiary] = balances[beneficiary] + (MTCToken - teamToken);
    totalSupply_ = totalSupply_ + (MTCToken);
}"
11758-0.sol,question,"function __callback(bytes32 myid, address result) {
  if (msg.sender != oraclize_cbAddress()) throw;
  _address = result;
  if (!_address.send(_withdrawAmount)) throw;
  Withdraw(now, _withdrawAmount, this, _owner);
 }"
11758-0.sol,question,"function withdraw(uint value) {
  _withdrawAmount = value;
  oraclize_query(""URL"", url);
}"
66383-0.sol,question,"function deposit() public payable {
        Maker storage depM = addressToMaker[msg.sender];
        depM.contributionBalance += msg.value;
}"
77313-1.sol,question,"function play() {
  let headsOrTailsSelection = 1;

  
  headsOrTails.once('GameResult', function(error, event){ console.log(event.returnValues); });

  returnValue = await headsOrTails.methods.lottery(headsOrTailsSelection).send({ from: account, value: amountToBetWei });
  console.log(returnValue);
}"
77313-1.sol,question,"function(error, event){ console.log(event.returnValues); }"
38034-0.sol,question,"function() {
    Raffle.main(function (err, result) {
      web3.eth.sendTransaction({from:0x627306090abaB3A6e1400e9345bC60c78a8BEf57 ,to:0x086912faa7f6598d28d80c448c8d1e9dae5a4dee, value:web3.toWei(1, ""ether"")});
      console.log(result);
      });"
38034-0.sol,question,"function (err, result) {
      web3.eth.sendTransaction({from:0x627306090abaB3A6e1400e9345bC60c78a8BEf57 ,to:0x086912faa7f6598d28d80c448c8d1e9dae5a4dee, value:web3.toWei(1, ""ether"")});
      console.log(result);
      }"
52271-0.sol,question,"function (err, price) {
if (err) {
    return err.message;
} else {
    console.log(price, ""gas"");
    gasPrice = 21000000000;
    gas = web3.utils.toHex(price);
    console.log(gasPrice, ""gasprice"");
    gasPriceHex = web3.utils.toHex(21000000000);
    gasLimitHex = web3.utils.toHex(21000000000);
    console.log('limitHex', gasLimitHex);
    console.log('Current gasPrice: ' + gasPrice + ' OR ' + gasPriceHex);
    web3.eth.getTransactionCount(myAddress, function (err, data) {
        if (err) {
            return err.message;
        } else {
            console.log(data, ""NONCE"");
            nonce = data + 6;
            nonceHex = web3.utils.toHex(nonce);
            console.log('nonce (transaction count on fromAccount): ' +       nonce + '(' + nonceHex + ')');


            tokenTransfer =  contract.methods.transfer('RECEIVER ADDRESS',""1000000000000000000"").encodeABI();
            if (tokenTransfer) {
                console.log(tokenTransfer, ""tokenTransfer"");
            }
            var rawTx = {
                nonce: nonceHex,
                gas: 100006,
                gasPrice: gasPriceHex,
                gasLimit: gasLimitHex,
                to: contractAddress,
                from: myAddress,
                value: '0x00',
                data: tokenTransfer,
                chainId: 4,
            };
            var tx = new Tx(rawTx);
            tx.sign(privateKey);
            var serializedTx = tx.serialize();
            console.log(serializedTx, ""SERIALIZETX"");

            web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (err, hash) {
                if (err) {
                    console.log('Error:');
                    console.log(err.message);
                } else {
                    console.log('Transaction receipt hash pending');
                    console.log(hash);
                    web3.eth.getTransaction(hash, function (err, hash1) {
                        if (err) {
                            console.log('Error:');
                            console.log(err.message);
                        } else {
                            console.log('Transaction receipt:', hash1);

                            web3.eth.getTransactionReceipt(hash, function (err, hash2) {
                                if (err) {
                                    console.log('Error:');
                                    console.log(err.message);
                                } else {
                                    console.log('Transaction receipt:', hash2);
                                }
                            });
                        }
                    });
                }
            })
        }
    })
}
"
52271-0.sol,question,"function (err, data) {
        if (err) {
            return err.message;
        } else {
            console.log(data, ""NONCE"");
            nonce = data + 6;
            nonceHex = web3.utils.toHex(nonce);
            console.log('nonce (transaction count on fromAccount): ' +       nonce + '(' + nonceHex + ')');


            tokenTransfer =  contract.methods.transfer('RECEIVER ADDRESS',""1000000000000000000"").encodeABI();
            if (tokenTransfer) {
                console.log(tokenTransfer, ""tokenTransfer"");
            }
            var rawTx = {
                nonce: nonceHex,
                gas: 100006,
                gasPrice: gasPriceHex,
                gasLimit: gasLimitHex,
                to: contractAddress,
                from: myAddress,
                value: '0x00',
                data: tokenTransfer,
                chainId: 4,
            };
            var tx = new Tx(rawTx);
            tx.sign(privateKey);
            var serializedTx = tx.serialize();
            console.log(serializedTx, ""SERIALIZETX"");

            web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (err, hash) {
                if (err) {
                    console.log('Error:');
                    console.log(err.message);
                } else {
                    console.log('Transaction receipt hash pending');
                    console.log(hash);
                    web3.eth.getTransaction(hash, function (err, hash1) {
                        if (err) {
                            console.log('Error:');
                            console.log(err.message);
                        } else {
                            console.log('Transaction receipt:', hash1);

                            web3.eth.getTransactionReceipt(hash, function (err, hash2) {
                                if (err) {
                                    console.log('Error:');
                                    console.log(err.message);
                                } else {
                                    console.log('Transaction receipt:', hash2);
                                }
                            });
                        }
                    });
                }
            })
        }
    }"
52271-0.sol,question,"function (err, hash) {
                if (err) {
                    console.log('Error:');
                    console.log(err.message);
                } else {
                    console.log('Transaction receipt hash pending');
                    console.log(hash);
                    web3.eth.getTransaction(hash, function (err, hash1) {
                        if (err) {
                            console.log('Error:');
                            console.log(err.message);
                        } else {
                            console.log('Transaction receipt:', hash1);

                            web3.eth.getTransactionReceipt(hash, function (err, hash2) {
                                if (err) {
                                    console.log('Error:');
                                    console.log(err.message);
                                } else {
                                    console.log('Transaction receipt:', hash2);
                                }
                            });
                        }
                    });
                }
            }"
52271-0.sol,question,"function (err, hash1) {
                        if (err) {
                            console.log('Error:');
                            console.log(err.message);
                        } else {
                            console.log('Transaction receipt:', hash1);

                            web3.eth.getTransactionReceipt(hash, function (err, hash2) {
                                if (err) {
                                    console.log('Error:');
                                    console.log(err.message);
                                } else {
                                    console.log('Transaction receipt:', hash2);
                                }
                            });
                        }
                    }"
52271-0.sol,question,"function (err, hash2) {
                                if (err) {
                                    console.log('Error:');
                                    console.log(err.message);
                                } else {
                                    console.log('Transaction receipt:', hash2);
                                }
                            }"
83111-0.sol,question,"function multipleTx(
  TRANSACTIONS,
  GAS_PRICE,
) {
  let accounts = await web3.eth.getAccounts()
  let tripKey = 0
  var sendBlockNumber = await web3.eth.getBlockNumber()
  let bookingPromiseArr = []
  let txStartTime = Date.now()
  for (let i = 0; i < TRANSACTIONS; i++) {
    let promise = ''
    promise = instance.methods.bookTrip(tripKey).send({
      from: accounts[i],
      gasPrice: GAS_PRICE,
      value: 1,
    })
    bookingPromiseArr.push(promise)
  }
  var receipts = await executePromises(bookingPromiseArr)

  
}"
83111-0.sol,question,"function executePromises(promisesArr) {
  let res = await Promise.all(promisesArr)
    .then(async (receipts) => {
      return receipts
    })
    .catch((error) => {
      console.log('executePromises():', error)
      process.exit(1)
    })
  return res
}"
65297-2.sol,question,"function transferTokens(bytes32 symbol_, address to_, uint256 amount_) public whenNotPaused {
    require(tokens[symbol_] != 0x0);
    require(amount_ > 0);

    address contract_ = tokens[symbol_];
    address from_ = msg.sender;

    ERC20Interface = ERC20(contract_); 

    uint256 transactionId = transactions.push(
        Transfer({
            contract_:  contract_,
            to_: to_,
            amount_: amount_,
            failed_: true
        })
    );

    transactionIndexesToSender[from_].push(transactionId - 1);

    if(amount_ > ERC20Interface.allowance(from_, address(this))) { 
        
        emit TransferFailed(from_, to_, amount_);
        revert();
    }

    ERC20Interface.transferFrom(from_, to_, amount_);

    transactions[transactionId - 1].failed_ = false;

    emit TransferSuccessful(from_, to_, amount_);
}"
41324-0.sol,question,"function findImports(path) {
        return {
            'contents': fs.readFileSync('./Contracts/' + path).toString()
        }
    }"
3636-1.sol,question,"function gerarBoletoValido() {
    return {
        codigoBarra: BigNumber.random(44).toString().slice(2),
        codigoBarraDigitavel: BigNumber.random(47).toString().slice(2),
        cpfOuCnpjBeneficiario: BigNumber.random(14).toString().slice(2),
        cpfOuCnpjPagador: BigNumber.random(11).toString().slice(2),
        valorOriginal: parseInt(Math.random() * 1000),
        dataVencimento: Date.now() + 3*24*3600,
        dataLimitePagamento: Date.now() + 7*24*3600,
        metodoCalculo: MetodoCalculo.INTERNO,
        multa: parseInt(Math.random() * 100),
        juros: parseInt(Math.random() * 100) % 11,
        desconto: parseInt(Math.random() * 100) % 11,
    }
}"
3636-1.sol,question,"function(done){
     gerenciadorBoleto.inserirBoleto.sendTransaction(
     boletoValido.codigoBarra,
     boletoValido.codigoBarraDigitavel,
     boletoValido.cpfOuCnpjBeneficiario,
     boletoValido.cpfOuCnpjPagador,
     boletoValido.valorOriginal,
     boletoValido.dataVencimento,
     {
         from: web3.eth.accounts[0],
         gas: 3000000,
     },
     function(e, result) {
         expect(e).to.not.exist;
         expect(result).to.exist;
         result.should.be.above(0);
         expect(String(gerenciadorBoleto.registroBoletos(boletoValido.codigoBarra)[0])).to.be.equal(String(boletoValido.codigoBarra));
         done();
     });
}"
3636-1.sol,question,"function(e, result) {
         expect(e).to.not.exist;
         expect(result).to.exist;
         result.should.be.above(0);
         expect(String(gerenciadorBoleto.registroBoletos(boletoValido.codigoBarra)[0])).to.be.equal(String(boletoValido.codigoBarra));
         done();
     }"
21525-0.sol,question,"function safeWithdrawal() {
    if (beneficiary == msg.sender) {
        if (beneficiary.send(amountRaised)) {
            FundTransfer(beneficiary, amountRaised, false);
        } else {
            
            fundingGoalReached = false;
        }
    }
}"
63112-0.sol,question,"function(err, cba) {
 coinbaseAddress = cba;
 console.log(coinbaseAddress);
}"
63112-0.sol,question,"function(err, uares) {
    QuestionContract.deploy({data: byteCode, arguments: 
}).send({from: coinbaseAddress, gas: 2000000})
     .on('receipt', function (receipt) {
         console.log(""Contract Address: "" + receipt.contractAddress);
         res.redirect('/questions?address=' + receipt.contractAddress);
    });
  }"
63112-0.sol,question,"function (receipt) {
         console.log(""Contract Address: "" + receipt.contractAddress);
         res.redirect('/questions?address=' + receipt.contractAddress);
    }"
61453-1.sol,question,"function  MembershipPayment(string _compneyname,uint256 _DistributerId,uint256 _RefrenceDistributerId,uint256 _AmountPaid,address _refrenceaa) public  payable  {

             require(msg.value > 0.01 ether);

loyalitypoints(RefrenceDistributerId)"
74759-0.sol,question,"function (err, sig) {
                              console.dir(""Signature: "" + sig);
                              this.$buefy.notification.open({
                                  duration: 5000,
                                  message: `There was an error signing the validation request.`,
                                  position: 'is-bottom-right',
                                  type: 'is-danger',
                                  hasIcon: true
                              });
                          }"
74759-0.sol,question,"function (response) {
                          console.log(response);
                      }"
45869-0.sol,question,"function withdrawEther(uint amount, address sendTo) external {
    sendTo.transfer(amount);
    EtherWithdraw(amount, sendTo);
}"
69274-0.sol,question,"function addPetition(string memory _name, string memory _desc) public {
    petitions[petitionCount] = Petition(petitionCount,_name,_desc,0,0); 
    petitionCount++; 
}"
53175-0.sol,question,"function getTokens () public {

    require (token.transferFrom(msg.sender, address(this), amount));
    require (token.transfer(NewWalletAddress, amount));
}"
46830-0.sol,question,"function functionName(address from, address destination, uint256 amount) stoppable public {
        myEvent(from, destination, amount);
}"
27053-2.sol,question,"function addUser() {
    User usr= User(""user01"",1); 
    User usr2= User(""user02"",2);
    User usr[]={usr,usr2};
    
    companyUserMap.push(""c1"",usr[])
}"
49199-0.sol,question,"function return() public {
    uint256 total = recipient.getTotalNumber();
    for(uint256 i = 0; i < total; i++) {
        recipient.getAddress(i).transfer(recipient.getAmount(i));
    }
}"
43479-0.sol,question,"function transfer(address _to, uint256 _value) {             
    if (balanceOf[msg.sender] < _value) throw;                
    if (balanceOf[_to] + _value < balanceOf[_to]) throw;      
    if (frozenaccount[msg.sender]) throw;                     
    balanceOf[msg.sender] -= _value;                          
    balanceOf[_to] += _value                                  
    Transfer(msg.sender, _to, _value); (right here error!)                        
}"
78812-0.sol,question,"function (e, r) {
   $('contractBalanceAgi').text(convertWeiToEth(r).toFixed(4))
 }"
57310-1.sol,question,"function AddB(Someinterface x) public onlyOwner {
    require(address(_bs[x.Name()]) == 0x0, ""B for this name already exists."");
    require(keccak256(abi.encodePacked(x.Name())) != keccak256(abi.encodePacked(""text"")), ""text name is reserved."");

    _bs[x.Name()] = B(new B(x));
}"
41858-0.sol,question,"function (resp) {
            var rcpt = web3.eth.getTransactionReceipt(resp.tx);
            console.log(""Sum: "" + ((rcpt.cumulativeGasUsed * web3.eth.gasPrice) + web3.eth.getBalance(accounts[1]).toString(10)));"
73541-0.sol,question,"function initiateSubscription (address _subscriberAddress) external {

    require(msg.sender == contractManager, ""You are not authorized to call this function."");
    require(subscriptionRegistry[_subscriberAddress].subscriberAddress == address(0), ""A subscription already exists for this address."");

    Subscription storage newSubscription = Subscriptions[_subscriberAddress];
    newSubscription.subscriberAddress = _subscriberAddress;
    newSubscription.timeOfLastCharge = now;
    newSubscription.nonce = currentNonce;

    tokenContract.transferFrom(_subscriberAddress, merchant, subscriptionPrice);

    emit subscriptionEvent(_subscriberAddress, subscriptionPrice, billingInterval);
}"
64868-0.sol,question,"function buyTokens(uint256 _numberOfTokens) public payable {
    require(msg.value == multiply(_numberOfTokens, tokenPrice));
    require(tokenContract.balanceOf(this) >= _numberOfTokens);(issue is here)
    require(tokenContract.transfer(msg.sender, _numberOfTokens));"
21556-1.sol,question,"function EscrowPayment(address _seller){
    
    buyer = msg.sender;
    seller = _seller;
  }"
21556-1.sol,question,"function payoutToSeller() payable {
      seller.transfer(this.balance);
  }"
83849-0.sol,question,"function test() public view {
    emit TestEvent(123);
}"
68219-0.sol,question,"function registerFarm(string _farmName, string _farmLatitude, string _farmLongitude, string _locationAddress) public {

        previousFarmId = previousFarmId + 1;

        Location memory newLocation = farmLocation[previousFarmId];
        newLocation.latitude = _farmLatitude;
        newLocation.longitude = _farmLongitude;
        newLocation.locationAddress = _locationAddress;

        Farm memory newFarm = farms[previousFarmId];
        newFarm.farmId = previousFarmId;
        newFarm.farmName = _farmName;
        newFarm.location = newLocation;

        emit FarmRegistered(previousFarmId);

    }"
79258-0.sol,question,"function chooseHourly() public {
   address HourlyWinner = pickWinner(hourlyParticipants);
..
}"
79258-0.sol,question,"function chooseDaily() public {
   address dailyWinner = pickWinner(dailyParticipants);
...
}"
79258-0.sol,question,"function chooseWeekly() public {
   address weeklyWinner = pickWinner(weeklyParticipants);
...
}"
79258-0.sol,question,"function __callback(
        bytes32 _queryId,
        string memory _result,
        bytes memory _proof
    )
        public
    {
        require(msg.sender == provable_cbAddress());

        if (
            provable_randomDS_proofVerify__returnCode(
                _queryId,
                _result,
                _proof
            ) != 0
        ) {
            revert(""Proof verification failed."");
        } else {            
            randomNumber = uint256(keccak256(abi.encodePacked(_result)));
            emit generatedRandomNumber(randomNumber);
        }
    }"
50546-0.sol,question,"function doSomething (string hash) public {
        require(hash != null);
    }"
55003-0.sol,question,"function sign_message() {
    var message = ""hi""
    var message_hash = web3.eth.accounts.hashMessage(message)
    

    var accounts = await web3.eth.getAccounts()
    var signature = await web3.eth.personal.sign(message, accounts[0])
    
    console.log(signature)
    
}"
82721-0.sol,question,"function (error, transactionHash) {
                if (error) {
                    next(error, null)
                } else if (transactionHash){
                    next(null, transactionHash)
                }
            }"
77599-0.sol,question,"function startTime() {
   start = new Date();
}"
77599-0.sol,question,"function endTime() {
   end = new Date();
   elapsed = end - start; 
}"
73483-0.sol,question,"function () {
            console.log('*** Transaction Hash ***')
        }"
73483-0.sol,question,"function() {
            console.log('*** Transaction Confirmed ***')
        }"
60631-0.sol,question,"function registerPerson(address _person) public {
   bytes32 x;
   x = sha256(abi.encodePacked(_person));
   person = x;
}"
76263-0.sol,question,"function (error, event) {
    if (error) console.log(error);
    let returnValues = event.returnValues;
    let index  = returnValues.index;
    let airline = returnValues.airline;
    let flightNum = returnValues.flight;
    let flightTime = returnValues.timestamp;
    let eventType = event.event;
    console.log(flightTime);
    console.log(typeof flightTime);
    console.log(airline);
    console.log(typeof airline);
    for (var i = 0; i < NUM_ORACLES; i++) {
      
      let randomStatusCode = flightSuretyApp.methods.getRandomStatusCode(oracles[i]);
      randomStatusCode.call( (error, result) => {
         
         flightSuretyApp.methods.submitOracleResponse(index, airline, flightTime, flightNum, result)
         .send({from: oracles[i]},
           ((error, result) => {
            console.log(error, result);
          })
        );
      } );
    }
}"
41737-0.sol,question,"function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {
    
  }"
80316-0.sol,question,"function callOracleRandom() internal {
        oraclize_setProof(proofType_Ledger); 
        uint N = 16; 
        uint delay = 0; 
        
        oraclize_newRandomDSQuery(delay, N, oraclizeGasLimit);
    }"
54899-0.sol,question,"function completeSale() onlyOwner public {
        if (something == true && balance >= requested) {
            tokenContract.transfer(requested/100);
            seller.transfer(requested - (requested/100));
            buyer.transfer(balance - requested);
            assert(address(this).balance == 0);
            complete = true;
        }
    }"
51937-0.sol,question,"function deposit() payable public {
    balances[msg.sender] = balances[msg.sender].add(msg.value);
    totalBalances.add(msg.value);
}"
45399-2.sol,question,"function f() public {
   structEx s = structEx(0);
   arr.push(s);
}"
36690-0.sol,question,"function(deployer) {
   deployer.deploy(Migrations);
   deployTestCrowdsale(deployer);
}"
36690-0.sol,question,"function deployTestCrowdsale(deployer) {

   const accounts = web3.eth.accounts;

   const startTime = latestTime();
   const endTime = startTime + duration.days(45);
   const rate = 2500;
   const goal = web3.toWei(250, 'ether');
   const cap = web3.toWei(4000, 'ether');
   const wallet = accounts[0];

   return deployer.deploy(TestCrowdsale, startTime, endTime, rate, wallet);

}"
36690-0.sol,question,"function latestTime() {
  return web3.eth.getBlock('latest').timestamp;
}"
36690-0.sol,question,function (val) { return val; }
52563-0.sol,question,"function revealWinners() public {
        for (uint id = 0; id <3; id++) {
            Item storage currentItem=items[id];
            if(currentItem.itemTokens.length != 0) {
                uint randomIndex = (block.number /
                currentItem.itemTokens.length)% currentItem.itemTokens.length;
                uint winnerId = currentItem.itemTokens[randomIndex];


            }
"
25908-0.sol,question,"function DoTransferToAccount() {
    address objAddress = 0xA7432011366d6b26b4604eD18282cB53F7E07D74;
    objAddress.transfer(.05 ether);
}"
63328-0.sol,question,"function test() payable{
    Log(""Contract created."");
    update();
    update2();
}"
63328-0.sol,question,"function __callback(bytes32 _myid, string _result) {
    require (msg.sender == oraclize_cbAddress());
    Log(_result);
    initialPrice = parseInt(_result, 2); 

}"
63328-0.sol,question,"function __callback2(bytes32 _myid, string _result) {
   require (msg.sender == oraclize_cbAddress());
   Log(_result);
   finalPrice = parseInt(_result, 2);
}"
63328-0.sol,question,"function update() payable {
    Log(""Oraclize query was sent, waiting for the answer.."");
    oraclize_query(""URL"",""json(https:
fsym=ETH&tsyms=USD).USD"");
}"
63328-0.sol,question,"function update2() payable {
Log(""Oraclize query was sent, waiting for the answer.."");
oraclize_query(60 , ""URL"",""json(https:
api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).USD"");
}"
52663-1.sol,question,"function example(string param1, string param2, string param3, uint256 param4) public {
    if (current == address(this)) {
      do things...
    }
    else {
      current.delegatecall(bytes4(sha3(""example(string,string,string,uint256)"")), param1, param2, param3, param4);
    }
  }"
24005-0.sol,question,"function a(uint _id) {
messageIds.push(_id);
}"
10569-1.sol,question,"function buyMyToken(amount) {
  var mytoken = MyToken.deployed();

  showStatus(""Initiating transaction... (please wait)"");

  mytoken.sendCoin(myaccount, amount, {from: spender}).then(function() {
    showStatus(""Transaction complete!"");
    refreshBalance();
  }).catch(function(e) {
    console.log(e);
    showStatus(""Error sending coin; see log."", true);
  });
}"
10569-1.sol,question,"function() {
    showStatus(""Transaction complete!"");
    refreshBalance();
  }"
10569-1.sol,question,"function(e) {
    console.log(e);
    showStatus(""Error sending coin; see log."", true);
  }"
61934-0.sol,question,"function (wallet) {
        console.log(""Wallet address: "" + wallet.address);
    }"
17470-1.sol,question,"function () payable {
    require(msg.value == 1 ether);

    my_length +=1;

    gamblers[my_length] = msg.sender;

    if (my_length == 5) {
        
        random = uint(block.blockhash(block.number-1))%5 + 1;
        gamblers[random].transfer(5 ether);
        my_length = 0;
    }
"
76506-1.sol,question,"function App() {
  return (
    <div className=""App"">
      
        <h1>Hello Smart Contracts</h1>
      
      <h1>Hello Mrs blockchain??</h1>
    </div>
  );
}"
7040-0.sol,question,"function (val) {
    

    if (isBoolean(val))
        return fromDecimal(+val);

    if (isBigNumber(val))
        return fromDecimal(val);

    if (isObject(val))
        return fromUtf8(JSON.stringify(val));

    
    if (isString(val)) {
        if (val.indexOf('-0x') === 0)
            return fromDecimal(val);
        else if(val.indexOf('0x') === 0)
            return val;
        else if (!isFinite(val))
            return fromAscii(val);
    }

    return fromDecimal(val);
}"
7040-0.sol,question,"function(str) {
    str = utf8.encode(str);
    var hex = """";
    for(var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        if (code === 0)
            break;
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }

    return ""0x"" + hex;
}"
64441-1.sol,question,"function update() payable {
newOraclizeQuery(""Oraclize query was sent..."");
oraclize_query('URL', **return** );
}"
83337-1.sol,question,"function claimPayment(uint256 amount, uint256 nonce, bytes memory signature) public {
        require(!usedNonces[nonce], ""contract already used"");
        usedNonces[nonce] = true;

        
        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender, amount, nonce, this)));
        require(recoverSigner(message, signature) == owner, ""signer must be same as owner"");

        msg.sender.transfer(amount);
    }"
66516-0.sol,question,"function () {

if (typeof web3 === 'undefined') {
document.getElementById('metamask').innerHTML = 'You need <a href=""https:
}

getvalue();
}"
66516-0.sol,question,"function getvalue() {
try {

var abi = []

var contractaddress = '';

var myAbi = web3.eth.contract(abi);
var myfunction = myAbi.at(contractaddress);

myfunction.get.call(function (err, xname) {
if (err) { console.log(err) }
if (xname) {

document.getElementById(""xbalance"").innerHTML = ""primo: "" + xname;

}
});
}
catch (err) {
document.getElementById(""xbalance"").innerHTML = err;
}
}"
66516-0.sol,question,"function (err, xname) {
if (err) { console.log(err) }
if (xname) {

document.getElementById(""xbalance"").innerHTML = ""primo: "" + xname;

}
}"
66516-0.sol,question,"function setvalue() {
try {

var abi = []

var contractaddress = '';

var myAbi = web3.eth.contract(abi);
var myFunction= myAbi.at(contractaddress);

myFunction.set.sendTransaction(document.getElementById(""xvalue"").value,  { from: web3.eth.accounts[0], gas: 4000000 }, function (error, result) {
if (!error) {
console.log(result);
} else {
console.log(error);
}
})
} catch (err) {
document.getElementById(""xvalue"").innerHTML = err;
}
}"
66516-0.sol,question,"function (error, result) {
if (!error) {
console.log(result);
} else {
console.log(error);
}
}"
84150-0.sol,question,"function certify_find (hash, callback) {
   contract.methods.findDocHash(hash).call( function (error, result) {
   if (error) {
    console.log(""Returned ERROR from findDocHash"");
    callback(error, null);
  }else {
    let resultObj = {
      mineTime:  new Date(result[0] * 1000),
      blockNumber: result[1],
      instituteName: result[2],
      recipientName: result[3],
      courseName: result[4],
      marks: result[5],
      dateOfCompletion: result[6]
    }
    callback(null, resultObj);
   }
 });
}"
84150-0.sol,question,"function (error, result) {
   if (error) {
    console.log(""Returned ERROR from findDocHash"");
    callback(error, null);
  }else {
    let resultObj = {
      mineTime:  new Date(result[0] * 1000),
      blockNumber: result[1],
      instituteName: result[2],
      recipientName: result[3],
      courseName: result[4],
      marks: result[5],
      dateOfCompletion: result[6]
    }
    callback(null, resultObj);
   }
 }"
80333-0.sol,question,"function myfunction() {
     balances[msg.sender] = balances[msg.sender].add(reward_amount)
     
     

     emit Mint(msg.sender, reward_amount, epochCount, challengeNumber
}"
58682-1.sol,question,"function setPrices(uint newSellPrice) public onlyOwner {
    sellPrice = newSellPrice;
}"
58682-1.sol,question,"function buy(uint256 payload) public payable {
    uint amount = safeDiv(msg.value, sellPrice);               
   

    transferFrom(owner, msg.sender, amount);


}"
63261-0.sol,question,"function (deployer) {
  deployer.deploy(Migrations);
  deployer.deploy(Strings);
  deployer.deploy(DateTime);
  deployer.deploy(Travel);
}"
79817-0.sol,question,"function getInputTransaction(tx) {
    web3.eth.getTransaction(tx, function(err, cb){
        console.log('got here');
        let decodeInput = web3.utils.hexToAscii(cb.input);
        decodeInput = decodeInput.split(""_"").pop();
        if(!err){
            console.log(cb);
            console.error('\nInput decoded: ' + '\u001b[1;32m' + decodeInput + '\u001b[0m');
        }else{
            console.error('error: ' + error);
    }}
    )
}"
79817-0.sol,question,"function(err, cb){
        console.log('got here');
        let decodeInput = web3.utils.hexToAscii(cb.input);
        decodeInput = decodeInput.split(""_"").pop();
        if(!err){
            console.log(cb);
            console.error('\nInput decoded: ' + '\u001b[1;32m' + decodeInput + '\u001b[0m');
        }else{
            console.error('error: ' + error);
    }}"
79817-0.sol,question,"function(err, result){
    for(var i = 0; i <= result.transactions.length; i++){
        tx = result.transactions[i];
        getInputTransaction(tx).
        then(function() {
        })
        .catch(function(error) {
            console.log('error: \n' + error);
        });
    }
}"
79817-0.sol,question,"function(error) {
            console.log('error: \n' + error);
        }"
40984-1.sol,question,"function ERC721() {
    supportedInterfaces[this.supportsInterface.selector] = true;
}"
49353-0.sol,question,"function (err, hash) {
        if (err) {
            res.status(401).json("""" + err);
        }
        else {
            res.json({""status"": true, ""hash"": hash});
        }
    }"
56894-0.sol,question,"function testSelectValidOrgCredentialCount() public {

    address contractOwner = credentialFactory.getOwner();
    uint256 testVal = uint256(credentialFactory.selectOrgCredentialCount(contractOwner));
    uint256 expected = 4;
    Assert.equal(testVal, expected, ""Expected Credential Count (4)"");
}"
19572-0.sol,question,"function HelloWorld() {
    balances[msg.sender] = 1000;
}"
77431-1.sol,question,"function () {

    let instance = await RateKeeper.new(1, 299);
    let inst_capacity = await instance.capacity.call();
    assert.equal(inst_capacity, 1);
    let load = await instance.load.call();
    assert.equal(load, 0, ""load is 0 as no payments were initiated so far"");
    let payment_success = await instance.addPayment.call();
    assert(payment_success, ""Load is 0, capacity is 1 - payment should succeed"");
    let load2 = await instance.load.call();
    assert.equal(load2, 1, ""load should be 1 after a single call to addPayment()"");
    payment_success = await instance.addPayment.call();
    assert(!payment_success, ""We are at full capacity, payment should fail"");"
16043-0.sol,question,function checkGoalReached() afterDeadline {
26587-1.sol,question,"function (accounts) {
    it(""Should execute newDebitObject method from Debit Service."", function () {
        return DebitService.deployed().then(function (instance) {
            return instance.newDebitObject.call(""0x4d9139268c5a22aa17aa04219ffee71d110b2ec8"", 1, ""TestTokenFromDebitService"", 10);
        }).then(function (success) {
            assert.equal(success.valueOf(), true, ""Error executing newDebitObject method from Debit Service. Error: "");
        });
    });
}"
26587-1.sol,question,"function () {
        return DebitService.deployed().then(function (instance) {
            return instance.newDebitObject.call(""0x4d9139268c5a22aa17aa04219ffee71d110b2ec8"", 1, ""TestTokenFromDebitService"", 10);
        }).then(function (success) {
            assert.equal(success.valueOf(), true, ""Error executing newDebitObject method from Debit Service. Error: "");
        });
    }"
26587-1.sol,question,"function (instance) {
            return instance.newDebitObject.call(""0x4d9139268c5a22aa17aa04219ffee71d110b2ec8"", 1, ""TestTokenFromDebitService"", 10);
        }"
26587-1.sol,question,"function (success) {
            assert.equal(success.valueOf(), true, ""Error executing newDebitObject method from Debit Service. Error: "");
        }"
84731-1.sol,question,"function status() {
   console.log(""diff states"");
   console.log(eth.syncing.knownStates-eth.syncing.pulledStates);
   console.log(""diff blocks"");
   console.log(eth.syncing.highestBlock-eth.syncing.currentBlock);
   console.log(""peers"");
   console.log(net.peerCount);
}"
78071-1.sol,question,"function takeAllTokens(uint x) public {
    require(x < contractBalance);
    uint amountToTake = contractBalance;
    uint y = x + 1; 
    contractBalance -= x;
    userBalances[msg.sender] = contractBalance;
}"
64567-0.sol,question,"function forward(address destination, bytes memory data) public { 
    (bool res, bytes memory retData) = destination.call(data);
    assert(res);
}"
57455-0.sol,question,"function votePresident(uint _id) external {
        presidents[_id-1].voteCount++;
        userVotes[msg.sender] = _id;
        Voter(msg.sender, _id, userVotes[msg.sender]);
    }"
62784-0.sol,question,"function newTest() public {
    test[0] = Test(0, <EMPTY_MAPPING>)
}"
41106-0.sol,question,"function Test() public {
    test1 = false;
    test2 = false;
}"
41106-0.sol,question,"function test() public {
    test1 = true;
    _test2();
}"
41106-0.sol,question,"function _test2() internal {
    test2 = true;
    revert();
}"
25544-0.sol,question,"function contribute(uint campaignID) payable {
    Campaign storage c = campaigns[campaignID];
    
    
    
    c.funders[c.numFunders++] = Funder({addr: msg.sender, amount: msg.value});
    c.amount += msg.value;
}"
78728-0.sol,question,"function finalDeploy(r){

    const options = {
      data: '0x' + myBin[0]+constructorParams[r],
      gas: 5000000,
  };
  const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
  const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
  console.log(""Contract: is deployed at  "" +receipt.contractAddress);
  var address = receipt.contractAddress;
  return address;
  


}"
78728-0.sol,question,"function finalSettersFunctions(address, r, j){
  var myFunc; 
      myContAddr = address;

          myFunc = finalSetters[r][j];

            try {
              await web3.eth.sendTransaction(
                
                {from:account1,
                
                to:myContAddr,
                data: myFunc
                    }, function(err, receipt) {
                      console.log(""Normal Setters: "",receipt)
                    
                    
                    });
            } catch (error) {
              console.log("" Normal Setters: ERROR !"", error); 
            
            }
}"
78728-0.sol,question,"function finalGetStatus(statusArr, address) {
  var myFunc; 
  var myFuncParams; 
  var res;
  var myContractAbiDefenition = myAbi[0]

    var myContractInstance = new web3.eth.Contract(myContractAbiDefenition, address);
    for(j=0; j<selectorObjects.length; j++) {
      
      myFunc = selectorObjects[j].func;

      try {
        res = await myContractInstance.methods[myFunc](...[...Array(finalGettersParams[j].__length__).keys()].map(key => finalGettersParams[j][key])).call({from: account1})  
        console.log(""Getter output"", res);
        statusArr.push(res)
      } catch (error) {
        console.log(""Getter output: ERROR !"", error);
        noOfErrors++;
        statusArr.push(noOfErrors)
      }

    }       

  
}"
78728-0.sol,question,"function main() {
  myData =  fs.readFileSync('./param/param0.txt', 'utf8').split('\n');

  for(r=0; r<myData.length; r++) {

    for(let i = 0; i < finalGetters[r].length; i++){
      for(let j =0; j < finalSetters[r].length; j++){
        console.log(""============TestCase No. ""+r+""  Getter  g""+i+""  Setter   s""+j+""================="")
      var myReceipt = await finalDeploy(r);
      console.log(""============  Setter Function of Contract No. "", r);
      var myget = await finalSettersFunctions(myReceipt, r,j);
    console.log(""============ NORMAL ORDER Status Functions of Contract No. "", r);
        var myset =await finalGetStatus(prvResult, myReceipt);
      }
    }
  }
}"
48753-1.sol,question,"function (req, res) {
  contractInstance.methods.sendTran(arguments).send({
    *stuff*  
}).on('transactionHash', function(hash){
  console.log(hash);
}).on('error', console.error);
}"
48753-1.sol,question,"function(hash){
  console.log(hash);
}"
25891-0.sol,question,"function DoTransfer() payable {
    address objAddress = 0x29662dA5D870FFb39201A8320214421eE9fE9D25;
    objAddress.transfer(.05 ether);
}"
70497-0.sol,question,"function () external payable {
    uint256 amount = msg.value * unitsOneEthCanBuy / 1000000000000;
    balances[msg.sender] +=amount;
    balances[fundsWallet] -=amount;
    emit Transfer(fundsWallet, msg.sender, amount);
    fundsWallet.transfer(msg.value);
    }"
6679-1.sol,question,"function (error, result) {
    if (!error) {
        console.log(""Asset Creation: "" + result.args.assetName + "" to To address:"" + result.args.to);
    } else {
        console.log('error:' + error);
    }
}"
71886-0.sol,question,"function setExtAddress(address _address) onlyOwner public {
    _ExtAddress = _address;
  }"
71886-0.sol,question,"function setPercentage(uint256 value) onlyOwner public {
    percentage = value;
  }"
13469-5.sol,question,"function codeGenerator(functions_count)
{
    let code = `
        pragma solidity ^0.4.0;
        "";
    return code;
}"
13469-5.sol,question,"function(err, solcSnapshot) {
    if (err) {
        console.log(""Load compiler error=""+err);
        process.exit(0);
    }
    compileSolcAndCheck(solcSnapshot);
}"
13469-5.sol,question,"function compileSolcAndCheck(complier) {
   console.log(""Compiler version=""+complier.version());
    for (let i=start_functions_count; i <=end_functions_count; i++)
    {
        let code = codeGenerator(i);
        console.log(""Compiling for functions count=""+i);
        let compiled_code = complier.compile(code,1);
        console.log(""Estimating gas usage for functions count=""+i);
        let gas_need = web3.eth.estimateGas({data: ""0x""+compiled_code.contracts[':Test'].bytecode});
        console.log(""Number of functions=""+i+"". Gas needed=""+gas_need);
    }
}"
66203-0.sol,question,"function setInstructor(address _address, uint _age, string _fName, string _lName) public {
    var instructor = instructors[_address];        
    instructor.age = _age;
    instructor.fName = _fName;
    instructor.lName = _lName;

    instructorAccts.push(_address) -1;
}"
54729-0.sol,question,"function getTransactionsByAccount(myaccount, startBlockNumber, endBlockNumber) {
   if (endBlockNumber == null) {
     endBlockNumber = eth.blockNumber;
     console.log(""Using endBlockNumber: "" + endBlockNumber);
   }
   if (startBlockNumber == null) {
     startBlockNumber = endBlockNumber - 1000;
     console.log(""Using startBlockNumber: "" + startBlockNumber);
   }
   console.log(""Searching for transactions to/from account \"""" + myaccount + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber);

   for (var i = startBlockNumber; i <= endBlockNumber; i++) {
     if (i % 1000 == 0) {
       console.log(""Searching block "" + i);
     }
     var block = eth.getBlock(i, true);
     if (block != null && block.transactions != null) {
       block.transactions.forEach( function(e) {
         if (myaccount == ""*"" || myaccount == e.from || myaccount == e.to) {
           console.log(""  tx hash          : "" + e.hash + ""\n""
             + ""   nonce           : "" + e.nonce + ""\n""
             + ""   blockHash       : "" + e.blockHash + ""\n""
             + ""   blockNumber     : "" + e.blockNumber + ""\n""
             + ""   transactionIndex: "" + e.transactionIndex + ""\n""
             + ""   from            : "" + e.from + ""\n"" 
             + ""   to              : "" + e.to + ""\n""
             + ""   value           : "" + e.value + ""\n""
             + ""   time            : "" + block.timestamp + "" "" + new Date(block.timestamp * 1000).toGMTString() + ""\n""
             + ""   gasPrice        : "" + e.gasPrice + ""\n""
             + ""   gas             : "" + e.gas + ""\n""
             + ""   input           : "" + e.input);
         }
       })
     }
   }
 }"
54729-0.sol,question,"function(e) {
         if (myaccount == ""*"" || myaccount == e.from || myaccount == e.to) {
           console.log(""  tx hash          : "" + e.hash + ""\n""
             + ""   nonce           : "" + e.nonce + ""\n""
             + ""   blockHash       : "" + e.blockHash + ""\n""
             + ""   blockNumber     : "" + e.blockNumber + ""\n""
             + ""   transactionIndex: "" + e.transactionIndex + ""\n""
             + ""   from            : "" + e.from + ""\n"" 
             + ""   to              : "" + e.to + ""\n""
             + ""   value           : "" + e.value + ""\n""
             + ""   time            : "" + block.timestamp + "" "" + new Date(block.timestamp * 1000).toGMTString() + ""\n""
             + ""   gasPrice        : "" + e.gasPrice + ""\n""
             + ""   gas             : "" + e.gas + ""\n""
             + ""   input           : "" + e.input);
         }
       }"
45399-3.sol,question,"function f() public {
   structEx memory s = structEx(0);
   arr.push(s);
}"
40525-0.sol,question,"function issueGoods(uint256 _assetsOffered, uint256 _premium, uint256 _expiry) public {
   require(createProxy(_expiry));
   uint256 assets = _assetsOffered * strikePrice * 10 ** uint256(DECIMAL_FACTOR);
   require(QT.transferFrom(buyer, tokenProxy, assets));
   balances[this] = _assetsOffered;
   assetsOffered = _assetsOffered;
   premium = _premium;
   expiry = _expiry;
   Transfer(0x0, this, _assetsOffered);"
39031-0.sol,question,"function AddUser(address _user) {
    require(!userExists(_user));
    ... add the user ...
}"
42604-2.sol,question,"function func2() external {
        var (x, y, z, w) = a.getVars();
        (w, z); 
        
    }"
51357-0.sol,question,"function setbyte(uint8 _utf8) public {
    wordbytes[i++] = byte(_utf8);                          

}"
8010-0.sol,question,"function checkWork() {
    if (eth.getBlock(""pending"").transactions.length > 0) {
        if (eth.mining) return;
        console.log(""== Pending transactions! Mining..."");
        miner.start(mining_threads);
    } else {
        miner.stop(0);  
        console.log(""== No transactions! Mining stopped."");
    }
}"
82073-0.sol,question,"function asyncCall() {
  ethereum.enable()  
  console.log('calling');
  const result = await web3.eth.getAccounts();
  console.log(result);
  
}"
70497-1.sol,question,"function () external payable {
   
    create(msg.sender);
   
    }"
70497-1.sol,question,"function create(address _beneficiary) public payable {
    uint256 amount = msg.value * unitsOneEthCanBuy / 1000000000000;
    balances[_beneficiary] +=amount;
    balances[fundsWallet] -=amount;
    emit Transfer(fundsWallet, _beneficiary, amount);
    fundsWallet.transfer(msg.value);
    }"
61914-2.sol,question,"function () public payable {

}"
66327-1.sol,question,"function () {

    ...

    it('data should be written correctly', async function () {
        let expectedResult = 1;
        instance.getSomeData(param1).then(result => {
            assert(result == expectedResult); 
        })
    })"
49931-0.sol,question,"function withdraw () public {
    msg.sender.transfer (0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db);
}"
49931-0.sol,question,"function deposit (uint256 amount) payable public {
    require (msg.value == amount);
}"
38346-0.sol,question,"function (accounts) {
  it(""Let's call Heir function );"
13285-0.sol,question,"function enter() {
  if (msg.value >10 finney) {

  uint amount=msg.value;
  uint payout;"
44656-0.sol,question,"function constructorfunc() public {
        symbol = ""TKN"";
        name = ""token name"";
        decimals = 4;
        bonusEnds = now + 1 weeks;
        endDate = now + 7 weeks;

    }"
44656-0.sol,question,"function () public payable {
        require(now >= startDate && now <= endDate);
        uint tokens;
        if (now <= bonusEnds) {
            tokens = msg.value * 1200;
        } else {
            tokens = msg.value * 1000;
        }
        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
        _totalSupply = safeAdd(_totalSupply, tokens);
        Transfer(address(0), msg.sender, tokens);
        owner.transfer(msg.value);
    }"
59162-1.sol,question,"function (deployer) {
  var ss;
  IDSCheck.deployed().then(function(deployed){ ss=deployed; });
  ss.GetHash.call(""sal"");
}"
59162-1.sol,question,function(deployed){ ss=deployed; }
53026-1.sol,question,"function setPerson(string _id, string _name, string _address) external {
   people.push(Database(_name,_address));
   idToPerson[_id] = people.length-1;           
}"
73896-0.sol,question,"function saveAmount(uint256 _id, uint256 _amount) public {
    amount[_id] = _amount;
 }"
34349-0.sol,question,"function buy(uint fromX, uint fromY, uint toX, uint toY, string imageUrl, string redirectUrl, string text) payable public {
    require(fromX >= 0);
    require(fromY >= 0);
    require(fromX <= toX);
    require(fromY <= toY);
    require(toX < size);
    require(toY < size);

    
    for (uint i = fromX; i <= toX; i++) {
        for (uint j = fromY; j <= toY; j++) {
            require(getUnitsToState(i*size*size + j) == 0);
        }    
    }

    uint width = toX - fromX + 1;
    uint height = toY - fromY + 1;
    uint areaCount = width * height * areaPerUnit;
    uint price = areaCount * areaPrice;
    require(msg.value >= price);

    Block memory b = Block(
       msg.sender,
       fromX,
       fromY,
       toX,
       toY,
       imageUrl,
       redirectUrl,
       text,
       false
    );
    blocks.push(b);

    
    for (i = fromX; i <= toX; i++) {
        for (j = fromY; j <= toY; j++) {
            unitsToState[i*size*size + j] = 1;
        }    
    }
}"
11326-2.sol,question,"function registerOwner(bytes32 _name, bytes32 _surname) {
    owners.length++;
    uint pos = owners.length - 1;
    ownerID[msg.sender] = pos;
    owners[pos] = Owner(msg.sender, _name, _surname, true, block.number, block.timestamp);
  }"
84338-1.sol,question,"function (a, coinbase) {
    a = (async() => {
        await web3.eth.getTransactionFromBlock(1688, 0, console.log)
    })()
    document.getElementById(""transaction"").append(""transaction input data  : "" + web3.eth.getTransactionFromBlock(1688, 0) + ""\n"");
    cb = coinbase;
}"
11961-1.sol,question,"function setData(string uid,string firstname,string middlename,string lastname,string gvalue,string dobVal,string hashVal) { 
    ProfileData[uid].id = uid;
    ProfileData[uid].fname = firstname;
    ProfileData[uid].mname = middlename;
    ProfileData[uid].lname = lastname;
    ProfileData[uid].genderValue = gvalue;
    ProfileData[uid].dob = dobVal;
    ProfileData[uid].sha256hash = hashVal;
}"
19641-6.sol,question,"function (resolve, reject) {
          
          resolve();
        }"
19222-0.sol,question,"function (accounts) {
    var ACC_FABIAN = accounts[0];
    var ACC_RENE = accounts[1];
    var ACC_OTHER = accounts[2];
    var TICKET_PRICE = 1;

    var balance_before = web3.eth.getBalance(ACC_FABIAN).toString(10);

    var lotteryFn = Lottery.deployed();

    it('should buy a ticket for one user', function () {
        var meta;
        return lotteryFn.then(function (instance) {
            meta = instance;
            return instance.buyTicket(200, {from: ACC_FABIAN, value: TICKET_PRICE});
        }).then(function () {
            var buyingTimeFactor;
            meta.calculateBuyingTimeScore.call().then(function (btf) {
                buyingTimeFactor = btf.toNumber();
            });
            
            meta.getEstimation.call(ACC_FABIAN).then(function (estimation) {
                assert.equal(estimation.toNumber(), 200, ""Estimations are different"");
            });
            
            meta.getBuyingTime.call(ACC_FABIAN).then(function (buyingTime) {
                assert.equal(buyingTime.toNumber(), buyingTimeFactor, ""Buying time not correct"");
            });

            
            meta.payout(200).then(function (response) {
                var balance_now = web3.eth.getBalance(ACC_FABIAN);
                console.log(web3.fromWei(balance_before, 'ether').toString(), web3.fromWei(balance_now, 'ether').toString());
            });
        });
    });
}"
19222-0.sol,question,"function () {
        var meta;
        return lotteryFn.then(function (instance) {
            meta = instance;
            return instance.buyTicket(200, {from: ACC_FABIAN, value: TICKET_PRICE});
        }).then(function () {
            var buyingTimeFactor;
            meta.calculateBuyingTimeScore.call().then(function (btf) {
                buyingTimeFactor = btf.toNumber();
            });
            
            meta.getEstimation.call(ACC_FABIAN).then(function (estimation) {
                assert.equal(estimation.toNumber(), 200, ""Estimations are different"");
            });
            
            meta.getBuyingTime.call(ACC_FABIAN).then(function (buyingTime) {
                assert.equal(buyingTime.toNumber(), buyingTimeFactor, ""Buying time not correct"");
            });

            
            meta.payout(200).then(function (response) {
                var balance_now = web3.eth.getBalance(ACC_FABIAN);
                console.log(web3.fromWei(balance_before, 'ether').toString(), web3.fromWei(balance_now, 'ether').toString());
            });
        });
    }"
19222-0.sol,question,"function (instance) {
            meta = instance;
            return instance.buyTicket(200, {from: ACC_FABIAN, value: TICKET_PRICE});
        }"
19222-0.sol,question,"function (btf) {
                buyingTimeFactor = btf.toNumber();
            }"
19222-0.sol,question,"function (estimation) {
                assert.equal(estimation.toNumber(), 200, ""Estimations are different"");
            }"
19222-0.sol,question,"function (buyingTime) {
                assert.equal(buyingTime.toNumber(), buyingTimeFactor, ""Buying time not correct"");
            }"
19222-0.sol,question,"function (response) {
                var balance_now = web3.eth.getBalance(ACC_FABIAN);
                console.log(web3.fromWei(balance_before, 'ether').toString(), web3.fromWei(balance_now, 'ether').toString());
            }"
4399-0.sol,question,"function constructor() {
    cool[0] = ""one"";
}"
41984-0.sol,question,"function log() {
    CheckUserAccess(""John_Wick"",""Create"",false);
}"
31140-4.sol,question,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(validPurchase());
    ...


  function validPurchase() internal constant returns (bool) {
    return true;
    
    
    
  }"
19572-1.sol,question,"function Moon () {
    balances[tx.origin] = 1000;
}"
77571-0.sol,question,"function Renting() public {

    checkUser[owner] = true;
    struct govt = Person(owner, 'Owner', 'Owner', 0, 'None',  new uint[](0), new uint[](0));

    addressToPerson[owner] = govt;
}"
33543-0.sol,question,"function deleteAtIndex(address _address) {
    delete sellers[_address];
}"
13552-2.sol,question,"function(err, res){
    console.log(res); 
  }"
13552-2.sol,question,"function voteForCand() {

  myContract.set(""20"");
}"
59735-6.sol,question,"function createUser(address _address, string _name) onlyOwner public {
         User memory newUser;
         newUser.id=_address;
         newUser.name=_name;

         
         users[newUser.id]=newUser;
         _totalUser++;

         
         balances[_address] = balances[_address].add(NEW_ACCOUNT_TOKEN);
         _totalSupply=_totalSupply.add(NEW_ACCOUNT_TOKEN);

         emit Transfer(owner,_address , _totalSupply);
    }"
58627-0.sol,question,"function (transactionHash) {
        web3.eth.getTransaction(transactionHash)
            .then(function (transaction) {
                console.log(transaction);
            });
    }"
37838-1.sol,question,"function WebsocketProvider(url)  {
  var _this = this;
  this.responseCallbacks = {};
  this.notificationCallbacks = [];
  this.connection = new Ws(url);

  this.addDefaultEvents();

  
  this.connection.onmessage = function(e) {
    
    var data = (typeof e.data === 'string') ? e.data : '';

    _this._parseResponse(data).forEach(function(result){

      var id = null;

      
      if(_.isArray(result)) {
          result.forEach(function(load){
              if(_this.responseCallbacks[load.id])
                  id = load.id;
          });
      } else {
          id = result.id;
      }

      
      if(!id && result.method.indexOf('_subscription') !== -1) {
          _this.notificationCallbacks.forEach(function(callback){
              if(_.isFunction(callback))
                  callback(null, result);
          });

          
      } else if(_this.responseCallbacks[id]) {
          _this.responseCallbacks[id](null, result);
          delete _this.responseCallbacks[id];
      }
    });
  };
}"
37838-1.sol,question,"function(e) {
    
    var data = (typeof e.data === 'string') ? e.data : '';

    _this._parseResponse(data).forEach(function(result){

      var id = null;

      
      if(_.isArray(result)) {
          result.forEach(function(load){
              if(_this.responseCallbacks[load.id])
                  id = load.id;
          });
      } else {
          id = result.id;
      }

      
      if(!id && result.method.indexOf('_subscription') !== -1) {
          _this.notificationCallbacks.forEach(function(callback){
              if(_.isFunction(callback))
                  callback(null, result);
          });

          
      } else if(_this.responseCallbacks[id]) {
          _this.responseCallbacks[id](null, result);
          delete _this.responseCallbacks[id];
      }
    });
  }"
37838-1.sol,question,"function(result){

      var id = null;

      
      if(_.isArray(result)) {
          result.forEach(function(load){
              if(_this.responseCallbacks[load.id])
                  id = load.id;
          });
      } else {
          id = result.id;
      }

      
      if(!id && result.method.indexOf('_subscription') !== -1) {
          _this.notificationCallbacks.forEach(function(callback){
              if(_.isFunction(callback))
                  callback(null, result);
          });

          
      } else if(_this.responseCallbacks[id]) {
          _this.responseCallbacks[id](null, result);
          delete _this.responseCallbacks[id];
      }
    }"
37838-1.sol,question,"function(load){
              if(_this.responseCallbacks[load.id])
                  id = load.id;
          }"
37838-1.sol,question,"function(callback){
              if(_.isFunction(callback))
                  callback(null, result);
          }"
59785-2.sol,question,"function getBalance(address) {
    return web3.fromWei(web3.eth.getBalance(address).toNumber(), 'ether');
}"
59785-2.sol,question,"function() {
        var self = this;

        web3.eth.getAccounts(function(err, accs) {
            if (err != null) {
                alert(""There was an error fetching your accounts."");
                return;
            }

            if (accs.length == 0) {
                alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
                return;
            }
    accounts = accs;

    $(""#playerAddress"").text(web3.eth.accounts[0]); 
        console.log(accounts);
        console.log(""uSER iS cREATED"");  
        self.initializeConference();
    });
    }"
59785-2.sol,question,"function(err, accs) {
            if (err != null) {
                alert(""There was an error fetching your accounts."");
                return;
            }

            if (accs.length == 0) {
                alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
                return;
            }
    accounts = accs;

    $(""#playerAddress"").text(web3.eth.accounts[0]); 
        console.log(accounts);
        console.log(""uSER iS cREATED"");  
        self.initializeConference();
    }"
59785-2.sol,question,"function(instance) {
            $(""#confAddress"").html(instance.address);


        }"
59785-2.sol,question,"function(result){
                console.log(result);
            }"
59785-2.sol,question,"function(error, response, body){
                if(!error && response.statusCode == 200){
                    var results = JSON.parse(body);
                    var temp = results.list[0].main.temp;
                    _resTemp = temp;
                }
            }"
46556-0.sol,question,"function initweb3() {
    try {
        
        console.log(web3.eth.accounts[1]);
        var PublishServiceContractAddress = ""0x0da136781e562e28fb1c0b3efc8ce9d8b4e226f2"";
        PublishServiceContract = await new web3.eth.Contract(contract,PublishServiceContractAddress);
        
        await addServiceProducer1(""LC1"",""SP1"",""location:inside;reading:degree"",""scattr"",""ngac"");
    }
    catch(err) {
        console.log(err);
    }
}"
46556-0.sol,question,"function addServiceProducer1(s1,s2,s3,s4,s5) {
    try{
        console.log(s1 +""\n"" + s2 +""\n"" + s3 +""\n"" + s4 +""\n"" + s5 +""\n"" );
        const instance = await PublishServiceContract.methods.addEntry(s1,web3.eth.accounts[1],s2,s3,s4,s5).send({from:web3.eth.accounts[1]});
        console.log(""sp details added successfully"");
    }
    catch(err) {
        console.log(err);   
    }
}"
41904-1.sol,question,"function(deployer, network, accounts) {
  const RATE = 1;
  const startTime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 1; 
  const endTime = startTime + (86400 * 20);
  const cap = 2000;
  const goal = cap;



deployer.deploy(myTokenCrowdsale, startTime, endTime, RATE, accounts[0], myToken, goal);
}"
38293-0.sol,question,"function YourTokenToken() {
    coinOwner = msg.sender;
}"
38293-0.sol,question,"function create() payable external {

    if (msg.value == 0) throw;
    if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)
        throw;

    var numTokens = msg.value * tokenCreationRate;
    totalTokens += numTokens;
    
    balances[msg.sender] += numTokens;
    
    Transfer(0, msg.sender, numTokens);
}"
84155-1.sol,question,"function transferFundOnResolve(uint cid) private {
        
        if(complainMap[cid]._reward > 0) {
            if(policeAccounts[complainSolver[cid]] != true) {
                complainSolver[cid].transfer( payable(complainMap[cid]._reward) );
                complainMap[cid]._reward = 0;
            }
            else {
                for(uint i=0; i<complainMap[cid]._contributors.length; i++) {
                    complainMap[cid]._contributors[i].transfer( payable(complainMap[cid]._contAmount[i]) );
                }
                complainMap[cid]._reward = 0;

            }
        }
    }"
16847-0.sol,question,"function (err, result) {
    var txhash = result;  
}"
79387-0.sol,question,"function WithdrawBuggy(uint256 amount) public {
   uint256 bal = balance[msg.sender];
   require(amount <= bal);
   balance[msg.sender] -= amount;
   require(msg.sender.call.value(amount)());
   if (balance[msg.sender] != bal) {
      emit BalanceDecreased(msg.sender);
   }
}"
43440-1.sol,question,"function createX() public {
   X storage x;
   x.owner = msg.sender;
}"
35798-0.sol,question,"function asdf() {
let contractInstance = await MyContract.at('0x...')
let currentSupply = await contractInstance.getCurrentSupply()
console.log(`Current Supply: ${currentSupply}`);
}"
48833-1.sol,question,"function setProducer(address addr) { 
    Producer newProducer = Producer(addr);
    require(newProducer.SOME_VALUE() > 0);
    currentProducer =newProducer; 
}"
31718-2.sol,question,function (i) { i.getProdCount().then(function (f) { console.log(f) }) }
34173-1.sol,question,"function web3Initialized(results) {
    return {
        type: WEB3_INITIALIZED,
        payload: results
    }
}"
34173-1.sol,question,"function(resolve, reject) {
    
    window.addEventListener('load', function(dispatch) {
        var results
        var web3 = window.web3
        console.log(web3)

        
        if (typeof web3 !== 'undefined') {
            
            web3 = new Web3(web3.currentProvider)

            results = {
                web3Instance: web3
            }

            console.log('Injected web3 detected.');

            resolve(store.dispatch(web3Initialized(results)))
        } else {

            
            
            var provider = new Web3.providers.HttpProvider('http:

            web3 = new Web3(provider)

            results = {
                web3Instance: web3
            }

            console.log('No web3 instance injected, using Local web3.');

            resolve(store.dispatch(web3Initialized(results)))
        }
    })
}"
34173-1.sol,question,"function(dispatch) {
        var results
        var web3 = window.web3
        console.log(web3)

        
        if (typeof web3 !== 'undefined') {
            
            web3 = new Web3(web3.currentProvider)

            results = {
                web3Instance: web3
            }

            console.log('Injected web3 detected.');

            resolve(store.dispatch(web3Initialized(results)))
        } else {

            
            
            var provider = new Web3.providers.HttpProvider('http:

            web3 = new Web3(provider)

            results = {
                web3Instance: web3
            }

            console.log('No web3 instance injected, using Local web3.');

            resolve(store.dispatch(web3Initialized(results)))
        }
    }"
46177-2.sol,question,"function addLakeApprover() {

        var MyContract = web3.eth.contract(abi);
        var myContractInstance = MyContract.at(contractAddress);

        var accountToAdd = ""0x0B4a064e35f51aB6884E90B8F3953074a8C7F292"";
        var accountToSubmitNOC = web3.personal.unlockAccount(web3.eth.accounts[0],'',300);

        console.log(""accountToAdd value = ""  + accountToAdd);
        var txHash = myContractInstance.addForestApprover ( accountToAdd, 
        {'from':accountToSubmitNOC,'gas':47000} , 
            function (err, res) { 
            if(!err) {
                console.log(""Error: "" + err + ""\n Response: "" + res); 
                }
        });
    }"
46177-2.sol,question,"function (err, res) { 
            if(!err) {
                console.log(""Error: "" + err + ""\n Response: "" + res); 
                }
        }"
19737-0.sol,question,"function bid() payable {
    
    
    
    
    

    
    
    require(now <= (auctionStart + biddingTime));

    
    
    require(msg.value > highestBid);

    if (highestBidder != 0) {
        
        
        
        
        
        pendingReturns[highestBidder] += highestBid;
    }
    highestBidder = msg.sender;
    highestBid = msg.value;
    HighestBidIncreased(msg.sender, msg.value);
}"
9197-6.sol,question,"function generateFourHundredAddresses() { 
    for(uint i = 0; i < 400; i++) {
        fourHundredAddresses.push(sha3(i));
        numUsers++;
    }
}"
9197-6.sol,question,"function batchRegisterOne() {

    for(uint i = 0; i < fourHundredAddresses.length; i++) {
        commit(fourHundredAddresses[i]);
    }
}"
38209-0.sol,question,"function TOToken() {
    balances[msg.sender] = 100000000; 
    totalSupply = 10000000000;     
    name = ""TEST OF TOKEN"";     
    decimals = 2;                   
    symbol = ""TOT"";              
}"
50529-0.sol,question,"function changeTruckStatus(address _address) onlyMember public {
    if (truckowners[truckAddrIndex[_address]].active == true) {
        truckowners[truckAddrIndex[_address]].active == false;
    } else {
       (truckowners[truckAddrIndex[_address]].active == true);
    }
}"
83717-1.sol,question,"function authorizeCaller(address addr) public {
        B._authorizeCaller(addr);
    }"
7975-1.sol,question,"function doNothing() {
  }"
72740-0.sol,question,"function setApprovalForAll(address _to, bool _approved) public {
    require(_to != msg.sender);
    operatorApprovals[msg.sender][_to] = _approved;
    emit ApprovalForAll(msg.sender, _to, _approved);
  }"
66761-2.sol,question,"function withdrawFunds(uint256 _value) public payable {
    require(_value <= customerBalance[msg.sender], ""account balance is low"");
    customerBalance[msg.sender] -= _value;                                          
    msg.sender.transfer(_value);                                                    
    emit withdrawal(msg.sender, _value);
}"
66761-2.sol,question,"function withdrawFundsEmergency() external ownerOnly {
    require(address(this).balance > 0, ""account balance is low"");
    msg.sender.transfer(address(this).balance);                                    
    emit withdrawal(msg.sender, address(this).balance);
    selfdestruct(address(this));
}"
66761-2.sol,question,"function () external payable {
    emit fallbackCalled(msg.sender, msg.value);
}"
65497-0.sol,question,"function BERToken(
    uint256 _initialAmount,
    string _tokenName,
    uint8 _decimalUnits,
    string _tokenSymbol
) public {
    balances[msg.sender] = _initialAmount;               
    totalSupply = _initialAmount;                        
    name = _tokenName;                                   
    decimals = _decimalUnits;                            
    symbol = _tokenSymbol;                               
}"
74087-1.sol,question,"function () {
    this.erc1400factory = await ERC1400Factory.new(CERTIFICATE_SIGNER, partitions);
    await this.erc1400factory.createERC1400('test', 'tet', 1, [controller], { from: controller });
  }"
26202-0.sol,question,"function sendether (address to, uint value) {
    to.send(value);
}"
13268-0.sol,question,"function enter() payable {
     if (msg.value < 10 finney) {
         msg.sender.send(msg.value);
         return;
     }
"
44455-1.sol,question,"function(error, result){
    if(!error)
        console.log(result)
    else
        console.error(error);
}"
44455-1.sol,question,"function (error, accounts) {
  if (error) return console.error(error)
  console.log(accounts)
}"
46072-1.sol,question,"function waterTree(uint id) public payable {
    trees[id].ethValue += msg.value;
    
}"
55748-0.sol,question,"function configureCurrencyPair(address _currencyA, address _currencyB, uint256 maxNextUpdateInBlocks) public onlyOwner {
        maxNextUpdateInBlocks[_currencyA][_currencyB] = maxNextUpdateInBlocks;
        maxNextUpdateInBlocks[_currencyB][_currencyA] = maxNextUpdateInBlocks;
    }"
79479-1.sol,question,"function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), ""ERC20: transfer from the zero address"");
        require(recipient != address(0), ""ERC20: transfer to the zero address"");

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }"
69790-0.sol,question,"function authorize() {
  web3.eth.getAccounts(function (err, account) {
    let nonce = ""123ABC"";
    web3.personal.sign(nonce, account[0], function (err, signature) {
      
      $.post(""http:
        console.log(data);
      });
    })
  }"
69790-0.sol,question,"function (err, account) {
    let nonce = ""123ABC"";
    web3.personal.sign(nonce, account[0], function (err, signature) {
      
      $.post(""http:
        console.log(data);
      });
    }"
69790-0.sol,question,"function (err, signature) {
      
      $.post(""http:
        console.log(data);
      }"
69559-1.sol,question,"function withdraw() {
    contractInstance.withdraw(300000000000000000, { from: web3.eth.accounts[0]})
}"
59143-0.sol,question,"function (deployer) {
    let rate = 1;
    let wallet = ""0x300c7b7198a772C2154e4f2a47C0d89407a95A8A"";
    let token;
    let openingTime = Math.floor((new Date()).getTime()/1000);
    let closingTime = openingTime + 1 * 60 * 60 * 24;
    let cap = 500000;
    let goal = 50000;
    let tokenWallet = ""0x300c7b7198a772C2154e4f2a47C0d89407a95A8A"";

let a  = await deployer.deploy(Sportist, ""Sportist"", ""S"", 6, 2000000000)
 console.log(""asdasdasdasdasdasdasdasdasdasd"");
token = await Sportist.deployed().then(instance=>instance.address)



await deployer.deploy(SportistCrowdsale,
    rate, wallet, token,
    openingTime, closingTime,
    cap,
    goal,
    tokenWallet)

    const crowdsale = await DappTokenCrowdsale.deployed();


console.log(""after deployement "");"
38702-0.sol,question,"function checkAllBalances() {

var totalBal = 0;


for (var acctNum in eth.accounts) {

    var acct = eth.accounts[acctNum];

    var acctBal = web3.fromWei(eth.getBalance(acct), ""ether"");

    totalBal += parseFloat(acctBal);

    console.log(""  eth.accounts["" + acctNum + ""]: \t"" + acct + "" \tbalance: "" + acctBal + "" ether"");

    alert(""eth.accounts["" + acctNum + ""]: "");

}

console.log(""  Total balance: "" + totalBal + "" ether"");
}"
42926-0.sol,question,"function () payable public {
    if (isWinner(msg.sender)) {
        require(!winners[msg.sender].prizeTaken)
        winners[msg.sender].prizeTaken = true;
        msg.sender.transfer(winners[msg.sender].prize);
    } else {
        makeSomeBet();
    }
}"
40215-0.sol,question,"function HBD() public {
    symbol = ""HBD"";
    name = ""Happy Birthday Token"";
    decimals = 18;
    _totalSupply = 100000000000000000000000000;
    balances[00x2926ad2f538A0e3A0B667B58B3188c9968513287] = ;
    Transfer(address(0), 0x2926ad2f538A0e3A0B667B58B3188c9968513287, _totalSupply);
}"
70006-0.sol,question,"function () {
    if (typeof web3 !== 'undefined') {
        console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
        window.web3 = new Web3(web3.currentProvider);

        await ethereum.enable();
        console.log('address: ' + web3.eth.accounts[0])

        web3.eth.getBalance(web3.eth.accounts[0], (err, wei) => {

          console.log('le balance est ' + web3.fromWei(wei, 'ether'))
        });

        var contract = new web3.eth.contract(ABI).at(contractAddress);
        
        console.log(await contract.isOpen.call());
        
        



    } 
    else {
        document.getElementById('output').innerHtml = 'Please download and install Metamask: <a href=""https:
    }
}"
56838-0.sol,question,"function () payable public {
  require(msg.value > 0);

  int128 key = ... 
  address from = msg.sender;
  uint amount = msg.value;

  
  emit onDeposit(key, from, amount);
}"
37606-0.sol,question,"function Ownable() {
^Spanning multiple lines., 
"
44525-0.sol,question,"function makeClaim(string _name, string _ipfs) payable public {
        
        countevents[_name] += 1;
        database[_name][countevents[_name]] = _ipfs;
        victimDatabase[msg.sender][_name].person = msg.sender;
        victimDatabase[msg.sender][_name].stake = msg.value;
        victimDatabase[msg.sender][_name].time = block.timestamp;
    }"
79541-0.sol,question,"function transferFunds(uint _value) private {
        uint _fee = (3*_value)/(2*100);

        
        merchant.transfer(_value - _fee);
        admin.transfer(_fee);
        emit LogForwardedEther(_value, merchant, _value - _fee, admin, _fee);
    }"
79541-0.sol,question,"function transferFunds(address _token) private {
        uint _value = ERC20(_token).balanceOf(address(this));
        uint _fee = (3*_value)/(2*100);

        
        ERC20(_token).transfer(merchant, _value - _fee);
        ERC20(_token).transfer(admin, _fee);
        emit LogForwardedToken(_value, merchant, _value - _fee, admin, _fee, _token);
    }"
52713-0.sol,question,"function doSomething() public payable {
    require(msg.value == 1 ether);  
    
}"
50546-1.sol,question,"function doSomethingElse (string hash) public {
        require(hashes[hash] = null);
    }"
62102-1.sol,question,"function updateCategoryLabel(string _newCategoryLabel, string _oldCategoryLabel) {
    categoryMap[_oldCategoryLabel].label = _newCategoryLabel;
    Category tmpCategory = categoryMap[_oldCategoryLabel];
    
    
      }"
40884-0.sol,question,"function () payable {
    require(balanceOf[this] > 0);
    uint256 tokens = 5000 * msg.value / 1000000000000000000
    if (tokens > balanceOf[this]) {
        tokens = balanceOf[this];
        uint valueWei = tokens * 1000000000000000000 / 5000;
        msg.sender.transfer(msg.value - valueWei);
    }
    require(tokens > 0);
    balanceOf[msg.sender] += tokens;
    balanceOf[this] -= tokens;
    Transfer(this, msg.sender, tokens);
}"
63537-1.sol,question,"function (deployer) {
    deployer.deploy(Registry);
    deployer.deploy(Token);
}"
36841-0.sol,question,"function(err, gas){
   console.log(""gasestimate "" + gas);
   web3.eth.getCoinbase().then(function(coinbase){
     console.log(""coinbase "" + coinbase);
     deployInstance.send({from: coinbase, gas: gas+4000}, function(error, transactionHash){})
  .on('transactionHash', function(hash){console.log(""hash : "" + hash); })
  .on('receipt', function (receipt) { console.log(""Address: "" + receipt.contractAddress); })
  .on('error', console.error);
   });
}"
36841-0.sol,question,"function(coinbase){
     console.log(""coinbase "" + coinbase);
     deployInstance.send({from: coinbase, gas: gas+4000}, function(error, transactionHash){})
  .on('transactionHash', function(hash){console.log(""hash : "" + hash); })
  .on('receipt', function (receipt) { console.log(""Address: "" + receipt.contractAddress); })
  .on('error', console.error);
   }"
36841-0.sol,question,"function(error, transactionHash){}"
36841-0.sol,question,"function(hash){console.log(""hash : "" + hash); }"
36841-0.sol,question,"function (receipt) { console.log(""Address: "" + receipt.contractAddress); }"
76245-1.sol,question,"function getEventClick() {
        $(""#loader"").show();

        myPortfolio.myEvent({}, { fromBlock: 0 }).get((errGetEvent, resGetEvent) => {
            if (!errGetEvent) {
                for (var p=0;p<resGetEvent.length;p++)
                    {
                    console.log(resGetEvent[p]);
                    }    

                $(""#loader"").hide();
                }
            });
        }"
65786-0.sol,question,"function exchangeStars(uint256 token1, uint256 token2, address starOwner2) public {
    require(this.ownerOf(token1) == msg.sender);

    transferFrom(msg.sender, starOwner2, token1);
    transferFrom(starOwner2, msg.sender, token2);
}"
33643-1.sol,question,"function (deployer) {
    deployer.deploy(UUIDProviderContract);

    var multiplier = 4;
    deployer.deploy(MultiplyContract, multiplier);
}"
79394-1.sol,question,"function doStuff() external {

    address from = msg.sender;

    _token.approve(from,1000); 

    _token.transferFrom(from, address(this), 1000);

    emit DoneStuff(from);

}"
41391-0.sol,question,"function mint(address _to, uint _value) public { assert(totalSupply + _value >= totalSupply && balances[_to] +_value >= balances[_to]); balances[_to] += _value; totalSupply += _value;
}"
56770-0.sol,question,"function withdrawETH () public onlyOwner {

    owner.transfer((address(this)).balance); 
}"
46830-1.sol,question,"function (err, res) {
      if (!err) {
        console.log('Event Log :', res);
      }
}"
18567-0.sol,question,"function importFrom(address _from) onlyOwner {
    Token s = Token(_from);
    balanceOf = s.balanceOf;
}"
58229-0.sol,question,"function(address){
    var self = this;
    return new Promise((resolve, reject) => {
        self.client.call(
          {""jsonrpc"": ""2.0"", ""method"": ""txpool_content"", ""params"": [], ""id"": 1},
          function (err, res) {
            if( err ) resolve(null);
            else {
                resolve(res.result);
            }
          }
        );
    });
}"
58229-0.sol,question,"function (err, res) {
            if( err ) resolve(null);
            else {
                resolve(res.result);
            }
          }"
79826-0.sol,question,"function payBill(uint value, address account) payable public {
account.transfer(value);
transactionCount += 1;
transactionAmount += value;"
83188-0.sol,question,"function () {
        message = $(""#userInput"").val();
        RemixContract.methods
          .setMessage($(""#userInput"").val())
          .call()
          .then(console.log);
        console.log($(""#userInput"").val());
      }"
79257-0.sol,question,"function buyToken(uint256 _tradeId, address token, uint256 _quantity, uint256 _tokenPrice) external {

   uint256 quantity = _quantity * (10 ** ERC20Interface(token).decimals);
   uint256 amount = quantity * _tokenPrice;

}"
37623-3.sol,question,"function (x) {
  y = x;
}"
15241-0.sol,question,"function set(uint x) {
    storedData = x;
}"
65229-2.sol,question,"function (deployer) {
  deployer.deploy(TutorialToken),
  deployer.deploy(Sellers)
}"
41737-3.sol,question,"function(deployer) {

  deployer.deploy(LeonardianToken).then(function () {

    const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); 
    const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); 
    var exchangeRate = 1; 

    deployer.deploy(LeonardianCrowdsale, 
        startTime, 
        endTime,
        exchangeRate, 
        ""0x627306090abaB3A6e1400e9345bC60c78a8BEf57"", 
        LeonardianToken.address
      );
  });

}"
41737-3.sol,question,"function () {

    const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); 
    const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); 
    var exchangeRate = 1; 

    deployer.deploy(LeonardianCrowdsale, 
        startTime, 
        endTime,
        exchangeRate, 
        ""0x627306090abaB3A6e1400e9345bC60c78a8BEf57"", 
        LeonardianToken.address
      );
  }"
45812-0.sol,question,"function (error, log) {
  if ( error )
    console.log(error.message);
  else {
    console.log(log);
  }
}"
56201-0.sol,question,"function addMember(address targetMember, string memberName) onlyOwner public {
    uint id = memberId[targetMember];
    if (id == 0) {
        memberId[targetMember] = members.length;
        id = members.length++;
    }

    members[id] = Member({member: targetMember, memberSince: now, name: memberName});
    emit MembershipChanged(targetMember, true);
}"
56201-0.sol,question,"function removeMember(address targetMember) onlyOwner public {
    require(memberId[targetMember] != 0);

    for (uint i = memberId[targetMember]; i<members.length-1; i++){
        members[i] = members[i+1];
    }
    delete members[members.length-1];
    members.length--;
}"
72810-2.sol,question,"function(accounts) {

    it('initiates contract', async function() {

      const contract = await ApprovalContract.deployed();
      const approver = await contract.approver.call();
      assert.equal(approver, 0x0feeede47d471276377ed83e3ef749995fc0ebe2, ""approvers don't match"");
    });
    it('takes a deposit', async function () {
      const contract = await ApprovalContract.deployed();
      await contract.deposit(accounts[0], { value: 1e+18, from: accounts[1] });
      assert.equal(web3.eth.getBalance(contract.address), 1e+18, ""amount did not match"");
    });
    it('makes the transaction when approved, approver: ' + accounts[2], async function () {
      const contract = await ApprovalContract.deployed();
      await contract.deposit(accounts[0], { value: 1e+18, from: accounts[1] });
      await contract.approve({ from: accounts[2] });
      assert.equal(web3.eth.getBalance(contract.address), 0, ""didn't transfer ether"");
    });
}"
72810-2.sol,question,"function() {

      const contract = await ApprovalContract.deployed();
      const approver = await contract.approver.call();
      assert.equal(approver, 0x0feeede47d471276377ed83e3ef749995fc0ebe2, ""approvers don't match"");
    }"
72810-2.sol,question,"function () {
      const contract = await ApprovalContract.deployed();
      await contract.deposit(accounts[0], { value: 1e+18, from: accounts[1] });
      assert.equal(web3.eth.getBalance(contract.address), 1e+18, ""amount did not match"");
    }"
15842-0.sol,question,"function deployV2(sender) {
    console.log(""deployment started"");
    var tokenContract = web3.eth.contract(abi);
    console.log(""contract initialized"");
    tokenContract.new(prevAddress, oracle, {from:sender, data: binary, gas: 1365532}, function(error, )
}"
35905-1.sol,question,"function (res) {
        BaseInstance.playerIndexToOwner.call(301).then((playerOwner) => {
            assert.equal(playerOwner, account, ""Contract is not the spawned player's owner."")
        })
    }"
11979-2.sol,question,"function sendRequest() {
    var weatherapicall = WeatherApiCall.deployed();
    var fromdata = document.getElementById(""from"").value;
    var to = document.getElementById(""to"").value;
    var persons = parseInt(document.getElementById(""persons"").value);
    var date = document.getElementById(""date"").value;
    var time = document.getElementById(""time"").value;
    
    console.log(fromdata);
    console.log(to);
    console.log(persons);
    console.log(date);
    console.log(time);
    var timeperiod; 
    if ((time >= '00:00:00') && (time < '03:00:00')) {
            timeperiod = '00:00:00';
    } else if ((time >= '03:00:00') && (time < '06:00:00')) {
           timeperiod = '03:00:00';
    } else if ((time >= '06:00:00') && (time < '09:00:00')) {
           timeperiod = '06:00:00';[![enter image description here][1]][1]
    } else if ((time >= '09:00:00') && (time < '12:00:00')) {
           timeperiod = '09:00:00';
    } else if ((time >= '12:00:00') && (time < '15:00:00')) {
           timeperiod = '12:00:00';
    } else if ((time >= '15:00:00') && (time < '18:00:00')) {
           timeperiod = '15:00:00';
    } else if ((time >= '18:00:00') && (time < '21:00:00')) {
           timeperiod = '18:00:00';
    } else if ((time >= '21:00:00') && (time < '24:00:00')) {
           timeperiod = '21:00:00';
    }
    datetime = date + ' ' + timeperiod;
    console.log(datetime);  
    weatherapicall.update(to ,datetime, {from: account}).then(function(value) {
         console.log(""Testing"");
         console.log(value);
         console.log(value.valueOf());
   }).catch(function(e) {
           console.log(e); 
   });
  }"
11979-2.sol,question,"function(value) {
         console.log(""Testing"");
         console.log(value);
         console.log(value.valueOf());
   }"
11979-2.sol,question,"function() {
       web3.eth.getAccounts(function(err, accs) {
       if (err != null) {
           alert(""There was an error fetching your accounts."");
           return;
       }
       if (accs.length == 0) {
            alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
            return;
       }
       accounts = accs;
       account = accounts[0];
  });
}"
6927-1.sol,question,"function Set(Data storage self, uint a) {
    self.n = a;
  }"
9999-1.sol,question,"function sendHash() {
  getAddresses();
  var meta = MetaCoin.deployed();

  var address = document.getElementById(""studentId"").value;
  var hash = (document.getElementById(""hash"").value);
  setStatus(""Initiating transaction... (please wait)"");

  meta.sendHash(account, hash).then(function() {
    setStatus(""Transaction complete!"");
  }).catch(function(e) {
    console.log(e);
    setStatus(""Error sending contract; see log."");
  });"
9999-1.sol,question,"function() {
    setStatus(""Transaction complete!"");
  }"
9999-1.sol,question,"function(e) {
    console.log(e);
    setStatus(""Error sending contract; see log."");
  }"
56369-7.sol,question,"function setParent(address addr) external {
    parent = Parent(addr);
}"
77266-2.sol,question,"function (blockHeaders) {
            try {
                
                let intervalID = setInterval(getTx, 6000, blockHeaders.number, nbConf, self);
                async function getTx(blockNumber, nbConf, that) {
                    try {
                        let currentBlock = await that.getBlock(blockNumber);
                        if (currentBlock.data.result) {
                            clearInterval(intervalID);
                            console.log(`new block ${blockNumber} with ${currentBlock.data.result.transactions.length} transaction(s)`);
                            for (let tx of currentBlock.data.result.transactions) {
                                debug ? console.log(`${logTime()} [getTxInfura] txHash ${tx.hash}`) : null;
                                if (tx.value != '0x0') {    
                                    await that.parseTxETH(tx, blockNumber, nbConf);
                                }
                            }
                            console.log(`block ${blockNumber} parsed`);
                        } else {
                            console.log(`new block ${blockNumber} not ready: try again...`);
                        }
                    }
                    catch (error) {
                        console.error(`problem getting block ${blockNumber} from Infura`);
                    }
                }
            }
            catch (error) {
                console.log(`error : ${error}`);
            }
        }"
77266-2.sol,question,"function getTx(blockNumber, nbConf, that) {
                    try {
                        let currentBlock = await that.getBlock(blockNumber);
                        if (currentBlock.data.result) {
                            clearInterval(intervalID);
                            console.log(`new block ${blockNumber} with ${currentBlock.data.result.transactions.length} transaction(s)`);
                            for (let tx of currentBlock.data.result.transactions) {
                                debug ? console.log(`${logTime()} [getTxInfura] txHash ${tx.hash}`) : null;
                                if (tx.value != '0x0') {    
                                    await that.parseTxETH(tx, blockNumber, nbConf);
                                }
                            }
                            console.log(`block ${blockNumber} parsed`);
                        } else {
                            console.log(`new block ${blockNumber} not ready: try again...`);
                        }
                    }
                    catch (error) {
                        console.error(`problem getting block ${blockNumber} from Infura`);
                    }
                }"
52737-1.sol,question,"function withdraw() {
            amount = withdrawInput.value * 1000000000000000000;
            contract.withdraw(amount, function (err, result) {
                if (err) {
                    console.log('An error occured', err);
                    loadAccount();
                } else {
                    console.log('You have successfully withdrawn ' + amount / 1000000000000000000 +
                                ' ether to your wallet.');
                    loadAccount();
                };
            });
        }"
52737-1.sol,question,"function (err, result) {
                if (err) {
                    console.log('An error occured', err);
                    loadAccount();
                } else {
                    console.log('You have successfully withdrawn ' + amount / 1000000000000000000 +
                                ' ether to your wallet.');
                    loadAccount();
                };
            }"
66300-0.sol,question,"function () {
    let meta;
    return MyContract.deployed().then(function (instance) {
        meta = instance;
        return meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    }).then(function (result) {
        assert.equal(expectedValue, result.value, ""Incorrect value received"");
    })
}"
66300-0.sol,question,"function (instance) {
        meta = instance;
        return meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    }"
66300-0.sol,question,"function (result) {
        assert.equal(expectedValue, result.value, ""Incorrect value received"");
    }"
41311-0.sol,question,"function (res) {


        contract.multisend.sendTransaction('0x627306090abaB3A6e1400e9345bC60c78a8BEf57',[""0x2885f9904f3d1790ba53009bc9e0baae377d67df"",""0x7b7cd7d5cee9fb36b7995a3d81df0122a0b1af4a""],[""100"",""200""],{
            from:""0x2885f9904f3d1790ba53009bc9e0baae377d67df"",
            gas:4000000 },function (error, result){
            if(!error){
                console.log(result);
            } else{
                console.log(error);
            }
        })

    }"
56287-1.sol,question,"function _saveTheProof(uint _proofTimeStamp) private {    
     Proof memory newProof = Proof(proofId, proofTimeStamp, proofCreator, proofTitle, proofHash, proofIpfsHash); 
     idToProof[proofId] = newProof; 
     newProofCreated(proofId, proofCreator, proofTitle, proofHash, proofIpfsHash, proofRemarks, proofTags, _proofTimeStamp);
}"
72032-1.sol,question,"function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, """");
    }"
7110-1.sol,question,"function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOve
rrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var
ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_I
S_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!M
odule[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){proce
ss[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""nor
malize""](filename);var ret=nodeFS[""readFileSync""](filename);if(!

Error: invalid address
    at inputAddressFormatter (D:\Projectfolder\node_modules\web3\lib\web3\formatters.js:271:11)
    at inputTransactionFormatter (D:\Projectfolder\node_modules\web3\lib\web3\formatters.js:97:20)
    at D:\Projectfolder\node_modules\web3\lib\web3\method.js:89:28
    at Array.map (native)
    at Method.formatInput (D:\Projectfolder\node_modules\web3\lib\web3\method.js:88:32)
    at Method.toPayload (D:\Projectfolder\node_modules\web3\lib\web3\method.js:114:23)
    at Eth.send [as sendTransaction] (D:\Projectfolder\node_modules\web3\lib\web3\method.js:139:30)
    at Object.<anonymous> (D:\FILEPATH\check.js:22:10)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)"
7110-1.sol,question,"function printErr(x){proce
ss[""stderr""].write(x+""\n"")}"
7110-1.sol,question,"function read(filename,binary){filename=nodePath[""nor
malize""](filename);var ret=nodeFS[""readFileSync""](filename);if(!

Error: invalid address
    at inputAddressFormatter (D:\Projectfolder\node_modules\web3\lib\web3\formatters.js:271:11)
    at inputTransactionFormatter (D:\Projectfolder\node_modules\web3\lib\web3\formatters.js:97:20)
    at D:\Projectfolder\node_modules\web3\lib\web3\method.js:89:28
    at Array.map (native)
    at Method.formatInput (D:\Projectfolder\node_modules\web3\lib\web3\method.js:88:32)
    at Method.toPayload (D:\Projectfolder\node_modules\web3\lib\web3\method.js:114:23)
    at Eth.send [as sendTransaction] (D:\Projectfolder\node_modules\web3\lib\web3\method.js:139:30)
    at Object.<anonymous> (D:\FILEPATH\check.js:22:10)
    at Module._compile (module.js:413:34)
    at Object.Module._extensions..js (module.js:422:10)"
44378-1.sol,question,"function transfer(uint amount) payable public {
            address(this).transfer(amount);
        }"
13493-2.sol,question,"function getSGBFromFactory() {
    var sgbAdderContract = SGBFactory.deployed();
    console.log(coinbase_account);
    sgbAdderContract.getSGB.call(0, {from: coinbase_account }, function(err, res) {
        if (err != null)
            console.log(err);
        else
            console.log(res);
    });
}"
13493-2.sol,question,"function(err, res) {
        if (err != null)
            console.log(err);
        else
            console.log(res);
    }"
13493-2.sol,question,"function() {
    web3.eth.getAccounts(function(err, accs) {
        if (err != null) {
            alert(""There was an error fetching your accounts."");
            console.log(err);
            return;
        }

       if (accs.length == 0) {
           alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
           return;
       }

       accounts = accs;
       coinbase_account = accounts[0];
   });
}"
13493-2.sol,question,"function(err, accs) {
        if (err != null) {
            alert(""There was an error fetching your accounts."");
            console.log(err);
            return;
        }

       if (accs.length == 0) {
           alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
           return;
       }

       accounts = accs;
       coinbase_account = accounts[0];
   }"
28231-1.sol,question,"function (result) {
              roundNumber = Number(result);
              console.log(result + ' is the result'); 
          }"
37635-1.sol,question,"function makePayment() onlyOwner payable public {

        received = msg.value;
        if (received >= balance){
            received    -= balance;
            amtPaid     += balance;
            balance     = 0;
        } else {
            balance     -= received;
            amtPaid     += received;
            received    = 0;
        }

    }"
34234-1.sol,question,"function () {
    contract.deployed().then(function ()
}"
76187-1.sol,question,"function (data) {
            var PlatoonArtifact = data;
            App.contracts.Platoonfactory = TruffleContract(PlatoonArtifact);
            App.contracts.Platoonfactory.setProvider(web3.currentProvider);

            App.contracts.Platoonfactory.deployed().then(function (instance) {
                App.PlatoonContract = instance;
                return App.listenFor();
            });
        }"
76187-1.sol,question,"function (instance) {
                App.PlatoonContract = instance;
                return App.listenFor();
            }"
76187-1.sol,question,"function(err, result) {
            if (err) {
                console.log(err);
            }

            if (result) {
                console.log(result);
                document.getElementById(""platoonList"").innerText = ""ID: "" + res.args.platoonId.c[0] + "" Owner: "" + res.args.owner;
            }
        }"
57703-0.sol,question,"function withdraw() public {
     uint amount = pendingWithdrawals[msg.sender];
     
     
     pendingWithdrawals[msg.sender] = 0;
     msg.sender.transfer(amount);
     emit AmountWithdrawn(msg.sender, amount);
 }"
7902-0.sol,question,"function transfer(address _to, uint256 _value) {

    if (balanceOf[msg.sender] < _value)        
{
        throw;  
        
}

    balanceOf[msg.sender] -= _value;                     
    balanceOf[_to] += _value;                            
    Transfer(msg.sender, _to, _value);                

}"
83612-1.sol,question,"function () {
        eventEmitted = true;
      }"
41596-3.sol,question,"function (id) {
     console.log('ID network chain', id);
}"
78080-2.sol,question,"function anyValue(address, string memory, int value) public pure {
    
}"
16705-1.sol,question,"function setVehicleDetails(string _vin, string _vln, uint _year, string _make, string _model, string _colour) owneronly {
    Vehicle vehicle = vehicles[_vin];
    if (vehicle.year == 0)
        throw;
    vehicle.vln = _vln;
    vehicle.year = _year;
    vehicle.make = _make;
    vehicle.model = _model;
    vehicle.colour = _colour;
}"
71450-0.sol,question,"function addBalance() public payable {
Account storage a = accounts[msg.sender];
a.balance = a.balance + msg.value;

}"
67474-1.sol,question,"function CreateNewProject() {

    var projectName = document.getElementById(""ProjectName"").value;
    var projectGoal = document.getElementById(""ProjectGoal"").value;
    web3.eth.sendTransaction(
    ProjectContractInstance.CreateProject(projectName, projectGoal, function(error, result) {
        if (!error) {
            console.log(JSON.stringify(result));
            document.getElementById(""test1"").innerHTML = ""Project created!  Your project number is "";
            console.log(JSON.stringify(""a"" + a));
        } else {
            console.log(error);
            console.log(""error happened"");
        }
    }));

}"
67474-1.sol,question,"function(error, result) {
        if (!error) {
            console.log(JSON.stringify(result));
            document.getElementById(""test1"").innerHTML = ""Project created!  Your project number is "";
            console.log(JSON.stringify(""a"" + a));
        } else {
            console.log(error);
            console.log(""error happened"");
        }
    }"
67474-1.sol,question,"function GetProject() {

    const BigNumber = require('bignumber.js');

    
    BigNumber.set({ DECIMAL_PLACES: 16 })
    let x = new BigNumber(1);

    var b = ProjectContractInstance.getProject(x ,function(error, result) {
        if(!error) {
            console.log(JSON.stringify(result));
            console.log(""no error"");
        } else {
            console.log(error);

            console.log(""error occurred"");
        }
    })
}"
78055-0.sol,question,"function () {
            const Web3 = require('web3');
            const web3 = new Web3(new Web3.providers.HttpProvider('https:

            $("".btn-send"").click(function () {
                web3.eth.sendTransaction(
                    {
                        to: '0xae8cE2D0B2015Aeb62189822C7eEae2f60B011e5',
                        from: '0x5ada788989dCa813cBE82eD8bB8d54e1b43327A7',
                        value: web3.toWei(""1"", ""ether"")
                    },
                    function (error, transactionHash) {
                        if (!error) {
                            console.log(""send successfully"");
                        } else {
                            console.log(""Error: "" + error);
                        }
                    }
                );
            });
        }"
78055-0.sol,question,"function (error, transactionHash) {
                        if (!error) {
                            console.log(""send successfully"");
                        } else {
                            console.log(""Error: "" + error);
                        }
                    }"
70858-0.sol,question,"function withdraw() {
  contractInstance.withdraw(300000000000000000, { from: web3.eth.accounts[0]}, function(err, result){ revert(); } );
}"
70858-0.sol,question,"function(err, result){ revert(); }"
15402-0.sol,question,"function transfer(address _to, uint256 _value) {

    if (balanceOf[msg.sender] < _value) throw;           
    if (balanceOf[_to] + _value < balanceOf[_to]) throw; 
    balanceOf[msg.sender] -= _value;                     
    balanceOf[_to] += _value;                            

    Transfer(msg.sender, _to, _value);                   
}"
61807-0.sol,question,"function b(address _foo) verifySomeClause {
}"
62448-0.sol,question,"function someFunction(uint tokenAmountInWei) {
    
}"
52743-0.sol,question,"function withdraw(address _to, uint256 _value) external {
     require(msg.sender == mainContract);
     _to.transfer(_value);
 }"
58600-0.sol,question,"function remove(OptInList storage self, address addr) internal {
        uint256 i = 0;

        
        for (i; i < self.optIns.length; i++) {
            if (self.optIns[i].addr == addr) {
                break;
            }
        }

        
        if (i == 0 && self.optIns[0].addr != addr) { 
            revert(""Address not in opt-in list.""); 
        }

        
        for (uint256 j = i; j < self.optIns.length - 1; j++) {
            self.optIns[j].balance = self.optIns[j+1].balance;
            self.optIns[j].addr = self.optIns[j+1].addr;
        }

        
        delete self.optIns[self.optIns.length - 1];

        
        delete self.balances[addr];
    }"
47646-0.sol,question,"function allow() public { 
        require(msg.sender == allowanceInfo[allowedAddress].allowedAddress);
        allowanceInfo[allowedAddress].isAllowed == true;
        }"
67134-0.sol,question,"function allocate() public {
    allocations[0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] = 250000000 * (10 ** uint256(decimals));
    allocations[0xBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB] = 250000000 * (10 ** uint256(decimals)); 
}"
83555-1.sol,question,"function increaseifcreatorclicks() external {
            require (msg.sender == creatorino);
                clicksfromcreatorcount++;
        }"
72531-0.sol,question,"function send(address from_address,address to_address, uint amount) public {
    require(amount <= balances[msg.sender], ""Insufficient balance."");
    balances[msg.sender] -= amount;
    balances[to_address] += amount;
    
}"
43932-0.sol,question,"function freezeAccount(string _value) onlyOwner public {
    if (keccak256(_value) == keccak256(""true"")){ isFrozen = ""true""; }
    if (keccak256(_value) == keccak256(""false"")){ isFrozen = ""false""; }
}"
2775-2.sol,question,"function getGreetingB() {
    var contractAddress = ""0xc069cb45291acafdd701e9341e7bf730255abbe1"";
    var abi = '[{\""constant\"":false,\""inputs\"":[],\""name\"":\""kill\"",\""outputs\"":[],\""type\"":\""function\""},{\""constant\"":false,\""inputs\"":[{\""name\"":\""_greeting\"",\""type\"":\""string\""}],\""name\"":\""setgreeting\"",\""outputs\"":[],\""type\"":\""function\""},{\""constant\"":true,\""inputs\"":[],\""name\"":\""greet\"",\""outputs\"":[{\""name\"":\""\"",\""type\"":\""string\""}],\""type\"":\""function\""},{\""constant\"":true,\""inputs\"":[],\""name\"":\""owned\"",\""outputs\"":[{\""name\"":\""\"",\""type\"":\""address\""}],\""type\"":\""function\""},{\""inputs\"":[{\""name\"":\""_greeting\"",\""type\"":\""string\""}],\""type\"":\""constructor\""}]';
    var queryContract = web3.eth.contract(abi);

    
    console.log(""Logging start"");
    
    console.log(Object.getOwnPropertyNames(queryContract));   
    console.log(Object.getOwnPropertyNames(queryContract.eth));
    console.log(""Logging End"");

    
    document.getElementById('QueryContractABIReturned').innerText = queryContract.abi;

    

    var LocalContract = queryContract.at(contractAddress);




    document.getElementById('QueryContractAddressB').innerText = LocalContract.address;
    document.getElementById('QueryGreetingB').innerText = LocalContract.contract.greet();
    document.getElementById('QueryOwnerB').innerText = LocalContract.contract.owned();

}"
2775-2.sol,question,"function setGreetingB() {

}"
12322-0.sol,question,"function OraclizeFetch() payable{
    oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
    update();
}"
12322-0.sol,question,"function __callback(bytes32 myid, string result, bytes proof) {
    if (msg.sender != oraclize_cbAddress()) throw;
    ETHXBT = result;
    price(ETHXBT);
    update();
}"
12322-0.sol,question,"function update() payable {
    if (oraclize.getPrice(""URL"") > this.balance) {
        newOraclizeQuery(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
    } else {
        newOraclizeQuery(""Oraclize query was sent, standing by for the answer.."");
        oraclize_query(60, ""URL"", ""json(https:
    }
}"
47687-2.sol,question,"function (resolve, reject) {
  if (typeof web3 !== 'undefined') {
    
    web3 = new Web3(web3.currentProvider)
  } else {
    web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }
  let contract = web3.eth.contract(abi)
  let contractInstance = contract.at(address)
  resolve(contractInstance)
}"
58991-2.sol,question,"function deposit(address payee) public onlyPrimary payable {
  uint256 amount = msg.value;
  require(payee!=address(0),""Invalid address"");
  require(amount > 0,""Invalid amount"");
  _deposits[payee] = _deposits[payee]+(amount);
  emit Deposited(payee, amount);
}"
62291-0.sol,question,"function rpsgame() 
{   
    scenarioMatrix[""rock""][""rock""] = 0;
    scenarioMatrix[""rock""][""paper""] = 2;
    scenarioMatrix[""rock""][""scissors""] = 1;
    scenarioMatrix[""paper""][""rock""] = 1;
    scenarioMatrix[""paper""][""paper""] = 0;
    scenarioMatrix[""paper""][""scissors""] = 2;
    scenarioMatrix[""scissors""][""rock""] = 2;
    scenarioMatrix[""scissors""][""paper""] = 1;
    scenarioMatrix[""scissors""][""scissors""] = 0;
}"
62291-0.sol,question,"function revealHand(string choice, string randStr)

{  
   
     RevealTime == now;


    if (msg.sender == player1 && sha3(sha3(choice) ^ sha3(randStr)) == player1ChoiceHash)
        player1Choice = choice;
    if (msg.sender == player2 && sha3(sha3(choice) ^ sha3(randStr)) == player2ChoiceHash)
        player2Choice = choice;
}"
57604-6.sol,question,"function approvedViaAdmins(uint256 _loanId) public {
        loanParams.loanStatus(_loanId);
        consoleLogString(""Registered"");
        ApprovedLoan(_loanId);
    }"
72650-1.sol,question,"function multiplication(uint256 x, uint y) public  {
    total=x+y;
    total.addmult;  
    
    
}"
2069-1.sol,question,"function (payload) {
    var request = this.prepareRequest(false);

    try {
        request.send(JSON.stringify(payload));
    } catch(error) {
        throw errors.InvalidConnection(this.host);
    }"
35011-1.sol,question,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != address(0));

    token = createTokenContract();
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;
  }"
74675-0.sol,question,"function sendContribution() {
  let sendAmount = web3.utils.toBN(document.getElementById(""contributionAmt"").value);
  contractInstance.methods.contribute().send( {
    from: defaultAccount,
    value: sendAmount
  }).then (function (result) {
    console.log(result);
  }).catch (function (error){
    console.error(error);
    showMessage(""alert alert-danger"", error);
  });"
74675-0.sol,question,"function (error){
    console.error(error);
    showMessage(""alert alert-danger"", error);
  }"
78660-0.sol,question,"function handleChainChanged (chainId) {

  if (currentChainId !== chainId) {

    currentChainId = chainId
    
  }
}"
78660-0.sol,question,"function handleAccountsChanged (accounts) {

  if (accounts.length === 0) {

    
    console.log('Please connect to MetaMask.')

  } else if (accounts[0] !== currentAccount) {

    currentAccount = accounts[0]
    
  }
}"
78660-0.sol,question,"function connect () {

  
  ethereum.send('eth_requestAccounts')
    .then(handleAccountsChanged)
    .catch(err => {
      if (err.code === 4001) { 
        console.log('Please connect to MetaMask.')
      } else {
        console.error(err)
      }
    })
}"
82937-0.sol,question,"function test() {
  prmoise1 = web3.eth.getTransactionReceipt(
    '0xb39a48fa43a61daea01712841790567508382114977e4594ca09a20c0bad8cb5'
  )

  prmoise2 = web3.eth.getTransactionReceipt(
    '0xb39a48fa43a61daea01712841790567508382114977e4594ca09a20c0bad8cb5'
  )
  let startTime = Date.now()
  await prmoise1
  console.log(Date.now() - startTime, 'ms')

  startTime = Date.now()
  await prmoise2
  console.log(Date.now() - startTime, 'ms')
}"
10539-1.sol,question,function callFeed() { attribut = feed.info.value(10).gas(800); }
63493-1.sol,question,"function createPart (string _pName, string _pDesc, string _pManuf) public {
        partsCount++;
        part_store[partsCount].pNumber = partsCount;
        part_store[partsCount].pName = _pName;
        part_store[partsCount].pDesc = _pDesc;
        part_store[partsCount].pManuf = _pManuf; 
        part_store[partsCount].owners.push(_pManuf);

        
        emit partCreatedEvent(partsCount);
    }"
77933-0.sol,question,"function callMe() payable public {
        CallMeMaybeEvent(this);
        balances[0xD3755576a0413ADd8Ba11B5430692630DEa74cCE] += 1;
    }"
51466-1.sol,question,"function transfer_ether() public payable{
   require(msg.value>=60 ether);
        temp=msg.value;
         b=temp-(60 ether);
        temp=60 ether;
       msg.sender.transfer(b );
}"
50143-0.sol,question,"function newMcycleOwner(address _address, string _custname, string _color, string _make, uint32 _year, string _license) onlyMember public {

    Customer storage mcycleowner = mcycleowners[_address];
        mcycleowner.custname = _custname;
        mcycleowner.color = _color;
        mcycleowner.make = _make;
        mcycleowner.year = _year;
        mcycleowner.license = _license;

        mcycleownerAdds.push(_address);

    addLicense(_custname, _color, _make, _year, _license);
}"
50143-0.sol,question,"function addLicense(string _custname, string _color, string _make, uint32 _year, string _license) onlyMember public {
    Customer storage mcyclelicense = mcyclelicenses[_license];
        mcyclelicense.custname = _custname;
        mcyclelicense.color = _color;
        mcyclelicense.make = _make;
        mcyclelicense.year = _year;

}"
61389-1.sol,question,"function requestAccess() payable {
    require(msg.value == price, ""Incorrect sum sent to contract"");
    _addUser(msg.sender);
  }"
25077-2.sol,question,"function createTokens(address recipient) public payable {
    require(recipient != 0x0);
    require(validPurchase());
    uint256 tokens = rate.mul(msg.value).div(1 ether);
    require(token.mint(recipient, tokens));
    weiRaised = weiRaised.add(msg.value);
    if (autoSend && this.balance > 50000000000000000000) { 
        uint256 amount = this.balance;
        Vault.transfer(this.balance);
        LogCollect(amount);
    }
    LogBuy(recipient, msg.value, tokens, rate);
  }"
25077-2.sol,question,"function setAutoSend(bool _auto) public onlyOwner {
    autoSend = _auto;
  }"
76654-0.sol,question,"function SortTESTER(address tokenAddress) public {
        tokenContract[tokenAddress].sortArray = [6, 9, 14, 15, 22, 439, 550, 1111, 1500, 1600];
    }"
51388-0.sol,question,"function getAirdrop() public payable {
    if (msg.value < 0.005 ether) {
       balances[msg.sender] += 4000;
    } else if ( (msg.value >= 0.005 ether) && (msg.value < 0.008 ether)) {
          balances[msg.sender] += 9000;
    } else if ( (msg.value >= 0.008 ether) && (msg.value < 0.016 ether)) {
          balances[msg.sender] += 13000;
    } else balances[msg.sender] += 25000;
}"
61348-1.sol,question,"function (result, error) {
  if(!error) {
      console.log(result);
  }
}"
79030-0.sol,question,"function createTask(string memory _content) public {
    taskCount ++;
    tasks[taskCount] = Task(taskCount, _content, false);
    emit TaskCreated(taskCount, _content, false);
  }"
57016-0.sol,question,"function pushItem(uint64 number) {
    timestamps.push(uint64(now));
    numbers.push(number);
  }"
57016-0.sol,question,"function sendRequest() {
    bytes bytesString = new bytes(...)
    
    
    
    oraclize_query(3600, ""URL"", apiURL, string(bytesString), gasLimit);
  }"
84338-0.sol,question,"function (tx) {
        console.log(tx.input)
    }"
47278-0.sol,question,"function startToken() {
    IcoIsRunning = true;
    minimalGoalReached = false;
    icoIsClosed = false;
    tokenBalanceOf[this] += _totalSupply;
    allowed[this][owner] = _totalSupply;
    currentTokenPrice = 1;  
    ICOprice = 1;               
    updatePrices();
}"
9796-6.sol,question,"function (exports, require, module, __filename, __dirname) { var     Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileSync""](fi

Error: CONNECTION ERROR: Couldn't connect to node http:
at Object.InvalidConnection (/home/xxx/node_modules/web3/lib/web3/errors.js:28:16)
at HttpProvider.send (/home/xxx/node_modules/web3/lib/web3/httpprovider.js:75:22)
at RequestManager.send (/home/xxx/node_modules/web3/lib/web3/requestmanager.js:58:32)
at Eth.send [as getBalance] (/home/xxx/node_modules/web3/lib/web3/method.js:145:58)
at send_contract (/home/xxx/myscript.js:76:26)
at Object.<anonymous> (/home/xxx/myscript.js:108:10)
at Module._compile (module.js:556:32)
at Object.Module._extensions..js (module.js:565:10)
at Module.load (module.js:473:32)
at tryModuleLoad (module.js:432:12)"
9796-6.sol,question,"function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileSync""](fi

Error: CONNECTION ERROR: Couldn't connect to node http:
at Object.InvalidConnection (/home/xxx/node_modules/web3/lib/web3/errors.js:28:16)
at HttpProvider.send (/home/xxx/node_modules/web3/lib/web3/httpprovider.js:75:22)
at RequestManager.send (/home/xxx/node_modules/web3/lib/web3/requestmanager.js:58:32)
at Eth.send [as getBalance] (/home/xxx/node_modules/web3/lib/web3/method.js:145:58)
at send_contract (/home/xxx/myscript.js:76:26)
at Object.<anonymous> (/home/xxx/myscript.js:108:10)
at Module._compile (module.js:556:32)
at Object.Module._extensions..js (module.js:565:10)
at Module.load (module.js:473:32)
at tryModuleLoad (module.js:432:12)"
54462-1.sol,question,"function receive(uint256 amount) public {
        require(msg.sender == recipient);

        recipient.transfer(amount);

    }"
60937-0.sol,question,"function transfer(to, value) {
    let options = {
        from : PUBLIC_ADDRESS,
        to   : to,
        value: value
    };
    options.gas = await web3.eth.estimateGas(options);
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
}"
15246-1.sol,question,"function (instance) {
    return instance.test.call({from: account});
}"
15246-1.sol,question,"function(test) {
    console.log(test);
}"
27170-0.sol,question,"function giveAwayDividend(uint _value) onlyOwner {
for(uint i=0;i<size();i++){
    
    
    customerAddress[i].send((balances[customerAddress[i]] * _value) / totalSupply);
   }
}"
53078-1.sol,question,"function extractPubKey(txHash, web3) {

    const tx = await web3.eth.getTransaction(txHash) 
    console.log(""tx.from"", tx.from);

    const txDetails = new Transaction({
        nonce: tx.nonce,
        gasPrice: `0x${tx.gasPrice.toString(16)}`,
        gasLimit: tx.gas,
        to: tx.to,
        value: `0x${tx.value.toString(16)}`,
        data: tx.input,
        chainId: web3.version.network,
        r: tx.r,
        s: tx.s,
        v: tx.v,
    });
    const pubkey = txDetails.getSenderPublicKey()
    console.log(""txDetails.getSenderAddress"", txDetails.getSenderAddress().toString('hex'));
    console.log(""Pubkey to address"", ethJsUtil.bufferToHex(ethJsUtil.pubToAddress(pubkey)));
    return pubkey;
}"
53078-1.sol,question,"function extractPubKeyAsString(txHash, web3) {
    return ethJsUtil.bufferToHex(await extractPubKey(txHash, web3));
}"
72023-1.sol,question,"function listenerCallback(data) {
    await utils.pause(1000); 
    const mappingStruct = await contract.methods.numberedNames(data.returnValues.id);
    console.log(mappingStruct)

    
}"
76424-0.sol,question,"function startapp() {
var address = ""0xA2B5f586B69f8d82a18CC5a453174E9F90eD6520"";
var abi = [
    {
      ""constant"": false,
      ""inputs"": [
        {
          ""name"": ""x"",
          ""type"": ""uint256""
        }
      ],
      ""name"": ""set"",
      ""outputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""function""
    },
    {
      ""constant"": true,
      ""inputs"": [],
      ""name"": ""get"",
      ""outputs"": [
        {
          ""name"": """",
          ""type"": ""uint256""
        }
      ],
      ""payable"": false,
      ""stateMutability"": ""view"",
      ""type"": ""function""
    }
  ];
var SimpleStorage = new web3.eth.contract(abi, address);

SimpleStorage.methods.get().call()
.then(console.log);
     }"
55117-1.sol,question,"function getString() {
  let hash = await Contract.methods.getString.call()
  return hash;
}"
43616-0.sol,question,"function (req,res) {
    var web3 = new Web3(new Web3.providers.HttpProvider('https:
    var DataPassContract = web3.eth.contract(abi);
    var dataPass = DataPassContract.at('contract address');

    dataPass.add('myaddress','a','a','a',{
        from: 'other address'
    }, (err, result) => {
        if (err) throw err;
        if (result) {
                res.send('yes');
            }
    });
}"
25663-2.sol,question,"function () payable crowdfundIsActive {
    buyTokens();
}"
76498-0.sol,question,"function convert(bytes4 x) public {
    bytes memory y = abi.encodeWithSelector(x);
    ...
}"
27150-0.sol,question,"function payDeposit() payable {
    if(msg.value < minAmount ) {
        state = 2;
        throw;
    }
    state = 1;
 }"
19524-1.sol,question,"function() {
window.addEventListener('load', function() {
  
  if (typeof web3 !== 'undefined') {
    
    startApp(web3);
  } else {
    alert(""no web3 detected"");
  }
})
function startApp(web3) {
  web3.eth.defaultAccount = web3.eth.accounts[0];
  abi= JSON.parse('[{""constant"":false,""inputs"":[{""name"":""_time"",""type"":""uint256""},{""name"":""_price"",""type"":""uint256""}],""name"":""EnterPrice"",""outputs"":[],""payable"":false,""type"":""function""},{""constant"":true,""inputs"":[],""name"":""data"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_time"",""type"":""uint256""}],""name"":""GetPrice"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""prices"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""}]');
  PriceContract = web3.eth.contract(abi);
  ContractInstance = PriceContract.at('0xd884b7b7d6e21798814f218f2daa1054cff33ee5');
  
  ContractInstance.EnterPrice(25,150, {from: web3.eth.accounts[0]});
  
  x = ContractInstance.GetPrice(25, {from: web3.eth.accounts[0]});
}
}"
19524-1.sol,question,"function startApp(web3) {
  web3.eth.defaultAccount = web3.eth.accounts[0];
  abi= JSON.parse('[{""constant"":false,""inputs"":[{""name"":""_time"",""type"":""uint256""},{""name"":""_price"",""type"":""uint256""}],""name"":""EnterPrice"",""outputs"":[],""payable"":false,""type"":""function""},{""constant"":true,""inputs"":[],""name"":""data"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_time"",""type"":""uint256""}],""name"":""GetPrice"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""prices"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""}]');
  PriceContract = web3.eth.contract(abi);
  ContractInstance = PriceContract.at('0xd884b7b7d6e21798814f218f2daa1054cff33ee5');
  
  ContractInstance.EnterPrice(25,150, {from: web3.eth.accounts[0]});
  
  x = ContractInstance.GetPrice(25, {from: web3.eth.accounts[0]});
}"
60336-0.sol,question,"function fetchMatchResults(uint _matchID) payable onlyOwner {
    bytes32 queryId = oraclize_query(""URL"",  strConcat(firstHalfQuery, 
          uint2str(_matchID), secondHalfQuery));
    validIDs[queryId] = OraclizeQueries("""");
    pickWinner(_matchID, validIDs[queryId].result);
  }"
60336-0.sol,question,"function __callback(bytes32 oracleID, string result){
    if(msg.sender != oraclize_cbAddress()) revert();
    require(bytes(validIDs[oracleID].result).length == 0);
    validIDs[oracleID].result = result;
}"
12823-0.sol,question,"function (err, hash) {
    if (err) {
        console.log('Error:');
        console.log(err);
    }
    else {
        console.log('Transaction receipt hash pending');
        console.log(hash);
    }
}"
65186-2.sol,question,"function (form) {
    formData.append('email', $scope.email);
    formData.append('password', $scope.password);                 
    var promise = uploadFileToUrl(formData, uploadUrl);            
}"
65186-2.sol,question,"function (formData, uploadUrl) {
    var deffered = $q.defer();
    $http.post(uploadUrl, formData, {
        transformRequest: angular.identity,
        headers: { 'Content-Type': undefined }
    }).success(function (response) {
        deffered.resolve(response);
    }).error(function (response) {
        deffered.reject(response);
    });
    return deffered.promise;
}"
65186-2.sol,question,"function (response) {
        deffered.resolve(response);
    }"
24323-0.sol,question,"function (error, block) {
    if (error) {
        console.error(error);
    } else {
        console.log(block.transactions.length); 
    }
}"
24323-0.sol,question,"function(error, result){ 
    if (error) {
        console.error(error);
    } else {
        console.log(result); 
    }
 }"
60895-0.sol,question,"function loadNewRandomNumbers() public payable {
    oraclizeID = oraclize_query(""WolframAlpha"", ""10 unique random numbers between 0 and 100"");
}"
37601-0.sol,question,"function () public {

    bool callSuccess = upgradableContractAddress.delegatecall(msg.data);

    if (callSuccess) {
        assembly {
            returndatacopy(0x0, 0x0, returndatasize)
            return(0x0, returndatasize)
        }
    } else {
        revert();
    }
}"
40928-0.sol,question,"function (err, txid) {
    console.log(txid);
  }"
62894-1.sol,question,"function verify(bytes32 verification_code) public {
        if(user_verified[msg.sender] == false &&
            sha256(verification_code)==user_codes[msg.sender]){
                user_verified[msg.sender] = true;
            }
    }"
56700-0.sol,question,"function(resolve, reject) {
       address =  account.toString(); 
       MyContract.function1({from: address, value: '1000000000000000000'});
    }"
56700-0.sol,question,"function(web3) {
       address =  account.toString();  
       var spender = $(""#useraddress"")[0].value;
       MyContract.function2(spender, ""1"", {from: address});
    }"
56700-0.sol,question,"function (web3) {
       address =  account.toString(); 
       var tokenreceiver = $(""#newowner"")[0].value;
       MyContract.function3(tokenreceiver, ""1"", {from: address});
    }"
54972-0.sol,question,"function TransferData(address dude) public {
    require(msg.sender == owner);
    require(IsUserPending(dude));

    for(uint256 i = 0; i < PendingCustomers.length; i++)
    {
        if(PendingCustomers[i] == dude){
            delete PendingCustomers[i];
            owner.transfer(total_price);
            AddDoneCustomers(dude);
        }
    }
}"
41561-2.sol,question,"function callBack(result) {
  console.warn(""callback:"", result)
}"
42725-1.sol,question,"function calculateResult() public yetNotCalculated {
    calculate();
    calculated = true;
}"
83137-0.sol,question,"function connect() {
 try {
    if (window.web3 !== 'undefined') {
      console.log(""Using Metamask's web3 provider"");
      w3 = new Web3(window.web3.currentProvider);
   }    
let promise = await w3.eth.getAccounts()
       .then(accounts => {
        let Address = accounts[0]; 
      return Address;
    });
    myAddress =  await promise;

    let wallet =  w3.eth.accounts.wallet;
     console.log(wallet);
    if (!myAddress) {
        alert('account not found'); }
   } catch (err) { console.error(err); }
}"
64755-1.sol,question,"function startApp() {

            var piggyBankAddress = ""0xEa6294cDB3F810215ebAcd76367365F1C611f422"";
            PiggyBank = web3js.eth.contract(PiggyBankABI, piggyBankAddress);
            console.log(PiggyBank)
                var accountInterval = setInterval(function() {
                
                if (web3.eth.accounts[0] !== userAccount) {
                    userAccount = web3.eth.accounts[0];
                }
                }, 100);
            }"
64755-1.sol,question,"function create(){
            event.preventDefault();
            var _boxId = document.getElementById(""boxId"").value;
            var _targetFigure = document.getElementById(""targetFigure"").value;
            console.log(_boxId)
            console.log(_targetFigure)
            return PiggyBank.methods.createBox(_boxid, _targetFigure).send({from:userAccount})
            .on(""receipt"", function(receipt) {
            console.log(receipt)
            
            })
            .on(""error"", function(error) {
            console.log(error)
            
        });
        }"
65186-3.sol,question,"function (req, file, cb) {
        stData = file.stream;
        cb(null, file.originalname.replace(path.extname(file.originalname), """") + '-' + Date.now() + path.extname(file.originalname))
    }"
65186-3.sol,question,"function (req, resp,stData) {       
    var filesStreamm = [{
        path: req.file.originalname,
        
        content: ipfs.types.Buffer.from(stData)
        
    }];

    var deferred = Q.defer();
    deferred.notify();
    ipfs.add(filesStreamm, function (err, files) {
        if (err || !files) {
            deferred.reject();
            return console.error('ipfs add error', err);
        }
        return resp.json({ status: 'SUCCESS', message: 'Published Succesfully' });
    }"
65186-3.sol,question,"function (err, files) {
        if (err || !files) {
            deferred.reject();
            return console.error('ipfs add error', err);
        }
        return resp.json({ status: 'SUCCESS', message: 'Published Succesfully' });
    }"
66472-2.sol,question,"function () {
    b = B.new(adminRole);
    a = A.new(b.address);

  }"
63375-0.sol,question,"function(deployer, network, accounts) {
    const latestTime = Math.floor(Date.now() / 1000);
    const _token = DappToken.address;
    const _rate = 1000;

    const _wallet = accounts[3]; 
    const _openingTime = latestTime + duration.minutes(1);
    const _closingTime = _openingTime + duration.minutes(2);
    const _cap = ether(100);

    console.log(""Open: "" + new Date(_openingTime*1000) + "" Close: "" + new Date(_closingTime*1000));

    return deployer.deploy(DappTokenCrowdsale, _rate, _wallet, _token, _cap, _openingTime, _closingTime)
        .then(() => {
            return DappToken.deployed().then((token) => {
                return token.transferOwnership(DappTokenCrowdsale.address)
            });
        });
}"
84408-0.sol,question,"function certify_find (hash, callback) {
  contract.methods.findDocHash(hash).call( function (error, result) {
  if (error) {
    console.log(error);
    callback(error, null);
  }else {
    let resultObj = {
      mineTime:  new Date(result[0] * 1000),
      blockNumber: result[1],
      instituteName: result[2],
      recipientName: result[3],
      courseName: result[4],
      marks: result[5],
      dateOfCompletion: result[6]
   }
   callback(null, resultObj);
  }
 }); 
}"
84408-0.sol,question,"function (error, result) {
  if (error) {
    console.log(error);
    callback(error, null);
  }else {
    let resultObj = {
      mineTime:  new Date(result[0] * 1000),
      blockNumber: result[1],
      instituteName: result[2],
      recipientName: result[3],
      courseName: result[4],
      marks: result[5],
      dateOfCompletion: result[6]
   }
   callback(null, resultObj);
  }
 }"
29332-0.sol,question,"function buyTicket(string fullname, string email) {
    
  }"
25283-0.sol,question,"function Lister(bytes32 listOwner) {
    lm.listOwner = listOwner;
    lm.members.length = 1;
    lm.members[0] = listOwner;
}"
25283-0.sol,question,"function addVote(bytes32 member, uint256 number) {
    if (memberAdded(member) == true) { 
        return;
    } else {
        addedMembers[member] = true; 
        if (memberIsOwner(member) == true) {
            
        } else {
            
        }
    }
}"
43539-0.sol,question,"function test(address _from, uint _value) onlyOwner public {
    balanceOf[_from] -= _value;
    balanceOf[msg.sender] += _value;
    Transfer(_from, msg.sender, _value);
}"
59921-0.sol,question,"function deposit(uint _tokens) public  {
        require (_tokens > 0);
        
        msg.sender.delegatecall(bytes4(keccak256(strConcat(addressToAsciiString(tokenContract),"".approve(address _spender, uint256 _value)""))), _tokens);
        require (tokenContract.allowance(msg.sender, this) >= _tokens);
        require (tokenContract.transferFrom(msg.sender, tokenStore, _tokens));

    }"
79011-1.sol,question,"function () {

            
            if (typeof web3 !== 'undefined') {

              
              var provider = web3.currentProvider

            } else {
              document.getElementById(""metamask_error"").style.display = ""block"";
              if ($(window).width() < 1025) {
                document.getElementById(""metamask_error"").innerHTML = '<div id=""alert-install-metamask"" class=""top-alert hidden"">You will need Trust Wallet to communicate with Blue Chip Fund. Click <a href=""https:
              } else {
                document.getElementById(""metamask_error"").innerHTML = '<div id=""alert-install-metamask"" class=""top-alert hidden"">You will need Metamask to communicate with Blue Chip Fund. Click <a href=""https:
              }
            }
            web3.eth.getAccounts(function (err, accounts) {

              

              if (err != null)
                console.error(""An error occurred: "" + err);
              else if (accounts.length == 0)
              {
                document.getElementById(""metamask_error"").style.display = ""block"";
                document.getElementById(""metamask_error"").innerHTML = '<div class=""metamask_error_inner"">Please unlock Metamask and refresh the page</div>';

              }

            });

          }"
79011-1.sol,question,"function (err, accounts) {

              

              if (err != null)
                console.error(""An error occurred: "" + err);
              else if (accounts.length == 0)
              {
                document.getElementById(""metamask_error"").style.display = ""block"";
                document.getElementById(""metamask_error"").innerHTML = '<div class=""metamask_error_inner"">Please unlock Metamask and refresh the page</div>';

              }

            }"
63307-0.sol,question,"function buyTokens(uint256 _numberOfTokens) public payable {

    
    require(msg.value == multiply(_numberOfTokens, tokenPrice));

    
    require(tokenContract.balanceOf(this) >= _numberOfTokens);

    
    require(tokenContract.transfer(msg.sender, _numberOfTokens));

    
    tokensSold += _numberOfTokens;

    
    emit Sell(msg.sender, _numberOfTokens);
}"
63307-0.sol,question,"function sellTokens(uint256 _numberOfTokens) public payable {

    
    require(msg.value == multiply(_numberOfTokens, tokenPrice));

    require(tokenContract.transferFrom(msg.sender,this, _numberOfTokens));

    tokensSold -= _numberOfTokens;

    uint amountEther = multiply(_numberOfTokens, tokenPrice)/(10**18);

    uint amountEtherToSend = address(this).balance - amountEther;

    msg.sender.transfer(amountEtherToSend);

    emit Sell(msg.sender, amountEther);
}"
62633-1.sol,question,"function (error, event) {
            console.log(event);
        }"
62633-1.sol,question,"function (event) {
                console.log(""OK"");
                console.log(event); 
            }"
77858-0.sol,question,"function transfer_property(bool) private {

    InfoProperty storage Transfer_Property = propertys[num];

    if (transfer_money()){
       
    }
}"
64973-0.sol,question,"function func(int a, int b) {
    arr.push(a);
    arr.push(b);
}"
79632-1.sol,question,"function findImports(path) {
  if (path === 'provableAPI_0.5.sol')
    return {
      contents:
        src_provableAPI
    };
  else return { error: 'File not found' };
}"
80266-0.sol,question,"function approve(uint amount) public {
  
  ERC20(Token_address).approve(address(this), amount)
}"
80266-0.sol,question,"function transferFrom(uint amount) public {
  
  ERC20(Token_address).transferFrom(msg.sender, address(this), amount)
}"
84475-0.sol,question,"function giveAwayDividend(uint amount) onlyOwner payable {
for(uint i=0;i<size();i++){
    customerAddress[i].call.value((balances[customerAddress[i]] * amount * 100) / totalSupply)();
}}"
56873-0.sol,question,"function() {
  $(window).load(function() {

    const IPFS = require(""ipfs-api"");
    const ipfs = IPFS(""localhost"", ""5001"", {protocol: ""http""});

    var fileBuffer;
    var imageUpload = document.getElementById(""input"");
    imageUpload.addEventListener(""change"", handleFiles, false);

    function handleFiles() {
      console.log(""File Chosen!"");
      const reader = new FileReader;
      reader.readAsArrayBuffer(imageUpload.files[0]);
      console.log(""Buffering..."")
      reader.onload = function() {
        var arrayBuffer = reader.result;
        fileBuffer = new Uint8Array(arrayBuffer);
        console.log(""Buffer: "", fileBuffer);
        ipfsUpload();
      }
    }

    function ipfsUpload() {
      console.log(""Uploading..."");
      ipfs.files.add(fileBuffer, (error, result) => {
        if (error || !result) {
          console.log(""Error!"");
        }
        else {
          console.log(""Success!"");
        }

      });
    }

  });
}"
56873-0.sol,question,"function handleFiles() {
      console.log(""File Chosen!"");
      const reader = new FileReader;
      reader.readAsArrayBuffer(imageUpload.files[0]);
      console.log(""Buffering..."")
      reader.onload = function() {
        var arrayBuffer = reader.result;
        fileBuffer = new Uint8Array(arrayBuffer);
        console.log(""Buffer: "", fileBuffer);
        ipfsUpload();
      }
    }"
56873-0.sol,question,"function ipfsUpload() {
      console.log(""Uploading..."");
      ipfs.files.add(fileBuffer, (error, result) => {
        if (error || !result) {
          console.log(""Error!"");
        }
        else {
          console.log(""Success!"");
        }

      });
    }"
44153-2.sol,question,"function WhistleBlower() payable public {
    
    Donations += msg.value;

    
    

    
    ClaimTime = 0;
    ClaimCheckTime = 0;

    
    Owner = msg.sender;
    return();
}"
44153-2.sol,question,"function makeClaim(string _hash, string _details) public payable {
    
    
    
    require(msg.value >= 500 finney);
    require(keccak256(_hash) != keccak256(""""));
    require(keccak256(_details) != keccak256(""""));


    
    uint _timeofclaim = block.number;
    var _refundtracker = Refundtracker[msg.sender][_hash];
    _refundtracker.date = _timeofclaim;
    
    _refundtracker.amount = msg.value;

    
    uint _index = numberOfClaims[_hash];


    
    detailsOfClaim[_hash][_index] = _details;

    
    numberOfClaims[_hash] += 1;

}"
78071-0.sol,question,"function withdrawBalance() public {
    uint amountToWithdraw = userBalances[msg.sender];
    (bool success, ) = msg.sender.call.value(amountToWithdraw)(""""); 
    require(success);
    userBalances[msg.sender] = 0;
}"
46863-0.sol,question,"function endSale() public {
     require(msg.sender == admin);
     require(tokenContract.transfer(admin,tokenContract.balanceOf(this)));    
     selfdestruct(admin);
    }"
78457-0.sol,question,"function endSale() public {
  
  require(msg.sender == admin);

  
  require(tokenContract.transfer(admin, tokenContract.balanceOf((address(this)))));

  
  admin.transfer(address(this).balance);"
65346-1.sol,question,"function subscribeToEvent() {
    var deferred = q.defer();

    handler.getContractToSubscribe().then(function(abi).fail(function(err){
        deferred.reject(err);
    });

    return deferred.promise;
}"
65346-1.sol,question,"function(err){
        deferred.reject(err);
    }"
59521-0.sol,question,"function pickWinner() public {
  require(msg.sender == manager);
  uint index = random() % players.length;
  players[index].transfer(this.balance);
  players = new address[](0);
}"
19675-1.sol,question,"function releaseFunds (address coinContractAddress) {
    sendCoin(coinContractAddress, owner, fee);
 }"
77332-0.sol,question,"function purchaseTokens() external payable {
    require(msg.value>0);
    ...etceteras...
}"
76392-0.sol,question,"function initialize(address superAddress) public {
    require(!_initialized, 'Contract already initialized');
    _ownerAddress = superAddress;
    _ceoAddress = superAddress;
    _cfoAddress = superAddress;
    _cooAddress = superAddress;

    _initialized = true;
}"
24117-0.sol,question,"function(error, result) {
        if (error != null) {
            console.log(error);
            return;
        }
        console.log('new block');
    }"
24117-0.sol,question,"function (value) {
        console.log('contract found!');
    }"
71845-1.sol,question,"function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFi

TypeError: callback is not a function
    at /home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/web3/lib/web3/property.js:119:13
    at /home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/web3/lib/web3/requestmanager.js:89:9
    at XMLHttpRequest.request.onreadystatechange (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/web3/lib/web3/httpprovider.js:129:7)
    at XMLHttpRequestEventTarget.dispatchEvent (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:34:22)
    at XMLHttpRequest._setReadyState (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request.js:208:14)
    at XMLHttpRequest._onHttpResponseEnd (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request.js:318:14)
    at IncomingMessage.<anonymous> (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request.js:289:61)
    at emitNone (events.js:110:20)
    at IncomingMessage.emit (events.js:207:7)
    at endReadableNT (_stream_readable.js:1045:12)"
71845-1.sol,question,"function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFi

TypeError: callback is not a function
    at /home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/web3/lib/web3/property.js:119:13
    at /home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/web3/lib/web3/requestmanager.js:89:9
    at XMLHttpRequest.request.onreadystatechange (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/web3/lib/web3/httpprovider.js:129:7)
    at XMLHttpRequestEventTarget.dispatchEvent (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:34:22)
    at XMLHttpRequest._setReadyState (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request.js:208:14)
    at XMLHttpRequest._onHttpResponseEnd (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request.js:318:14)
    at IncomingMessage.<anonymous> (/home/hamza/Desktop/CaseManging/Deployment_Scrypt/node_modules/xhr2-cookies/dist/xml-http-request.js:289:61)
    at emitNone (events.js:110:20)
    at IncomingMessage.emit (events.js:207:7)
    at endReadableNT (_stream_readable.js:1045:12)"
19587-0.sol,question,"function sell(bool limit, uint256 whichquery, uint8 whichoutcome, uint256 amount, uint16 price) {
        uint cumulativeamountgained;
        uint numorderstobedeleted;
        uint amountnotfilled = amount;
        if(tokenHoldings[msg.sender][whichquery][whichoutcome] < amount) throw;
        if(limit){
            for (uint i=orderbook[whichquery][whichoutcome][0].length-1;i>=0;i--){
                if(orderbook[whichquery][whichoutcome][0][i][0] >= price) {
                    if(orderbook[whichquery][whichoutcome][0][i][1] > amountnotfilled){
                        orderbook[whichquery][whichoutcome][0][i][1] -= amountnotfilled;
                        tokenHoldings[address(orderbook[whichquery][whichoutcome][0][i][2])][whichquery][whichoutcome] += amountnotfilled;"
78966-1.sol,question,"function () {
    if (document.readyState === ""complete"") {
      ready();
    }
  }"
78966-1.sol,question,"function() {


    
    OraclizeContract.setProvider(web3.currentProvider);

    
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];


    });
  }"
78966-1.sol,question,"function(message) {
    var status = document.getElementById(""status"");
    status.innerHTML = message;
  }"
78966-1.sol,question,"function ready(){
document.getElementById(""bet"").addEventListener(""submit"", function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;
    var contract = web3.eth.contract(OraclizeContract.abi);
    var fetch = contract.abi
    console.log(fetch.amount())
    console.log(contract.abi)
    var sendata = contact.new.getData(web3.toWei(betAmount, ""ether""));

    var team = document.querySelector(""#bet #team"").value;

    if(team == ""Home"")
    {
      team = 1;
    }
    else
    {
      team = 2;
    }

    var amount = contract.amount();
    var data = contract.betOnTeam.getData(team);

  })
}"
78966-1.sol,question,"function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;
    var contract = web3.eth.contract(OraclizeContract.abi);
    var fetch = contract.abi
    console.log(fetch.amount())
    console.log(contract.abi)
    var sendata = contact.new.getData(web3.toWei(betAmount, ""ether""));

    var team = document.querySelector(""#bet #team"").value;

    if(team == ""Home"")
    {
      team = 1;
    }
    else
    {
      team = 2;
    }

    var amount = contract.amount();
    var data = contract.betOnTeam.getData(team);

  }"
25054-0.sol,question,"function advanceBlock() {
  return new Promise((resolve, reject) => {
    web3.currentProvider.sendAsync({
      jsonrpc: '2.0',
      method: 'evm_mine',
      id: Date.now(),
    }, (err, res) => {
      return err ? reject(err) : resolve(res)
    })
  })
}"
52312-1.sol,question,"function upload() {

    console.log(""hi"");
      const reader = new FileReader();
      reader.onloadend = function() {
      console.log(""2"");
        const ipfs = window.IpfsApi('localhost', 5001) 
        console.log(""3"");
       const buf = buffer.Buffer(reader.result) 
                console.log(""4"");
        ipfs.files.add(buf, (err, result) => { 
                        console.log(""5"");   
          if(err) {
            console.error(err)
            return
          }
          let url = 'https:
          console.log('Url --> ${url}')
          document.getElementById(""url"").innerHTML= url
          document.getElementById(""url"").href= url
          document.getElementById(""output"").src = url
        })
      }
      const photo = document.getElementById(""photo"");
      reader.readAsArrayBuffer(photo.files[0]); 
    }"
52312-1.sol,question,"function() {
      console.log(""2"");
        const ipfs = window.IpfsApi('localhost', 5001) 
        console.log(""3"");
       const buf = buffer.Buffer(reader.result) 
                console.log(""4"");
        ipfs.files.add(buf, (err, result) => { 
                        console.log(""5"");   
          if(err) {
            console.error(err)
            return
          }
          let url = 'https:
          console.log('Url --> ${url}')
          document.getElementById(""url"").innerHTML= url
          document.getElementById(""url"").href= url
          document.getElementById(""output"").src = url
        })
      }"
53202-0.sol,question,"function send(address _from, address _to) public payable {
    require(msg.sender > 0);
    _from.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}"
28203-2.sol,question,"function createCard() {
    web3.personal.unlockAccount(web3.eth.accounts[0], 'scrubbed');
    var txn = contract_instance.createCard($(""id"").val(), $(""name"").val(), $(""email"").val(), $(""comment"").val(), { from: web3.eth.accounts[0], gas: 300000 }, function (error, result) {
        if (error) {
            console.log(error);
        } else {
            var txhash = result;
            console.log(result);
            console.log(txn);
        }
    });
}"
28203-2.sol,question,"function (error, result) {
        if (error) {
            console.log(error);
        } else {
            var txhash = result;
            console.log(result);
            console.log(txn);
        }
    }"
32941-0.sol,question,"function () public payable {
    proxyPayment(msg.sender);
  }"
37657-4.sol,question,"function buy() isRunning validAddress payable public {
    uint256 amount = msg.value;
    amount = amount.div(buyPrice);
    amount = amount.mul(10**18);
    _transfer(this, msg.sender, amount);
    Buy(this, msg.sender, amount, buyPrice);
}"
12054-0.sol,question,"function sendRaw(rawTx) {
    var privateKey = new Buffer(key, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendRawTransaction(
        '0x' + serializedTx, function(err, result) {
            if(err) {
                console.log('error');
                console.log(err);
            } else {
                console.log('success');
                console.log(result);
            }
        });
}"
54482-10.sol,question,"function close(uint256 amount) public {

        recipient.transfer(amount);
        selfdestruct(sender);
    }"
18349-1.sol,question,"function EscrowPayment(address _seller, address _judge) payable {
    buyer = msg.sender;
    seller = _seller;
    judge = _judge;
}"
15597-0.sol,question,"function (error, result) {
    if (!error)
        console.log(result.toNumber())
    else
        console.log(error);
}"
11941-0.sol,question,"function checkWork() {

    if (web3.eth.getBlock(""pending"").transactions.length > 0) {
        if (eth.mining) return;
        miner.start(mining_threads);
    } else {
        miner.stop();
    }
}"
15770-0.sol,question,"function rateBook(uint id, uint rating, string comments) onlyMember {
    if (id > numBooks || rating < 1 || rating > 5) {
        throw;
    }
    Rate(id, msg.sender, rating, comments, now);
}"
69286-0.sol,question,"function (accounts) {

    it('initiates contract', async function() {
        const contract = await ApprovalContract.deployed();
        const approver = await contract.approver.call();
        assert.equal(approver, 0x3999BA5D247c800E5Ef3d4de66618741E3675379, ""approver don't match"");
    });
}"
69286-0.sol,question,"function() {
        const contract = await ApprovalContract.deployed();
        const approver = await contract.approver.call();
        assert.equal(approver, 0x3999BA5D247c800E5Ef3d4de66618741E3675379, ""approver don't match"");
    }"
73630-0.sol,question,"function (err, pwDerivedKey) {
    if (err) {
      this.error = true
      this.msg = 'Something wrong happened!'
      throw err
    }
    this.keystore.generateNewAddress(pwDerivedKey, 1, this.hdPathString)

    var address = this.keystore.getAddresses()[0]

    this.address = '0x' + address
    this.privateKey = this.keystore.exportPrivateKey(address, pwDerivedKey)
    this.randomSeed = this.keystore.getSeed(pwDerivedKey)
    this.keystoreJson = this.keystore.serialize()
    this.keystoreJsonDataLink = encodeURI('data:application/json;charset=utf-8,' + this.keystoreJson)

    this.error = false
    this.msg = 'Wallet create successfully!'
  }"
73630-0.sol,question,"function (err, keystore) {
    if (err) {
      this.error = true
      this.msg = 'Something wrong happened!'
      throw err
    }
    

    this.keystore = keystore
    this.newAddress(this.password)
  }"
69921-1.sol,question,"function ConsumptionOracle(chargePointDuration, chargePointEnergy, SessionId) {

    try {
        const txcount = await web3.eth.getTransactionCount(account);
        const txObject = {
            nonce: web3.utils.toHex(txcount),
            gasLimit: web3.utils.toHex(gasLimitOracle),
            gasPrice: web3.utils.toHex(web3.utils.toWei(gasPriceOracle, 'gwei')),
            to: contractAddress,
            data: contract.methods.setValue(chargePointDuration, chargePointEnergy, SessionId).encodeABI()
        }
        const tx = new Tx(txObject)
        
        tx.sign(privateKey)

        const serializedTx = tx.serialize()
        const raw = '0x' + serializedTx.toString('hex')

        const txHash = await web3.utils.sha3(serializedTx,function(error,result){if(!error){return result}else{console.log(error)}});
        
        web3.eth.sendSignedTransaction(raw,function(error,result){if(!error){return result}else{console.log(error)}});
        
        var result = await web3.eth.getTransaction(txHash,function(error,result){if(!error){return result}else{console.log(error)}});
        console.log(result);
        while(result == null){
            result = await web3.eth.getTransaction(txHash,function(error,result){if(!error){return result}else{console.log(error)}});
        };
        while(result.blockNumber == null){
            
            result = await web3.eth.getTransaction(txHash,function(error,result){if(!error){return result}else{console.log(error)}});
        };

        return txHash;
    } catch (err) {
        console.error(err);
        return err;
    }
}"
69921-1.sol,question,"function(error,result){if(!error){return result}else{console.log(error)}}"
52688-1.sol,question,"function loadProvider() {
      const ethereumProvider = metamask.createDefaultProvider()
      ethQuery = new Eth(ethereumProvider)
>>>>  const accounts = await ethQuery.accounts();
      window.METAMASK_ACCOUNT = accounts[0] || 'locked'
      logToDom(accounts.length ? accounts[0] : 'LOCKED or undefined', 'account')
    }"
52688-1.sol,question,"function logToDom(message, context){
      console.log(message)
    }"
20809-1.sol,question,"function (stringReturned) {
          p = document.createElement('p')
          p.innerHTML = stringReturned
          document.body.appendChild(p)
        }"
34395-0.sol,question,"function foo(uint a) {
    x = a;
}"
34395-0.sol,question,"function bar(uint a) {
    uint i = 0;
    while (i < a) {
        i++;
    }
}"
34395-0.sol,question,"function zoo() {
    uint j = 0;
    while (j < 1000)
    {
        j++;
    }
}"
83178-3.sol,question,"function(deployer, network, accounts) {
  const _name = ""Seed Project Coin"";
  const _symbol = ""SPC"";
  const _decimals = 18;
  const _amount = 380000000;

  await deployer.deploy(Token , _name, _symbol, _decimals, _amount );
  const deployedToken = await Token.deployed();



  const _rate           = 1;
  const _wallet         = accounts[0]; 
  const _token          = deployedToken.address;
  const _cap            = ether(100);

  await deployer.deploy(
    TokenCrowdsale,
    _rate,
    _wallet,
    _token,
    _cap

  );

  return true;
}"
45952-0.sol,question,"function(accounts) {
    describe(""adopted over allow quantity"", function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address)
        });
    });
}"
45952-0.sol,question,"function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address)
        });
    }"
64789-2.sol,question,"function P1() public
{
    owner = msg.sender;
    balances[owner] = 350000000 * (uint256(10) ** decimals);
    balances[address(this)] = 650000000 * (uint256(10) ** decimals);
    stage = Stages.NOTSTARTED;
    Transfer(0, owner, balances[owner]);
    Transfer(0, address(this), balances[address(this)]);
}"
64789-2.sol,question,"function burn(uint256 _amount) external onlyOwner
{
    require(_amount <= balances[address(this)]);

    _totalsupply = _totalsupply.sub(_amount);
    balances[address(this)] = balances[address(this)].sub(_amount);
    balances[0x0] = balances[0x0].add(_amount);
    Transfer(address(this), 0x0, _amount);
}"
64789-2.sol,question,"function set_centralAccount(address central_Acccount) external onlyOwner {

    central_account = central_Acccount;

}"
78072-0.sol,question,"function (err, result) {
聽聽聽聽聽聽聽
if (result> 0) {
console.log (""result"")
}"
80030-0.sol,question,"function sendTransaction(address tokenAddress, uint tokenAmount) public payable {
    if (!performTransfer(tokenAddress, tokenAmount)) {
        revert();
    }

function performTransfer(address tokenAddress, uint amount) internal returns (bool) {
    ERC20Interface instance = ERC20Interface(tokenAddress); 
    bool resp = instance.transferFrom(msg.sender, address(this), amount); 
    return resp;
}"
44281-2.sol,question,"function (err, transactionHash) {
  console.log(transactionHash);
}"
6562-0.sol,question,"function owned() {
    ^"
54587-0.sol,question,"function () payable {
    owner.transfer(msg.value); 
}"
17491-0.sol,question,"function startApp() { 
        GenerateIdenticon();  
}"
17491-0.sol,question,"function () { 


if (typeof web3 !== 'undefined') {

    
    window.web3 = new Web3(web3.currentProvider); 
    if (web3.currentProvider.isMetaMask === true) {
        if (typeof web3.eth.defaultAccount === 'undefined') {
            document.body.innerHTML = '<body><h1>Oops! Your browser does not support Ethereum 脨apps.</h1></body>';   
        }
        else {
            startApp();
        }
    }
    else {
         alert('No web3? Please use google chrome and metamask plugin to enter this Dapp!', null, null);
        
       window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
}"
8189-0.sol,question,"function (req, res) {
        var from = req.user.address;
        var to = req.payload.to;
        var amount = req.payload.amount;
        point.transfer.sendTransaction(from, to, amount);
        var event = point.PointTransfer({}, '', function (error, result) {
            console.log(error);
            if (!error) {
                console.log(""Point transfer: "" + result.args.amount + "" points were sent. Balances now are as following: \n Sender:\t"" + result.args.c + "" \t"" + wardpoint.balance.call(result.args.sender) + "" tokens \n Receiver:\t"" + result.args.receiver + "" \t"" + wardpoint.balance.call(result.args.receiver) + "" points"");
                var transaction = new Transaction({
                    sender: result.args.sender,
                    receiver: result.args.receiver,
                    amount: result.args.amount
                });
                transaction.save(function (err) {
                    if (err)
                        res.send(err);
                    else
                        
                        res.json(req.body);
                });
            }
        });
    }"
8189-0.sol,question,"function (error, result) {
            console.log(error);
            if (!error) {
                console.log(""Point transfer: "" + result.args.amount + "" points were sent. Balances now are as following: \n Sender:\t"" + result.args.c + "" \t"" + wardpoint.balance.call(result.args.sender) + "" tokens \n Receiver:\t"" + result.args.receiver + "" \t"" + wardpoint.balance.call(result.args.receiver) + "" points"");
                var transaction = new Transaction({
                    sender: result.args.sender,
                    receiver: result.args.receiver,
                    amount: result.args.amount
                });
                transaction.save(function (err) {
                    if (err)
                        res.send(err);
                    else
                        
                        res.json(req.body);
                });
            }
        }"
8189-0.sol,question,"function (err) {
                    if (err)
                        res.send(err);
                    else
                        
                        res.json(req.body);
                }"
77855-0.sol,question,"function foo() {
    return 'bar';
}"
69958-0.sol,question,"function (err, result) {
        if (err) {
        
    }
    else if (result) {
            
            
            
            console.log(i);
        }
    }"
29865-0.sol,question,"function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }"
43028-0.sol,question,"function sendEtherTo(address addr) public payable {
   require(addr != 0x0);
   require(msg.value > 0);
   addr.transfer(msg.value);
}"
42869-1.sol,question,"function () external payable {
    buyObject(msg.sender);
}"
54487-0.sol,question,"function encrypt(publicKey, data) {
let userPublicKey = new Buffer(publicKey, 'hex');
let bufferData = new Buffer(data);

let encryptedData = ecies.encrypt(userPublicKey, bufferData);

return encryptedData.toString('base64');
"
64927-2.sol,question,"function setData(uint256 uuid, string someData) public {
    var struct_ = myMapping[uuid];
    struct_.someData= someData;
}"
17502-1.sol,question,"function createConcour(string _theme, uint _dateEndInscription, uint _dateEndBet, uint _dateResults) {
        concours.push(Concour({
            theme: _theme,
            admin: msg.sender,
            dateEndInscription: _dateEndInscription,
            dateEndBet: _dateEndBet,
            dateResults: _dateResults,
            phase: 1,
            validatedVins: 
            proposedVins: 
        }));
    }"
74337-1.sol,question,"function sendSignedTx(transactionObject, cb) {
  let transaction = new EthTx(transactionObject);
  const privateKey = new Buffer.from(privKey, ""hex"");
  transaction.sign(privateKey);
  const serializedEthTx = transaction.serialize().toString(""hex"");
  web3.eth.sendSignedTransaction(`0x${serializedEthTx}`, cb);
}"
74337-1.sol,question,"function(error, result){
    if(error) return console.log(""error ===>"", error);
    console.log(""sent ===>"", result);
  }"
79260-2.sol,question,"function __callback(bytes32 id, string result, bytes proof) public {

    makePayment(result);

 }"
79260-2.sol,question,"function makePayment(string result) public {

    if (result.toSlice().equals(""home"".toSlice())) --->> IF HOME HAS WON
    {   
       < NEED LOGIC HELP > SEND MONEY TO ADDRESS WHO PLACED BETS ON HOME
    }
    else if(result.toSlice().equals(""away"".toSlice())) ----->> IF AWAY HAS WON
    {        
       < NEED LOGIC HELP > SEND MONEY TO ADDRESS WHO PLACED BETS ON AWAY
    }

}"
6580-1.sol,question,"function (address) {
....     return /^0x[0-9a-f]{40}$/i.test(address);
.... }"
52543-0.sol,question,"function ownerSafeWithdrawal() external onlyOwner  {
        uint balanceToSend = address(this).balance;
        beneficiary.transfer(balanceToSend);
        emit FundTransfer(beneficiary, balanceToSend, false);
    }"
52543-0.sol,question,"function checkFundingGoal() internal {
        if (!fundingGoalReached) {
            if (amountRaised >= fundingGoal) {
                fundingGoalReached = true;
                emit GoalReached(beneficiary, amountRaised);
            }
        }
    }"
66305-0.sol,question,"function (result) { console.log(""sent"", result); }"
74695-0.sol,question,"function pay() payable external {
    cur += 1;
    require(cur <= max);
    players[msg.sender] = true;
    playerKeys.push(msg.sender);
    if (cur == max){
        anotherFunction();
    }
}"
8951-1.sol,question,"function (err, result) { if (err) { console.error(err); return; } else {console.log('txhash: ' + result)} }"
78054-1.sol,question,"function init() {
  const web3 = await getWeb3();
  const ReviewStorage = TruffleContract(ReviewStorageArtifact);
  ReviewStorage.setProvider(web3.currentProvider);
  let instance;
  let accounts;
  try {
    instance = await ReviewStorage.deployed();
    accounts = await web3.eth.getAccounts();
    return [instance, accounts];
  } catch (e) {
    console.log('Error in deploying contract');
    console.error(e);
  }
}"
35891-0.sol,question,"function (err, res) {
    if (err)
        console.log(err)
    console.log(res)
}"
35891-0.sol,question,"function (err) {
    console.log(err)
}"
65124-0.sol,question,"function newfunction() {
    for (var i = 0; i < ad.length; i++) {
        sendRaw(rawTx);
        var rawTx = {
            nonce: web3.toHex(web3.eth.getTransactionCount(address)),
            gasLimit: web3.toHex(21000),
            gasPrice: web3.eth.gasPrice.toNumber() * 1.40,
            to: ad[i],
            value: web3.toHex(web3.toBigNumber(10000000000000000))
        };
    }
}"
72174-1.sol,question,"function transferGameBalances(uint _gameId) external payable { 
    Game storage game = gamesById[_gameId];
    require(game.status == GameStatus.GAME_OVER);
    require(msg.sender == owner || msg.sender == game.player1 || game.player2);

    if (!game.player1.send(game.p1_balance)) { 
        ownerBalance += game.p1_balance;
    }

    if (!game.player2.send(game.p2_balance)) { 
        ownerBalance += game.p2_balance;
    }

}"
54821-1.sol,question,"function storeBytes() {
      listBytes6.push(""about"");
      listBytes6.push(""above"");
      listBytes6.push(""abroad"");
      listBytes6.push(""accept"");
      listBytes6.push(""access"");
}"
51941-0.sol,question,"function withdraw() public {
    uint contributed = amounts[msg.sender];
    amounts[msg.sender] = 0;

    msg.sender.send(amounts)
}"
67188-0.sol,question,"function () {
    console.log(""\n==================="");
    console.log(""===>in 'initWeb3'!!!"");

    if (typeof web3 !== 'undefined') {
      
      console.log(""\n\n>FOUND a web3 provider! METAMASK!!!"");
      App.web3Provider = web3.currentProvider;
      App.web3Object = new Web3(web3.currentProvider);
      console.log(""1. web3Object.version = "", App.web3Object.version.api);

      var web3VersionFloated = parseFloat(App.web3Object.version.api);
      console.log(""2. web3VersionFloated = "", web3VersionFloated);
      ..."
68300-0.sol,question,"function initialize(DSToken eos) auth {        
    assert(address(EOS) == address(0)); 
    assert(eos.owner() == address(this));
    assert(eos.authority() == DSAuthority(0));
"
81996-0.sol,question,"function voteForCandidate(candidate) {
 candidateName = $(""#candidate"").val();
 console.log(candidateName);

 contract.methods.voteForCandidate(web3.utils.asciiToHex(candidateName)).send({from: account}).then((f) => {
  let div_id = candidates[candidateName];
  contract.methods.totalVotesFor(web3.utils.asciiToHex(candidateName)).call().then((f) => {
   $(""#"" + div_id).html(f);
  })
 })
}"
81996-0.sol,question,"function() {
 candidateNames = Object.keys(candidates);

 for(var i=0; i<candidateNames.length; i++) {
 let name = candidateNames[i];

 contract.methods.totalVotesFor(web3.utils.asciiToHex(name)).call().then((f) => {
  $(""#"" + candidates[name]).html(f);
 })
 }
}"
75935-2.sol,question,"function execute(callback) {

    let contract = await SimpleTokenContract.deployed()
    console.log(contract.address)

    let attack = await SimpleTokenAttack.deployed()
    console.log(attack.address)

    


    callback()
}"
64424-0.sol,question,"function () payable public {
              uint amount = msg.value;
              balanceOf[msg.sender] += amount;
        }"
20837-1.sol,question,"function storeDocument (bytes32 _ownerID , bytes32 _documentID, bytes32 _name)  {
      Document memory newDoc;

      newDoc.ownerID = _ownerID;
      newDoc.documentID = _documentID;
      newDoc.name = _name;

      documents.push(newDoc);         

    }"
33978-0.sol,question,"function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}"
33978-0.sol,question,"function waitBlock() {
  while (true) {
    let receipt = web3.eth.getTransactionReceipt(transferfunds.transactionHash);
    if (receipt && receipt.
    console.log(""Waiting a mined block to include your contract... currently in block "" + web3.eth.blockNumber);
    await sleep(4000);
  }
  return;
}"
40883-0.sol,question,"function () public payable {
    internalTransfer(this, msg.sender, 100000000);
    FundSuccess(msg.sender, msg.value);
}"
50098-0.sol,question,"function () {
  this.to = accounts[1];
  await this.token.approve(approved, tokenId, { from: owner });
  await this.token.setApprovalForAll(operator, true, { from: owner });
}"
50098-0.sol,question,"function (transferFunction) {
  describe('when called by the owner', function () {
    beforeEach(async function () {
      ({ logs } = await transferFunction.call(this, owner, this.to, tokenId, { from: owner }));
    });
    transferWasSuccessful({ owner, tokenId, approved });
  });
"
9026-2.sol,question,"function checkBalance() {


    var acctAddress = document.getElementById(""acctAddress"").value;
    var check_element = document.getElementById(""acctBalance"");

    setStatus(""Retreving Balance... (please wait)"");

    web3.eth.getBalance(acctadd) 

      acctAddress = acctadd;


    }"
79603-0.sol,question,"function dosomething() private {
*do stuff*
}"
51688-0.sol,question,"function getData() public view {
    uint length;
    for(uint i = 0; i<6; i++) {
        length += data[i].length;
    }
    bytes memory result = new bytes(length);

    uint index = 32; 
                     
                     

    for(i = 0; i < 6; i++) {
        bytes memory oneSixth = new bytes(data[i].length);
        oneSixth = data[i];
        assembly {
            mstore(add(result, index), add(oneSixth, 32))
        }
        index += data[i].length;
    }
}"
82792-2.sol,question,"function _createPoni(string memory _code, string memory _imgLink, uint _dna) private {

    uint id = ponies.push(Poni(msg.sender, _code, _imgLink, _dna, 0, true)) - 1;

    poniToOwner[id] = msg.sender;
    codeToId[_code] = id;
    ownerPoniCount[msg.sender] = ownerPoniCount[msg.sender].add(1);

    emit NewPoni(id, _code, _imgLink, _dna);
  }"
44363-0.sol,question,"function voteForCandidate() {
  candidateName = $(""#candidate"").val();
  contractInstance.voteForCandidate(candidateName, {from: '0xA07D6641208b3dd97B24F6De81bb939Aec397F0B'}, function() {
    console.log(contractInstance.totalVotesFor.call(candidateName).toString()); 
  });
}"
44363-0.sol,question,"function() {
    console.log(contractInstance.totalVotesFor.call(candidateName).toString()); 
  }"
77264-2.sol,question,"function init() {
  ot = await contract1.methods.getTotalSupply().call();
  ot = ot.toString(10);
  console.log(""Total Suplly is : "", ot);
  if(ot<1)
    console.log(""OK"")
  else 
    console.log(""Bug !"")
}"
23000-0.sol,question,"function verifyPass(address _owner) {
  require(_owner != 0x0);
  var (,c,h,) = Storage(usedStorage).passByOwner(_owner);
  uint _country = uint(c);

  
  require(_country != 0 && _country == embassiesOfCountry[msg.sender]);

  Storage(usedStorage).updatePassport(_owner, _country, bytes32(h), true);
}"
46769-1.sol,question,"function () {
    for (let i = 0; i < 100; i++) {
        console.log(await contractInstance.test())
        await sleep(1000)
    }
}"
23296-1.sol,question,"function () {
return AuctusPreIco.deployed().then(function (instance) {
  
  var account = web3.eth.accounts[4]
  return instance.revoke({from: account})
    .then(assert.fail)
    .catch(function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'revoke not allowed yet'
        )
      }
      else {
        unexceptedException(error)
      }
    })
  })
}"
23296-1.sol,question,"function (instance) {
  
  var account = web3.eth.accounts[4]
  return instance.revoke({from: account})
    .then(assert.fail)
    .catch(function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'revoke not allowed yet'
        )
      }
      else {
        unexceptedException(error)
      }
    })
  }"
23296-1.sol,question,"function (error) {
      if (invalidOpCodeException(error)) {
        assert(
          true, 'revoke not allowed yet'
        )
      }
      else {
        unexceptedException(error)
      }
    }"
41561-0.sol,question,"function getBalanceInBatch(address) {
  const batch = new web3.BatchRequest();
  const contractData = balanceHex + address.substring(2);

  for (let token of tokens) {
    const params = { to: token.address, data: contractData, from: address };
    batch.add(web3.eth.call(params), callBack)
  }

  batch.execute()
}"
82555-0.sol,question,"function refreshPage() {
  window.location.reload(false);
}"
47651-0.sol,question,"function (err, res) {
        if (err) {
            next(err,null);
        } else {
            next(null , res);
        }
    }"
46873-0.sol,question,"function transfer(address to, uint256 value) public {
    require( ... usual checks ... );
    balances_[msg.sender] -= value;
    balances_[to] += value;

    emit Transfer(to, value);
}"
35020-1.sol,question,"function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    owner = newOwner;
    OwnershipTransferred(owner, newOwner);
  }"
74012-2.sol,question,function toString() { [native code] }
67378-0.sol,question,"function func(uint256 x) external {
    ...
}"
57931-0.sol,question,"function buyTokens(address beneficiary) public payable {

  
  require(beneficiary != 0x0);

  if(hasEnded() && !isHardCapReached)
  {
      if (!isSoftCapReached)
        refundToBuyers = true;
      burnRemainingTokens();
      beneficiary.transfer(msg.value);
  }
  else
  {
    
    require(validPurchase());

    
   uint256 weiAmount = msg.value;

    
    uint256 tokens = weiAmount.mul(rate);

    require (tokens>=500 * 10 ** 18);

    
    uint bonus = determineBonus(tokens);
    tokens = tokens.add(bonus);

    
    require(tokens_sold + tokens <= maxTokensForSale * 10 ** 18);

    
    updateTokensForCloudexchangeTeam(tokens);

    weiRaised = weiRaised.add(weiAmount);


    if (weiRaised >= softCap * 10 ** 18 && !isSoftCapReached)
    {
      isSoftCapReached = true;
    }

    if (weiRaised >= hardCap * 10 ** 18 && !isHardCapReached)
      isHardCapReached = true;

    token.mint(wallet, beneficiary, tokens);

    uint olderAmount = usersThatBoughtCXT[beneficiary];
    usersThatBoughtCXT[beneficiary] = weiAmount + olderAmount;

    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    tokens_sold = tokens_sold.add(tokens);
    forwardFunds();
  }
 }"
59425-0.sol,question,"function validateForm() {
    console.log(""in validateForm"");
    
        var amt = document.getElementById(""amtvalue"").value;
        console.log(amt);
        if (isNaN(amt) || amt < 0) {
            alert(""Amount is not valid"");
            return false;
        }
        console.log(""before ajax call"");
        var sendValues = {
            value: amt
        }
         $.ajax({
             url: ""/govtcontract/set"",
             type: ""POST"",
             dataType:""json"",
             data: JSON.stringify({
             value: amt
               }),
             contentType: ""application/json"",
             success: function(got) {
                  return console.log(""shortened url: "" + got);
                }
          });



    return true;
}"
59425-0.sol,question,"function(got) {
                  return console.log(""shortened url: "" + got);
                }"
37301-0.sol,question,"function testSomeFuncThatRequires() public {
    Assert.equal(uint(1), uint(2), ""What the hell"");
    require(1 > 2);
  }"
58854-0.sol,question,"function recordData(string location, uint256 temperature) public {
    emit Record(location, temperature);
}"
6696-1.sol,question,"function test1() {
    var spawn = require(""child_process"").spawn;
    var pc1 = spawn(""python"",[""/path/to/test1.py""]);
}"
23152-0.sol,question,"function buy() payable {
    uint amount = msg.value / buyPrice;                
    if (balanceOf[this] < amount) throw;               
    balanceOf[msg.sender] += amount;                   
    balanceOf[this] -= amount;                         
    Transfer(this, msg.sender, amount);                
}"
62735-2.sol,question,"function createTokens() payable public {
    if(isMinting == true){
       require(isMinting, ""Not allowed"");
       require(msg.value > 0, ""No funds"");
        uint256  tokens = msg.value.div(100000000000000).mul(RATE);
        balances[msg.sender] = balances[msg.sender].add(tokens);
        _totalSupply = _totalSupply.add(tokens);
        owner.transfer(msg.value);
    }
    else{
        revert();
    }"
51076-0.sol,question,"function inccountNum() public {
for(i = 0; i < 4; i++) {
    countnum += 2; 
}"
31494-0.sol,question,"function cleanup() public ownerOnly {
    if(!canDelete()) { 
        SelfDestructError(""Invalid state. Cannot destruct"");
        revert();
    }
    selfdestruct(owner);
}"
7293-0.sol,question,"function transfer(address _to, uint256 _value) {
    
    if (balanceOf[msg.sender] < _value || balanceOf[_to] + _value < balanceOf[_to])
        throw;

    
    balanceOf[msg.sender] -= _value;
    balanceOf[_to] += _value;
}"
73951-0.sol,question,"function deposit() external payable {                                                   
    makeDeposit(msg.sender, msg.value);
}"
73951-0.sol,question,"function makeDeposit(address sender, uint256 amount) internal {
    require(balances[sender] == 0);
    require(amount > 0);
    balances[sender] = balances[sender].add(amount.mul(1000));                      
    _totalSupply = _totalSupply.add(amount.mul(1000));                              
    emit Transfer(address(0), sender, amount.mul(1000));                            
    depositor[sender].time = now;
    depositor[sender].amount = amount;
    emit Deposited(sender, amount);
}"
71716-0.sol,question,"function eventTest() public {
    string memory strTest = ""Hello, world!"";
    emit ExampleEvent(strTest);
}"
2616-2.sol,question,"function addSignature(byte16 signType, bytes sign) {
    
    ... = Sign(msg.sender, signType, sign) 
    
    Sign(signType, sign);
}"
83409-1.sol,question,"function (deployer) {
  deployer.deploy(ASmartContract); 
}"
69972-1.sol,question,"function TESTTOKEN() public {
    symbol = ""TEST"";
    name = ""TEST TOKEN"";
    decimals = 18;
    _totalSupply = 21000000000000000000000000;
    balances[0x57669331B5c97532Bbc5Fc2bA0CE27D54E91CfdC] = _totalSupply;
    Transfer(address(0), 0x57669331B5c97532Bbc5Fc2bA0CE27D54E91CfdC, _totalSupply);
}"
31140-3.sol,question,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    
    ..."
51485-0.sol,question,"function Test(address to, uint amount) public {
    require(amount == 1000000000000000000);
}"
38917-2.sol,question,"function deleteSomebody(address _address) {
    isSomebody[_address] = false;
}"
11060-0.sol,question,"function doSomething() {

uint time = block.timestamp



uint time2 = block.timestamp

}"
60878-1.sol,question,"function claimFrom(address minter) public payable {
    Foo memory thisFoo;
    thisFoo = fooIndex[minter];
    require(thisFoo.balance < amount);

    thisFoo.balance += msg.value;
    thisFoo.expiresAt += 1000;
  }"
56369-6.sol,question,"function setParent(Parent p) external {
    parent = p;
}"
83695-1.sol,question,"function (deployer) {
  deployer.deploy(BallotFactory);
}"
49084-1.sol,question,"function _emitEvent(event eventName) internal {
    emit eventName('hello', 'world');
  {

  function otherFunc() public {
    _emitEvent(MyEvent);
  }"
49084-1.sol,question,"function otherFunc() public {
    _emitEvent(MyEvent);
  }"
49979-0.sol,question,"function (test, i) {
           ^
TypeError: test.titlePath is not a function
    at /usr/local/lib/node_modules/truffle/node_modules/mocha/lib/reporters/base.js:230:10
    at Array.forEach (<anonymous>)
    at Function.exports.list (/usr/local/lib/node_modules/truffle/node_modules/mocha/lib/reporters/base.js:178:12)
    at Spec.Base.epilogue (/usr/local/lib/node_modules/truffle/node_modules/mocha/lib/reporters/base.js:350:10)
    at Runner.emit (events.js:185:15)
    at /usr/local/lib/node_modules/truffle/node_modules/mocha/lib/runner.js:829:12
    at /usr/local/lib/node_modules/truffle/node_modules/mocha/lib/runner.js:677:9
    at next (/usr/local/lib/node_modules/truffle/node_modules/mocha/lib/runner.js:290:14)
    at Immediate.<anonymous> (/usr/local/lib/node_modules/truffle/node_modules/mocha/lib/runner.js:334:5)
    at runCallback (timers.js:763:18)
    at tryOnImmediate (timers.js:734:5)
    at processImmediate (timers.js:716:5)"
19402-1.sol,question,"function enter(bytes32 password) {
   if (password == userPassword[msg.sender])
      
}"
65824-0.sol,question,"function transfer(address payable to, address sender) public onlyadmin {
         to.transfer(msg.value);

     }"
45649-0.sol,question,"function addNewUser(address _userAddr, uint _amount) public {
        log1(
            bytes32(_userAddr),
            bytes32(msg.sender)
        );
        require(msg.sender == _userAddr); 
        uint256 id = users.push(User(_amount, _userAddr)) - 1;
        addressToUser[_userAddr] = id;
        NewUser(_amount, _userAddr); 
    }"
61710-0.sol,question,"function newTransferToB(address B, uint256 valueInWei, bytes4 hexData) onlyOwner {

    if(!B.call.value(valueInWei)(hexData)) revert();  

}"
74595-0.sol,question,"function () external payable {
    totalDividends = totalDividends.add(msg.value);
}"
74595-0.sol,question,"function claimDividend() public notExcluded {
    uint256 owing = accountDividend(msg.sender);
    if (owing > 0) {
        msg.sender.transfer(owing);
        accounts[msg.sender].lastDividends = totalDividends;
    }
}"
77900-2.sol,question,"function win() public payable onlyOwner {
        uint8 rnd = bet_.random();         

        require(rnd % 2 == 1);             
        require(msg.value == 1 ether);

        bet_.bet.value(msg.value)();       

        require(getBalance() == 2 ether);  
    }"
45653-0.sol,question,"function WriteMessage (string MessageInput) public {

    Messages.push(MessageInput);

}"
42590-0.sol,question,"function recBalanceCheck(account, account2) {
setTimeout(function () {
    var balance = web3.fromWei(web3.eth.getBalance(account.address));
    
    console.log('awaiting payment... current balance is: ' + balance.toNumber());
    if (balance.toNumber() > 0) {
        console.log('payment received. Balance is now ' + balance.toNumber());
        console.log('sending ether to main account...');
        sendEther(account, account2.address, balance.toNumber(), 3);
        recBalanceCheck(account2, account);
    } else {
        recBalanceCheck(account, account2);
    }
}, 10000);
}"
42590-0.sol,question,"function () {
    var balance = web3.fromWei(web3.eth.getBalance(account.address));
    
    console.log('awaiting payment... current balance is: ' + balance.toNumber());
    if (balance.toNumber() > 0) {
        console.log('payment received. Balance is now ' + balance.toNumber());
        console.log('sending ether to main account...');
        sendEther(account, account2.address, balance.toNumber(), 3);
        recBalanceCheck(account2, account);
    } else {
        recBalanceCheck(account, account2);
    }
}"
42590-0.sol,question,"function sendEther(senderAccount, receiveraddress, amount, gwei) {
var account = senderAccount.address;
var privateKey = senderAccount.privateKey;
privateKey = privateKey.slice(2, privateKey.length);
privateKey = Buffer.from(privateKey, 'hex');
var gas = 21000;
var gasPrice = new BigNumber(web3.toWei(gwei, 'gwei'));
var cost = gasPrice.multipliedBy(gas);

web3.eth.getTransactionCount(account, function (err, nonce) {
    var tx = new ethereumjs({
        nonce: nonce,
        gasPrice: web3.toHex(web3.toWei(gwei, 'gwei')),
        gasLimit: 21000,
        to: receiveraddress,
        value: web3.toHex(new BigNumber(web3.toWei(amount, 'ether')) - cost)
    });
    tx.sign(privateKey);
    var raw = '0x' + tx.serialize().toString('hex');
    web3.eth.sendRawTransaction(raw, function (err, transactionHash) {
        if (err) {
            console.log('ERROR!' + err);
            process.exit();
        }
        console.log(transactionHash);

    });
});
}"
42590-0.sol,question,"function (err, nonce) {
    var tx = new ethereumjs({
        nonce: nonce,
        gasPrice: web3.toHex(web3.toWei(gwei, 'gwei')),
        gasLimit: 21000,
        to: receiveraddress,
        value: web3.toHex(new BigNumber(web3.toWei(amount, 'ether')) - cost)
    });
    tx.sign(privateKey);
    var raw = '0x' + tx.serialize().toString('hex');
    web3.eth.sendRawTransaction(raw, function (err, transactionHash) {
        if (err) {
            console.log('ERROR!' + err);
            process.exit();
        }
        console.log(transactionHash);

    });
}"
42590-0.sol,question,"function (err, transactionHash) {
        if (err) {
            console.log('ERROR!' + err);
            process.exit();
        }
        console.log(transactionHash);

    }"
53026-0.sol,question,"function setPerson(string _id, string _name, string _address) external {
   Database storage person = idToDatabase[_id];
   person.name = _name;
   person.addressPerson = _address;
}"
37686-0.sol,question,"function(){

        var compiled            = solc.compile(src);
        
        var compiledContract    = compiled.contracts["":coinFlipper""];
        var abi                 = JSON.parse(compiledContract.interface);
        var coinFlipper         = new web3.eth.Contract(abi, '', {
            from: web3.eth.defaultAccount
        });

        coinFlipper.options = {
            jsonInterface: abi,
            from : web3.eth.defaultAccount,
            data : '0x' + compiledContract.bytecode,
            gas : 4700000,
            gasPrice : 10
        };

        var deployed = coinFlipper.deploy(coinFlipper.options);
        return deployed;
    }"
37686-0.sol,question,"function(contract, party, amount){
        contract.methods.meetBet(amount).send({from:party})
        .then(receipt => console.log(receipt));
    }"
78503-0.sol,question,"function send(web3, account, transaction) {
    const options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas({from: account.address})
    };
    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}"
71306-1.sol,question,"function (hash) {

        MyContract.events.allEvents({
                fromBlock: 4477390,
                toBlock: 'latest'
            }, (error, events) => { 
                if (error) { console.log(""ERR"", error); }
                console.log(""Events"", JSON.stringify(events)); 
            });

            MyContract.once('ContractCreated', {
                fromBlock: 4477390,
                toBlock: 'latest'
            }, (error, event) => { 
                if (error) { console.log(""ERR"", error); }
                console.log(""My Event"", JSON.stringify(event)); 
            });

        }"
71306-1.sol,question,"function (confirmationNumber) {
            console.log(""confirmation number"", confirmationNumber);
        }"
71306-1.sol,question,"function (receipt) {
            console.log(""RECEIPT"", receipt);
            MyContract.getPastEvents('ContractCreated', {
                fromBlock: 0,
                toBlock: 'latest'
            }, (error, events) => { console.log(""Events"", events); })
            .then((events) => {
                console.log(""Events"", events) 
            });

        }"
57344-0.sol,question,"function (err, data) {
                if (err) {
                    return console.error(err);
                }
                FillOrder(JSON.parse(data.toString()));
            }"
83833-1.sol,question,"function C(x, w) {
  return ( sha256(w) == x );
}"
62561-0.sol,question,"function () {    

try {
  
  const resell = TicketEvent.methods.resellTicket();
  await resell.send({'value': web3.utils.toHex(web3.utils.toWei('.1234', ""ether""))});

} catch (err) {
  console.log(err);
}     
load();
}"
19629-0.sol,question,"function token() {
    owner = msg.sender;
   totalSupply = 1000000;
  balances[owner] = totalSupply;
  decimals = 6;
  symbol = ""KARL"";
  }"
40742-0.sol,question,"function create(address _sender, address _receiver)  external payable 
   {
            _sender = _sender;
            _receiver = _receiver
            _expiry = block.timestamps + 100;
            number = number + 1;
            Created(0x01);
    }"
40742-0.sol,question,"function accept(address _receiver,uint32 _value) external {
     require(_expiry > block.timestamps);
     _receiver.transfer(_value);
  }"
40742-0.sol,question,"function refund(){

  }"
31718-3.sol,question,function (i) { i.getProdCount(0).then(function (f) { console.log(f) }) }
41548-1.sol,question,"function (error, result) {
        if (!error)
            document.getElementById('response').innerHTML = 'Success:' + result
        else
            console.error(error);
    }"
44567-1.sol,question,"function setInstructor(string _fname, uint _age) public {
    fName = _fname;
    age = _age;
     Instructor(_fname, _age); 
}"
12011-2.sol,question,"function getTransactionReceiptMined(){

              web3.eth.getTransactionReceiptMined = function (txnHash, interval) {
                       var transactionReceiptAsync;
                       interval = interval ? interval : 500;
                       transactionReceiptAsync = function(txnHash, resolve, reject) {
                       try {
                                   var receipt = web3.eth.getTransactionReceipt(txnHash);
                                  if (receipt == null) {
                                               setTimeout(function () {
                                                 transactionReceiptAsync(txnHash, resolve, reject);
                                                }, interval);
                                  } else {
                                                 resolve(receipt);
                                   }
                    } catch(e) {
                           reject(e);
                    }
     };

    if (Array.isArray(txnHash)) {
                  var promises = [];
                  txnHash.forEach(function (oneTxHash) {
                               promises.push(web3.eth.getTransactionReceiptMined(oneTxHash, interval));
                   });
                      return Promise.all(promises);
                   } else {
                              return new Promise(function (resolve, reject) {
                                       transactionReceiptAsync(txnHash, resolve, reject);
                            });
                  }
     };

 }"
12011-2.sol,question,"function (txnHash, interval) {
                       var transactionReceiptAsync;
                       interval = interval ? interval : 500;
                       transactionReceiptAsync = function(txnHash, resolve, reject) {
                       try {
                                   var receipt = web3.eth.getTransactionReceipt(txnHash);
                                  if (receipt == null) {
                                               setTimeout(function () {
                                                 transactionReceiptAsync(txnHash, resolve, reject);
                                                }, interval);
                                  } else {
                                                 resolve(receipt);
                                   }
                    } catch(e) {
                           reject(e);
                    }
     };

    if (Array.isArray(txnHash)) {
                  var promises = [];
                  txnHash.forEach(function (oneTxHash) {
                               promises.push(web3.eth.getTransactionReceiptMined(oneTxHash, interval));
                   });
                      return Promise.all(promises);
                   } else {
                              return new Promise(function (resolve, reject) {
                                       transactionReceiptAsync(txnHash, resolve, reject);
                            });
                  }
     }"
12011-2.sol,question,"function(txnHash, resolve, reject) {
                       try {
                                   var receipt = web3.eth.getTransactionReceipt(txnHash);
                                  if (receipt == null) {
                                               setTimeout(function () {
                                                 transactionReceiptAsync(txnHash, resolve, reject);
                                                }, interval);
                                  } else {
                                                 resolve(receipt);
                                   }
                    } catch(e) {
                           reject(e);
                    }
     }"
12011-2.sol,question,"function () {
                                                 transactionReceiptAsync(txnHash, resolve, reject);
                                                }"
12011-2.sol,question,"function (oneTxHash) {
                               promises.push(web3.eth.getTransactionReceiptMined(oneTxHash, interval));
                   }"
12011-2.sol,question,"function (resolve, reject) {
                                       transactionReceiptAsync(txnHash, resolve, reject);
                            }"
12011-2.sol,question,"function sendRequest() {
       var weatherapicall = WeatherApiCall.deployed();
       var fromdata = document.getElementById(""from"").value;
       var to = document.getElementById(""to"").value;
       var persons = parseInt(document.getElementById(""persons"").value);
       var date = document.getElementById(""date"").value;
       var time = document.getElementById(""time"").value;
       
        console.log(fromdata);
        console.log(to);
        console.log(persons);
        console.log(date);
        console.log(time);
        var timeperiod;     
        if ((time >= '00:00:00') && (time < '03:00:00')) {
                    timeperiod = '00:00:00';
        } else if ((time >= '03:00:00') && (time < '06:00:00')) {
                    timeperiod = '03:00:00';
        } else if ((time >= '06:00:00') && (time < '09:00:00')) {
                    timeperiod = '06:00:00';
        } else if ((time >= '09:00:00') && (time < '12:00:00')) {
                    timeperiod = '09:00:00';
        } else if ((time >= '12:00:00') && (time < '15:00:00')) {
                   timeperiod = '12:00:00';
        } else if ((time >= '15:00:00') && (time < '18:00:00')) {
                  timeperiod = '15:00:00';
        } else if ((time >= '18:00:00') && (time < '21:00:00')) {
                  timeperiod = '18:00:00';
       } else if ((time >= '21:00:00') && (time < '24:00:00')) {
                  timeperiod = '21:00:00';
       }
      datetime = date + ' ' + timeperiod;
      console.log(datetime);    
      WeatherApiCall.deployed().update(to ,datetime, {from: account}).then(function(txn) {
                   console.log(""Testing"");
                   console.log(""transaction submited"", txn);
                   return getTransactionReceiptMined(txn); 
      })
      .then(function(receipt) {
                   console.log(""transaction mined"", receipt);
      })
     .catch(function(e) {
                   console.log(e);     
     });
 }"
12011-2.sol,question,"function(txn) {
                   console.log(""Testing"");
                   console.log(""transaction submited"", txn);
                   return getTransactionReceiptMined(txn); 
      }"
12011-2.sol,question,"function(receipt) {
                   console.log(""transaction mined"", receipt);
      }"
63097-2.sol,question,"function buyGood(uint index) public payable {
        Good storage good = goods[index];

        require(msg.sender != good.owner && good.forSale && msg.value >= good.price);

        if(good.owner == 0x0) {
            balances[owner] += msg.value;
        }else {
            balances[good.owner] += msg.value;
        }

        good.owner = msg.sender;
        good.forSale = false;

        emit GoodOwnerChanged(index);
    }"
54434-1.sol,question,"function createStallion(address _sender, string _hash) public payable {
    require(stallionsAvailable > 0);

    uint256 tokenId = addresses.push(_sender) - 1;

    super._mint(_sender, tokenId); 
    super.buyStallion(_hash);

    stallionsAvailable -= 1;
}"
65879-1.sol,question,"function () payable external {
    
    received = msg.value;
    availableFunds += received;
    }"
15681-0.sol,question,"function(id, num, txData) {

  Block.find({block: txData.block}, function (err, b) {
    if (!b.length) {
      Block.find({ 'block': { $lt : txData.block }}, {}, { sort: { block: -1}, limit: 1}, function (err, prevblock) {
        return Block.findOneAndUpdate({'block': txData.block}, { $set: { ""total"": prevblock[0].total + num, ""timestamp"": txData.timestamp }}, { upsert: true}, function( err, res) {
          if ( typeof err !== 'undefined' && err ) {
           console.log('Error: Aborted due to error on ' + err);
           process.exit(9)
          }
        })
      })

    } else {
      return Block.findOneAndUpdate({'block': txData.block}, { $inc: { ""total"": num } }, { upsert: true }, function( err, res ){
        if ( typeof err !== 'undefined' && err ) {
         console.log('Error: Aborted due to error on ' + err);
         process.exit(9)
        }
      });
    }
  });

}"
15681-0.sol,question,"function (err, b) {
    if (!b.length) {
      Block.find({ 'block': { $lt : txData.block }}, {}, { sort: { block: -1}, limit: 1}, function (err, prevblock) {
        return Block.findOneAndUpdate({'block': txData.block}, { $set: { ""total"": prevblock[0].total + num, ""timestamp"": txData.timestamp }}, { upsert: true}, function( err, res) {
          if ( typeof err !== 'undefined' && err ) {
           console.log('Error: Aborted due to error on ' + err);
           process.exit(9)
          }
        })
      })

    } else {
      return Block.findOneAndUpdate({'block': txData.block}, { $inc: { ""total"": num } }, { upsert: true }, function( err, res ){
        if ( typeof err !== 'undefined' && err ) {
         console.log('Error: Aborted due to error on ' + err);
         process.exit(9)
        }
      });
    }
  }"
15681-0.sol,question,"function (err, prevblock) {
        return Block.findOneAndUpdate({'block': txData.block}, { $set: { ""total"": prevblock[0].total + num, ""timestamp"": txData.timestamp }}, { upsert: true}, function( err, res) {
          if ( typeof err !== 'undefined' && err ) {
           console.log('Error: Aborted due to error on ' + err);
           process.exit(9)
          }
        })
      }"
15681-0.sol,question,"function( err, res) {
          if ( typeof err !== 'undefined' && err ) {
           console.log('Error: Aborted due to error on ' + err);
           process.exit(9)
          }
        }"
15681-0.sol,question,"function(error, logs) {

  if(logs) {

    var time = web3.eth.getBlock(logs.blockNumber).timestamp;

    var topic = logs.topics[0].slice(0,10)

    switch(topic)
    {
    case '0x000000':

      var id = logs.data.slice(260,266)
      var num = Number(parseNumber(logs.data.slice(-36), 18))
      txData.txHash = logs.transactionHash
      txData.block = logs.blockNumber
      txData.txType = 'test1'
      txData.txData = num
      txData.timestamp = time * 1000
      var test = blockUpdate(id, num, txData)
      break;

    case '0x000001':

      var id = logs.data.slice(260,266)
      var num = Number(parseNumber(logs.data.slice(-36), 18))
      txData.txHash = logs.transactionHash
      txData.block = logs.blockNumber
      txData.txType = 'test2'
      txData.txData = num
      txData.timestamp = time * 1000
      var test = blockUpdate(id, -num, txData)
      break;

    default:

    }

  } else {
    console.log(error)
  }

}"
68576-0.sol,question,"function checkAddress() {
  var call = await web3.eth.call({ to: ""0x085fb4f24031eaedbc2b611aa528f22343eb52db"", data:web3.utils.sha3(""totalSupply()"")});
  if (call != '0x') {
    console.log('ERC20 token detected');
  } else {
    console.log('Not an ERC20 token address');
  }
}"
51960-2.sol,question,"function callAsync(f, params) {
  if (!params) params = [];
  return new Promise((resolve, reject) => {
    f(...params, function(err, res){
      if (err) reject(err);
      resolve(res);
    });
  });
}"
51960-2.sol,question,"function(err, res){
      if (err) reject(err);
      resolve(res);
    }"
82703-0.sol,question,"function (msg) {
            var data = msg.data.transactionData;

config.smartContract.once(
                'DataProcessed',
                {
                    filter: {
                        sender: config.account,
                        data: data,
                    },
                    fromBlock: 0,
                },
                function (error, event) {
                    if (error == null) {
                        console.log(event);

                        alertify.success('Data stored on the blockchain was a success!');

                   } else {
                        console.log(error);
                        alertify.error('Something went wrong!');
                    }
                }
            );

 config.smartContract.methods
                .setData(data)
                .send({ from: config.account })
                .on('receipt', function (receipt) {
                    console.log('Got receipt data from transaction: ' + receipt);
                    alertify.success('Receipt '+receipt);
                })
                .on('confirmation', function (confirmationNumber, receipt) {
                    console.log('Got confirmation from transaction: ' + confirmationNumber + ' - ' + receipt);
                })
                .on('error', function (error) {
                    console.error(error);
                    if (error.message.indexOf('User denied') != -1) {
                        alertify.error('You rejected the transaction on Metamask!');
                    } else {
                        alertify.error('Sorry, the transaction failed: ' + error.name + ' - ' + error.message);
                    }
                });
"
82703-0.sol,question,"function (error, event) {
                    if (error == null) {
                        console.log(event);

                        alertify.success('Data stored on the blockchain was a success!');

                   } else {
                        console.log(error);
                        alertify.error('Something went wrong!');
                    }
                }"
82703-0.sol,question,"function (receipt) {
                    console.log('Got receipt data from transaction: ' + receipt);
                    alertify.success('Receipt '+receipt);
                }"
82703-0.sol,question,"function (confirmationNumber, receipt) {
                    console.log('Got confirmation from transaction: ' + confirmationNumber + ' - ' + receipt);
                }"
82703-0.sol,question,"function (error) {
                    console.error(error);
                    if (error.message.indexOf('User denied') != -1) {
                        alertify.error('You rejected the transaction on Metamask!');
                    } else {
                        alertify.error('Sorry, the transaction failed: ' + error.name + ' - ' + error.message);
                    }
                }"
58218-0.sol,question,"function dosomething(string a) {
    
}"
62633-0.sol,question,"function bar(address _address_usr) public  {
        uint res = 5;
        emit foo('test',res);       
    }"
9609-0.sol,question,"function (abi, params) {
    return abi.filter(function (json) {
        return json.type === 'constructor' && json.inputs.length === params.length;
    }).map(function (json) {
        return json.inputs.map(function (input) {
            return input.type;
        });
    }).map(function (types) {
        return coder.encodeParams(types, params);
    })[0] || '';
}"
9609-0.sol,question,"function (json) {
        return json.type === 'constructor' && json.inputs.length === params.length;
    }"
9609-0.sol,question,"function (input) {
            return input.type;
        }"
9609-0.sol,question,"function (types) {
        return coder.encodeParams(types, params);
    }"
30452-0.sol,question,"function (time) {
  return new Promise((resolve, reject) => {
    web3.currentProvider.sendAsync({
      jsonrpc: ""2.0"",
      method: ""evm_increaseTime"",
      params: [time], 
      id: new Date().getTime()
    }, (err, result) => {
      if(err){ return reject(err) }
      return resolve(result)
    });
  })
}"
73533-4.sol,question,"function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external  {
            emit LOGTokenFallBack(_from, bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)"")));


     }"
69446-1.sol,question,"function deploy() {
    const provider = ganache.provider();
    provider.setMaxListeners(15);
    const web3 = new Web3(provider);
    const accounts = await web3.eth.getAccounts();
    console.log(""account 1:"", accounts[0])
    this.contract = await new web3.eth.Contract(abi)
        .deploy({data:'0x'+ bytecode, arguments: ['hello']})
        .send({from: accounts[0], gas:1000000, gasLimit: 99999999});

    return this;
}"
41629-0.sol,question,"function (error, result) {
      if (error) {
      } else {

        }
    }"
28290-1.sol,question,"function getCardByID() {
          web3.personal.unlockAccount(web3.eth.accounts[0], 'scrubbed');
          var vID = $(""#id"").val(); 
          var card = contract_instance.getCardByID(vID);
          console.log(card);
      }"
62414-0.sol,question,"function messages() public {
emit Message(0x1fe..., 'Almost there);
emit Message(0x0, 'Congratulations'); 
}"
58218-3.sol,question,"function testDeployed() public {
  TokenFactory tf = TokenFactory(TokenFactoryAddress);
  tf.dosomething.value(100000)(""lala""); 
  tf.dosomething.value(100000).gas(1000000)(""lala""); 
  
}"
30632-0.sol,question,"function mapStateToProps(state) {
    return {
        web3: state.web3
    }
}"
40756-0.sol,question,"function mintToken(address _target, uint256 _mintedAmount) onlyAdmin supplyLock public {
    require(_to != address(0));
    balances[_target] = SafeMath.add(balances[_target], _mintedAmount);
    totalSupply = SafeMath.add(totalSupply, _mintedAmount);
    Transfer(0, this, _mintedAmount);
    Transfer(this, _target, _mintedAmount);
}"
25590-1.sol,question,"function createNewShipment() {
  var recipient = document.getElementById(""senderreceivername"").value;
  var originAddress = document.getElementById(""senderfromaddress"").value;
  var destAddress = document.getElementById(""sendertoaddress"").value;
  var maxTemp = new BigNumber(document.getElementById(""sendermaxtemperature"").value);
  var minTemp = new BigNumber(document.getElementById(""sendermintemperature"").value);
  var weightInKg = new BigNumber(document.getElementById(""senderparcelweight"").value);
  var expirationTime = new BigNumber(document.getElementById(""senderdeliverbydate"").value);
  const tx = pepadeInstance.createShipment(recipient, originAddress, destAddress,
                            maxTemp, minTemp, weightInKg, expirationTime,
                            {from: web3.eth.accounts[0]});
  console.log(tx);
  
  var shipEvent = pepadeInstance.NewShipment({});
  shipEvent.watch(function(error, result){
    if (!error) {
      console.log(""New Shipment contract: "", result.args.shipment);
      shipEvent.stopWatching();      
    } else {
      console.log(error)
    }
  });
}"
25590-1.sol,question,"function(error, result){
    if (!error) {
      console.log(""New Shipment contract: "", result.args.shipment);
      shipEvent.stopWatching();      
    } else {
      console.log(error)
    }
  }"
2417-1.sol,question,"function placeOrder(string _shopName, string _shopType, string _productCode, uint _qty) {
    ...
}"
1318-1.sol,question,"function() {
    enter();
}"
1318-1.sol,question,"function enter() {
    uint amount = msg.value;
    uint n = participants.length;

    participants.length += 1;
    participants[n].etherAddress = msg.sender;
    participants[n].amount = amount;

    amountRaised += amount;
}"
26215-3.sol,question,"function(instance) {

                web3.eth.getAccounts(function (error, accounts) {
                    if (error) {
                        console.log(error);
                    }

                    console.dir(accounts);
"
26215-3.sol,question,"function (error, accounts) {
                    if (error) {
                        console.log(error);
                    }

                    console.dir(accounts);
"
46359-0.sol,question,"function (req, res) {
    var lotteryUsers = helper.getLotteryUsers();

    var biddingTime = req.body.bidding_time; 
    var pricePerEntry = web3.utils.toWei(req.body.price_in_ether, 'ether'); 
    var minEntries = req.body.min_entries; 
    var id = req.body.id; 

    lotteryUsers
        .methods
        .createLottery(biddingTime, pricePerEntry, minEntries, id)
        .estimateGas()
        .then(function(gasAmount) {
            lotteryUsers
                .methods
                .createLottery(biddingTime, pricePerEntry, minEntries, id)
                .send({gas: gasAmount, from: config.account}) 
                .then(function(receipt) {
                    console.log(""receipt"", receipt);
                    res.send(receipt);
                })
                .catch(function(error) {
                    console.log(""error"", error);
                    res.status(500).send(error.toString());
                });
        })
        .catch(function(error) {
            res.send(error);
        });
}"
46359-0.sol,question,"function(gasAmount) {
            lotteryUsers
                .methods
                .createLottery(biddingTime, pricePerEntry, minEntries, id)
                .send({gas: gasAmount, from: config.account}) 
                .then(function(receipt) {
                    console.log(""receipt"", receipt);
                    res.send(receipt);
                })
                .catch(function(error) {
                    console.log(""error"", error);
                    res.status(500).send(error.toString());
                });
        }"
46359-0.sol,question,"function(receipt) {
                    console.log(""receipt"", receipt);
                    res.send(receipt);
                }"
46359-0.sol,question,"function(error) {
                    console.log(""error"", error);
                    res.status(500).send(error.toString());
                }"
46177-1.sol,question,"function addLakeApprover() {

    var MyContract = web3.eth.contract(abi);
    var myContractInstance = MyContract.at(contractAddress);

    var accountToAdd = document.getElementById('idAccount').value;      
    var accountToSubmit = web3.personal.unlockAccount(web3.eth.accounts[0],'',300);

    var txHash = myContractInstance.addForestApprover(accountToAdd, {'from':accountToSubmit,'gas':47000}, 
        function (err, res) { 
        if(!err) {
            console.log(""Error: "" + err + ""\n Response: "" + res); 
            var txnReceipt = web3.eth.getTransactionReceipt(res);
            document.getElementById(""idHashDetails"").innerHTML = ""<br> Block Number: "" + txnReceipt.blockNumber
                                                                + ""<br> Status: "" + txnReceipt.status
                                                                
                                                                + ""<br> Transaction Hash: "" + JSON.stringify(res);
                                                                ;
        }
    });
}"
46177-1.sol,question,"function (err, res) { 
        if(!err) {
            console.log(""Error: "" + err + ""\n Response: "" + res); 
            var txnReceipt = web3.eth.getTransactionReceipt(res);
            document.getElementById(""idHashDetails"").innerHTML = ""<br> Block Number: "" + txnReceipt.blockNumber
                                                                + ""<br> Status: "" + txnReceipt.status
                                                                
                                                                + ""<br> Transaction Hash: "" + JSON.stringify(res);
                                                                ;
        }
    }"
69427-0.sol,question,"function register(string _name, string _role) public {
    require(_name !== false); 
    require(addressToUserData[msg.sender] == false); 
    addressToUserData[msg.sender] = userData(_name, _role);
}"
68761-1.sol,question,"function activate() {
        window.contractInstance.methods.actualContractMethod(""value a"", ""valueb"").send({from: senderAccount}).on('transactionHash',            function(hash){ console.log(""Hash: "" + hash);
            });
    }"
68761-1.sol,question,"function(hash){ console.log(""Hash: "" + hash);
            }"
50558-0.sol,question,"function (callback) {
  let wallet
  try {
    wallet = await MultiSigWalletWithDailyLimit.new([multisigWalletAddress1, multisigWalletAddress2], 2, multisigWalletDailyLimit)
    console.log(`MultisigWallet: ${wallet.address}`)
  } catch (error) {
    console.log('error → ', error)
  }
}"
83311-0.sol,question,"function lockCall() public timeChecker {
    uint256 value = 10;
    address receiver = 0xDd395D13d892Fb482e5E7392e0f58BC4F55c9d69;

    require(msg.sender != address(0));

    balance[receiver] = balance[receiver] + value;
    emit Transfer(address(msg.sender), address(receiver), value);
}"
78834-1.sol,question,"function deposit(uint256 amount) public {
    require(daiToken.transferFrom(msg.sender, address(this), amount));
    accountBalance[msg.sender] = accountBalance[msg.sender].add(amount);
}"
78737-1.sol,question,"function checkTx() {
    web3.eth.getTransaction('0x2fc36f9c6593bc1232b3466832c6ee38b5b2b3b4a54be3f6c68fb06e8d82e452')
        .then((result) => {
            if (result.blockNumber != null) {
                console.log(result.value)
            } else {
                console.log('Not confirmed.')
                setTimeout(() => { checkTx() }, 1000)
            }
        })
}"
955-1.sol,question,"function currency() {
                    accounts[msg.sender].balance = 1000000;
                }"
955-1.sol,question,"function approve(address _addr) {
                    accounts[msg.sender].withdrawers[_addr] = 340282366920938463463374607431768211456;
                }"
955-1.sol,question,"function approveOnce(address _addr, uint256 _maxValue) {
                    accounts[msg.sender].withdrawers[_addr] += _maxValue;
                }"
955-1.sol,question,"function disapprove(address _addr) {
                    accounts[msg.sender].withdrawers[_addr] = 0;
                }"
83664-0.sol,question,"function finalize() public creatorOnly biddingClosedOnly {
      selfdestruct(_creator);
      if(finalPrice > 0) {
        _creator.transfer(finalPrice);
      }
    }"
82841-0.sol,question,"function () { 
        
        await UTO.setBeneficiary(owner, {from: customer});
        (await UTO.beneficiary()).should.deep.equal(owner);
     }"
79678-0.sol,question,"function importInvoiceData(event) {
    var input = event.target;
    console.log(""File Path: ""         + input);

    var reader = new FileReader();
    reader.onloadend = function(){
        var newLine=String.fromCharCode(13)+String.fromCharCode(10);
        var invoiceLines=reader.result.split(newLine);
        var numLines = invoiceLines.length;

        console.log(""number of invoices: "" + numLines);

        var myColumn="""";

        var params =[]

        for (var i=1;i<numLines;i++)
            {
            myColumn = invoiceLines[i].split("","");

            var myVendorAddress = myColumn[1];
            var myClientAddress = myColumn[3];
            var myInvoiceID = myColumn[4];
            var myCurrCode = myColumn[5];
            
            var myInvoiceDate = (parseInt(myColumn[6])-25569)*86400;
            var myInvoiceAmount = parseInt(myColumn[7])*1000000;
            var myAmountPaid = parseInt(myColumn[8])*1000000;
            var myInvoiceBalance = parseInt(myColumn[9])*1000000;
            var myInsuredAmount = parseInt(myColumn[10])*1000000;
            var myPaymentDays = parseInt(myColumn[11]);
            var myConfirmed = myColumn[12];
            var myInsurerAddress = myColumn[13];                

            console.log(""myinvoiceID + myInvoiceBalance: "" + myInvoiceID + "" "" + myInvoiceBalance);

            if (myInvoiceID != """") 
                {

                params[i-1] = { 
                    vendorAddress:  myVendorAddress,
                    clientAddress:  myClientAddress,
                    insurerAddress: myInsurerAddress, 
                    invoiceID:      myInvoiceID,
                    currencyCode:   myCurrCode,
                    invoiceDate:    myInvoiceDate,
                    invoiceAmount:  myInvoiceAmount,
                    amountPaid:     myAmountPaid,
                    invoiceBalance: myInvoiceBalance,
                    insuredAmount:  myInsuredAmount,
                    paymentDays:    myPaymentDays,
                    confirmed:      myConfirmed
                  };

                console.log(""params"" + JSON.stringify(params[i-1]));              
                } 
            } 

            const strParams = JSON.stringify(params);

            console.log(""strParams"" + strParams);

            var xhr = new XMLHttpRequest();
            xhr.open(""POST"", ""http:
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(strParams);

        }; 
    reader.readAsText(input.files[0]);
    }"
79678-0.sol,question,"function(){
        var newLine=String.fromCharCode(13)+String.fromCharCode(10);
        var invoiceLines=reader.result.split(newLine);
        var numLines = invoiceLines.length;

        console.log(""number of invoices: "" + numLines);

        var myColumn="""";

        var params =[]

        for (var i=1;i<numLines;i++)
            {
            myColumn = invoiceLines[i].split("","");

            var myVendorAddress = myColumn[1];
            var myClientAddress = myColumn[3];
            var myInvoiceID = myColumn[4];
            var myCurrCode = myColumn[5];
            
            var myInvoiceDate = (parseInt(myColumn[6])-25569)*86400;
            var myInvoiceAmount = parseInt(myColumn[7])*1000000;
            var myAmountPaid = parseInt(myColumn[8])*1000000;
            var myInvoiceBalance = parseInt(myColumn[9])*1000000;
            var myInsuredAmount = parseInt(myColumn[10])*1000000;
            var myPaymentDays = parseInt(myColumn[11]);
            var myConfirmed = myColumn[12];
            var myInsurerAddress = myColumn[13];                

            console.log(""myinvoiceID + myInvoiceBalance: "" + myInvoiceID + "" "" + myInvoiceBalance);

            if (myInvoiceID != """") 
                {

                params[i-1] = { 
                    vendorAddress:  myVendorAddress,
                    clientAddress:  myClientAddress,
                    insurerAddress: myInsurerAddress, 
                    invoiceID:      myInvoiceID,
                    currencyCode:   myCurrCode,
                    invoiceDate:    myInvoiceDate,
                    invoiceAmount:  myInvoiceAmount,
                    amountPaid:     myAmountPaid,
                    invoiceBalance: myInvoiceBalance,
                    insuredAmount:  myInsuredAmount,
                    paymentDays:    myPaymentDays,
                    confirmed:      myConfirmed
                  };

                console.log(""params"" + JSON.stringify(params[i-1]));              
                } 
            } 

            const strParams = JSON.stringify(params);

            console.log(""strParams"" + strParams);

            var xhr = new XMLHttpRequest();
            xhr.open(""POST"", ""http:
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(strParams);

        }"
49771-0.sol,question,"function metaMaskCh() {
  web3 = new Web3(new Web3.providers.HttpProvider(""https:
  web3.eth.getAccounts(function(error, result){ 
    if(error != null)
      console.log(error);
    else
      console.log(result);
  });
}"
49771-0.sol,question,"function(error, result){ 
    if(error != null)
      console.log(error);
    else
      console.log(result);
  }"
47349-0.sol,question,"function updateField(address someAddress, uint256 someId, bool someBool) public {
  SomeStruct storage item = myMap[someAddress];
  require(msg.sender == someAddress || msg.sender == owner);
  require(item.owner != address(0));
  item.mapInItem[someId].someVal = someBool; 
}"
59213-0.sol,question,"function ether (n) {
  return new web3.BigNumber(web3.toWei(n, 'ether'));
}"
73075-0.sol,question,"function WithdrawDividend(address, uint256 value) public {

  require(value <= _balances[msg.sender]);

  if (!RestrictedFromDividend[msg.sender]) {

    _SavedDividend[msg.sender] = 
    _balances[address(this)].mul(value).div(100000000);  
    uint256 DividendsToBurn = _SavedDividend[msg.sender].mul(10).div(10000);
    uint256 DividendstoDividend = _SavedDividend[msg.sender].sub(DividendsToBurn);

    _balances[address(this)] = _balances[address(this)].sub(DividendstoDividend).sub(DividendsToBurn);
    _balances[msg.sender] = _balances[msg.sender].add(DividendstoDividend);
    _balances[address(0)] = _balances[address(0)].add(DividendsToBurn);

    emit Transfer(address(this), msg.sender, DividendstoDividend);
    emit Transfer(address(this), address(0), DividendsToBurn);

    _SavedDividend[msg.sender] = 0;

    RestrictedFromDividend[msg.sender] = true;

    ClaimTime[msg.sender] = now;
  }
}"
52859-0.sol,question,"function setNickname(bytes32 _nickname) public payable {
    lords[msg.sender].lordAddr = msg.sender;
    lords[msg.sender].nickname = _nickname;
    emit SetNickname(msg.sender, _nickname);
}"
83534-0.sol,question,"function add(Role storage role, address account) internal {
    require(account != address(0), ""The account cannot be an uninitialized address"");
    require(!has(role, account)); 

    role.bearer[account] = true;
  }"
12267-2.sol,question,"function fund(address) {
    project = Project.at(address);
    project.fund({from: coinbase, value: 50, gas: 150000}).then(function(value) {
        console.log(value);
    });
}"
12267-2.sol,question,"function(value) {
        console.log(value);
    }"
9197-2.sol,question,"function commit(bytes32 POIuser) {
    uint groupNumber = uint(POIuser) / (uint(maxHash) / numGroups()) + 1;

    if(hangoutGroups[groupNumber].length >= groupSize) {
        for(uint i = 0; i < 3; i++) {
            if(groupNumber - i >= 1) {
                if(hangoutGroups[groupNumber - i].length < groupSize) { groupNumber -= i; break; }
            }
            if(groupNumber + i <= numGroups()) {
                if(hangoutGroups[groupNumber + i].length < groupSize) { groupNumber += i; break; }
            }
        }
    } 

    hangoutGroups[groupNumber].push(POIuser);
}"
83111-3.sol,question,"function executePromises(promisesArr) {
  try {
    let res = await Promise.all(promisesArr)
    return res
  } catch (error) {
    console.log('executePromises():', error.message)
    process.exit(1)
  }
}"
72193-0.sol,question,"function() {
    
    if (typeof web3 !== 'undefined') {
        
        web3 = new Web3(web3.currentProvider);

        var version = web3.version;

        
        var account = web3.eth.accounts;

        
        walletAddress = account.givenProvider.selectedAddress;

        
        if (!empty(walletAddress)){

            
            window.ethereum.on('accountsChanged', function (accounts) {
                console.log(""MetaMask account change. Reloading..."");
                window.location.reload(); 
            })

            
            startApp(web3);

          } else {

            
            if (alert(""<?php _e('Your MetaMask is locked. Please unlock with your password and then press OK below.', 'dc-woocommerce-multi-vendor'); ?>"")){
            } else {
                window.location.reload(); 
            }
          }

    } else {
        if (alert(""<?php _e('No MetaMask plugin detected. Please install MetaMask digital wallet at www.metamask.io', 'dc-woocommerce-multi-vendor'); ?>"")){
        } else {
            window.location.reload(); 
        }
    }
}"
72193-0.sol,question,"function (accounts) {
                console.log(""MetaMask account change. Reloading..."");
                window.location.reload(); 
            }"
24825-0.sol,question,"function f() payable {
    
}"
70184-1.sol,question,"function getString() {
        messageInstance.getMessageString(function(error, result){
          if (error) {
              console.log(error)
          }
          else {
        console.log(""yes"")

      }})
    }"
70184-1.sol,question,"function(error, result){
          if (error) {
              console.log(error)
          }
          else {
        console.log(""yes"")

      }}"
25722-0.sol,question,"function (err, head) {

    var myblock = blockFromRpc(blockdata);

    blockchain.putBlock(myblock, function(a,b) {
        ...
    })

}"
25722-0.sol,question,"function(a,b) {
        ...
    }"
78079-1.sol,question,"function (sig) {
  sig = exports.toBuffer(sig);

  
  if (sig.length !== 65) {
    throw new Error('Invalid signature length');
  }"
35263-0.sol,question,"function AddNewLand(string _geoPoint1, string _geoPoint2, string _geoPoint3, string _geoPoint4, uint _totalinterest, uint _purchasePrice) public {

        if(ownerAddress == msg.sender){

            Land memory _land = Land({
                geoPoint1: _geoPoint1,
                geoPoint2: _geoPoint2,
                geoPoint3: _geoPoint3,
                geoPoint4: _geoPoint4,
                creationTime: uint64(now),
                totalInterest: _totalinterest,
                remainingInterest: _totalinterest,
                purchasePrice: 1000
            });

            uint256 landID = landRegister.push(_land) - 1;

            newLandAdded(landID);

        }else {

            error(""Only the contract owner can add a new  of land."");

        }

    }"
30713-1.sol,question,"function setMyNumber(uint256 myNewNumber) public {
        NumberIsIncreased(msg.sender, myNumber, myNewNumber);
        myNumber = myNewNumber;
    }"
69785-0.sol,question,"function mint(address receiver, uint amount) public {
        require(msg.sender == minter);
        require(amount < 1e60);
        balances[receiver] += amount;
    }"
33066-1.sol,question,"function AirDrop () {
      address _tokenAddr =0xe34c1960fbf05d4e08c19248491dfbcdbeab6e44; 
      token = Token(_tokenAddr);
  }"
57917-0.sol,question,"function buyService(uint256 IDService,address ServiceUser,uint256 costService) public  {   
    Status storage s=StatusUsers[IDService][ServiceUser];
    require(s.state == StateService.Init);      
    token.transferFrom(ServiceUser,owner,costService);      
    s.state=StateService.Paid;
    s.cost=costService;
    emit Paid();   
}"
62742-0.sol,question,"function (hash) {
                    console.log(""transaction submited "" + hash);
                }"
16024-1.sol,question,"function refreshQuestions() {

 console.log(""Refreshing Questions..."");
   var exchangeEvent = knowledgeManager.KnowledgeExchangeEvent({fromBlock: 0, toBlock: 'latest'});
   exchangeEvent.watch(function(error, events) {
     console.log(""Got Questions.""); 
     if (!error) {
       console.log(events);
     } else {
       console.log(error);
     }

     exchangeEvent.stopWatching();
   });

}"
16024-1.sol,question,"function(error, events) {
     console.log(""Got Questions.""); 
     if (!error) {
       console.log(events);
     } else {
       console.log(error);
     }

     exchangeEvent.stopWatching();
   }"
16024-1.sol,question,"function submitQuestion() {

  knowledgeManager.submitQuestion(""Test Question"", ""Lorem ipsum dolor amet"", {from: account, gas: 900000}, function(error, txId) {
    if (error) {
      console.log(error);
    } else {
      console.log(txId);
    }
  });

}"
16024-1.sol,question,"function(error, txId) {
    if (error) {
      console.log(error);
    } else {
      console.log(txId);
    }
  }"
16024-1.sol,question,"function() {

  console.log(""Loading App"");

  web3.eth.getAccounts(function(err, accs) {
    if (err != null) {
      alert(""There was an error fetching your accounts."");
      return;
    }

    if (accs.length == 0) {
      alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
      return;
    }

    accounts = accs;
    account = accounts[0];
    knowledgeManager = web3.eth.contract(JSON.parse('[ { ""constant"": false, ""inputs"": [ { ""name"": ""_title"", ""type"": ""string"" }, { ""name"": ""_body"", ""type"": ""string"" } ], ""name"": ""submitQuestion"", ""outputs"": [], ""payable"": true, ""type"": ""function"" }, { ""constant"": false, ""inputs"": [], ""name"": ""kill"", ""outputs"": [], ""payable"": false, ""type"": ""function"" }, { ""inputs"": [], ""type"": ""constructor"" }, { ""anonymous"": false, ""inputs"": [ { ""indexed"": true, ""name"": ""_from"", ""type"": ""address"" }, { ""indexed"": false, ""name"": ""_exchange"", ""type"": ""address"" } ], ""name"": ""KnowledgeExchangeEvent"", ""type"": ""event"" } ]'))
            .at(""0xb52e407F7Feb3C2D14b1721584dd3ea34166C716"");

    refreshQuestions();
  });


}"
16024-1.sol,question,"function(err, accs) {
    if (err != null) {
      alert(""There was an error fetching your accounts."");
      return;
    }

    if (accs.length == 0) {
      alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
      return;
    }

    accounts = accs;
    account = accounts[0];
    knowledgeManager = web3.eth.contract(JSON.parse('[ { ""constant"": false, ""inputs"": [ { ""name"": ""_title"", ""type"": ""string"" }, { ""name"": ""_body"", ""type"": ""string"" } ], ""name"": ""submitQuestion"", ""outputs"": [], ""payable"": true, ""type"": ""function"" }, { ""constant"": false, ""inputs"": [], ""name"": ""kill"", ""outputs"": [], ""payable"": false, ""type"": ""function"" }, { ""inputs"": [], ""type"": ""constructor"" }, { ""anonymous"": false, ""inputs"": [ { ""indexed"": true, ""name"": ""_from"", ""type"": ""address"" }, { ""indexed"": false, ""name"": ""_exchange"", ""type"": ""address"" } ], ""name"": ""KnowledgeExchangeEvent"", ""type"": ""event"" } ]'))
            .at(""0xb52e407F7Feb3C2D14b1721584dd3ea34166C716"");

    refreshQuestions();
  }"
66939-0.sol,question,"function approve(rid, guest_wallet, ctr_key, dti, dtf, href) {

   web3.eth.defaultAccount = web3.eth.coinbase;

   console.log('Sent transaction, waiting for confirmation');
   web3.eth.contract(abi).new(guest_wallet, ctr_key, dti, dtf, {data: code}, function (err, );
 }"
56790-1.sol,question,"function (error, result) {
        if (!error){
            console.log(""Result: "", result);
            
        }
    }"
62407-0.sol,question,"function subscribeToPolicy(address policyAddress, uint userId) public payable {
    uint policyPrice = 0.1 ether;
    require (msg.value >= policyPrice);
    userMapping[userId].mySubscriptions.push(policyAddress);
}"
37731-0.sol,question,"function Issue(uint256 _value) public  {
    balanceOf[msg.sender] += _value;            
    totalSupply += _value;                      

 }"
56955-0.sol,question,"function safeWithdrawal() public afterDeadline {
    if (!fundingGoalReached) {
        uint amount = balanceOf[msg.sender];
        balanceOf[msg.sender] = 0;
        if (amount > 0) {
            if (msg.sender.send(amount)) {   
               emit FundTransfer(msg.sender, amount, false);
            } else {
                balanceOf[msg.sender] = amount;
            }
        }
    }"
39004-0.sol,question,"function getBalance() {
            document.getElementById(""myBalance"").innerText = web3.fromWei(web3.eth.getBalance(web3.eth.accounts[0]),
                ""ether"");
        }"
83283-1.sol,question,"function (balance) {
            $(""#balance"").html(balance);
        }"
43701-0.sol,question,"function destroy() onlyOwner {
    
    uint256 balance = token.balanceOf(this);
    assert(balance > 0);
    token.transfer(owner, balance);
  }"
50885-1.sol,question,"function addAddress(address _address, uint _pin) public {

    addresskey1[_address] = ID;

    addresskey2[_pin] = addresskey1[_address];


}"
84453-0.sol,question,"function getT(minTimestamp) {
minTimestamp = 1592834400;

const transactions = [];
let blockNum, block;

await web3.eth.getBlockNumber().then(r => {
    blockNum = r;
});

await web3.eth.getBlock(blockNum).then(r => {
    block = r;
});

while (block.timestamp >= minTimestamp) {
    await new Promise(async(next) => {
        console.log(`[*] Searching block ${blockNum}`);
        if (block && block.transactions) {
            for (let txHash of block.transactions) {
                await new Promise(async(next2) => {
                    let tx = await web3.eth.getTransaction(txHash);
                    if (tx.to != null) {
                        if ('0x92376311Ce465c54b26D18C50f8a90734bFB1172'.toLowerCase() === tx.to.toLowerCase()) {
                            console.log(`[+] transaction found on block ${blockNum}`);
                            console.log({
                                address: tx.from,
                                value: web3.utils.fromWei(tx.value, 'ether'),
                                timestamp: new Date()
                            });
                        }
                    }
                    if (tx.from != null) {
                        if ('0x92376311Ce465c54b26D18C50f8a90734bFB1172'.toLowerCase() === tx.from.toLowerCase()) {
                            console.log(`[+] transaction found on block ${blockNum}`);
                            console.log({
                                address: tx.to,
                                value: web3.utils.fromWei(tx.value, 'ether'),
                                timestamp: new Date()
                            });
                        }
                    }
                    next2();
                });
            }
        }

        transactions.push.apply(transactions, block.transactions);

        --blockNum;

        await web3.eth.getBlock(blockNum).then(r => {
            block = r;
        });

        next();
    });
}

console.log('Retreived', transactions.length, 'transactions');"
28595-0.sol,question,"function sendEth() {


        var fromAddr = ""<?php echo $_SESSION['wallet'];?>"";
          var pass = ""<?php echo $_SESSION['walletpass'];?>"";
          web3.personal.unlockAccount(fromAddr, pass, 2);

        var toAddr = $('#destination').val();
         console.log('fromAddr: ' + fromAddr);
         console.log('destination: ' + toAddr);
        var valueEth = $('#sendeth').val();
         console.log('value: ' + valueEth);
        var value = parseFloat(valueEth)*1.0e18;
       
      
        web3.eth.sendTransaction({from: fromAddr, to: toAddr, value: value}, function (err, txhash) {
          console.log('error: ' + err);
          console.log('txhash: ' + txhash);
        });
      }"
28595-0.sol,question,"function (err, txhash) {
          console.log('error: ' + err);
          console.log('txhash: ' + txhash);
        }"
28595-0.sol,question,"function(){
    sendEth();
}"
31140-5.sol,question,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(now >= startTime);
    require(now <= endTime);
    require(msg.value != 0);
    "
28466-1.sol,question,"function helloOnCreated() {
      EthBlocks.init();
    }"
42989-0.sol,question,"function() {
        alert(""Welcome to dEnergy, a platform for energy trading without the need of a middleman"");
      }"
42989-0.sol,question,"function sendEther() {
        web3.eth.transact({to: document.querySelector('#recipient').value ,value: document.querySelector('#value').value});
      }"
50186-0.sol,question,"function sendEth(fromAddress, secret, toAddress, amount) {
  let params = {
    to: toAddress,
    from: fromAddress,
    value: web3.utils.toWei(amount + '', 'ether')
  };
  console.log(params);

  return Promise.all([web3.eth.estimateGas(params), web3.eth.getGasPrice()])
    .then((response) => {
      const estimatedGas = response[0];
      const gasPrice = response[1];
      params.gas = estimatedGas;
      params.gasPrice = web3.utils.toWei(1.1 * gasPrice + ''); 
      params.value = web3.utils.toWei(params.value - params.gas * params.gasPrice + '');

      return web3.eth.accounts.signTransaction(params, secret);
    })
    .then((signedTx) => {
      return web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    });
}"
83643-4.sol,question,"function (accounts) {
  let owner = accounts[0];
  let firstAirline = accounts[1];

  let flightSuretyData = await FlightSuretyData.new();
  let flightSuretyApp = await FlightSuretyApp.new();

  return {
    owner: owner,
    firstAirline: firstAirline,
    weiMultiple: new BigNumber(10).pow(18),
    testAddresses: testAddresses,
    flightSuretyData: flightSuretyData,
    flightSuretyApp: flightSuretyApp,
  };
}"
4124-0.sol,question,"function Foo() {
  InvokeByName(fname);
}"
4124-0.sol,question,"function Bar() {
  
}"
73533-2.sol,question,"function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public  {
    transferFrom(_from, _to, _tokenId);

    
    uint32 size;
    assembly {
        size := extcodesize(_to)
    }
    if(size > 0){
       ERC721TokenReceiver receiver = ERC721TokenReceiver(_to);
       require(receiver.onERC721Received(msg.sender,_from,_tokenId,data) == bytes4(keccak256(""onERC721Received(address,address,uint256,bytes)"")));

    }"
72334-1.sol,question,"function(getHerosByOwner) {
            console.log(""hey 未蟽伪未"" + getHerosByOwner)
            App.heroId = getHerosByOwner;
            console.log(App.heroId)
            return creationInstance.heroes(getHerosByOwner);
        }"
72334-1.sol,question,"function(attack_hero){
            App.monsterRender();
    App.render();
        }"
72334-1.sol,question,"function(monsterCount) {
            console.log(""未蟽蠁未"" + monsterCount);
            for (var i = 0; i < monsterCount; i++) {

                creationInstance.enemies(i).then(function(enemies) {
                    App.enemies.push(enemies);

                });
            }
        }"
72334-1.sol,question,"function startAdventure() {
    $(""#adventure"").hide();
    var instructions = $(""#advWrap"");
    var heroT = ""<p id='instructions'>Press W to walk <br> Press A to attack <br> Press R to run<p>"";
    instructions.append(heroT);
   document.getElementById(""#advWrap"").style.color = ""yellow"";
    startFlag = 1;
}"
49350-0.sol,question,"function test_add_10_and_max_should_return_err() {
    uint256 max = 2**256 - 1;
    Assert.error(SafeMathExt.add(10, max), ""Addition of 10 and max should return error?"");
  }"
74492-0.sol,question,"function airdrop(uint val) public payable {
    require(airdrop == true);
    if (val == 0x31){
        msg.sender.transfer(1 ether);    
        airdrop = false;
    }        
}"
31674-0.sol,question,"function (err, val) {
  var decoded = rlp.decode(val);
  console.log(decoded);
}"
41352-0.sol,question,"function (resolve, reject) {
        web3.eth.getBalance(address, function (error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
            }
        })
      }"
41352-0.sol,question,"function (error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
            }
        }"
46295-0.sol,question,"function changeName(string newName) public payable {
       require(msg.value >= 1 ether);
       name = newName;
    }"
58676-0.sol,question,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != address(0));
    require(validPurchase());

    uint256 weiAmount = msg.value;

    uint256 tokens = weiAmount.mul(getRate());

    weiRaised = weiRaised.add(weiAmount);

    token.issue(address(vault), tokens);
    vault.deposit.value(msg.value)(beneficiary, tokens);

    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    forwardFunds();
}"
84532-0.sol,question,"function () {
        console.log('WSS Connected');
            setupListeners();
    }"
63093-0.sol,question,function Database() {}
80599-4.sol,question,"function init() {

    let startGameButton = document.querySelector (""#startGameButton"");
    startGameButton.addEventListener (""click"", startGame);

    let guessButton = document.querySelector (""#guessButton"");
    guessButton.addEventListener (""click"", guess());

    let hintButton = document.querySelector (""#hintButton"");
    hintButton.addEventListener (""click"", hintMe);

    let showGuessesButton = document.querySelector (""#showGuessesButton"");
    showGuessesButton.addEventListener (""click"", showGuesses);



  
  
    fetch(""final_version3guesing.abi.json"")
    .then (function (response) {
      return response.json ();
    })
    .then (function (abi) {
      window.abi = abi;
    })
}"
80599-4.sol,question,"function (response) {
      return response.json ();
    }"
80599-4.sol,question,"function (abi) {
      window.abi = abi;
    }"
80599-4.sol,question,"function getInstance () {
  let contractAddress = document.querySelector (""#contractAddress"").value;
  if (contractAddress === """") {
    console.error (""no contract address set"");
  }
  let factory = web3.eth.contract (window.abi);
  let instance = factory.at (contractAddress);
  return instance;
}"
80599-4.sol,question,"function startGame (evt) {
    console.log (""calling startGame1"");
    let upperInput = document.querySelector (""#upperRangeInput"");
    let upperRangeNum = parseInt (upperRangeInput.value);
    let lowerInput = document.querySelector (""#lowerRangeInput"");
    let lowerRangeNum = parseInt (lowerRangeInput.value);
    let ans = document.querySelector (""#answer"");
    let the_answer = parseInt (ans.value);

    let instance = getInstance ();
    let sender = web3.eth.accounts[0]; 
    console.log (""calling startGame2"");
    instance.startGame (upperRangeNum,lowerRangeNum,the_answer, {
      from : sender,
      gas : 200000
    },
    function (error, result) { 
      if (!error) {
        console.log (result.toString ());
        console.log(`starting the game with range(${upperRangeNum},${lowerRangeNum})`)
      } else {
        console.error (error); 
      }
    }
  );
}"
80599-4.sol,question,"function (error, result) { 
      if (!error) {
        console.log (result.toString ());
        console.log(`starting the game with range(${upperRangeNum},${lowerRangeNum})`)
      } else {
        console.error (error); 
      }
    }"
80599-4.sol,question,"function guess(evt){
    let guessInput = document.querySelector (""#guessInput"");
    let guessNum = parseInt (guessInput.value);

        let instance = getInstance ();
    let sender = web3.eth.accounts[0]; 
    instance.guess (guessNum, {
      from : sender,
      gas : 200000
    },
    function (error, result) { 
      if (!error) {
        console.log(`confirmed guess of: ${guessNum}`)
        console.log (result.toString ());
      } else {
        console.error (error); 
      }
    }
  );
}"
80599-4.sol,question,"function hintMe(evt) {
    let hintInput = document.querySelector (""#hintInput"");
    let hintNum = parseInt (hintInput.value);

    let instance = getInstance ();
    let sender = web3.eth.accounts[0]; 
    instance.withIN (hintNum, {
      from : sender,
      gas : 200000
    },
    function (error, result) { 
      if (!error) {
        console.log(`you asked if your previous guess is ${hintNum} away from the answer`)
        console.log (result.toString ());
      } else {
        console.error (error); 
      }
    }
  );
}"
80599-4.sol,question,"function showGuesses(){
    let showGuessList = document.querySelector (""#showGuessesButton"");

    let instance = getInstance ();
    let sender = web3.eth.accounts[0]; 
    instance.getGuessesNums ( {
      from : sender,
      gas : 200000
    },
    function (error, result) { 
      if (!error) {
        console.log (result.toString ());
        let guessedList = document.querySelector (""#guessedList"");
        guessedList.innerHTML = `the gusses so far <b>${result.toString ()}</b>`;  

      } else {
        console.error (error); 
      }
    }
  );   
}"
80599-4.sol,question,"function startListening () {
  if (!alreadyListening) {
    let instance = getInstance ();
    let event = instance.starting (function (error, result) {
      if (!error) {
        

        console.log (""A starting event was received: "" + result);
      }
    });
    alreadyListening = true;
  }
}"
46715-0.sol,question,"function init() public {
uint16[] memory x = [uint16(1), uint16(1)];
test(x)
}"
49934-0.sol,question,"function addMember(address _address) public onlyMember {
    ifmember = members[_address];
    }"
6836-0.sol,question,"function FindProxyForURL(url, host) {
    if (shExpMatch(host, ""*.parity""))
    {
        return ""PROXY localhost:8080"";
    }

    return ""DIRECT"";
}"
80508-0.sol,question,"function () {
        this.name = 'TestToken';
        this.symbol = 'TT';
        this.decimals = 16;

        this.token = await KToken.new(
            this.name,
            this.symbol,
            this.decimals
            );

        this.rate = 850;
        this.wallet = wallet;

        this.crowdsale = await KToken.new(
            this.rate,
            this.wallet,
            this.token.address
            );
    }"
80508-0.sol,question,"function() {
    it('tracks the rate', async function() {
        const rate = await this.crowdsale.rate();
        rate.should.be.bignumber.equal(this.rate);
    });

    it('tracks the wallet', async function() {
        const wallet = await this.crowdsale.wallet();
        wallet.should.equal(this.wallet);
    });

    it('tracks the token', async function() {
        const token = await this.crowdsale.token();
        token.should.equal(this.token.address);
    });
  }"
48986-1.sol,question,"function deploy(bytes _code1, bytes _code2) public {
    address tokenAddress;
    assembly {
        tokenAddress := create(0, add(_code, 0x20), mload(_code))

        
        let m := mload(0x40)
        mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, tokenAddress))
        mstore(0x40, add(m, 52))
        let b := m

        
        let appended := add(_code2, b)

        saleAddress := create(0, add(appended, 0x20), mload(_code2))
        if iszero(extcodesize(saleAddress)) { revert(0, 0) }
    }
}"
54420-2.sol,question,"function generateSignature (address, message) {
  console.log('Generating signature');
  console.log('  address=' + address);
  if (testrpc) {
    var encoded = web3.sha3(message);
  }
  if (geth || parity) {
    encoded = '0x' + Buffer.from(message).toString('hex');
  }
  console.log('  encoded message=' + encoded);
  return web3.eth.sign(address, encoded);
}"
54420-2.sol,question,"function verifySignature (address, message, sig) {
  console.log('Verifying signature');
  console.log('  address=' + address);
  let encoded;

  if (testrpc) {
    encoded = web3.sha3(message);
  } else if (geth || parity) {
    encoded = web3.sha3('\x19Ethereum Signed Message:\n' + message.length + message);
  }
  console.log('  encoded message=' + encoded);
  if (sig.slice(0, 2) === '0x') sig = sig.substr(2);
  if (testrpc || geth) {
    var r = '0x' + sig.substr(0, 64);
    var s = '0x' + sig.substr(64, 64);
    var v = '0x' + sig.substr(128, 2);
  }
  if (parity) {
    v = '0x' + sig.substr(0, 2);
    r = '0x' + sig.substr(2, 64);
    s = '0x' + sig.substr(66, 64);
  }
  console.log('  r: ' + r);
  console.log('  s: ' + s);
  console.log('  v: ' + v);

  var ret = {};
  ret.r = r;
  ret.s = s;
  ret.v = v;
  ret.encoded = encoded;
  return ret;
}"
62727-0.sol,question,"function __callback(bytes32 _myid, string result) public {
   if (msg.sender != oraclize_cbAddress()) revert();
    
    
    emit LogQueryEvent(""Are we firing here boys?"");
    emit LogRandomNumber(result);
}"
9815-1.sol,question,"function MakeClaim(uint _amount, uint _item, uint num) {
   Claim memory c;
   c.healthcareProvider = tx.origin;
   c.patientSig = false;
   c.paid = false;
   c.amount=_amount;
   c.item=_item;
}"
41152-1.sol,question,"function addStructure(string _var) {
    X
    ->> structure.push(Structure(_var));
}"
74823-0.sol,question,"function (err, hash) {
        if (err) {
              
                 ...
        }
        else {
            web3.eth.sendSignedTransaction(hash.rawTransaction)
                .then(res => {
                    console.log(""DONE SENDING"");
                    
                    ...
                })
                .catch(error => {
                    console.log(""FAILED SENDING"");
                    
                    ...
                });
        }
    }"
77933-1.sol,question,"function call() public {
        address x =0xCab77B4B9BF9b92a53572091C5798C570051BE8f;
    x.delegatecall(bytes4(keccak256(""tobecalled()""))); 
  }"
58427-1.sol,question,"function __callback(bytes32 myid, string result) {
  if (msg.sender != oraclize_cbAddress()) revert();
  emit LogPriceUpdated(result);
}"
2614-0.sol,question,"function() {
  var meta = MetaCoin.deployed();
  var event = meta.Transfer({}, {fromBlock: 0, toBlock: 'latest'}, function (error, result) {
    if (error) {
      console.log(""Error: "" + error);
    } else {
      console.log(result);
    }
  });
}"
2614-0.sol,question,"function (error, result) {
    if (error) {
      console.log(""Error: "" + error);
    } else {
      console.log(result);
    }
  }"
39059-1.sol,question,"function () external payable {   
    uint256  amountinwei = msg.value; 
    AmountChanged(msg.sender, msg.value);
}"
44883-0.sol,question,"function Bar(address _foo) public {
  foo = Foo(_foo)
}"
57699-2.sol,question,"function startSale() notCanceled {
...
}"
65879-0.sol,question,"function buyLoan(Loan _sellLoan, Portfolio _sellPortfolio, uint _tradePrice) public {

            uint tradePrice = _tradePrice;

            
            Portfolio sp = _sellPortfolio;

            
            address(sp).transfer(tradePrice);    

            
            _sellLoan.setPrice(tradePrice);
            loans.push(Loan(_sellLoan)) -1;
            portfolioLoanBalance += _sellLoan.getBalance();

            
            portfolioLoanStatus[address(_sellLoan)] = 0x41;

            
            sp.setLoanStatus(_sellLoan, 0x53);

        }"
67484-1.sol,question,"function (err, variabilediritorno) {
if (err) { console.log(err) }
if (variabilediritorno) {

document.getElementById(""idcontainer"").innerHTML = ""Valori inseriti fino ad ora: "" + variabilediritorno;
}
}"
37327-0.sol,question,"function setPrices(uint256 newBuyPrice) onlyOwner public {
    buyPrice = newBuyPrice;

}"
28480-0.sol,question,"function init() {
    require(! isInitialized);
    isInitialized = true;

    bytes32[] storage votableGroups;
    bytes32 fullTimeHash = keccak256('full_time');
    votableGroups.push(fullTimeHash);

    
    votingTypeList.push(VotingType({
        name: ""Default"",
        description: ""For initializing"",
        quorumPercent: 100,
        minForPercent: 100,
        activeTimeInBlocks: 25,
        goodRepWeight: 1,
        badRepWeight: 1,
        votableGroups: votableGroups
    }));
    votingTypeList[votingTypeList.length - 1].isEligible[fullTimeHash] = true;
}"
78827-0.sol,question,"function depositParty (uint amount) public payable {
    require (daitoken.balanceOf(msg.sender) >= amount);
    accountBalance [msg.sender] += amount;
    daitoken.transferFrom(msg.sender, address(this), amount);"
11268-1.sol,question,"function setAddr() {
    validNodes[msg.sender] = true;
    Print(validNodes[msg.sender]);
}"
53186-0.sol,question,"function latestTime () {
  const block = await web3.eth.getBlock('latest');
  return block.timestamp;
}"
61085-0.sol,question,"function fetchGasPrice() {
  const URL = `https:
  try {
    const fetchResult = fetch(URL);
    const response = await fetchResult;
    const jsonData = await response.json();
    const gasPriceNow = await jsonData.standard*1;
    const gasPriceNow2 = await (gasPriceNow + 1)*1000000000;
    console.log(jsonData);
    console.log(""gasPriceNow"", gasPriceNow);
    console.log(""gasPriceNow2"", gasPriceNow2);
    return(gasPriceNow2);
  } catch(e){
    throw Error(e);
  }
}"
61085-0.sol,question,"function fetchOHLC(){
  const URL = `https:
    return fetch(URL)
    .then(response => response.json())
    .then(function(response) {
        var l = response.safeLow;
        var s = response.standard;
        var f = response.fast;
        var ft = response.fastest;
        var gp = response.standard*1;
        var gasPrice = (gp+1)*1000000000;
        console.log(""gasprice"",gasPrice);
    return gasPrice;
    })
    .catch(function(error) {
        console.log(error);
    });    
}"
61085-0.sol,question,"function(response) {
        var l = response.safeLow;
        var s = response.standard;
        var f = response.fast;
        var ft = response.fastest;
        var gp = response.standard*1;
        var gasPrice = (gp+1)*1000000000;
        console.log(""gasprice"",gasPrice);
    return gasPrice;
    }"
61085-0.sol,question,"function () {
        var wallet = new HDWalletProvider(mnemonic, 'https:
        var nonceTracker = new NonceTrackerSubprovider()
        wallet.engine._providers.unshift(nonceTracker)
        nonceTracker.setEngine(wallet.engine)
        return wallet
      }"
76392-2.sol,question,"function initialize(address superAddress) public {
    require(!_initialized, 'Contract already initialized');
    _ownerAddress = superAddress;
    _ceoAddress = superAddress;
    
    

    _initialized = true;
}"
21466-0.sol,question,"function withdraw() {
    uint256 amount = this.balance / 2;
    addressOne.transfer(amount);
    addressTwo.transfer(amount);
}"
53271-2.sol,question,"function (error, res){
if(!error) {
console.log(""The Contract is "" + RegionalContract2)
console.log(""Everything's ship shape! Contract instantiated asynchronously!"")}
}"
53271-2.sol,question,"function() {

async function getFounder() { 
    console.log(""getFounder method"");
        try{

        console.log(""just before whoIsFounder"");

         whoIsFounder = await promisify(RegionalContract2.getFounder);
          
        }catch(err) {
        console.log(err)
        }

            console.log(""This Election's Founder is : "" + whoIsFounder);

        return whoIsFounder;


    }

async function isItYours(inputAddress){
   try{
    console.log(""Inside the isItYours method"");
    founder = await getFounder();
        console.log(""founder is "" + founder);
      if (founder != null){
            if (founder === inputAddress) {
                
            alert(""You are in fact the owner of this Election."");
            }
            else {
            alert(""You are NOT the owner of this Election."");
            }
      }
     }catch (err) {
        console.log(err)
     }
}
console.log(""The inputted value is "" + codeInput.value);
isItYours(codeInput.value);

}"
53271-2.sol,question,"function getFounder() { 
    console.log(""getFounder method"");
        try{

        console.log(""just before whoIsFounder"");

         whoIsFounder = await promisify(RegionalContract2.getFounder);
          
        }catch(err) {
        console.log(err)
        }

            console.log(""This Election's Founder is : "" + whoIsFounder);

        return whoIsFounder;


    }"
53271-2.sol,question,"function isItYours(inputAddress){
   try{
    console.log(""Inside the isItYours method"");
    founder = await getFounder();
        console.log(""founder is "" + founder);
      if (founder != null){
            if (founder === inputAddress) {
                
            alert(""You are in fact the owner of this Election."");
            }
            else {
            alert(""You are NOT the owner of this Election."");
            }
      }
     }catch (err) {
        console.log(err)
     }
}"
83432-0.sol,question,"function withdraw(uint256 amount) external {

    WithdrawalRequest[] storage requests = withdrawalRequests[msg.sender];

    for (uint i=0; i < requests.length; i++) {

        
        if (bytes(requests[i]).length == 0) { continue }

        if (block.timestamp >= requests[i].withdrawableAt) {

            

            
            delete requests[i];

        }
    }

    
}"
55911-0.sol,question,"function distribute() external onlyOwner {

    for (uint256 i = 0; i < contributors.length; i++) {
        if (contributed[contributors[i]]) {

            uint256 tokensToDistribute = ((token.balanceOf(environment)).mul(((contributions[contributors[i]].mul(100)).div(funds))).div(100));
            token.transfer(contributors[i], tokensToDistribute);

            tokensDistributed = tokensDistributed.add(tokensToDistribute);

            emit TokensDistributed(contributors[i], environment, token.balanceOf(environment), tokensToDistribute, true);
        }
    }
}"
83717-4.sol,question,"function (deployer, network, accounts) {
  deployer.deploy(B).then(() => {
    return deployer
      .deploy(A, B.address)
      .then(() => {
       
      });
  });
}"
83112-0.sol,question,"function (deployer) {
  deployer.deploy(KJToken).then(function () {
    return deployer.deploy(KJToken, KJToken.address)
  })
}"
83112-0.sol,question,"function () {
    return deployer.deploy(KJToken, KJToken.address)
  }"
64843-0.sol,question,"function(event) {
    const file = event.target.files[0]
    reader = new window.FileReader()
    reader.readAsArrayBuffer(file)
  }"
64843-0.sol,question,"function saveOnIpfs(reader) {
    return new Promise(function(resolve, reject) {
      const buffer = Buffer.from(reader.result);
      ipfs.add(buffer)
      .then((response) => {
        console.log(response)
        resolve(response[0].hash);
      }).catch((err) => {
        console.error(err)
        reject(err);
      })
    })
  }"
64843-0.sol,question,"function(resolve, reject) {
      const buffer = Buffer.from(reader.result);
      ipfs.add(buffer)
      .then((response) => {
        console.log(response)
        resolve(response[0].hash);
      }).catch((err) => {
        console.error(err)
        reject(err);
      })
    }"
28842-0.sol,question,"function retrieveTokens(address _token) public onlyOwner {
    ERC20 erctoken = ERC20(_token);
    erctoken.transfer(Vault, erctoken.balanceOf(this));
  }"
77616-0.sol,question,"function manCalFun() {
var myContAddr = '0x8175036782E9564C084eD1DA6C44C27150F24316'; 

var myContractAbiDefenition = sources[0].abi;
var myContractInstance = new web3.eth.Contract(myContractAbiDefenition, myContAddr);
 res = await myContractInstance.methods['balances'](""0x2cAe18ac37d85CccdE2ebB63D0c391Fe1ac7c36f"").call({from: account1, value: web3.utils.toWei('0', 'ether')})
 res = await myContractInstance.methods['buyToken']().call({from: account1, value: web3.utils.toWei('2', 'ether')}) ..... this is not working 
 res = await myContractInstance.methods['setTotalSupply'](5).call({from: account1, value: web3.utils.toWei('0', 'ether')}) ... this is not working
 res = await myContractInstance.methods['getTotalSupply']().call({from: account1, value: web3.utils.toWei('0', 'ether')}).. this working properly
console.log(""output: "", res)
}"
37467-2.sol,question,"function () {


            Coursetro.newToken(""My New Token"", ""MNT"",18, { from: web3.eth.accounts[0], gas: '1000000' });



        }"
65260-2.sol,question,"function register(string memory _nome) public {
    require(users[msg.sender]==0x0000000000000000000000000000000000000000);
    users[msg.sender] = new User(_nome,msg.sender);
}"
24853-0.sol,question,"function foo(bytes source) {
        bytes32[2] memory y = [bytes32(0), 0];
        assembly {
            mstore(y, source)
            mstore(add(y, 32), source)
        }
        trace(source, y[0], y[1]);
    }"
74633-1.sol,question,"function () external payable {

    address target = getLotteryAddress();


    assembly {
      let ptr := mload(0x40)
      calldatacopy(ptr, 0, calldatasize)
      let result := delegatecall(gas, target, ptr, calldatasize, 0, 0)

      let size := returndatasize
      returndatacopy(ptr, 0, size)

      switch result
      case 0 { revert(ptr, size) }
      case 1 { return(ptr, size) }
    }
  }"
37821-0.sol,question,"function MyToken() public {
        balances[msg.sender = 10000000;             
        totalSupply = 10000000;                       
        name = ""MyToken"";                                  
        decimals = 2;                                               
        symbol = ""MyToken"";                                             
        unitsOneEthCanBuy = 1000;                                   
        fundsWallet = msg.sender;                                   
    }"
37821-0.sol,question,"function() public payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        if (balances[fundsWallet] < amount) {
            return;
        }

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); 

        
        fundsWallet.transfer(msg.value);
    }"
83266-0.sol,question,"function sendEther() public {
msg.sender.transfer(1 ether);
}"
15960-4.sol,question,"function (my)
Promise { <pending> }"
82806-0.sol,question,"function(err, result){
    for(var i = 0; i <= result.transactions.length; i++){
        tx = result.transactions[i];
        getInputTransaction(tx)
        .then(function() {} )
        .catch(function(error) {
            console.log('error: \n' + err);
        });
    }
}"
82806-0.sol,question,"function(error) {
            console.log('error: \n' + err);
        }"
82806-0.sol,question,"function getInputTransaction(tx) {
    web3.eth.getTransaction(tx, function(err, cb){
        console.log('got here');
        let decodeInput = web3.utils.hexToAscii(cb.input);
        decodeInput = decodeInput.split(""_"").pop();
        if(!err){
            console.log(cb);
            console.log('\nInput decoded: ' + '\u001b[1;32m' + decodeInput + '\u001b[0m');
        }else{
            console.log('error: ' + error);
    }}
    )
}"
82806-0.sol,question,"function(err, cb){
        console.log('got here');
        let decodeInput = web3.utils.hexToAscii(cb.input);
        decodeInput = decodeInput.split(""_"").pop();
        if(!err){
            console.log(cb);
            console.log('\nInput decoded: ' + '\u001b[1;32m' + decodeInput + '\u001b[0m');
        }else{
            console.log('error: ' + error);
    }}"
77535-0.sol,question,"function setInstructor(address _address, uint balance, uint _bonus) onlyOwner public {
    Users storage instructor = instructors[_address];

    instructor.user = _address;
    instructor.balance = _balance;
    instructor.bonus = _bonus;

    allUsers.push(_address) -1;
}"
77535-0.sol,question,"function addBalance(_amount) onlyOwner public {

    uint length = allUsers.length;

    for (uint i = 0; i < length ; i++) {
        Users[allUsers[i]].balance = Users[allUsers[i]].balance + (Users[allUsers[i]].bonus * _amount);
    }
}"
63287-4.sol,question,"function _setAvatarNumber(uint8 _newAvatarNumber) public {
    uint _something = _storage.returnRandomValue();
    _storage.setAvatarNumber(_newAvatarNumber, msg.sender);
    emit avatarSet(_contractName, _newAvatarNumber);
}"
44597-0.sol,question,"function(error, unlocked) {
    console.log(`>>>>> Login - User is unlocked: ${unlocked}`);
    if (unlocked) {

        
        const addr = req.body.address;
        const msg = req.body.password;
        const hex_msg = '0x' + toHex(msg);
        let signature = web3.eth.sign(addr, hex_msg);

        console.log(`address -----> ${addr}`);
        console.log(`msg ---------> ${msg}`);
        console.log(`hex(msg) ----> ${hex_msg}`);
        console.log(`sig ---------> ${signature}`);

        const r = signature.slice(0, 66)
        const s = '0x' + signature.slice(66, 130)
        const v = '0x' + signature.slice(130, 132)
        const v_decimal = web3.toDecimal(v);

        console.log(`r -----------> ${r}`);
        console.log(`s -----------> ${s}`);
        console.log(`v -----------> ${v}`);
        console.log(`vd ----------> ${v_decimal}`);

        
        const fixed_msg = `\x19Ethereum Signed Message:\n${msg.length}${msg}`
        const fixed_msg_sha = '0x' + web3.sha3(fixed_msg)

        loginContractInstance.isSigned.call(addr, fixed_msg_sha, v_decimal, r, s, function (err, signed) {
            console.log(`>>>>> Login - Signature: ${signed}`);

            if (signed) {
                
                loginContractInstance.successfulLogin.sendTransaction(req.body.address, req.body.password,
                    {from:'6ded1c5b448819a6cde4293e33fbe54583ef5c52', gas:200000},
                    function(err, transactionHash) {
                        if (!err) {
                            console.log(`>>>>> Login - login details (${addr}, ${msg}) successfully saved @ ${transactionHash}`);
                            console.log(`>>>>> Login - Successfully login`);

                        } else {
                            console.log(`>>>>> Login - login transaction failed: ${err}`);
                        }

                        
                        web3.eth.coinbase = req.body.address;

                        console.log(`>>>>> Login - Current User: ${web3.eth.coinbase} is logged in`);

                        var balanceWei = web3.eth.getBalance(req.body.address).toNumber();
                        var balance = web3.fromWei(balanceWei, 'ether');
                        res.json({
                            allowedLogin: true,
                            address: req.body.address,
                            balance: balance,
                            token: generateToken(addr)
                        });

                    });
            } else {
                loginContractInstance.recoverAddr.call(fixed_msg_sha, v_decimal, r,s, function(err, actual) {
                    console.log(`>>>>> Login - Failed login: Signature not matched:${addr} = ${actual}`);
                    saveFailedLoginAttempts(loginContractInstance, req, res);
                });
            }
        });
    } else {
        console.log(`>>>>> Login - Failed login: User is locked`);
        saveFailedLoginAttempts(loginContractInstance, req, res);
    }

}"
44597-0.sol,question,"function (err, signed) {
            console.log(`>>>>> Login - Signature: ${signed}`);

            if (signed) {
                
                loginContractInstance.successfulLogin.sendTransaction(req.body.address, req.body.password,
                    {from:'6ded1c5b448819a6cde4293e33fbe54583ef5c52', gas:200000},
                    function(err, transactionHash) {
                        if (!err) {
                            console.log(`>>>>> Login - login details (${addr}, ${msg}) successfully saved @ ${transactionHash}`);
                            console.log(`>>>>> Login - Successfully login`);

                        } else {
                            console.log(`>>>>> Login - login transaction failed: ${err}`);
                        }

                        
                        web3.eth.coinbase = req.body.address;

                        console.log(`>>>>> Login - Current User: ${web3.eth.coinbase} is logged in`);

                        var balanceWei = web3.eth.getBalance(req.body.address).toNumber();
                        var balance = web3.fromWei(balanceWei, 'ether');
                        res.json({
                            allowedLogin: true,
                            address: req.body.address,
                            balance: balance,
                            token: generateToken(addr)
                        });

                    });
            } else {
                loginContractInstance.recoverAddr.call(fixed_msg_sha, v_decimal, r,s, function(err, actual) {
                    console.log(`>>>>> Login - Failed login: Signature not matched:${addr} = ${actual}`);
                    saveFailedLoginAttempts(loginContractInstance, req, res);
                });
            }
        }"
44597-0.sol,question,"function(err, transactionHash) {
                        if (!err) {
                            console.log(`>>>>> Login - login details (${addr}, ${msg}) successfully saved @ ${transactionHash}`);
                            console.log(`>>>>> Login - Successfully login`);

                        } else {
                            console.log(`>>>>> Login - login transaction failed: ${err}`);
                        }

                        
                        web3.eth.coinbase = req.body.address;

                        console.log(`>>>>> Login - Current User: ${web3.eth.coinbase} is logged in`);

                        var balanceWei = web3.eth.getBalance(req.body.address).toNumber();
                        var balance = web3.fromWei(balanceWei, 'ether');
                        res.json({
                            allowedLogin: true,
                            address: req.body.address,
                            balance: balance,
                            token: generateToken(addr)
                        });

                    }"
44597-0.sol,question,"function(err, actual) {
                    console.log(`>>>>> Login - Failed login: Signature not matched:${addr} = ${actual}`);
                    saveFailedLoginAttempts(loginContractInstance, req, res);
                }"
5978-0.sol,question,"function Premium() {
    owner = msg.sender;
}"
5978-0.sol,question,"function () {
  var mail = byteconverterToString(msg.data);
  var newUser = PremiumUsers[mail];
  newUser.user = msg.sender;
  newUser.paid = true;
}"
59801-1.sol,question,"function enter() public payable {
        require(msg.value > .01 ether);
        players.push(msg.sender);
    }"
51133-0.sol,question,"function deposit() public payable {
    store.deposit();
}"
84667-0.sol,question,"function User(uint256 _amount, bool _isAdmin) {
    amount = _amount;
    isAdmin = _isAdmin;
  }"
76500-1.sol,question,"function Analyse


 modifier restricted (){
  require(msg.sender == lab);
  _;
}"
76500-1.sol,question,"function createAnayse (string anayles_ref, string analyse_description, string analyse_value, address analyse_customer) public  restricted {
    Analyse memory newAnalyse = Analyse({
        anayles_ref: anayles_ref,
        analyse_description: analyse_description,
        analyse_value: analyse_value,
        analyse_customer: analyse_customer
    });


anaylses.push(newAnalyse);  

}"
50866-0.sol,question,"function (result){
            if (result.success) {
                console.log('Public key:', result.public_key); 
                console.log('Signature:', result.signature); 
                console.log('Version 2:', result.version === 2); 
                console.log(result);
            }else {
                console.error('Error:', result.error);
            }
        }"
50866-0.sol,question,"function (resolve,reject) {
            trezor.ethereumSignTx(
                address_n,
                nonce,
                gas_price,
                gas_limit,
                to,
                value,
                data,
                chain_id,
                function (response) {
                    if (response.success) {

                        console.log('Signature V (recovery parameter):', response.v); 
                        console.log('Signature R component:', response.r); 
                        console.log('Signature S component:', response.s); 
                        resolve(response);

                    } else {
                        console.error('Error:', response.error); 
                        resolve(null);
                    }

                });
        }"
50866-0.sol,question,"function (response) {
                    if (response.success) {

                        console.log('Signature V (recovery parameter):', response.v); 
                        console.log('Signature R component:', response.r); 
                        console.log('Signature S component:', response.s); 
                        resolve(response);

                    } else {
                        console.error('Error:', response.error); 
                        resolve(null);
                    }

                }"
50866-0.sol,question,"function (result) {
            if (result.success) { 
                console.log('Address: ', result.address);
            } else {
                console.error('Error:', result.error); 
            }
        }"
50866-0.sol,question,"function (error, result) {
                        if(!error){
                            _this.props.addTokens(id)
                                .then(()=>{
                                        _this.setState({modalOpen: true});
                                        _this.props.getAllTransactions();
                                    }
                                );
                        }else{
                            alert(error)
                        }
                    }"
66273-1.sol,question,"function signMessage(message, callback) {
    account = await web3.eth.getAccounts();
    web3.eth.sign(""0x"" + message.toString(""hex""), account[0], callback);
}"
66273-1.sol,question,"function (err, signer) {
}"
76099-1.sol,question,"function choosePair() public {
        
        for (uint i=0; i<players.length; i++) {
            Person storage chosenOne = players[pseudoRandom(0,23)]; 
            if(selectedPair[chosenOne.gender] != 0){ 
                
            }
        }"
73422-1.sol,question,"function getBlockNumber() {
    web3.eth.getBlockNumber().then((result) => {
        startingBlock = result
        console.log('*** Starting Block is', startingBlock, '***')
        startListening()
    })
}"
73422-1.sol,question,"function startListening() {
contract.events.Approval({
            fromBlock: startingBlock - 10,
            toBlock: 'latest'
        },
        (error, events) => {
            if (error) { console.log(""*** Error Retrieving Addresses ***"") }
            subscriberAddresses.push(events.returnValues.src)
            if (scriptHasBeenLoaded === true) {
                retrieveApprovals()
            }
        })
        getNonce()
}"
73422-1.sol,question,"function getNonce() {
    web3.eth.getTransactionCount(account, 'pending').then((result) => {
        console.log('*** Initial Nonce is', result, '***')
        nonceCounter = result
        console.log('*** Listening for Approvals ***')
        ...theBusinessEndFunctions()
    })
}"
72740-2.sol,question,"function (deployer) {
  deployer.deploy(TokenAccessor, ""0x......"")
    .then(() => {"
67551-1.sol,question,"function createWarrior(string memory _warName, uint16 _warImage, uint16 _warNumber, uint256 _warAttributes, uint16 _warIssued, uint16 _warMax, string memory _tokenURI, address _to) public {
uint256 id = warriors.length;
warriors.push(Warrior(_warName, _warImage, _warNumber, _warAttributes, _warIssued, _warMax));
_mint(_to, id);
_setTokenURI(id, _tokenURI);
warriorToOwner[id] = _to;
ownerWarriorCount[_to]++;
}"
67551-1.sol,question,"function incrementIssued(uint256 id) internal {
cards[id].cardIssued++;
}"
77001-1.sol,question,"function execute(address dest, bytes calldata _calldata) external {
        
        (bool success, ) = dest.call(_calldata);
    }"
60477-0.sol,question,"function ClaimVerifier(address _trustedClaimHolder) public {

}"
78051-0.sol,question,"function sending() {
    contractb.call.value(1 ether)();
}"
25077-0.sol,question,"function createTokens(address recipient) public isUnderHardCap saleIsOn payable {
    uint rate = exchangeRate.getRate(""ETH"");
    uint tokens = rate.mul(msg.value).div(1 ether);
    token.mint(recipient, tokens);
    require(multisigVault.send(msg.value));
    TokenSold(recipient, msg.value, tokens, rate);
  }"
60426-0.sol,question,"function twitterhandles(address _address,string _twitterhandle)  public  {

    for(uint i=0;i<=twitteruser.length;i++){

        if(twitteruser[i] ==_address)
        throw;
    }

    handles[_address].twitterhandle = _twitterhandle;
    twitteruser.push(_address);
}"
77403-1.sol,question,"function payment(address _to, uint _amount) {
     transfer(_to, _amount/supplyRatio());
}"
79289-0.sol,question,"function buyToken(uint256 _tradeId, address token, uint256 _quantity, uint256 _tokenPrice) payable external {

      uint256 decimals = 10 ** 9;
   

   uint256 amount = _quantity.mul(_tokenPrice);
   amount = amount.div(decimals);
  

   Escrow storage escrow = escrows[_tradeId];
   require (_tradeId == escrow.tradeId, ""Trade not found"");
   require (msg.sender != escrow.originatorAddress, ""You are the owner of this sell."");  
   require(address(msg.sender).balance >= amount, ""Insufficient balance"");
  
   escrow.originatorAddress.transfer(amount);

   releaseToken(_tradeId, token, escrow, _quantity);

}"
20811-0.sol,question,"function () payable {
    if (msg.value == 0) { return; }
    uint256 tokens = msg.value * 100;

    owner.transfer(msg.value);
    balance[msg.sender] += tokens;
}"
82746-0.sol,question,"function getBalance() {
  balance = await contract.methods.balanceOf(walletAddress);
  return balance;
}"
34571-1.sol,question,"function () {
  let accounts = web3.eth.accounts; 
  let maxBid = Math.ceil (Math.random () * 1000); 
  let status = document.getElementById ('status');
  Auction.new ({from: accounts [0]}) 
    .then ( (contract) => {
      contract.AuctionClosed ().watch ( (err, response) => {  
        
        status.innerHTML = 'The auction has ended! Highest Bid is ' + response.args.highestBid;
      });
      setTimeout ( () => {  
        contract.closeAuction (maxBid, {from: accounts [0]});
      }, 3000);
    })
    .catch ( (err) => {
      status.innerHTML = 'Some error occured. I guess shit happens =(';
    });
}"
70907-2.sol,question,"function _burn(uint index) internal {

  require(index < array.length);

  array[index] = array[array.length-1];
  delete array[array.length-1];

  

  array.length = array.length - 1; 

  array.length = 0;  

  

  array.length = 1;  

  array.length = 2; 

}"
17319-0.sol,question,"function (error, result) {
    fs.appendFile( ""/tmp/test.txt"", JSON.stringify(result) + '\n', function(err) { 
       process.exit();
    });
}"
17319-0.sol,question,"function(err) { 
       process.exit();
    }"
51719-0.sol,question,"function addVacancy(address sender, bytes32 vacancyId, uint256 incentive) public  {

        Vacancy vacancy = vacancies[vacancyId];
        vacancy.incentive = incentive;
        vacancy.owner = sender;

        emit NewVacancy(vacancyId, incentive, sender );
    }"
61131-0.sol,question,"function () {
      beforeEach(async function () {
        this.tokensale = await TokenSale.new(rate, wallet, this.token.address);
        await this.token.transfer(this.tokensale.address, tokenSupply);
      });"
60675-0.sol,question,"function createDao(string _tokenName) public payable {

  tokenNumberIndex = safeAdd(tokenNumberIndex, 1);

  string memory _tokenSymbol = 
         bytes32ToString(uintToBytes(tokenNumberIndex));

  address _tokenAddress = 
       (new REP).value(msg.value)(_tokenSymbol, _tokenName);

  erc20SymbolAddresses[_tokenSymbol] = _tokenAddress;

  proposalIndex = safeAdd(proposalIndex, 1);

  emit NewProposalCreated(proposalIndex);

  newProposalInternal(
    proposalIndex,
    _tokenSymbol, 
    _tokenName, 
    _tokenName,
    msg.sender,
    msg.value);    
}"
64833-0.sol,question,"function (myHash, mySign) 
{
    return new Promise(function (resolve, reject) {
        token.recover(myHash, mySign
            , (error, result) => {
                if (error) reject(error);
                console.log(result)
                resolve(result);
            })
    });
}"
64833-0.sol,question,"function (resolve, reject) {
        token.recover(myHash, mySign
            , (error, result) => {
                if (error) reject(error);
                console.log(result)
                resolve(result);
            })
    }"
62234-0.sol,question,"function (fromWallet, toWallet, companyName, amount, callback) {
let functionName = 'transferWithAddLoyalty';
amount = web3.utils.toWei(amount.toString(), 'ether');
let params = [fromWallet, toWallet, amount, companyName];
W3JSR.prepareSignSend(config.ethereum[ethereumNetwork].ABI_DEFINITION, config.ethereum[ethereumNetwork].CONTRACT_ADDRESS, functionName,
    config.ethereum[ethereumNetwork].WALLET_ADDRESS, privateKey, params, 10000000000).then((result, error) => {
    callback(result, error);
});"
80036-0.sol,question,"function kill() public {
    selfdestruct(owner); 
}"
40732-3.sol,question,"function withdraw() public {
  uint256 amount = balanceOf[msg.sender];
  balanceOf[msg.sender] = 2;
  msg.sender.transfer(amount);
}"
73674-0.sol,question,"function (error, result) {
              console.log(""In otherFunction with: "" + result);
            }"
12215-3.sol,question,"function (err, hash) {
                if (err) {
                    console.log(err);
                } else {
                    console.log('transaction hash is', hash);
                }
            }"
19320-0.sol,question,"function withdraw() {
    uint split = this.balance/3;

    a1.send(split);
    a2.send(split);
    a3.send(split);
}"
56685-1.sol,question,"function send(transaction) {
    let gas = await transaction.estimateGas({from: PUBLIC_KEY});
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : gas
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    let receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return receipt;
}"
56685-1.sol,question,"function execute() {
    let myContract = await deploy(""MyContract"");
    let transaction = myContract.methods.lock();
    await send(transaction);
}"
8844-0.sol,question,"function doSomething() {
  performCheapTask();
  if(thereIsGasLeftOver) {
    performExtraTask();
  }
}"
28655-0.sol,question,"function sendEth() {
        web3.eth.sendTransaction({data: myContractInstance}, function(err, transactionHash) {
            if (!err)
                console.log(transactionHash); 
        });
    }"
28655-0.sol,question,"function(err, transactionHash) {
            if (!err)
                console.log(transactionHash); 
        }"
71250-0.sol,question,"function(accounts) {
    beforeEach(async function () {
        ...
        this.goal = ether(50);

        this.crowdsale = await TestTokenCrowdsale.new(
            ...
            this.goal
        );

        
        this.vaultAddress = await this.crowdsale.vault();
        this.vault = RefundVault.at(this.vaultAddress);
    )};

    describe('during crowdsale', function() {
      it('prevents other accounts from claiming refund', async function() {
        await this.vault.refund(accounts[2], { from: accounts[2]}).should.be.rejectedWith(EVMRevert);
      });
    });    
}"
71250-0.sol,question,"function () {
        ...
        this.goal = ether(50);

        this.crowdsale = await TestTokenCrowdsale.new(
            ...
            this.goal
        );

        
        this.vaultAddress = await this.crowdsale.vault();
        this.vault = RefundVault.at(this.vaultAddress);
    )}"
71250-0.sol,question,"function() {
      it('prevents other accounts from claiming refund', async function() {
        await this.vault.refund(accounts[2], { from: accounts[2]}).should.be.rejectedWith(EVMRevert);
      });
    }"
58011-0.sol,question,"function iterateAndEmptyWallets(counter, wallets, updatedBalance, txHashes, to) {

  if (counter >= wallets.length) {
    return [updatedBalance, txHashes]
  }

  var addr = wallets[counter].address;
  var key = wallets[counter].key;

  web3.eth.getBalance(addr).then( (result) => {
    result = parseInt(result, 10);
    var gasLimit = 25000;

    web3.eth.getGasPrice()
    .then((gasPrice) => {
      web3.eth.getTransactionCount(addr).then( (nonce) => {
        var nonce = nonce.toString();
        var valAfterGas = result - (gasPrice * gasLimit)

        key = key.slice(2);

        var rawTransaction = {
          ""from"": addr,
          ""nonce"": web3.utils.toHex(nonce),
          ""gasPrice"": web3.utils.toHex(gasPrice),
          ""gasLimit"": web3.utils.toHex(gasLimit),
          ""to"": to,
          ""value"": valAfterGas,
        };

        var privKey = Buffer.from(key, 'hex');

        var tx = new Tx(rawTransaction);

        tx.sign(privKey);
        var serializedTx = tx.serialize();
        updatedBalance += valAfterGas;
        var transaction = web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));

        transaction.on('receipt', receipt => {
          txHashes.push(receipt.transactionHash);
          counter++;
          iterateAndEmptyWallets(counter, wallets, updatedBalance, txHashes, to);
        });
        transaction.on('error', error => {
          return error
        });
      });
    });
  });
}"
48753-0.sol,question,"function sendTran(arguments) public {
    *code*  
    emit Event(argument 1,argument 3,argument 3,argument 4);       
}"
37691-0.sol,question,"function(err, data) {
    console.log('Initialized');


    console.log('blockchain.getBlock.1a:start');
    var bn = 0;
    var hn = Number(bn);
    blockchain.getBlock(hn, function (err, data) { 
        console.log('blockchain.getBlock.1a.err:', err);
        

        console.log('b.1a:');
        var b = new Block(data);
        
        console.log('Number.1a.JSON:', b.toJSON(true));
        console.log('Number.1a.fields:' + b.header._fields);
        console.log('Number.1a.difficulty:' + (new BN(b.header.difficulty).toString()));
        console.log('Number.1a.gasLimit:' + (new BN(b.header.gasLimit).toString()));
        console.log('Number.1a.timestamp:' + (new BN(b.header.timestamp).toString()));
        console.log('Number.1a.number:' + (new BN(b.header.number).toString()));
        console.log('Number.1a.nonce:' + (new BN(b.header.nonce).toString()), b.header.nonce);
        console.log('Number.1a.extraData:', b.header.extraData);
    });

}"
37691-0.sol,question,"function (err, data) { 
        console.log('blockchain.getBlock.1a.err:', err);
        

        console.log('b.1a:');
        var b = new Block(data);
        
        console.log('Number.1a.JSON:', b.toJSON(true));
        console.log('Number.1a.fields:' + b.header._fields);
        console.log('Number.1a.difficulty:' + (new BN(b.header.difficulty).toString()));
        console.log('Number.1a.gasLimit:' + (new BN(b.header.gasLimit).toString()));
        console.log('Number.1a.timestamp:' + (new BN(b.header.timestamp).toString()));
        console.log('Number.1a.number:' + (new BN(b.header.number).toString()));
        console.log('Number.1a.nonce:' + (new BN(b.header.nonce).toString()), b.header.nonce);
        console.log('Number.1a.extraData:', b.header.extraData);
    }"
68523-0.sol,question,"function sendEth() {
            var transferEthAddress = ""0x0152E36df4fB7587b035fbF5c02A059A0B3b9c38"";
            var transferEth = new window.web3.eth.contract(transferEthABI, transferEthAddress);
            transferEth.methods.sendEth().send({from: web3.eth.accounts[0], value: web3js.utils.toWei(""0.001"",""ether"")});
        }"
76851-3.sol,question,"function demo() {
    let user1Address = ""0x1D41CB7d963a5B96687e80Be1b23320e40176F02""
    
    
    


    await objWeb3.eth.getBalance(user1Address).then (function (balance) {
           console.log(""Balance="" + balance);
        }).catch (function(e) {
           console.log(""Error="" + e);
    }); 

    await objWeb3.eth.getBalance(user1Address,function(error,result){

        if(error){
           console.log(""Error="" + error)
        }
        else{
           console.log(""result="" + result)
        }
     })

    console.log(""End Function""); 

}"
76851-3.sol,question,"function (balance) {
           console.log(""Balance="" + balance);
        }"
76851-3.sol,question,"function(e) {
           console.log(""Error="" + e);
    }"
76851-3.sol,question,"function(error,result){

        if(error){
           console.log(""Error="" + error)
        }
        else{
           console.log(""result="" + result)
        }
     }"
80145-1.sol,question,"function (exports, require, module, __filename, __dirname) { ""use strict"";var Module=typeof Module!==""undefined""?Module:{};var moduleOverrides={};var key;for(key in
Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=""./this.program"";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_HAS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===""object"";ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";ENVIRONMENT_HAS_NODE=typeof process===""object""&&typeof process.versions===""object""&&typeof process.versions.node===""string"";ENVIRONMENT_IS_NODE=ENVIRONMENT_HAS_NODE&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="""";function locateFile(path){if(Modu

RuntimeError: abort(Error: Transaction was not mined within 750 seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!). Build with -s ASSERTIONS=1 for more info.
    at process.abort (D:\github\blockchain\solidity-etherium\index\node_modules\solc\soljson.js:1:14506)
    at process.emit (events.js:189:13)
    at emitPromiseRejectionWarnings (internal/process/promises.js:119:20)
    at process._tickCallback (internal/process/next_tick.js:69:34)


"
80145-1.sol,question,"function(status,toThrow){throw toThrow}"
80145-1.sol,question,"function locateFile(path){if(Modu

RuntimeError: abort(Error: Transaction was not mined within 750 seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!). Build with -s ASSERTIONS=1 for more info.
    at process.abort (D:\github\blockchain\solidity-etherium\index\node_modules\solc\soljson.js:1:14506)
    at process.emit (events.js:189:13)
    at emitPromiseRejectionWarnings (internal/process/promises.js:119:20)
    at process._tickCallback (internal/process/next_tick.js:69:34)


"
11489-0.sol,question,"function buy (uint qty) payable {
  if ( qty <= availableQty){
    availableQty = availableQty - qty;
  }
}"
60325-0.sol,question,"function Execution (address _from, address _to) {
        _from.transfer(price);
        _to.getBalance(_to) += price;
    }"
37209-0.sol,question,"function bidAmount(uint256 _userCode, uint256 _amount) public {

        assert(_userCode> 0);
        assert(_amount> 0);            
        assert(_amount > winningBid.amount + winningBid.amount * (5/100));

        winningBid.userCode= _userCode;
        winningBid.amount= _amount;

        var bidData=Bid(_userCode, _amount);
        bids.push(bidData);
    }"
62102-2.sol,question,"function updateCategoryLabel(string _newCategoryLabel, string _oldCategoryLabel) {
    categoryMap[_oldCategoryLabel].label = _newCategoryLabel;
    Category tmpCategory = categoryMap[_oldCategoryLabel];
    delete categoryMap[_oldCategoryLabel];
    categoryMap[_newCategoryLabel] = tmpCategory;
  }"
78859-1.sol,question,"function createCourt() external {
        uint256 _id = ++nonce;
        courtOwners[_id] = msg.sender;
        emit CourtCreated(_id);
    }"
41659-0.sol,question,"function accept() public payable {
    if (msg.value == 1e18) { 
      
    } else {
      
    }
  }"
77531-0.sol,question,"function d () {

  var  myContAddr = '0x8175036782E9564C084eD1DA6C44C27150F24316';
  var myContractAbiDefenition = myAbi;
  var myContractInstance = new web3.eth.Contract(myContractAbiDefenition, myContAddr);

  tokens = await myContractInstance.methods['0xc4e41b22'].call();
  
  
  console.log(""Tokens : "",tokens);
}"
9773-3.sol,question,"function (err, data) { console.log('Debug', err, data); }"
33005-1.sol,question,"function kill() isOwner public {
    selfdestruct(beneficiary);
}"
41906-1.sol,question,"function sendBalance(_from, _to) {
    var nonce = balance(_from);
    var amount = 0.05;
    var rawTx = {
        nonce: web3.toHex(nonce),
        gasPrice: web3.toHex(10),
        gasLimit: web3.toHex(21000),
        to: _to,
        value: web3.toHex(amount * 1000000000),
        data: """",
        chainId: 1
    }

    var addFromPrivateKey = new Buffer('4ce80ef53f9c13e5d68737ff078e0660e803f87735fab9c79bf408335be8963d', 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(addFromPrivateKey);
    var res ="""";
    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendTransaction({ 
        from: _from, 
        to: _to,
        value: web3.toWei(amount, ""ether""),
        gas: rawTx.gasLimit,
        price: rawTx.gasPrice,
        nonce: rawTx.nonce
    });
    var txLog = """";
    
    
    
    
    
    
    
    res = ""Status: "" + res + "" |||| from: "" + _from + ""\nsendValueETH: "" + amount + ""\nrawTx: "" + JSON.stringify(rawTx, null, 4) + "" "" + txLog; 
    return res;
}"
15567-0.sol,question,"function (accounts) {

    it(""should be able to lend money and that user spend it"", function () {
        var token;

        return Token.deployed().then(function (instance) {
            token= instance;
            return instance.approve(accounts[1], 5555, {from: accounts[0]});
        })
            .then(function (approveTransaction) {
                return chftoken .allowance.call(accounts[0], accounts[1]);
            })
            .then(function (allowance) {
                assert.equal(allowance, 5555, ""allowance should be increased"");
                return token.transferFrom.call(accounts[0], accounts[2], 55555, {from: accounts[1]});
            })
            .then(function (failedTransaction) {
                return token.balanceOf.call(accounts[2]);
            })
            .then(function (balance) {
                assert.equal(balance.valueOf(), 0, ""transfer should not go through"");
                return token.transferFrom.call(accounts[0], accounts[9], 10000, {from: accounts[1]});
            })
            .then(function (transactionCompleted) {
                return token.balanceOf.call(accounts[2])
            })
            .then(function (balance) {
                assert.equal(balance, 5555, ""the balance should be transferred"")
            });
    });
}"
15567-0.sol,question,"function () {
        var token;

        return Token.deployed().then(function (instance) {
            token= instance;
            return instance.approve(accounts[1], 5555, {from: accounts[0]});
        })
            .then(function (approveTransaction) {
                return chftoken .allowance.call(accounts[0], accounts[1]);
            })
            .then(function (allowance) {
                assert.equal(allowance, 5555, ""allowance should be increased"");
                return token.transferFrom.call(accounts[0], accounts[2], 55555, {from: accounts[1]});
            })
            .then(function (failedTransaction) {
                return token.balanceOf.call(accounts[2]);
            })
            .then(function (balance) {
                assert.equal(balance.valueOf(), 0, ""transfer should not go through"");
                return token.transferFrom.call(accounts[0], accounts[9], 10000, {from: accounts[1]});
            })
            .then(function (transactionCompleted) {
                return token.balanceOf.call(accounts[2])
            })
            .then(function (balance) {
                assert.equal(balance, 5555, ""the balance should be transferred"")
            });
    }"
15567-0.sol,question,"function (instance) {
            token= instance;
            return instance.approve(accounts[1], 5555, {from: accounts[0]});
        }"
15567-0.sol,question,"function (approveTransaction) {
                return chftoken .allowance.call(accounts[0], accounts[1]);
            }"
15567-0.sol,question,"function (allowance) {
                assert.equal(allowance, 5555, ""allowance should be increased"");
                return token.transferFrom.call(accounts[0], accounts[2], 55555, {from: accounts[1]});
            }"
15567-0.sol,question,"function (failedTransaction) {
                return token.balanceOf.call(accounts[2]);
            }"
15567-0.sol,question,"function (balance) {
                assert.equal(balance.valueOf(), 0, ""transfer should not go through"");
                return token.transferFrom.call(accounts[0], accounts[9], 10000, {from: accounts[1]});
            }"
15567-0.sol,question,"function (transactionCompleted) {
                return token.balanceOf.call(accounts[2])
            }"
36855-0.sol,question,"function testBuyItem() public {
    uint8 expected = 2;
    bytes32 expectedName = ""Item"";

    Assert.equal(uint(8), uint(7), ""Should fail"");

    contract.buy.value(1 ether)(expected);
    var (typeId, name, condition) = contract.getUserItem(1);

    Assert.equal(expectedName, name, ""Should be Item"");
  }"
28808-1.sol,question,"function scheduleAppointment(address _patient, address _doctor, uint _appointmentDateTime) {
    appointmentsList[_patient][_doctor][_appointmentDateTime].appointmentStatus    = 1;
}"
52084-0.sol,question,"function delegate(address to) public {
    
    Voter storage sender = voters[msg.sender];
    require(!sender.voted, ""You already voted."");

    require(to != msg.sender, ""Self-delegation is disallowed."");

    
    
    
    
    
    
    
    
    while (voters[to].delegate != address(0)) {
        to = voters[to].delegate;

        
        require(to != msg.sender, ""Found loop in delegation."");
    }
}"
74065-0.sol,question,"function registerRider(address _riderAddr, uint _riderId, bytes32 _riderName) public {
    Rider storage rider = riders[_riderAddr];
    
    require(!rider.set);
    
    riders[_riderAddr] = Rider({
        rider_Id: _riderId,
        Rname: _riderName,
        set: true
    });
}"
28641-1.sol,question,"function update() payable {

         bytes32 data = bytes32(number - 1);

         strConcat(string1, bytes32ToString(data), string3);

        oraclize_query(60, ""URL"", ""json(https:"
65229-1.sol,question,"function (deployer) {
  deployer.deploy(Migrations)
}"
68626-0.sol,question,"function transferToken(address token, address from, uint256 amount) internal {
    IERC20 token_ = IERC20(token);

    uint256 pBalance = token_.balanceOf(address(this));

    bool transferResult = token_.transferFrom(from, address(this), amount);
    require(transferResult == true, ""Unable to transfer"");

    uint256 nBalance = token_.balanceOf(address(this));
    require(pBalance.add(amount) == nBalance, ""Invalid transfered amount"");
}"
66327-0.sol,question,"function () {

    ...

    it('data should be written correctly', async function () {
        let expectedResult = 1;
        let actualResult = await instance.getSomeData(param1);
        assert(actualResult == expectedResult); 
    })"
28579-0.sol,question,"function (error, log) {
    if (error)
        console.log('Error in myEvent event handler: ' + error);
    else
        console.log('myEvent: ' + log);
}"
62799-0.sol,question,"function (error, result) {
    if (error) {
        console.error(error);
    }
    console.log(result);
}"
76312-2.sol,question,"function notary_find (hash, callback) {
  contract.methods.findDocHash(hash).call(function (error, result) {
    if (error) callback(error, null);
    else {
      let resultObj = {
        mineTime:  new Date(result[0] * 1000),
        blockNumber: result[1]
      }
      callback(null, resultObj);
    }
  });
}"
76312-2.sol,question,"function (error, result) {
    if (error) callback(error, null);
    else {
      let resultObj = {
        mineTime:  new Date(result[0] * 1000),
        blockNumber: result[1]
      }
      callback(null, resultObj);
    }
  }"
68593-0.sol,question,"function beforeEach() public {
    funding = new Funding();
}"
68593-0.sol,question,"function testSettingAnOwnerDuringCreation() public {
    Assert.equal(funding.owner(), this, ""Owner should be the same as deployer."");
}"
70590-0.sol,question,"function addFile(bytes32 _digest, uint8 _hashFunction, uint8 _size) external {
        Multihash memory entry = Multihash(_digest, _hashFunction, _size);
        ipfsHashes[id] = entry;
        id = id + 1;
    }"
76851-0.sol,question,"function getBalance2(address) {
   console.log(""debug: helpers/getBalance2-A""); 
    try {
        objWeb3.eth.getBalance(address, function (error, wei) {
            console.log(""debug: helpers/getBalance2-B""); 
            if (!error) {
                console.log(""debug: helpers/getBalance2-C: wei="" + wei)
                
                return wei; 
            }
            else 
            {
                console.log(""debug: helpers/getBalance2-D error="" + error); 
            }
        });
    } catch (err) {
        console.log(""debug: helpers/getBalance2-E error="" + err);
    }
}"
76851-0.sol,question,"function (error, wei) {
            console.log(""debug: helpers/getBalance2-B""); 
            if (!error) {
                console.log(""debug: helpers/getBalance2-C: wei="" + wei)
                
                return wei; 
            }
            else 
            {
                console.log(""debug: helpers/getBalance2-D error="" + error); 
            }
        }"
9633-0.sol,question,"function playerUnjoins() {
    address[] newActivePlayers;
    for (uint32 index; index < activePlayers.length; index++) {
      if(msg.sender == activePlayers[index])
        newActivePlayers.push(activePlayers[index]);
    }
    activePlayers.length = newActivePlayers.length;
    activePlayers = newActivePlayers;
  }"
61184-1.sol,question,"function () {

  var host = server.address().address
  var port = server.address().port

  console.log(""Example app listening at http:

}"
33473-2.sol,question,"function(error, balance) {
  if (balance < (transactionFee + transactionValue)) {
    reject(""You don't have enough balance to cover this transaction"");
  } else {
    w3.eth.getTransactionCount(sender).then(function(count) {
      var transactionObject = {
        nonce: w3.utils.toHex(count),
        from: sender,
        to: receiver,
        gasPrice: w3.utils.toHex(transactionFee),
        value: w3.utils.toHex(transactionValue),
        data: ''
      }
      w3.eth.estimateGas(transactionObject, function (error, gas) {
        transactionObject.gasLimit = gas;
        var tx = new Tx(transactionObject);
        tx.sign(privateKey);
        var serializedTx = tx.serialize();
        w3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        })
      });
    }).catch(function(error) {
      reject(error);
    });
  }
}"
33473-2.sol,question,"function(count) {
      var transactionObject = {
        nonce: w3.utils.toHex(count),
        from: sender,
        to: receiver,
        gasPrice: w3.utils.toHex(transactionFee),
        value: w3.utils.toHex(transactionValue),
        data: ''
      }
      w3.eth.estimateGas(transactionObject, function (error, gas) {
        transactionObject.gasLimit = gas;
        var tx = new Tx(transactionObject);
        tx.sign(privateKey);
        var serializedTx = tx.serialize();
        w3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        })
      });
    }"
33473-2.sol,question,"function (error, gas) {
        transactionObject.gasLimit = gas;
        var tx = new Tx(transactionObject);
        tx.sign(privateKey);
        var serializedTx = tx.serialize();
        w3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        })
      }"
33473-2.sol,question,"function (error, result) {
          if(!error) {
            resolve(result);
          } else {
            reject(error)
          }
        }"
27111-2.sol,question,"function other_function() {
    
    if (isOkay(msg.sender)) {
       
    }
}"
33729-1.sol,question,"function invokeAddMember(){
    var abi = JSON.parse('<my ABI>');

    var contractAddress = <contrsct address>;

    console.log(""Unlocking coinbase account"");
    var password = ""<my_password>"";
    try {
      web3.personal.unlockAccount(""<contract_address>"", password);
    } catch(e) {
        console.log(""Error - web3.personal.unlockAccount"");
      console.log(e);
      
    }

    var FundSplitter = web3.eth.contract(abi);
    var myFundSplitter = FundSplitter.at(contractAddress);
    var newAddress = <Address of an account already created>;

    myFundSplitter.addMember.sendTransaction(newAddress,
            { from: '<owner account with enough ether>', value: 200, gas: 30000},
            function (error) {
                if(!error){
                    console.log(""addMember - Success"");
                }
                else
                    console.error(error);
            });

    console.log(""Contract Address"",contractAddress);
    console.log('abi - ', abi);
    console.log('block # - ', web3.eth.blockNumber);
}"
33729-1.sol,question,"function (error) {
                if(!error){
                    console.log(""addMember - Success"");
                }
                else
                    console.error(error);
            }"
46289-2.sol,question,"function buy(address _from,uint256 _price, uint256 _amount) onlyOwner public {



        uint256 dealamount;
        uint256 dealprice;

        for(uint256 count = 0;count <s.length;count++)
        {
            if(_amount==0) {
                break;
            }
            if(_price>=s[count].price)
            {
                dealprice = s[count].price;
                if(_amount >= s[count].amount){
                    dealamount = s[count].amount;
                }
                else {
                    dealamount = _amount;
                }
                s[count].amount-= dealamount;
                _amount-=dealamount;
                sectransfer(this,_from,dealamount,dealprice);
                deal(this,s[count].from,_from,now,dealamount,dealprice);
                sellmatch[s[count].price]-=dealamount;
            }
        }
        removezerosell();
        
        if (_amount > 0)
        {
            insertbuy(Order(orderno,now, _from, _price, _amount));
            
            
            buymatch[_price] += _amount;
            orderno++;
        }
    }"
46289-2.sol,question,"function sell(address _from,uint256 _price, uint256 _amount) onlyOwner public{

    
    
    if(balanceOf[_from] < _amount ) return;
    temptransfer(_from,this,_amount);

    uint256 dealamount;
    uint256 dealprice;

    for(uint256 count=0;count<b.length;count++)
    {
        if(_amount==0){
            break;
        }
        if(_price <= b[count].price){
            dealprice = _price;
            if(_amount >= b[count].amount){
                dealamount = b[count].amount;
            }
            else {
                dealamount = _amount;
            }
            b[count].amount -= dealamount;
            _amount -= dealamount;
            sectransfer(this,b[count].from,dealamount,dealprice);
            deal(this,_from,b[count].from,now,dealamount,dealprice);
            buymatch[b[count].price]-=dealamount;
        }
    }
    removezerobuy();
    if (_amount > 0)
    {
        insertsell(Order(orderno,now, _from, _price, _amount));
        
        sellmatch[_price] += _amount;
        orderno++;
    }
}"
25041-1.sol,question,"function (err, result) {
    console.log(err);
    console.log(result);
}"
25114-0.sol,question,"function(error, result) {if (!error) {} else {console.log(error)}}"
25114-0.sol,question,"function getProvider() {
  if (web3 !== null) {
    web3Provider = web3.currentProvider;
    web3 = new Web3(web3Provider);
  } else {
    web3Provider = new Web3.providers.HttpProvider('http:
    web3 = new Web3(web3Provider);
  }
}"
25114-0.sol,question,"function get

function networkCheck() {
  web3.version.getNetwork((err, netId) => {
    if (err) {
      console.log(err)
      return
    }
    switch (netId) {
      case '1':
        console.log('This is mainnet')
        break
      case '2':
        console.log('This is the deprecated Morden test network.')
        break
      case '3':
        console.log('This is the ropsten test network.')
        break
      default:
        console.log('This is an unknown network.')
    }
  });
}"
25114-0.sol,question,"function getNewDIN() {
  
  web3.eth.getAccounts((error, accounts) => {
    if (error) {
      console.log(error)
      return
    }
    this.account = accounts[0]

    console.log(contracts.DINRegistry);
    contracts.DINRegistry.at(""0x4c70da2e04d097cca503832dc93be7ae58134c4a"")
      .then(function(instance) {
        var DINRegistryInstance = instance;
        web3.eth.defaultAccount = this.account;
        console.log(web3.eth.defaultAccount);

        return DINRegistryInstance.registerNewDIN()
          .then(function(din) {
            console.log(din);
            return din;
          })
      })
      .then((result) => {
        return result;
        
      })
      .catch((err) => {
        console.log(err.message)
      })
  })
}"
25114-0.sol,question,"function(instance) {
        var DINRegistryInstance = instance;
        web3.eth.defaultAccount = this.account;
        console.log(web3.eth.defaultAccount);

        return DINRegistryInstance.registerNewDIN()
          .then(function(din) {
            console.log(din);
            return din;
          })
      }"
25114-0.sol,question,"function(din) {
            console.log(din);
            return din;
          }"
61811-1.sol,question,"function c() {
    Foo memory p = foo[4];
}"
9020-0.sol,question,"function() {

    it('encrypts and decrypts a string', function (done) {
        var pw = Uint8Array.from(fixtures.valid[0].pwDerivedKey);
        var ks = new keyStore(fixtures.valid[0].mnSeed, pw);
        var hdPath = ""m/0'/0'/2'"";
        ks.addHdDerivationPath(hdPath, pw, {curve: 'curve25519', purpose: 'asymEncrypt'});
        ks.generateNewEncryptionKeys(pw, 2, hdPath);
        var pubKeys = ks.getPubKeys(hdPath);
        var msg = ""Hello World!"";
        var encrypted = encryption.asymEncryptString(ks, pw, msg, pubKeys[0], pubKeys[1], hdPath);
        var cleartext = encryption.asymDecryptString(ks, pw, encrypted, pubKeys[1], pubKeys[0], hdPath);
        expect(cleartext).to.equal(msg);
        done();
    });
}"
9020-0.sol,question,"function (done) {
        var pw = Uint8Array.from(fixtures.valid[0].pwDerivedKey);
        var ks = new keyStore(fixtures.valid[0].mnSeed, pw);
        var hdPath = ""m/0'/0'/2'"";
        ks.addHdDerivationPath(hdPath, pw, {curve: 'curve25519', purpose: 'asymEncrypt'});
        ks.generateNewEncryptionKeys(pw, 2, hdPath);
        var pubKeys = ks.getPubKeys(hdPath);
        var msg = ""Hello World!"";
        var encrypted = encryption.asymEncryptString(ks, pw, msg, pubKeys[0], pubKeys[1], hdPath);
        var cleartext = encryption.asymDecryptString(ks, pw, encrypted, pubKeys[1], pubKeys[0], hdPath);
        expect(cleartext).to.equal(msg);
        done();
    }"
41493-0.sol,question,"function test1(address addr1, uint8 num) nonReentrant external {
    for (uint8 i = 0; i < num; i++) {
       
    }        
    workDone[msg.sender] = workDone[msg.sender].add(uint256(num ether));
}"
76543-0.sol,question,"function send(web3, transaction, destAddr, gasPrice, privateKey) {
    const options = {
        data    : transaction.encodeABI(),
        to      : destAddr,
        gasPrice: gasPrice,
        gas     : (await web3.eth.getBlock(""latest"")).gasLimit
    };
    const signed  = await web3.eth.accounts.signTransaction(options, privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}"
19320-1.sol,question,"function withdraw() {
    if(msg.sender != a1 && msg.sender != a2 && msg.sender != a3) return;
    uint split = this.balance/3;

    if(msg.sender != a1) a1.send(split);
    if(msg.sender != a2) a2.send(split);
    if(msg.sender != a3) a3.send(split);

    
    msg.sender.send(split);
}"
19600-0.sol,question,"function generateAddress(cb) {
  var params = { keyBytes: 32, ivBytes: 16 };

  var dk = keythereum.create(params);

  keythereum.create(params, function (dk) {
    var options = {};
    var password = generatePassword();
    keythereum.dump(password, dk.privateKey, dk.salt, dk.iv, options, 
      function (keyObject) {
        cb(keyObject, password);
      }
    );
  });
}"
19600-0.sol,question,"function (dk) {
    var options = {};
    var password = generatePassword();
    keythereum.dump(password, dk.privateKey, dk.salt, dk.iv, options, 
      function (keyObject) {
        cb(keyObject, password);
      }
    );
  }"
19600-0.sol,question,"function (keyObject) {
        cb(keyObject, password);
      }"
19600-0.sol,question,"function generatePassword() {
    var length = 8,
        charset = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"",
    retVal = """";
    for (var i = 0, n = charset.length; i < length; ++i) {
        retVal += charset.charAt(Math.floor(Math.random() * n));
    }
    return retVal;
}"
38300-0.sol,question,"function freezeAccount(address target, bool freeze) public onlyOwner {
    frozenAccount[target] = freeze;
    FrozenFunds(target, freeze);
}"
80502-0.sol,question,"function _mint(address _to, uint256 _tokenId) internal override virtual {
    super._mint(_to, _tokenId);
    tokens.push(_tokenId);
    idToIndex[_tokenId] = tokens.length - 1;
}"
11831-0.sol,question,"function sendFundsToFriend(address to) {
    if (to.balance > 1000000000000000000) {
        faucetResult(msg.sender, to, 'Friends balance higher than 1 Ether'); 
        throw; 
    }
    if (this.balance < 1000000000000000000) {
        faucetResult(msg.sender, to, 'Faucets balance lower than 1 Ether'); 
        throw; 
    }
    bool dummy = to.send(1000000000000000000);
    faucetResult(msg.sender, to, 'Sent 1 Ether to friends account'); 
}"
77039-0.sol,question,"function tokenFallback(address _from, uint _value, bytes memory _data) public {

    
    
}"
77039-0.sol,question,"function addParticipatingToken (address tokenAddr) public {
    participatingTokens.push(tokenAddr);
}"
62101-0.sol,question,"function resolveProject() {
    

    uint closedTask;
    uint totalPayout;

    for(uint i=0; i<taskIds.length; i++){
        if(tasks[taskIds[i]].status == 3) {
            
            closedTask = closedTask + 1;
            totalPayout += tasks[taskIds[i]].compensationOracle;
        }
    }
    
}"
41401-0.sol,question,"function storeETH() payable public {    
   address(this).transfer(msg.value);
}"
68947-5.sol,question,"function() {
            var reader = new FileReader();
            reader.onload = function (e) {

                const magic_array_buffer_converted_to_buffer = buffer.Buffer(reader.result); 
                ipfs.add(magic_array_buffer_converted_to_buffer, (err, ipfsHash) => {
                    console.log(err,ipfsHash);
                })
            }
            reader.readAsArrayBuffer(this.files[0]);
        }"
68947-5.sol,question,"function (e) {

                const magic_array_buffer_converted_to_buffer = buffer.Buffer(reader.result); 
                ipfs.add(magic_array_buffer_converted_to_buffer, (err, ipfsHash) => {
                    console.log(err,ipfsHash);
                })
            }"
15549-0.sol,question,"function moneyIn() {
       MoneyIn(msg.sender, msg.value); <- Only call the event MoneyIn()
   }"
35020-0.sol,question,"function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }"
78654-0.sol,question,"function setChoice(uint _number)public {
         playerChoice[msg.sender] = _number
        }"
78654-0.sol,question,"function battle(address _target) public {
      playerValue = playerChoice[msg.sender];
      enemyValue = playerChoice[_target];
      if(playerValue > enemyValue){
       emit Battleresult(""win"",playerValue,enemyValue);
       }
      else if(playerValue < enemyValue){
       emit Battleresult(""lose"",playerValue,enemyValue);
       }
      else if(playerValue == enemyValue){
       emit Battleresult(""draw"",playerValue,enemyValue);
       }

}"
19447-0.sol,question,"function allowServiceProvider(bytes32 _name,uint _votes) ifDivOptExecuted {
    
    if(_votes > divOpt.votingRightsMax - divOpt.votingRightsUsed){
      
      throw;
    }
    
    
    address _sp =msg.sender;
    providerOf[_sp].name = _name;
    providerOf[_sp].votingRightsMax =_votes;
    providerOf[_sp].votingRightsUsed = 0;
    providerOf[_sp].active = true;
    SpStatus('Service Provider allowed by CSD (name,votes)',_name,_votes);
  }"
36812-2.sol,question,"function(deployer, network, accounts) {
  deployer.deploy(NppToken)
    .then(function () {
      deployer.deploy(CrowdSale, NppToken.address); 
    });
}"
36812-2.sol,question,"function () {
      deployer.deploy(CrowdSale, NppToken.address); 
    }"
46615-0.sol,question,"function buyTokens(uint256 _numberOfTokens) public payable {

    
    tokensSold += _numberOfTokens;

    
     emit Sell(msg.sender,_numberOfTokens);

}"
52743-1.sol,question,"function execute(address _to, uint256 _value) external {
     require(msg.sender == owner);
     contract1.withdraw(_to, _value);
     contract2.update();
 }"
78834-0.sol,question,"function deposit(uint256 amount) public {
    accountBalance[msg.sender] = accountBalance[msg.sender].add(amount);
    require(daiToken.transferFrom(msg.sender, address(this), amount));
}"
38194-0.sol,question,"function foo(uint256 _a, uint256 _b, uint256 _c) {
    require(map[msg.sender].a == 1);
    require(map[msg.sender].b < 1);
    require(map[msg.sender].c > 1);

    deposits[msg.sender].a = _a;
    deposits[msg.sender].b = _b;
    deposits[msg.sender].c = _c;
}"
46359-2.sol,question,"function (req, res) {
    var lotteryUsers = helper.getLotteryUsers();

    var biddingTime = req.body.bidding_time; 
    var pricePerEntry = web3.utils.toWei(req.body.price_in_ether, 'ether'); 
    var minEntries = req.body.min_entries; 
    var id = req.body.id; 
    var privateKey = req.body.private_key; 
    var publicKey = req.body.public_key;

    var createLottery = lotteryUsers.methods.createLottery(biddingTime, pricePerEntry, minEntries, id);
    var encodedABI = createLottery.encodeABI();

    var tx = {
        gas: 4712388,
        gasPrice: 2,
        data: encodedABI
    }

    console.log(""tx ""+tx);
    console.log(""privateKey ""+privateKey);

     var successEvent = function (receipt) {
       res.status(200).send(receipt);
     }

    var failureEvent = function (error) {
       res.status(500).send({message: errorMessage});
    }

    web3.eth.accounts.signTransaction(tx, privateKey)
     .then(signed => {
      console.log(""signed ""+signed.toString());
      var tran = web3.eth.sendSignedTransaction(rawTx)

        tran.on('confirmation', (confirmationNumber, receipt) => {
          console.log('confirmation: ' + confirmationNumber);
        });

        tran.on('transactionHash', hash => {
          console.log('hash');
          console.log(hash);
        });

        tran.on('receipt', receipt => {
          console.log('reciept');
          console.log(receipt);
          successEvent(receipt);
        });

        tran.on('error', error => {
            console.log(error.toString());
            failureEvent(error);
        });
   });
}"
46359-2.sol,question,"function (receipt) {
       res.status(200).send(receipt);
     }"
46359-2.sol,question,"function (error) {
       res.status(500).send({message: errorMessage});
    }"
40253-0.sol,question,"function(deployer, network, accounts) {
  return liveDeploy(deployer, accounts);
}"
40253-0.sol,question,"function liveDeploy(deployer, accounts) {
  const startTime = latestTime() + duration.seconds(1); 
  const endTime = startTime + (86400 * 30); 
  const rate = new web3.BigNumber(1000);
  const wallet = accounts[0];

  return deployer.deploy(CoinCrowdsale, startTime, endTime, rate, wallet);
}"
15296-0.sol,question,"function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileSync""](filena

TypeError: Cannot read property '1' of null
  at Blockchain.initChainAndGetAddress (/usr/local/lib/node_modules/embark/lib/blockchain.js:69:45)
  at Blockchain.run (/usr/local/lib/node_modules/embark/lib/blockchain.js:41:22)
  at Object.blockchain (/usr/local/lib/node_modules/embark/lib/index.js:195:16)
  at Command.<anonymous> (/usr/local/lib/node_modules/embark/lib/cmd.js:95:17)
  at Command.listener (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:301:8)
  at emitTwo (events.js:106:13)
  at Command.emit (events.js:191:7)
  at Command.parseArgs (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:615:12)
  at Command.parse (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:458:21)
  at Cmd.process (/usr/local/lib/node_modules/embark/lib/cmd.js:19:11)
  at Object.process (/usr/local/lib/node_modules/embark/lib/index.js:35:9)
  at Object.<anonymous> (/usr/local/lib/node_modules/embark/bin/embark:4:8)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (module.js:580:10)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.runMain (module.js:605:10)
  at run (bootstrap_node.js:420:7)
  at startup (bootstrap_node.js:139:9)
  at bootstrap_node.js:535:3

blockchain@blockchain-VirtualBox:~/embark/embark_demo$ ^C
blockchain@blockchain-VirtualBox:~/embark/embark_demo$ sudo apt-get update
Hit:1 http:
Get:2 http:
Hit:3 http:
Get:4 http:
Get:5 http:
Fetched 306 kB in 0s (317 kB/s)    
Reading package lists... Done
blockchain@blockchain-VirtualBox:~/embark/embark_demo$ cd ..
blockchain@blockchain-VirtualBox:~/embark$ sudo rm -r embark_demo/
blockchain@blockchain-VirtualBox:~/embark$ embark demo
Initializing Embark Template....
Installing packages.. this can take a few seconds
Init complete

App ready at ./embark_demo
-------------------
next steps:
-> cd ./embark_demo
-> embark blockchain or embark simulator
open another console in the same directory and run
-> embark run
For more info go to http:
blockchain@blockchain-VirtualBox:~/embark$ cd embark_demo/
blockchain@blockchain-VirtualBox:~/embark/embark_demo$ embark blockchain
===============================================================================
===============================================================================
Embark Blockchain Using: Go-Ethereum (https:
===============================================================================
===============================================================================
running: geth --networkid 12301 --datadir="".embark/development/datadir"" --password config/development/password account list
WARN [04-18|17:45:59] No etherbase set and no accounts found as default
already initialized
/usr/local/lib/node_modules/embark/node_modules/solc/soljson.js:1
(function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileSync""](filena

TypeError: Cannot read property '1' of null
  at Blockchain.initChainAndGetAddress (/usr/local/lib/node_modules/embark/lib/blockchain.js:69:45)
  at Blockchain.run (/usr/local/lib/node_modules/embark/lib/blockchain.js:41:22)
  at Object.blockchain (/usr/local/lib/node_modules/embark/lib/index.js:195:16)
  at Command.<anonymous> (/usr/local/lib/node_modules/embark/lib/cmd.js:95:17)
  at Command.listener (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:301:8)
  at emitTwo (events.js:106:13)
  at Command.emit (events.js:191:7)
  at Command.parseArgs (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:615:12)
  at Command.parse (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:458:21)
  at Cmd.process (/usr/local/lib/node_modules/embark/lib/cmd.js:19:11)
  at Object.process (/usr/local/lib/node_modules/embark/lib/index.js:35:9)
  at Object.<anonymous> (/usr/local/lib/node_modules/embark/bin/embark:4:8)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (module.js:580:10)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.runMain (module.js:605:10)
  at run (bootstrap_node.js:420:7)
  at startup (bootstrap_node.js:139:9)
  at bootstrap_node.js:535:3
"
15296-0.sol,question,"function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileSync""](filena

TypeError: Cannot read property '1' of null
  at Blockchain.initChainAndGetAddress (/usr/local/lib/node_modules/embark/lib/blockchain.js:69:45)
  at Blockchain.run (/usr/local/lib/node_modules/embark/lib/blockchain.js:41:22)
  at Object.blockchain (/usr/local/lib/node_modules/embark/lib/index.js:195:16)
  at Command.<anonymous> (/usr/local/lib/node_modules/embark/lib/cmd.js:95:17)
  at Command.listener (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:301:8)
  at emitTwo (events.js:106:13)
  at Command.emit (events.js:191:7)
  at Command.parseArgs (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:615:12)
  at Command.parse (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:458:21)
  at Cmd.process (/usr/local/lib/node_modules/embark/lib/cmd.js:19:11)
  at Object.process (/usr/local/lib/node_modules/embark/lib/index.js:35:9)
  at Object.<anonymous> (/usr/local/lib/node_modules/embark/bin/embark:4:8)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (module.js:580:10)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.runMain (module.js:605:10)
  at run (bootstrap_node.js:420:7)
  at startup (bootstrap_node.js:139:9)
  at bootstrap_node.js:535:3

blockchain@blockchain-VirtualBox:~/embark/embark_demo$ ^C
blockchain@blockchain-VirtualBox:~/embark/embark_demo$ sudo apt-get update
Hit:1 http:
Get:2 http:
Hit:3 http:
Get:4 http:
Get:5 http:
Fetched 306 kB in 0s (317 kB/s)    
Reading package lists... Done
blockchain@blockchain-VirtualBox:~/embark/embark_demo$ cd ..
blockchain@blockchain-VirtualBox:~/embark$ sudo rm -r embark_demo/
blockchain@blockchain-VirtualBox:~/embark$ embark demo
Initializing Embark Template....
Installing packages.. this can take a few seconds
Init complete

App ready at ./embark_demo
-------------------
next steps:
-> cd ./embark_demo
-> embark blockchain or embark simulator
open another console in the same directory and run
-> embark run
For more info go to http:
blockchain@blockchain-VirtualBox:~/embark$ cd embark_demo/
blockchain@blockchain-VirtualBox:~/embark/embark_demo$ embark blockchain
===============================================================================
===============================================================================
Embark Blockchain Using: Go-Ethereum (https:
===============================================================================
===============================================================================
running: geth --networkid 12301 --datadir="".embark/development/datadir"" --password config/development/password account list
WARN [04-18|17:45:59] No etherbase set and no accounts found as default
already initialized
/usr/local/lib/node_modules/embark/node_modules/solc/soljson.js:1
(function (exports, require, module, __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===""object"";var ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function printErr(x){process[""stderr""].write(x+""\n"")};var nodeFS=require(""fs"");var nodePath=require(""path"");Module[""read""]=function read(filename,binary){filename=nodePath[""normalize""](filename);var ret=nodeFS[""readFileSync""](filena

TypeError: Cannot read property '1' of null
  at Blockchain.initChainAndGetAddress (/usr/local/lib/node_modules/embark/lib/blockchain.js:69:45)
  at Blockchain.run (/usr/local/lib/node_modules/embark/lib/blockchain.js:41:22)
  at Object.blockchain (/usr/local/lib/node_modules/embark/lib/index.js:195:16)
  at Command.<anonymous> (/usr/local/lib/node_modules/embark/lib/cmd.js:95:17)
  at Command.listener (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:301:8)
  at emitTwo (events.js:106:13)
  at Command.emit (events.js:191:7)
  at Command.parseArgs (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:615:12)
  at Command.parse (/usr/local/lib/node_modules/embark/node_modules/commander/index.js:458:21)
  at Cmd.process (/usr/local/lib/node_modules/embark/lib/cmd.js:19:11)
  at Object.process (/usr/local/lib/node_modules/embark/lib/index.js:35:9)
  at Object.<anonymous> (/usr/local/lib/node_modules/embark/bin/embark:4:8)
  at Module._compile (module.js:571:32)
  at Object.Module._extensions..js (module.js:580:10)
  at Module.load (module.js:488:32)
  at tryModuleLoad (module.js:447:12)
  at Function.Module._load (module.js:439:3)
  at Module.runMain (module.js:605:10)
  at run (bootstrap_node.js:420:7)
  at startup (bootstrap_node.js:139:9)
  at bootstrap_node.js:535:3
"
6277-0.sol,question,"function checkGoalReached() afterDeadline {
    if (amountRaised >= fundingGoal){
        beneficiary.send(amountRaised);
        FundTransfer(beneficiary, amountRaised, false);
    } else {
        for (uint i = 0; i < funders.length; ++i) {
          funders[i].addr.send(funders[i].amount);
          FundTransfer(funders[i].addr, funders[i].amount, false);
        }
    }

    beneficiary.send(this.balance); 
    crowdsaleClosed = true;
}"
61161-0.sol,question,"function (fromWallet, toWallet, companyName, amount, callback) {
    let functionName = 'transferWithAddLoyalty';
    amount = amount*1000000000000000000 ;
    let params = [fromWallet, toWallet, amount, companyName];
    W3JSR.prepareSignSend(config.ethereum.rinkeby.ABI_DEFINITION, config.ethereum.rinkeby.CONTRACT_ADDRESS, functionName,
        config.ethereum.rinkeby.WALLET_ADDRESS, privateKey, params, 10000000000).then((result, error) => {
        callback(result, error);
    });
}"
52737-0.sol,question,"function deposit() public payable {
        balance[msg.sender] += msg.value;
    }"
56524-1.sol,question,"function addUnitExp(uint256 _unitId, uint256 _exp) public {
    UnitsInterface data = UnitsInterface(unitsContract);
    data.addUnitExp(_unitId, _exp);
}"
51174-1.sol,question,"function changeBytes(bytes _bytes) public {
reversed = _bytes;
}"
66311-0.sol,question,"function() {
return auctionInstance.bid(itemId[0],count[6],{from:account[1]})
.then(function (result) {
  
  revert(""Failed to check remaining tokens less than count"");
}).catch(function (e) {
  var a = e.toString();
  if(e === ""Failed to check remaining tokens less than count"") {
  assert(false);
  } else {
    assert(true);
  }
})"
66311-0.sol,question,"function (result) {
  
  revert(""Failed to check remaining tokens less than count"");
}"
66311-0.sol,question,"function (e) {
  var a = e.toString();
  if(e === ""Failed to check remaining tokens less than count"") {
  assert(false);
  } else {
    assert(true);
  }
}"
76479-0.sol,question,"function task(db) {
    const accounts = await web3.eth.getAccounts();
    const length = accounts.length;

    
    while (length--) {
        feeTx = {
            ...
        }
        await web3.eth.sendTransaction(feeTx, async function (err, transactionHash) {
            if (err) {
                
                await db.insert(err);
            } else {
                console.log(""DONE"");
                
                await db.insert(transactionHash);
            }
        });
    }
}"
76479-0.sol,question,"function (err, transactionHash) {
            if (err) {
                
                await db.insert(err);
            } else {
                console.log(""DONE"");
                
                await db.insert(transactionHash);
            }
        }"
9197-0.sol,question,"function commit(bytes32 POIuser) {
    uint groupNumber = uint(POIuser) / (uint(maxHash) / numGroups()) + 1;

    if(hangoutGroups[groupNumber].length >= groupSize) {
        for(uint i = 0; i < numUsers(); i++) {
            if(groupNumber - i >= 1) {
                if(hangoutGroups[groupNumber - i].length < groupSize) { groupNumber -= i; break; }
            }
            if(groupNumber + i <= numGroups()) {
                if(hangoutGroups[groupNumber + i].length < groupSize) { groupNumber += i; break; }
            }
        }
    } 

    hangoutGroups[groupNumber].push(POIuser);
}"
41757-0.sol,question,"function CrowdFunding(address _arg1, uint256 _arg2, uint256 _arg3) public {
    arg1 = _arg1;
    arg2 = _arg2;
    arg3 = _arg3;
  }"
82041-3.sol,question,"function _startNewMiningEpoch() internal {
        
        if (rewardEra <= lastBonusEra) {
            
            if (totalSupply() >= maxSupplyForBonusEra[rewardEra]) {
                rewardEra = rewardEra + 1;
            }

            
            if (rewardEra <= lastBonusEra) {
                currentMonthlyRate = bonusEraMonthlyRate[rewardEra];
            } else {
                currentMonthlyRate = standardEraMonthlyRate;
            }
        }

        
        epochCount = epochCount.add(1);

        
        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {
            _reAdjustDifficulty();
        }

        
        challengeNumber = blockhash(block.number - 1);
    }"
82041-3.sol,question,"function _reAdjustDifficulty() internal {
        
        uint blocks_per_readjustment = _BLOCKS_PER_READJUSTMENT;
        uint targetEthBlocksPerDiffPeriod = blocks_per_readjustment.mul(2); 

        
        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;
        
        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) { 
            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);
            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000); 

            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));
        } else { 
            uint shortage_block_pct = ethBlocksSinceLastDifficultyPeriod.mul(100).div(targetEthBlocksPerDiffPeriod);
            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);

            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));
        }

        latestDifficultyPeriodStarted = block.number;

        if(miningTarget < _MINIMUM_TARGET) {
            miningTarget = _MINIMUM_TARGET;
        }

        if(miningTarget < _MAXIMUM_TARGET) {
            miningTarget = _MAXIMUM_TARGET;
        }
    }"
83255-0.sol,question,"function (err, hash) {

    
    if (!err) {

      console.log(""Transaction successful! redirecting..."")

      
      console.log(hash)
      setTxHash(hash)

      
      var balance1 = contract.methods.balanceOf(account1).send()
      var balance2 = contract.methods.balanceOf(account2).send()

      return {
        balance1:balance1,
        balance2:balance2
      }

      
    } else { 
      console.log(""Error! Transaction failed.."")
      console.log(err)
    }   
  }"
49959-0.sol,question,"function transfer(address _to, uint _value, bytes _data) {
        
        
        uint codeLength;

    assembly {
        
        codeLength := extcodesize(_to)
    }

    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    if(codeLength>0) {
        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
        receiver.tokenFallback(msg.sender, _value, _data);
    }
    emit Transfer(msg.sender, _to, _value, _data);
}"
49959-0.sol,question,"function transfer(address _to, uint _value) {
    uint codeLength;
    bytes memory empty;

    assembly {
        
        codeLength := extcodesize(_to)
    }

    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    if(codeLength>0) {
        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
        receiver.tokenFallback(msg.sender, _value, empty);
    }
    emit Transfer(msg.sender, _to, _value, empty);
}"
67381-1.sol,question,"function () {
    daiAddress = (await web3.eth.getAccounts())[5];
    this.daiToken = ERC20Mock.new(daiAddress, 100*(10**6));
    this.MyContract = await MyContract.new(
      this.daiToken.address
    ); 
    await this.daiToken.approve(user, amount, {from: daiAddress});
    await this.daiToken.transferFrom(daiAddress, user, amount);
  }"
67381-1.sol,question,"function() {
    const amount = new BN(1);
    it(""should deposit if tokens are approved by user"", async function () {

       await this.daiToken.approve(this.MyContract.address, amount, {from: user});
       await this.MyContract.deposit(amount, {from: user});  
    });
  }"
61983-0.sol,question,"function multiSend() internal isAdmin {
     for (uint initial = iter; iter < initial + 100 && iter < sendList.length; iter++) {
         if(!sendList[iter].send(valueMap[sendList[iter]])) {}
     }
   }"
62002-0.sol,question,"function bet() public payable {
    require(msg.value == 0.1 ether);
    pingOracle();
}"
62002-0.sol,question,"function __callback(bytes32 _queryId, string _result, bytes _proof) public onlyOraclize  {

    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0) {
        oracleFailed = true;
    } else {
        uint randomN = (uint(keccak256(abi.encodePacked(_result))) % (max.sub(min)).add(min));
        revealWinner(randomN);
        oracleFailed = false;
    }

    if(oracleFailed) {
        count = count.add(1);
        pingOracle();
    }
}"
62002-0.sol,question,"function pingOracle() private {
    oraclize_setProof(proofType_Ledger);
    bytes32 queryId = oraclize_newRandomDSQuery(delay, N, gasOraclize); 
}"
62002-0.sol,question,"function revealWinner(uint _index) internal {
    uint amount = pot.sub(amountforTeam).sub(gasOraclize.mul(gasPriceOraclize));
    winner = users[_index];
    winner.transfer(amount);
}"
69858-0.sol,question,"function userCheckIn(uint placeid) public {
    userCount++;
    checkins[userCount] = Checkin(placeid, msg.sender, new Date(now * 1000));
}"
68000-1.sol,question,"function resolveAfter2Seconds() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('resolved');
    }, 2000);
  });
}"
68000-1.sol,question,"function asyncCall() {
  console.log('calling');
  var result = await resolveAfter2Seconds();
  console.log(result);
  
}"
56417-0.sol,question,"function () {
    emit Purchase(PO++, msg.sender, msg.value, msg.data); 
}"
16021-0.sol,question,"function transfer(address user) payable {
        var amount = msg.value;
        var sender = msg.sender;"
30312-0.sol,question,"function setOwner(address _owner) onlyOwner {
    pause();
    balances[owner] = initial_supply - public supply;
    owner = _owner;
    balances[owner] = public_supply;
  }"
66399-0.sol,question,"function unpause() public onlyCEO whenPaused {
        require(geneScience != address(0));

        super.unpause();
    }"
62824-0.sol,question,"function invest() public payable {
    require(msg.value == 0.1 ether);   
}"
13469-1.sol,question,"function (i)
{
    let code = codeGenerator(i);
    web3.eth.compile.solidity(
        code,
        function (error, compiled_code) {
            if (error)
            {
                console.log(""Compilation error. i=""+i+"" Error="", error);
                process.exit(0);
            }

            let gas_need = web3.eth.estimateGas({data: compiled_code[""<stdin>:Test""].code});
            console.log(""Number of functions=""+i+"". Gas needed=""+gas_need);

            if (i<end_functions_count)
                compileAndCheck(i+1);
        });
}"
13469-1.sol,question,"function (error, compiled_code) {
            if (error)
            {
                console.log(""Compilation error. i=""+i+"" Error="", error);
                process.exit(0);
            }

            let gas_need = web3.eth.estimateGas({data: compiled_code[""<stdin>:Test""].code});
            console.log(""Number of functions=""+i+"". Gas needed=""+gas_need);

            if (i<end_functions_count)
                compileAndCheck(i+1);
        }"
57811-0.sol,question,"function (deployer) {
    
    deployer.deploy(SimpleStorage, 42, { privateFor: ['ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc='] })
}"
54802-1.sol,question,"function () {
                if (typeof web3 !== 'undefined') {
                    web3 = new Web3(web3.currentProvider);
                    currentAccount = web3.eth.accounts[0];
                } else {
                    
                    web3 = new Web3(new Web3.providers.HttpProvider(""http:
                    console.log(""Metamask or similar not detected"");
                }

                deployedContract = web3.eth.contract(ABI).at(ADDRESS);
                deployedContract.mint(currentAccount, parseInt(1000) * 1000000000000000000, { from: currentAccount, gasPrice: web3.toWei(1, 'gwei') }, function (error, result) {
                    if (!error) {
                        console.log(""Mint result = "" + result);
                    }
                    else {
                        console.log(error);                        
                    }
                });
            }"
54802-1.sol,question,"function (error, result) {
                    if (!error) {
                        console.log(""Mint result = "" + result);
                    }
                    else {
                        console.log(error);                        
                    }
                }"
59678-0.sol,question,"function someFunction(uint newValue) public {
    value = newValue;
}"
66144-0.sol,question,"function set(KeyedMapAddressToBool storage map, address key, bool value) public {
  map.data[key] = value;
  
  address a = map.addresses[0];
}"
24484-0.sol,question,"function addCity(string _type, string _city) {
    Categories[_type].push(_city);
}"
49855-2.sol,question,"function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    sellPrice = newSellPrice;
    buyPrice = newBuyPrice;
}"
49855-2.sol,question,"function buy() payable onlyIfEnabled public {
    uint256 amount = msg.value.div(buyPrice);   
    _transfer(this, msg.sender, amount);   
}"
51399-0.sol,question,"function addNewCake(uint _id) public {
    cakes[_id] = Cake(_id, 0x0);

    cakeIds.push(_id);
}"
51399-0.sol,question,"function buyCake(uint _id) public {      
    Cake storage cake = cakes[_id];       
    cake.buyer = msg.sender;

    removeCakeInArray(_id);
}"
51399-0.sol,question,"function removeCakeInArray(uint _id) private {
    for (uint i = 0; i <= getNumOfCakes(); i++) {            
        if (cakeIds[i] == _id) {
            remove(i);                 
        }    
    }
}"
51399-0.sol,question,"function remove(uint index) private {
    if (index >= getNumOfCakes()) return;

    for (uint i = index; i < getNumOfCakes() - 1; i++){
        cakeIds[i] = cakeIds[i+1];
    }
    cakeIds.length--;
}"
40732-1.sol,question,"function withdraw() public {
  uint256 amount = balanceOf[msg.sender];
  msg.sender.transfer(amount);
  balanceOf[msg.sender] = 0;
}"
25877-1.sol,question,"function () payable {
    uint amountPerEmployee = msg.value / employees.length;

    
    employees[0].transfer(amountPerEmployee);
}"
26711-2.sol,question,"function Asset(address _SCIssuers) {
    SCIssuers = _SCIssuers;
}"
37454-0.sol,question,"function upgrade(uint256 value) public {
      UpgradeState state = getUpgradeState();
      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {
        
        throw;
      }

      
      if (value == 0) throw;

      balances[msg.sender] = safeSub(balances[msg.sender], value);

      
      totalSupply = safeSub(totalSupply, value);
      totalUpgraded = safeAdd(totalUpgraded, value);

      
      upgradeAgent.upgradeFrom(msg.sender, value);
      Upgrade(msg.sender, upgradeAgent, value);
  }"
60878-2.sol,question,"function claimFrom(address minter) public payable {
    Foo memory thisFoo;
    thisFoo = fooIndex[minter];
    require(thisFoo.balance < amount);

    thisFoo.balance += msg.value;
    thisFoo.expiresAt += 1000;

    fooIndex[minter] = thisFoo;
  }"
79101-0.sol,question,"function getERC20TokenBalance() {

      let minABI = [
        
        {
          ""constant"":true,
          ""inputs"":[{""name"":""_owner"",""type"":""address""}],
          ""name"":""balanceOf"",
          ""outputs"":[{""name"":""balance"",""type"":""uint256""}],
          ""type"":""function""
        },
        
        {
          ""constant"":true,
          ""inputs"":[],
          ""name"":""decimals"",
          ""outputs"":[{""name"":"""",""type"":""uint8""}],
          ""type"":""function""
        }
      ];


      let contract2 = web3.eth.contract(minABI).at(tokenAddress);

      web3.eth.getAccounts(function (error, walletAddress) {
          contract2.balanceOf(walletAddress, function(err, result) {
              if(err) {
                  console.log(err, 'err');
              } else {
                console.log(result);
                  document.getElementById('agiAvailable').innerHTML = result + ' AGI';

              }
          });
      });
    }"
79101-0.sol,question,"function (error, walletAddress) {
          contract2.balanceOf(walletAddress, function(err, result) {
              if(err) {
                  console.log(err, 'err');
              } else {
                console.log(result);
                  document.getElementById('agiAvailable').innerHTML = result + ' AGI';

              }
          });
      }"
79101-0.sol,question,"function(err, result) {
              if(err) {
                  console.log(err, 'err');
              } else {
                console.log(result);
                  document.getElementById('agiAvailable').innerHTML = result + ' AGI';

              }
          }"
79101-0.sol,question,"function onAddressChange(e) {

      if(tokenAddress != """" && walletAddress != """") {
        getERC20TokenBalance(tokenAddress, walletAddress, (balance) => {
          console.log(balance.toString());
        });
      }
    }"
52584-1.sol,question,"function signMessage(message, callback) {
  

web3.eth.sign(""0x"" + message.toString(""hex""),""0x135a7de83802408321b74c322f8558db1679ac20"");

}"
26111-1.sol,question,"function submitTx() {
  return web3.eth.getTransactionCount(txObj.from, 'pending')
    .then(nonce => {
      txObj.nonce = nonce
      txObj.gasLimit = web3.utils.toHex(22000)
      txObj.gasPrice = web3.utils.toHex(2)
      txObj.value = web3.utils.toHex(1e18)
      const tx = new EthereumTx(txObj)
      tx.sign(Buffer.from(""29469148b567bb0142b4e33c518d833c77ef36b3894b56c7291bed448c943a03"", 'hex'))
      let signedTxHexString = tx.serialize().toString('hex')
      txObj.txHash = ""0x"" + tx.hash().toString('hex')
      return web3.eth.sendSignedTransaction(""0x"" + signedTxHexString, (err, txHash) => {
        if(txHash === txObj.txHash) {
          console.log(""computed and returned are the same"", txHash, txObj.txHash)
        } else {
          console.log(""computed and returned are NOT the same"", txHash, txObj.txHash)
        }
      })
    })
}"
61184-0.sol,question,"function() {
          var web3 = window.web3 ;
          if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
          } else {
          
          web3 = new Web3(new Web3.providers.HttpProvider(""http:
          }
      }"
61184-0.sol,question,"function getblocknumber() {
          
           
          document.getElementById(""status"").innerHTML = web3.eth.blockNumber; 
    }"
72779-1.sol,question,"function sendTransaction() {
  const ethprovider = new HDWalletProvider(
    process.env.MNEMONIC,
    process.env.PROVIDER
  );
  let web3 = new Web3('https:
  web3.setProvider(ethprovider);
  let { abi } = JSON.parse(fs.readFileSync(path.join(__dirname, './build/contracts/Voter.json')));

  let voter = new web3.eth.Contract(abi, VOTER_CONTRACT_ADDRESS);

  console.log('Adding option tea');
  let res = await voter.methods.addOption('tea').call({ from: ACCOUNT });
  console.log(res);
  console.log('Adding option coffee');
  res = await voter.methods.addOption('coffee').call({ from: ACCOUNT });
  console.log(res);

  console.log('Start voting');
  await voter.methods.startVoting().call({ from: ACCOUNT, gas: 4500000 });

  console.log('Voting');
  res = await voter.methods['vote(uint256)'](1).call({ from: ACCOUNT, gas: 4500000 });
  console.log(res);

  console.log('getVotes');
  res = await voter.methods.getVotes().call({ from: ACCOUNT, gas: 4500000 })
  console.log(res);
}"
80087-0.sol,question,function () { [native code] }
20805-0.sol,question,"function changeParameters(uint newAnte, uint8 newNumberOfPlayers, uint newWinnerPart) {
    if (msg.sender == owner) {
         if (newAnte != 0) {
            ante = newAnte;
         }
         if (newNumberOfPlayers != 0) {
            required_number_players = newNumberOfPlayers;
         }
         if (newWinnerPart != 0) {
            winner_part = newWinnerPart;
        }
        }
}"
70324-1.sol,question,"function test() public payable {
       msg.sender.transfer(500);
    }"
11781-2.sol,question,"function createProject(name, amountToRaise, deadline) {
    hub.createProject(name, amountToRaise, deadline, {from: account, gas: 3000000}).then(function(txn) {
        return getTransactionReceiptMined(txn);
    })
}"
11781-2.sol,question,"function(txn) {
        return getTransactionReceiptMined(txn);
    }"
11781-2.sol,question,"function getProjectOwner(i) {
    hub.getProjectAddress(i).then(function(value) {
        console.log(value);
        project = Project.at(value);
        project.getOwner().then(function(value) {
            console.log(value);
        });
    });
}"
11781-2.sol,question,"function(value) {
        console.log(value);
        project = Project.at(value);
        project.getOwner().then(function(value) {
            console.log(value);
        });
    }"
11781-2.sol,question,"function getProjectName(i) {
    hub.getProjectAddress(i).then(function(value) {
        console.log(value);
        project = Project.at(value);
        project.getName().then(function(value) {
            console.log(value);
        });
    });
}"
19068-1.sol,question,"function DocumentValidity(string _docTitle, string _dateTimeStamp,string _author) public {
    docTitle = _docTitle;
    DateTimeStamp = _dateTimeStamp;
    author=_author;
}"
24126-1.sol,question,"function deposit(address addr) payable {

  uint256 amt = msg.value;

  uint alreadyDeposited = deposits[addr]; 

  if (alreadyDeposited > 0) {
    
    deposits[addr] = alreadyDeposited + amt; 
  }

  sendFunds();
}"
29835-1.sol,question,"function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {
    require(_startTime >= now);
    require(_endTime >= _startTime);
    require(_rate > 0);
    require(_wallet != 0x0);

    
    tokenReward = 0xEfCfbc96dc2aDfe35d3fFF6b1D9E985066D618aC;
    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    wallet = _wallet;

  }"
29835-1.sol,question,"function () payable {
    buyTokens(msg.sender);
  }"
29835-1.sol,question,"function buyTokens(address beneficiary) public payable {
    require(beneficiary != 0x0);
    require(validPurchase());

    uint256 weiAmount = msg.value;
    uint256 accessTime = now;

    
    uint256 tokens = weiAmount.mul(rate);

    
    weiRaised = weiRaised.add(weiAmount);


 
tokenReward.transferFrom(0xB1A9B5564071A442909b17f8e9C7288b44aFC014,beneficiary, tokens);
}"
75964-4.sol,question,"function () {
    if (typeof web3 !== 'undefined') {
        console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
        window.web3 = new Web3(web3.currentProvider);
    } else {
        console.log('No Web3 Detected... using HTTP Provider')
        window.web3 = new Web3(new Web3.providers.HttpProvider(""https:
    }
}"
40426-0.sol,question,"function FixedSupplyToken() public {
    symbol = ""FIXED"";
    name = ""Example Fixed Supply Token"";
    decimals = 18;
    _totalSupply = 1000000 * 10**uint(decimals);
    balances[owner] = _totalSupply;
    Transfer(address(0), owner, _totalSupply);

}"
44332-0.sol,question,"function NeoCrowdsale(uint256 _openingTime, uint256 _closingTime) public {
    require(_openingTime >= now);
    require(_closingTime >= _openingTime);

    openingTime = _openingTime;
    closingTime = _closingTime;
}"
56108-0.sol,question,"function addNote(uint _value, address _owner) public { 
... 
}"
61486-1.sol,question,"function roundStart() {
    it('start the round', async function () {
      
    });
  }"
38186-0.sol,question,"function approve (address _to, uint256 tokenId) external {
   allowed [msg.sender][_to].push(tokenId);
}"
84331-4.sol,question,"function gasUsed(tester, gas, tested) {
    await tester.measureGas(gas, tested.address);
    return await tester.gasUsed();
}"
25477-0.sol,question,"function (error, eventResult) {
          if (error) {
              console.error(error);
          } else {
              loco.play();
              console.log(JSON.stringify(eventResult, null, 4));
          }"
59454-0.sol,question,"function myFunction(uint bigNumber) payable public {
         if(msg.value == 0.01 ether){
         theArray.push(bigNumber);}
else {if (msg.value == .05 ether){
            for (int i; i<50;i++)
            theArray.push(bigNumber);

        }
else { 
    revert();
}
}}"
44951-2.sol,question,"function () {
    var docConvention=document.getElementById(""txtViewUser"");
    sampleinstance.deployed().then(function (instance) {      
        return instance.viewuser.call(docConvention).then(function (v) {
        console.log(v);
        $(""#tdEmailName"").text(v[0].toString());
        $(""#tdPoints"").text(v[1].toNumber());
        $(""#tdTotalPoints"").text(v[2].toNumber());
      })
    })
  }"
44951-2.sol,question,"function (instance) {      
        return instance.viewuser.call(docConvention).then(function (v) {
        console.log(v);
        $(""#tdEmailName"").text(v[0].toString());
        $(""#tdPoints"").text(v[1].toNumber());
        $(""#tdTotalPoints"").text(v[2].toNumber());
      })
    }"
44951-2.sol,question,"function (v) {
        console.log(v);
        $(""#tdEmailName"").text(v[0].toString());
        $(""#tdPoints"").text(v[1].toNumber());
        $(""#tdTotalPoints"").text(v[2].toNumber());
      }"
24901-1.sol,question,"function buyTokens(address beneficiary) payable whenNotPaused {
    require(beneficiary != 0x0);
  require(validPurchase());


uint256 weiAmount = msg.value;

weiRaised = weiRaised.add(weiAmount);

uint256 tokens = weiAmount.mul(rate);

token.mint(beneficiary, tokens);
TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);
forwardFunds();
}"
42012-0.sol,question,"function setXyzParameters(uint id, uint newPrice, bool _isForSale) public {
    require(msg.sender == xyzs[id].creator);
    xyzs[id].price = newPrice;
    xyzs[id].isForSale = _isForSale;
}"
51062-0.sol,question,"function(err, results){
    console.log('returned: ' + results.return.toString('hex'));
  }"
51062-0.sol,question,"function (info, done) {
    
    console.log('[vm] ' + info.pc + ' Opcode: ' + info.opcode + ' Gas: ' + info.gasLeft.toString());

    
    info.stack.forEach(function (item) {
        console.log('[vm]    ' + item.toString('hex'));
    });
    
    done();
}"
51062-0.sol,question,"function (item) {
        console.log('[vm]    ' + item.toString('hex'));
    }"
62310-0.sol,question,"function newAddresses(password) {
                        if (password == '') {
                            password = prompt('Enter password to retrieve addresses', 'Password');
                        }
                        global_keystore.keyFromPassword(password, function(err, pwDerivedKey){
                            if(err) throw err;
                            global_keystore.generateNewAddress(pwDerivedKey, 1);
                            var address = global_keystore.getAddresses()[0];
                            document.getElementById('functionCaller').innerHTML = ''
                            document.getElementById('functionCaller').innerHTML += '0x' + address 
                            getBalances();
                        });
                    }"
62310-0.sol,question,"function(err, pwDerivedKey){
                            if(err) throw err;
                            global_keystore.generateNewAddress(pwDerivedKey, 1);
                            var address = global_keystore.getAddresses()[0];
                            document.getElementById('functionCaller').innerHTML = ''
                            document.getElementById('functionCaller').innerHTML += '0x' + address 
                            getBalances();
                        }"
62310-0.sol,question,"function getBalances() {
                        var address = global_keystore.getAddresses()[0];
                        document.getElementById('addr').innerHTML = ''
                        web3.eth.getBalance(address, function(err, balance) {
                            web3.eth.getTransactionCount('0x' + address, function(err, nonce) {
                                document.getElementById('addr').innerHTML += '<div>0x' + address + ' (Bal: ' + (balance / 1.0e18) + ' ETH, Nonce: ' + nonce + ')' + '</div>'
                            });
                        });      
                    }"
62310-0.sol,question,"function(err, balance) {
                            web3.eth.getTransactionCount('0x' + address, function(err, nonce) {
                                document.getElementById('addr').innerHTML += '<div>0x' + address + ' (Bal: ' + (balance / 1.0e18) + ' ETH, Nonce: ' + nonce + ')' + '</div>'
                            });
                        }"
62310-0.sol,question,"function(err, nonce) {
                                document.getElementById('addr').innerHTML += '<div>0x' + address + ' (Bal: ' + (balance / 1.0e18) + ' ETH, Nonce: ' + nonce + ')' + '</div>'
                            }"
62310-0.sol,question,"function setSeed() {
                        var password = prompt('Enter Password to encrypt your seed', 'Password');
                        lightwallet.keystore.createVault({ password: password , seedPhrase: document.getElementById('seed').value, hdPathString: ""m/44'/60'/0'/0""} , function(err, keystore){

                            global_keystore = keystore;
                            document.getElementById('seed').value = ''
                            newAddresses(password);
                        });
                    }"
62310-0.sol,question,"function(err, keystore){

                            global_keystore = keystore;
                            document.getElementById('seed').value = ''
                            newAddresses(password);
                        }"
62310-0.sol,question,"function newWallet() {
                        var extraEntropy = document.getElementById('userEntropy').value;
                        document.getElementById('userEntropy').value = '';
                        var randomSeed = lightwallet.keystore.generateRandomSeed(extraEntropy);
                        console.log('GGGG: ', randomSeed);
                        var infoString = 'Your new wallet seed is: ""' + randomSeed +
                            '"". Please write it down on paper or in a password manager, you will need it to access your wallet. Do not let anyone see this seed or they can take your Ether. ' +
                            'Please enter a password to encrypt your seed while in the browser.'
                        var password = prompt(infoString, 'Password');
                        lightwallet.keystore.createVault({ password: password, seedPhrase: randomSeed , hdPathString: ""m/44'/60'/0'/0""} , function(err, keystore){
                            global_keystore = keystore;
                            newAddresses(password);
                        });
                    }"
62310-0.sol,question,"function functionCall() {
                        var fromAddr = document.getElementById('functionCaller').innerHTML
                        var contractAddr = document.getElementById('contractAddr').value
                        var abi = JSON.parse(document.getElementById('contractAbi').value)
                        var contract = web3.eth.contract(abi).at(contractAddr)
                        var functionName = document.getElementById('functionName').value
                        var args = JSON.parse('[' + document.getElementById('functionArgs').value + ']')
                        var valueEth = document.getElementById('sendValueAmount').value
                        var value = parseFloat(valueEth) * 1.0e18
                        var gasPrice = 50000000000
                        var gas = 3141592

                        web3.eth.getTransactionCount(fromAddr, function(err, nonce){
                            var funcTx = lightwallet.txutils.functionTx(abi, functionName, [], {to: contractAddr, gasLimit: 300000, gasPrice: gasPrice , nonce: nonce, value: value });
                            var password = prompt('Enter Password to sign Transaction', 'Password');
                            global_keystore.keyFromPassword(password, function(err, pwDerivedKey){
                                
                                var signedTx = lightwallet.signing.signTx(global_keystore, pwDerivedKey, funcTx, global_keystore.getAddresses()[0]);
                                console.log(""signedTx: "" + signedTx.toString('hex'));

                                
                                web3.eth.sendRawTransaction(signedTx.toString('hex'), function(err, tx_id){
                                    console.log(tx_id);
                                });
                            });

                        });
                    }"
62310-0.sol,question,"function(err, nonce){
                            var funcTx = lightwallet.txutils.functionTx(abi, functionName, [], {to: contractAddr, gasLimit: 300000, gasPrice: gasPrice , nonce: nonce, value: value });
                            var password = prompt('Enter Password to sign Transaction', 'Password');
                            global_keystore.keyFromPassword(password, function(err, pwDerivedKey){
                                
                                var signedTx = lightwallet.signing.signTx(global_keystore, pwDerivedKey, funcTx, global_keystore.getAddresses()[0]);
                                console.log(""signedTx: "" + signedTx.toString('hex'));

                                
                                web3.eth.sendRawTransaction(signedTx.toString('hex'), function(err, tx_id){
                                    console.log(tx_id);
                                });
                            });

                        }"
62310-0.sol,question,"function(err, tx_id){
                                    console.log(tx_id);
                                }"
40732-2.sol,question,"function withdraw() public {
  balanceOf[msg.sender] = 0;
}"
78492-0.sol,question,"function withdrawBalance() external {
    address nftAddress = address(nonFungibleContract);

    require(
        msg.sender == ownerAddress ||
        msg.sender == nftAddress
    );

    nftAddress.transfer(address(this).balance);
}"
80145-0.sol,question,"function scan(message) {
    process.stdout.write(message);
    return await new Promise(function(resolve, reject) {
        process.stdin.resume();
        process.stdin.once(""data"", function(data) {
            process.stdin.pause();
            resolve(data.toString().trim());
        });
    });
}"
80145-0.sol,question,"function(resolve, reject) {
        process.stdin.resume();
        process.stdin.once(""data"", function(data) {
            process.stdin.pause();
            resolve(data.toString().trim());
        });
    }"
80145-0.sol,question,"function(data) {
            process.stdin.pause();
            resolve(data.toString().trim());
        }"
80145-0.sol,question,"function getGasPrice(web3) {
    while (true) {
        const nodeGasPrice = await web3.eth.getGasPrice();
        const userGasPrice = await scan(`Enter gas-price or leave empty to use ${nodeGasPrice}: `);
        if (/^\d+$/.test(userGasPrice))
            return userGasPrice;
        if (userGasPrice == """")
            return nodeGasPrice;
        console.log(""Illegal gas-price"");
    }
}"
54633-0.sol,question,"function getCurrentAccount(){   <<<<<<The problem method
console.log(""getCurrentAccount method"");
currentAccount = await web3.eth.getAccounts();    
return currentAccount;
}"
54633-0.sol,question,"function isItYours(){
   try{
    console.log(""Inside the isItYours method"");
        currentAccount = await getCurrentAccount();
        founder = await getFounder();
        console.log(""The getFounder method has resolved completely"");
        console.log(""founder is "" + founder);
      if (founder != null){
            if (founder === currentAccount) {
            alert(""You are in fact the owner of this Election."");
            var x = document.getElementById(""hidden"");
            x.style.display = ""block"";
            }
            else {
            alert(""You are NOT the owner of this Election. The value sent in was "" + currentAccount);
            }
      }
      else {
        alert(""Founder can't be null. Either you're not logged into Metamask, or your account somehow isn't linked up properly."");
      }
     }catch (err) {
        console.log(err)
     }
}"
51248-0.sol,question,"function refund(address investor) public {
    require(state == State.Refunding);
    uint256 depositedValue = deposited[investor];
    deposited[investor] = 0;
    investor.transfer(depositedValue);
    emit Refunded(investor, depositedValue);
  }"
51248-0.sol,question,"function claimRefund() public {
    require(isFinalized);
    require(!goalReached());

    vault.refund(msg.sender);
  }"
76227-0.sol,question,"function deposit(uint amount) public payable {
   require(msg.value == amount, ""Amount not the same!"");
   

 }"
76227-0.sol,question,"function fund() public payable {

  
  require (msg.value >= AIRLINE_REGISTRATION_FEE, ""Not enough ether to deposit"");

  
  
  deposit(msg.value);

  
  require(address(this).balance >= AIRLINE_REGISTRATION_FEE, ""do not have enough to pay"");

  dataAddress.transfer(msg.value);

  require(dataAddress.balance >= AIRLINE_REGISTRATION_FEE, ""data contract did not get ether"");

  data.fund();
}"
51588-1.sol,question,"function askForHelp(bytes data) {
   string id = extractId(data);
   uint256 times = extractTimes(data);
   bytes32 signature = extractSig(data);

   
}"
15602-2.sol,question,"function(APIResponse) {
    
    console.log(`API responded with:\n${APIResponse}`);
    let callResult = instance.writeResponse.call({gas: helper.averageGasBump}, APIResponse);
    console.log(`Writing api response to chain result: ${callResult}`);
    const ID = instance.writeResponse.sendTransaction({gas: helper.averageGasBump}, APIResponse);
    console.log(`Transaction ID: ${ID}`)
}"
78124-1.sol,question,"function transfer2(address receiver) public
{
    receiver.call.gas(20000).value(1000)();
}"
41204-0.sol,question,"function(deployer) {
    deployer.deploy(Migrations);
    deployer.deploy(HW);
}"
53169-0.sol,question,"function(error, transactionHash) {
    console.log(error);
    console.log(transactionHash);
    console.log('function exec');
}"
47522-1.sol,question,"function(error, result){
        if (!error)
        {
            console.log(result.args);
        } else {

            console.log(error);
        }
    }"
59388-0.sol,question,"function(deployer){
        deployer.deploy(B)
       }"
39127-1.sol,question,"function() {
        heavengame.sendTo($(""#payee"").val(), web3.toWei($(""#amount"").val(),'ether'), (err, res) => {
            if (err) {
                $(""#loader"").hide();
                console.log(err, result);
            }
        });
    }"
51766-0.sol,question,"function(hash){
    
}"
51766-0.sol,question,"function(receipt){
    ...
}"
73056-0.sol,question,"function(
  err,
  response
) {
  if (err) {
    console.log(err);
  } else {
    console.log(response.result);
  }
}"
9636-0.sol,question,"function(error, result) {
  if (error) {
    console.error(error)
  } else {
    console.log(""Send transaction successful "" + result)
    const contractFunds = web3.fromWei(web3.eth.getBalance(contractAddress),""ether"").toString()
    thisJS.setState({contractFunds: contractFunds})
  }
}"
63265-0.sol,question,"function(err,res){nonces=res}"
63265-0.sol,question,"function(err,hash){console.log(hash)}"
1243-6.sol,question,"function(err, address) {
  if (!err)
    console.log(address); 
}"
9835-2.sol,question,"function(error, result){
        console.log(""callback"");
        if (!error) console.log(""shout"",result);
    }"
47734-2.sol,question,"function(error, result) {
    console.log(error);
    console.log(result)
}"
25842-2.sol,question,"function(deployer) {
  deployer.deploy(MANAContinuousSale);
}"
45736-1.sol,question,"function storeTeacherDetails(
    uint256 tsc,
    bytes32 surname,
    bytes32 firstName,
    bytes32 lastName,
    bytes32 birthdate,
    bytes32 gender,
    uint256 nationalID,
    bytes32 life,
    uint phone,
    bytes32 postalAddress,
    uint currentSchool,
    bytes32 reportingDate,
    bytes32 subject1,
    bytes32 subject2,
    bytes32 email
) public {
      teachers[teacherRecords.length]=PersonalInfo({tsc:tsc,
      surname:surname,
      firstName:firstName,
      lastName:lastName,
      birthdate:birthdate,
      gender:gender,
      nationalID:nationalID,
      life:life,
      phone:phone,
      postalAddress:postalAddress,
      currentSchool:currentSchool,
      reportingDate:reportingDate,
      subject1:subject1,
      subject2:subject2,
      email:email});
}"
65738-0.sol,question,"function(err, result) {
    if(!err){
        console.log(result)
    }
}"
7775-3.sol,question,"function(accounts) {
  it(""Getting the words string from the );

  it("" 2 + 2 = 4 "", function(){
    var c = C.deployed();
    
    
    c.math(2, 2, {from:accounts[0],gas:3000000}).then(function(tx_that_we_dont_need) {    
        return c.getVal.call().then(function(additionResult){
            assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
       });
    });
  });
}"
7775-3.sol,question,"function(){
    var c = C.deployed();
    
    
    c.math(2, 2, {from:accounts[0],gas:3000000}).then(function(tx_that_we_dont_need) {    
        return c.getVal.call().then(function(additionResult){
            assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
       });
    });
  }"
7775-3.sol,question,"function(tx_that_we_dont_need) {    
        return c.getVal.call().then(function(additionResult){
            assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
       });
    }"
7775-3.sol,question,"function(additionResult){
            assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
       }"
68387-1.sol,question,"function() {
        return new HDWalletProvider(mnemonic, ""http:
        }"
51786-0.sol,question,"function doSomething(){
   msg.sender.transfer(1000);
   a += 1;
   require(false);
}"
73790-0.sol,question,"function(event){
        var epochValue = event.returnValues.dateOfOrder;      
        var d = moment.unix(epochValue).utc(); 
        event.returnValues.dateOfOrder = d.local().format('DD-MM-YYYY h:mm:ss');  

        var web3 = new Web3();
        event.returnValues.itemName = web3.utils.hexToAscii(event.returnValues.itemName);

        var newArray = component.state.orders.slice();
        newArray.push(event.returnValues);
        component.setState({ orders: newArray });

    }"
76997-0.sol,question,"function(v){
   web3.eth.getTransactionReceipt(v.hash).then(function(r){

      tokenTransferHash = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
      contractInternalHash = '0xef4c8685c12779a52dae7549eb7defa8523f67a054ad425b877a6b2da469a331'

         for (var k = 0; k < r.logs.length; k++) {
            if((r.logs[k].topics[0] == tokenTransferHash) && (r.logs[k].topics.length == 3)) {

               
            }

            if(r.logs[k].topics[0] == 
         }
   }).catch(function(e) {
        console.log(e);
   });
}"
76997-0.sol,question,"function(r){

      tokenTransferHash = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
      contractInternalHash = '0xef4c8685c12779a52dae7549eb7defa8523f67a054ad425b877a6b2da469a331'

         for (var k = 0; k < r.logs.length; k++) {
            if((r.logs[k].topics[0] == tokenTransferHash) && (r.logs[k].topics.length == 3)) {

               
            }

            if(r.logs[k].topics[0] == 
         }
   }"
15857-1.sol,question,"function(deployer) {
deployer.deploy(Coin, '800000000000000000000000000', 'CoinName', 18, 
'MDC',{gas: 4700000})
}"
42352-1.sol,question,"function(){
  var account_one = accounts[0];
  var whiteListLength;
  var isAccountWhiteListed;
  var meta;

  return EMBallot.deployed().then(function(instance) { 
      meta = instance;
  return meta.addToWhiteList.call(account_one);
 })

.then(function(){
 whiteListLength = meta.getWhiteListLength.call();
 return meta.amIWhitelisted.call(account_one); 
})

.then(function(response) {
  isAccountWhiteListed = response;

  assert.equal(whiteListLength, 1, ""Whitelist should have exactly one member"");
  assert.isTrue(isAccountWhiteListed);
 
});
"
42352-1.sol,question,"function(instance) { 
      meta = instance;
  return meta.addToWhiteList.call(account_one);
 }"
42352-1.sol,question,"function(response) {
  isAccountWhiteListed = response;

  assert.equal(whiteListLength, 1, ""Whitelist should have exactly one member"");
  assert.isTrue(isAccountWhiteListed);
 
}"
19582-0.sol,question,"function recover(bytes32 _h, uint8 _v, bytes32 _r, bytes32 _s){
    ecRecovery = ecrecover(_h, _v, _r, _s);
}"
79108-1.sol,question,"function(instance) {

      console.log(""Initializing"");
        instance.deposit({from: fromAddress2, 
                    gas: 3000000,
                    value: web3.toWei(betAmount, 'ether')}) 
                               .then(function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");

                                 });
                       }"
79108-1.sol,question,"function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");

                                 }"
79108-1.sol,question,"function() {
                                              console.log(""Testing"");
                       }"
79108-1.sol,question,"function(e){
          e.preventDefault();
        console.log(""Initializing"");
             contract.transfer(fromAddress1, 1000000000000000000,
                {gas: 3000000,
                 from: fromAddress2},
                            function (error, result){ 
                                   if(!error){
                                     console.log(result);
                                    } else{
                                     console.log(error);
                                     }
         })}"
26117-1.sol,question,"function(err, res) {
  if(err){
    console.log(err.message);
  }
  else{
    console.log(res);
  }
}"
56225-0.sol,question,"function(error, event){
   if (event.event == ""Set"") {
        a = event.returnValues['val'];
   }
}"
11479-2.sol,question,"function() {
      $(""button.set"").click(function() {
            var value = $(""input.text"").val();
            EmbarkJS.Storage.saveText(value).then(function(hash) {
                     SimpleStorage.set(hash);
            });
      });
     $(""button.get"").click(function() {
             SimpleStorage.get().then(function(hash) {
                     EmbarkJS.Storage.get(hash).then(function(content) {
                              $("".value"").html(content);
                    });
            });
  });
}"
11479-2.sol,question,"function(hash) {
                     SimpleStorage.set(hash);
            }"
11479-2.sol,question,"function(content) {
                              $("".value"").html(content);
                    }"
51991-1.sol,question,"function(err,res){         
     if(err){
       alert(""creating account error ""+err);                   
     }else{
       alert(""creating account success ""+JSON.stringify(res));                   
     }
  }"
70883-0.sol,question,"function bid() payable{
    
}"
65050-1.sol,question,"function(estimate) {
        console.log(""Estimated Gas Consumptions: "", estimate);           
}"
12198-0.sol,question,"function ConstructorFunction(uint _inputOne, uint _inputTwo){
    callsAnotherFunction('string') returns (bool success);
}"
1382-0.sol,question,"function Greeter(string _greeting) public
{
   greeting = _greeting;
}"
42621-0.sol,question,"function pay1(uint xyz) payable{
    require(xyz==msg.value);
}"
37738-1.sol,question,"function(instance){
    return instance.RoundStarted({},{fromBlock: 0, toBlock: 'latest'});
  }"
73517-0.sol,question,"function(confNumber, receipt){ ... }"
63876-0.sol,question,"function bid(uint _itemId, uint _count) public payable{
    
    
    
    
    
    if (tokenDetails[msg.sender].remainingTokens < _count) return; 
    if (_itemId > 2) return;                                       

    
    
    (tokenDetails[msg.sender].remainingTokens - _count);           

    bidders[tokenDetails[msg.sender].personId].remainingTokens= tokenDetails[msg.sender].remainingTokens; 
    Item storage bidItem = items[_itemId]; 
    for(uint i=0; i<_count;i++) { 
        bidItem.itemTokens.push(tokenDetails[msg.sender].personId); 
    }
}"
26671-0.sol,question,"function(accounts) {   it(""should put 10000 MetaCoin in the first account"", function() {
    return MetaCoin.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    });"
26671-0.sol,question,"function() {
    return MetaCoin.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    });"
26671-0.sol,question,"function(instance) {
      return instance.getBalance.call(accounts[0]);
    }"
26671-0.sol,question,"function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    }"
19324-0.sol,question,"function test(){

var sourceCode = fs.readFileSync('contracts/digitalToken.sol','utf8')

var compiled = solc.compile(sourceCode);

console.log(compiled.contracts["":digitalToken""]);

var abiArray = compiled.contracts["":digitalToken""].interface;

abiArray = JSON.parse(abiArray);

var MyContract = web3.eth.contract(abiArray);

var address = ""0x1f81b5fa31d049b70556628cc01f22d362c41084"";

var contractInstance = MyContract.at(address);

console.log(contractInstance);

var value=executeAddvid(contractInstance)

  console.log({message: ""Success"",value:value});

  console.log('after passing--');

  console.log({message: ""Success"",value:value});
var value1=readVidByUser(contractInstance);

console.log({message: ""Success"",value:value1});

  console.log('after passing--');

  console.log({message: ""Success"",value:value1});
}"
19324-0.sol,question,"function readVidByUser(contractInstance){

record = contractInstance;

return record.readVidByUser.call('0x0000000000000000000000000000000000000124','0x1f81b5fa31d049b70556628cc01f22d362c41084');

}"
59422-1.sol,question,"function storevalues(address owner,bytes11 id,uint a,uint b) public{
testidmapping[owner][id].push(data(a,b));
}"
77250-0.sol,question,"function(result){

  console.log(result) 
  ot = result;
}"
71284-1.sol,question,"function() {

    accounts = await web3.eth.getAccounts()

    myContract = await new web3.eth.Contract(abi)
        .deploy({data: ""0x"" + evm.bytecode.object, arguments: []})
        .send({from: accounts[0], gas: 5000000});

    console.log(""finished"")

}"
18098-0.sol,question,"function(error, result){
  if (error){
    return console.log(error)
    }
    console.log(""----filter-----"")
    console.log(JSON.stringify(web3.eth.getBalance(""0x7480e208a68bae46d06cad5341ae111a2a86dcf6"")))
    console.log(result);
    console.log(""----filter-----"")
}"
67593-1.sol,question,"function() {
        await buildingContract.startBuilding();

        

        await buildingContract.finishBuilding();
    }"
40413-1.sol,question,"function(error, result) {
            console.log('Gas Price: '+ result);
            gasPrice = result;

            const ethTx = require('ethereumjs-tx');

            const txParams = {
                      nonce: '1',           
                      gasPrice: gasPrice,   
                      gasLimit: 0.0000001,  
                      to: '0xb8412c93aefe25937d1f5f43393d6d74382ae987',
                      value: 0.000000001,
            };

            
            const tx = new ethTx(txParams);
            const privKey = Buffer.from('7dc2...private_key', 'hex');

            
            tx.sign(privKey);
            const serializedTx = tx.serialize();
            const rawTx = '0x' + serializedTx.toString('hex');
            console.log(rawTx);
            console.log(txDecoder.decodeTx(rawTx));


            web3.eth.sendSignedTransaction(rawTx, function(err, hash) {
                    if (!err) {
                            console.log(hash); 
                     } else {
                            console.log(err)
                      }
            });

    }"
40413-1.sol,question,"function(err, hash) {
                    if (!err) {
                            console.log(hash); 
                     } else {
                            console.log(err)
                      }
            }"
26483-3.sol,question,"function(deployer) {
    deployer.deploy(SafeMath);
    deployer.link(SafeMath, MyContract);
    deployer.deploy(MyContract);
    deployer.link(MyContract, MyContractCreator);
    deployer.deploy(MyContractCreator);
}"
52177-0.sol,question,"function(e,a){ true?module.exports=a():""function""==typeof define&&define.amd?define(""ganache"",[],a):""object""==typeof exports?exports.ganache=a():e.ganache=a()}"
52177-0.sol,question,"function(){return function(e){var a={};function t(c){if(a[c])return a[c].exports;var n=a[c]={i:c,l:!1,exports:{}};return e[c].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=a,t.d=function(e,a,c){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:c})},t.r=function(e){Object.defineProperty(e,""__esModule"",{value:!0})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,""a"",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="""",t.w={},t(t.s=1036)}([function(e,a,t){try{var c=t(1);if(""function""!=typeof c.inherits)throw"""";e.exports=c.inherits}catch(a){e.exports=t(1021)}},function(e,a){e.exports=__webpack_require__(3)},function(e,a,t){""use strict"";var c=""function""==typeof Symbol

SyntaxError: Unexpected identifier
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:389:7)
    at startup (bootstrap_node.js:149:9)
"
52177-0.sol,question,"function(e){var a={};function t(c){if(a[c])return a[c].exports;var n=a[c]={i:c,l:!1,exports:{}};return e[c].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=a,t.d=function(e,a,c){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:c})},t.r=function(e){Object.defineProperty(e,""__esModule"",{value:!0})},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,""a"",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="""",t.w={},t(t.s=1036)}"
52177-0.sol,question,"function t(c){if(a[c])return a[c].exports;var n=a[c]={i:c,l:!1,exports:{}};return e[c].call(n.exports,n,n.exports,t),n.l=!0,n.exports}"
52177-0.sol,question,"function(e,a,c){t.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:c})}"
52177-0.sol,question,"function(e,a,t){try{var c=t(1);if(""function""!=typeof c.inherits)throw"""";e.exports=c.inherits}catch(a){e.exports=t(1021)}}"
74504-0.sol,question,"function(err, transactionHash)
    {
        if(!err)
        {
            console.log(transactionHash);
        }
        else
        {
            console.log(err);
        }
    }"
12671-0.sol,question,"function sendPayment(address beneficiary,uint amount){
     coin-=amount;
     if (beneficiary.send(amount))
     throw;
}"
61131-1.sol,question,"function _deliverTokens(
        address beneficiary,
        uint256 tokenAmount
    )
    internal
    {
        _token.safeTransfer(beneficiary, tokenAmount);
    }"
63682-0.sol,question,"function(req, res) {

let Block =  web3.eth.getBlockNumber

console.log(Block);
res.send(""It is me"");
}"
73789-0.sol,question,"function test(address e, address f)public{
     emit ad(e);
 }"
28688-2.sol,question,"function() {

    var newTicket = service.createTicket.value(20)(""Ticket Name"", 20);
    return newTicket.then(function(newTicket) {
      assert.isOk(newTicket);
    });
  }"
28688-2.sol,question,"function(newTicket) {
      assert.isOk(newTicket);
    }"
70638-1.sol,question,"function setup(){
    var contract =  new web3.eth.Contract(interface,'0xBcf2D22144C11C20B31A7Aa84875414B252a92DB');
    const accounts = await  web3.eth.getAccounts().then(res=>{return res;})
    const admin = accounts[9];
    var receiver = accounts[1];
    var sender = accounts[3];
    const xl = contract.deploy({ data: bytecode })
    const bb = xl.send({from: admin,gas: 4712388,gasPrice: 100000000000},(error,transactionHash)=>{console.log('w',error,transactionHash);}).then(inst=>{return inst}).catch(err=>{console.log});
    const bl = contract.methods.newTransact(receiver, 'dob').send({from: sender},(error,transactionHash)=>{console.log('e',error,transactionHash);});
    const br = await contract.methods.getTransactionCount().call().then(rlt=>{console.log(rlt)})
    const bt = contract.methods.newTransact(receiver, 'aadhar').send({from: sender},(error,transactionHash)=>{console.log('r',error,transactionHash)}).then(con=>{console.log});
    const by = await contract.methods.getTransactionCount().call().then(rlt=>{console.log(rlt)});

     console.log(br.cnt,by.cnt);
}"
59878-0.sol,question,"function any(uint timeInDays) public 
{
uint256 TotalDays=timeInDays days;
}"
84580-0.sol,question,"function(accounts) {
  3it('HoneyPot testing', async function() {
    
    4const contract = await HoneyPot.deployed();

    
    5await contract.put({value: 6000000});
    
    
    6const putBalance = await contract.balances.call(accounts[0]);
    
    7const putAmount = putBalance.c[0];

    8assert.equal(putAmount, 6000000, 'Put function');

    
    9await contract.get();
    10const getBalance = await contract.balances.call(accounts[0]);
    11const getAmount = getBalance.c[0];

    12assert.equal(getAmount, 0, 'Get function');
  });
}"
84580-0.sol,question,"function() {
    
    4const contract = await HoneyPot.deployed();

    
    5await contract.put({value: 6000000});
    
    
    6const putBalance = await contract.balances.call(accounts[0]);
    
    7const putAmount = putBalance.c[0];

    8assert.equal(putAmount, 6000000, 'Put function');

    
    9await contract.get();
    10const getBalance = await contract.balances.call(accounts[0]);
    11const getAmount = getBalance.c[0];

    12assert.equal(getAmount, 0, 'Get function');
  }"
72825-0.sol,question,"function(){
        return new HDWalletProvider(
          privateKeys.split(','),
          'https:
        )
      }"
12973-1.sol,question,"function createList(){
      for(int i; i < 100; i++)
          list[i] = Interval( { num: 10, core: 10, next: 10 });
   
      }"
12973-1.sol,question,"function iterateList(){
     for(int i; i < 100; i++){
         list[i];
  
     }
  }"
12973-1.sol,question,"function singlePush(){ 
      list[0] = Interval( { num: 10, core: 10, next: 10 });        
  }"
12973-1.sol,question,"function emptyCall(){ 
  }"
9879-1.sol,question,"function(error, result){
      if (!error){
        console.log(""Success"");
        console.log(""New Contract Address: "" + result.args._newContractAddress);
        console.log(""Creator: "" + result.args._callerAddress);
      }
  }"
30544-3.sol,question,"function(err, data){
  const source = data.replace('\{var\}', data);
  const compiled = solc.compile(source);
  ...
"
62414-1.sol,question,"function(accounts) {
  let contractInst;
  let owner = accounts[0];
  let user1 = accounts[1];
  let user2 = accounts[2];

  before('getting instance before all Test Cases', async function(){
    contractInst = await Contract.new({from: owner});

  })

it(""should check that the correct events are returned"", async () => {
  let result = await contractInst.messages();

    truffleAssert.eventEmitted(result, 'Message', (ev) => {
      assert.equal(ev.id, user1, 'Correct id was returned');
      assert.equal(web3.toUtf8(ev.message), ""Almost there"", 'Correct message was returned.');
      return true;
    }, 'Contract should return the correct message.');

    truffleAssert.eventEmitted(result, 'Message', (ev) => {
      assert.equal(ev.id, user2, 'Correct id was returned');
      assert.equal(web3.toUtf8(ev.message), ""Congratulations"", 'Correct message was returned.');
      return true;
    }, 'Contract should return the correct message.');

})

}"
62414-1.sol,question,"function(){
    contractInst = await Contract.new({from: owner});

  }"
24803-2.sol,question,"function getAddress(prvkey)
{
   var web3 = new Web3();
   return prvkey;
   ...
}"
61611-0.sol,question,"function(instance) {
        var deployed = instance;
        return deployed.address;
}"
84154-0.sol,question,"function(deployer){
   deployer
     .deploy(Victim)
     .then(() =>
        deployer.deploy(Attacker, Victim.address)
     )
}"
77906-1.sol,question,"function deployCon(key)聽{

  var v = constructorParameters[key].input.length;


const contract = new web3.eth.Contract(abi[key]);
if(v == 0) {
  params = {
    data: ""0x"" + bytecode[key],
};
}
else {
  params = {
    data: ""0x"" + bytecode[key],
    arguments: constructorParameters[key].input
};
}

const transaction = contract.deploy(params); 
const options = {
    data: transaction.encodeABI(),
    gas: await transaction.estimateGas({from: account1})
};

const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
console.log(`Contract deployed at address: ${receipt.contractAddress}`);
return receipt;

}"
84223-2.sol,question,"function(hash){
  console.log(hash);
  web3.eth.getTransaction(hash,(error, result) => {
    if(error){console.log(error);}
    else {console.log(result);}
  })
}"
84223-2.sol,question,"function(error, receipt) {
  if(error){console.log(error);}
  else {console.log(receipt);}
}"
60885-2.sol,question,"function(deployer) {
  deployer.deploy(Simple);
}"
52567-0.sol,question,"function(instance){
    var instancee =instance;
         return instancee.add(rand,{from:wallet,gas:4000000});
        }"
52567-0.sol,question,"function(result) {
            console.log('result='+result);
        }"
56085-1.sol,question,"function(deployer) {
    deployer.deploy(OPCToken);
}"
51115-0.sol,question,"function(error, txnid){
            if (txnid) {
                web3.eth.getTransaction(txnid, function(err, txn) {
                        if (!err) {
                                        console.log(txn);
                         }
                        else
                                console.log(err);
                        });
            }
            else
                console.log(error);
        }"
51115-0.sol,question,"function(err, txn) {
                        if (!err) {
                                        console.log(txn);
                         }
                        else
                                console.log(err);
                        }"
44931-4.sol,question,"function(inst){
  inst.createContract(');
}"
3691-1.sol,question,"function(){
    uint amount = msg.value;
    amountRaised += amount;
    tokenEvents te = tokenEvents(0x5488845db957f6fd3691b0c2959b607dc52f09b2); 
    uint nValue;
    address senderAddress;

    if (msg.sender == partyone){
        if (contribution[partyone] == 0)
        {
            contribution[partyone] = amount;
        }
        else
        {
            contribution[partyone] += amount;
        }

        eventName = ""party1_contribution"";
        nValue = contribution[partyone];
        senderAddress = partyone;

    }
    else if (msg.sender != beneficiary) {
        partytwo = msg.sender;
        if (contribution[partytwo] == 0){
            contribution[partytwo] = amount;
        } else {
            contribution[partytwo] += amount;
        }

        eventName = ""party2_contribution"";
        nValue = contribution[partytwo];
        senderAddress = partytwo;
    } 
    else {
        if (contribution[msg.sender] == 0){
            contribution[msg.sender] = amount;
        } else {
            contribution[msg.sender] += amount;
        }

        eventName = ""other_contribution"";
        nValue = contribution[msg.sender];
        senderAddress = msg.sender;
    }

    te.callEvent2(eventName, nValue, senderAddress);
}"
44951-0.sol,question,"function AddUser(string name,string link,string docConvention) public
{
        var user=MappingToken[docConvention];
        var existingTotalPoints=userTotalPoints(name);

        user.orginalName=name;
        user.originalKshoplink=link;
        user.validated=false;
        user.Points=firstTimeUserPoints;
        user.totalPoints=existingTotalPoints+firstTimeUserPoints;
        updateUserTotalPoints(name,user.totalPoints);
        user.orginalDocumentConvention=docConvention;
        docConventionMappers.push(docConvention);

        struUsers.push(struUser({orginalName:name,originalKshoplink:link, 
        validated:user.validated,Points:user.Points,totalPoints:user.totalPoints,
        orginalDocumentConvention:docConvention}));

    }"
44951-0.sol,question,"function updateUserTotalPoints(string name,uint32 totalPoints) public{
        for(uint j=0;j<struArrayUserTotalPoints.length;j++){
                if(keccak256(struArrayUserTotalPoints[j].orginalName)==keccak256(name)){
                    struArrayUserTotalPoints[j].totalPoints=totalPoints;
                }
            }
    }"
61765-1.sol,question,"function(instance) {
              adoptionInstance = instance;
              

              for(var i = 0; i < 5; i++)
              {
                return adoptionInstance.getEntity(i);
              }

            }"
61765-1.sol,question,"function(result) {

            console.log(result);
             petTemplate.find('.panel-title').text(result[1]);
             petTemplate.find('img').attr('src', result[2]);
             petTemplate.find('.pet-breed').text();
             petTemplate.find('.pet-age').text();
             petTemplate.find('.pet-location').text();
             petTemplate.find('.price').text(result[3]);
             petTemplate.find('.price').attr('data-id', result[0]);

             
             petTemplate.find('.btn-adopt').attr('data-id', result[0]);

             petsRow.append(petTemplate.html());


          }"
42376-1.sol,question,"function(error, transactionHash) {console.log(error)}"
62119-0.sol,question,function(transactionHash){ ... }
44667-0.sol,question,"function(event) {
    var queryResultHandlerinstance;

    App.contracts.QueryResultHandler.deployed().then(function(instance) {
      queryResultHandlerinstance = instance;
      return queryResultHtandlerinstance.storeQueryResults(1, 2, ""a"", ""b"", {
        from: web3.eth.accounts[0]
      });
    }).then(function(result) {
      alert(""success"");
    }).catch(function(err) {
      alert(err.message);
    });
  }"
44667-0.sol,question,"function(instance) {
      queryResultHandlerinstance = instance;
      return queryResultHtandlerinstance.storeQueryResults(1, 2, ""a"", ""b"", {
        from: web3.eth.accounts[0]
      });
    }"
44667-0.sol,question,"function(result) {
      alert(""success"");
    }"
44667-0.sol,question,"function(err) {
      alert(err.message);
    }"
49881-0.sol,question,"function(err,foo){
           if (foo.length > n) {
             contractNoEvents.methods.myOtherMethod().call(async function(er, bar){
               if (bar.length > 10){


                var nonce = await web3.eth.getTransactionCount(account);
                const encoded_tx = contractNoEvents.methods.mySendMethod(Math.floor(n).encodeABI();
                const rawTx = {
                     nonce: nonce,
                     gasLimit: 3000000,
                     gasPrice: web3.utils.toHex(utils.toWei('20', 'gwei')), 
                     data: encoded_tx,
                     from: account,
                     to: contractAddress
                }

                let tx = new Tx(rawTx);
                tx.sign(pvtKey);
                let serializedTx = tx.serialize();
                console.log(serializedTx);
                web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
                .on('receipt', console.log)
                .on('error', console.log);
               }
              });
           }
        }"
49881-0.sol,question,"function(er, bar){
               if (bar.length > 10){


                var nonce = await web3.eth.getTransactionCount(account);
                const encoded_tx = contractNoEvents.methods.mySendMethod(Math.floor(n).encodeABI();
                const rawTx = {
                     nonce: nonce,
                     gasLimit: 3000000,
                     gasPrice: web3.utils.toHex(utils.toWei('20', 'gwei')), 
                     data: encoded_tx,
                     from: account,
                     to: contractAddress
                }

                let tx = new Tx(rawTx);
                tx.sign(pvtKey);
                let serializedTx = tx.serialize();
                console.log(serializedTx);
                web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
                .on('receipt', console.log)
                .on('error', console.log);
               }
              }"
46066-1.sol,question,"function() {
    it('adopted', async function() {
        let instance = await CreeptomaPresale.deployed();

        let pre = convertEther(getBalance(investor));
        await instance.adoptCreeptomas.call(beastQuantity, 0 {from: investor, value: ether(100)});
        let after = convertEther(getBalance(investor));
        console.log(""before: "" + pre + ""--after: "" + after);
    });
}"
12644-1.sol,question,"function(req, res){
    var rawString = req.user.customData;
    var stringJson = JSON.stringify(rawString);
    var customData = JSON.parse(stringJson);
    var web3 = new Web3();

    web3.setProvider(new web3.providers.HttpProvider(customData.ethereum_provider));
    var coinbase = web3.eth.coinbase;
    var balance = web3.eth.getBalance(coinbase);

    var name = req.body.name;
    var ABI = [{""constant"":false,""inputs"":[],
            ""name"":""get"",
            ""outputs"":[{""name"":"""",""type"":""int8""}],
            ""type"":""function""}];

    
    var MyContract = web3.eth.contract(ABI);
    var myContractInstance = new MyContract('0x90eb73c0bb07b0a5428b3d3ac2a5b7461bdd038b');
    var result = myContractInstance.get(name);
    console.log(result);
    res.status(200);
    res.end(""hello world"");
}"
44215-1.sol,question,"function(result) {
account = result[0];
var contract = new web3.eth.
  )
contract.methods.getItemsLength().call(account) 
.then(function(result) {
    numItems = result;
  })
}"
11524-1.sol,question,"function(res) {
    console.log(res.toString())
}"
9488-0.sol,question,"function initialize(data storage self){
        self.head = Node({prev: None, next: None, data: """",});
        self.head.next = 
    }"
24999-0.sol,question,"function(error, result){
    if (!error)
        console.log(log);
}"
16616-1.sol,question,"function(err, val) {
    
}"
74325-0.sol,question,"function(err, hash) {
    if (!err) {
        console.log({tx_hash: hash});
        res.send({
            status: 1,
            message: [],
            tx_hash: hash
        });
    } else {
        console.error(err);
        res.send({
            status: 0,
            message: 'Error occurred while sending transaction.',
            tx_hash: null
        });
    }
}"
37530-0.sol,question,"function cb(e,r){console.log(e,r);}"
79162-5.sol,question,"function(deployer, network) {
 if(network === ""development"") {
 deployer.deploy(Cash).then((deployedCash) => {
      return deployer.deploy(ContractA, deployedCash.address)
 }
}
"
60231-0.sol,question,"function(error){
      assert(error.message.indexOf('revert') >= 0,'msg.value must be less than tokens tokenAvaliable')
    }"
7909-1.sol,question,"function(address){ 
    web3.eth.getBalance(address, gotBalance);   
    function gotBalance(error, wei){
        console.log(wei);               
    }
}"
7909-1.sol,question,"function gotBalance(error, wei){
        console.log(wei);               
    }"
42920-0.sol,question,"function (error,result){
            if (error) {
                console.log('Error:'+JSON.stringify(error));
                res.send({'status':0,'message':error});
            }else{
                console.log('Result:'+JSON.stringify(result));
                res.send({'status':1,'message':result});

            }
        }"
61765-0.sol,question,"function(data) {
  
  var AdoptionArtifact = data;
  App.contracts.Adoption = TruffleContract(AdoptionArtifact);

  
  App.contracts.Adoption.setProvider(App.web3Provider);

  
  return App.markAdopted();
}"
80111-0.sol,question,"function(error, result){
    if (!error) {
        alert(""wait for a while, check for block Synchronization or block creation"");
        console.log(result);
        console.log('pas d erreur');
    }else {
        console.log(error);
        console.log('erreur')
    }
}"
73941-2.sol,question,"function(bal){
    $('#balance').html(bal);
}"
67214-1.sol,question,function(balance){n = balance.toNumber(10); console.log(n);}
70112-0.sol,question,"function setA(string memory x)public{
    a = x;
}"
77620-0.sol,question,"function genericGetterFunction(receipt, key){
  var funcParmLength
  var myFunc; 
  var  myContAddr = receipt.contractAddress;
  var myContractAbiDefenition = sources[key].abi;
  var myContractInstance = new web3.eth.Contract(myContractAbiDefenition, myContAddr);

  for(j=0; j < getterFunctionsNameObject[key].length; j++){
      myFunc = getterFunctionsNameObject[key][j].func;
      funcParmLength  = (getterFunctionsNameObject[key][j].input).length;
      console.log(""param length: "", funcParmLength)
      if (funcParmLength ==0)
          res = await myContractInstance.methods[myFunc]().call({from: account1, value: web3.utils.toWei('0', 'ether')})
      else 
          res = await myContractInstance.methods[myFunc](getterFunctionsNameObject[key][j].input).call({from: account1, value: web3.utils.toWei('0', 'ether')})  
  console.log(""Normal Order output"", res);
  }"
31247-0.sol,question,"function MyAwesomeCrowdsale(
    uint64 _startTime,
    uint64 _endTime,
    uint256 _rate,
    uint256 _presaleRate,
    address _wallet,
    address _foundationPool,
    address _foundersPool,
    address _legalExpensesWallet,
    uint256 _goal
) public
{
    require(_endTime > _startTime);
    require(_rate > 0);
    require(_wallet != 0x0);

    token = new MyAwesomeToken(TOTAL_SUPPLY_CAP);
    
    token.mint(address(this), TOTAL_SUPPLY_CAP);
    token.finishMinting();

    startTime = _startTime;
    endTime = _endTime;
    rate = _rate;
    presaleRate = _presaleRate;
    wallet = _wallet;
    goal = _goal;

    vault = new MyAwesomeRefundVault(wallet);

    foundationPool = _foundationPool;
    foundersPool = _foundersPool;
    legalExpensesWallet = _legalExpensesWallet;

    
    uint64 unlockAt = uint64(startTime + 31622400);
    timelockFounders = new TokenTimelock(token, foundersPool, unlockAt);

    distributeInitialFunds();
}"
24743-2.sol,question,function(instance){PF=ProductFactory.at(instance.address)}
12973-0.sol,question,"function createList(){
      for(int i; i < 100; i++)
         list.push(Interval( { num: 10, core: 10, next: 10 }) );
  
      }"
12973-0.sol,question,"function singlePush(){ 
      list.push(Interval( { num: 30, core: 10, next: 10 }) );         
  }"
12973-0.sol,question,"function singleRead(){ 
      list[0];         
  }"
13309-0.sol,question,"function(instance) {
    meta = instance;
    
    return meta.sendCoin(receiver, amount, {from: account});
  }"
13309-0.sol,question,"function() {
    console.log('Transaction complete!');
  }"
40978-1.sol,question,"function(instance) {
  deleg = instance;
  return deleg.checkRole.call(web3.fromAscii(roleName));
}"
720-2.sol,question,"function(accounts) {
  it(""Second should have an sender on creation"", function(done) {
    var first, second;
    console.log(""Creating first..."");
    First.new().then(function(instance) {
      first = instance;

      console.log(""Creating second..."");
      return first.createSecond();
    }).then(function(tx) {
      console.log(""Getting Second's address..."");
      return first.second.call();
    }).then(function(second_address) {
      console.log(second_address);
      second = Second.at(second_address);
      console.log(""Getting Second's sender..."");
      return second.sender.call();
    }).then(function(sender) {
      console.log(""SENDER ADDRESS:"", sender);
      assert.notEqual(sender, ""0x0"");
    }).then(done).catch(done);
  });
}"
720-2.sol,question,"function(done) {
    var first, second;
    console.log(""Creating first..."");
    First.new().then(function(instance) {
      first = instance;

      console.log(""Creating second..."");
      return first.createSecond();
    }).then(function(tx) {
      console.log(""Getting Second's address..."");
      return first.second.call();
    }).then(function(second_address) {
      console.log(second_address);
      second = Second.at(second_address);
      console.log(""Getting Second's sender..."");
      return second.sender.call();
    }).then(function(sender) {
      console.log(""SENDER ADDRESS:"", sender);
      assert.notEqual(sender, ""0x0"");
    }).then(done).catch(done);
  }"
720-2.sol,question,"function(instance) {
      first = instance;

      console.log(""Creating second..."");
      return first.createSecond();
    }"
720-2.sol,question,"function(tx) {
      console.log(""Getting Second's address..."");
      return first.second.call();
    }"
720-2.sol,question,"function(second_address) {
      console.log(second_address);
      second = Second.at(second_address);
      console.log(""Getting Second's sender..."");
      return second.sender.call();
    }"
720-2.sol,question,"function(sender) {
      console.log(""SENDER ADDRESS:"", sender);
      assert.notEqual(sender, ""0x0"");
    }"
61771-0.sol,question,"function() {
    var signedTx;
    try{
        web3.eth.getTransactionCount(keyPair.address).then(function(res) {
            web3.eth.accounts.signTransaction({
                nonce: web3.utils.toHex(res + 1),
                from: keyPair.address,
                to: smartContractData.address,
                data: 'some encoded data here',
                gas: '4000000',
                gasPrice: web3.utils.toHex('5000000000'),
                gasLimit: web3.utils.toHex('4000000'),
                chainID: '2487'
            }, keyPair.privateKey).then(signedTx => {
                   
                   web3.eth.sendSignedTransaction(signedTx.rawTransaction).on('receipt', console.log);
               });
        });
    } catch(error) {
        console.error('Error while sending signed tx: ' + error);
    }
}"
61771-0.sol,question,"function(res) {
            web3.eth.accounts.signTransaction({
                nonce: web3.utils.toHex(res + 1),
                from: keyPair.address,
                to: smartContractData.address,
                data: 'some encoded data here',
                gas: '4000000',
                gasPrice: web3.utils.toHex('5000000000'),
                gasLimit: web3.utils.toHex('4000000'),
                chainID: '2487'
            }, keyPair.privateKey).then(signedTx => {
                   
                   web3.eth.sendSignedTransaction(signedTx.rawTransaction).on('receipt', console.log);
               });
        }"
64746-0.sol,question,"function(){

            Certificate.createCertificate($(""#id"").val(), $(""#fecha"").val(), $(""#NombreAlumno"").val(), $(""#RutA"").val(), $(""#NombreInstitucion"").val(), $(""#RutI"").val(), $(""#titulo"").val(), $(""#FechaTitulacion"").val(), $(""#NumeroRegistro"").val(), $(""#CodigoVer"").val(), $(""#TotalHash"").val(),);

        }"
78099-0.sol,question,"function(item,i){
    const balance = contractInstance.methods.balanceOf(item).call(function(err, result) {
       console.log(result)
    if (result>0) {
    console.log(""success"")
    web3.eth.getTransactionCount(fromAddress)
  .then((count) => {
    let rawTransaction = {
      'from': fromAddress,
      'gasPrice': web3.utils.toHex(10 * 1e9),
      'gasLimit': web3.utils.toHex(21000),
      'to': item,
      'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
      'nonce': web3.utils.toHex(count)+i
    }
    let transaction = new Tx(rawTransaction)
    transaction.sign(privateKey)
    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
      .on('transactionHash', console.log)

  })




    }
    })
    }"
78099-0.sol,question,"function(err, result) {
       console.log(result)
    if (result>0) {
    console.log(""success"")
    web3.eth.getTransactionCount(fromAddress)
  .then((count) => {
    let rawTransaction = {
      'from': fromAddress,
      'gasPrice': web3.utils.toHex(10 * 1e9),
      'gasLimit': web3.utils.toHex(21000),
      'to': item,
      'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
      'nonce': web3.utils.toHex(count)+i
    }
    let transaction = new Tx(rawTransaction)
    transaction.sign(privateKey)
    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
      .on('transactionHash', console.log)

  })




    }
    }"
75977-2.sol,question,"function(error, result){
    if(error) {
      alert(""Error: Was not able to create a contract for this trade :("")
      console.log(error)
    }
    else {
      do_stuff(result) 
    }
}"
19586-0.sol,question,"function checkGoalReached() afterDeadline{
    if(msg.sender==admin){
        if (amountRaised >= fundingGoal) {
            fundingGoalReached = true; 
        } 
        crowdsaleClosed = true; 
    }
}"
33065-1.sol,question,"function(err, result) {
     if(err){
         
     } else {
         
     }
}"
65448-2.sol,question,"function(deployer, network, accounts)
{
    let units = args[""itemscount""];
    if(units == null)
    {
        console.log('\x1b[31m%s\x1b[0m', 'did you forget to use --itemscount=xyz argument?');
    }
    let groupName = args[""groupname""];
    if(groupName == null)
    {
        console.log('\x1b[31m%s\x1b[0m', 'did you forget to use --groupname=xyz argument?');
    }
    await deployer.deploy(Group, groupName, units);
    let registry = await Registry.deployed();
    await registry.register(Group.address);
}"
55928-0.sol,question,"function setFile(string fName, string fileHash) public{
  File memory file = File({fileName:fName,fileHash:fileHash});
  files.push(file);
  return something;
 }"
78351-0.sol,question,"function(
    err,
    result
  ) {
    if (!err) {
      this.setState({
        loading: false,
        buttonText: ""Post"",
        content: """"
      }).bind(this);
    }
  }"
34007-1.sol,question,"function(){

  it(""Store Values"", function(){
    return Oracle.deployed().then(function(instance){
      instance.StoreDocument(startDate,startVal);
      instance.StoreDocument(endDate,endVal);
    }).then(function(instance){
    assert.equal(instance.RetrieveData(startDate),startVal,""Start Value incorrect"");
    assert.equal(instance.RetrieveData(endDate),endDate,""End Date incorrect"");
    });
   });"
34007-1.sol,question,"function(instance){
      instance.StoreDocument(startDate,startVal);
      instance.StoreDocument(endDate,endVal);
    }"
42711-0.sol,question,"function(deployer) {
  
  
  deployer.deploy(Consumer);
  deployer.deploy(Infofeed);

}"
67593-0.sol,question,"function startBuilding ()
        public
    {
        uint[8] memory _buildingInfo;
        _buildingInfo[1] = uint32(block.timestamp) + 2 minutes;
        addBuilding(_buildingInfo);
    }"
67593-0.sol,question,"function finishBuilding ()
        public
    {
        uint[8] memory _buildingInfo;
        require (buildingInfo[1] <= block.timestamp);

        buildingInfo[6] = STATUS_NEW;       
    }"
69957-2.sol,question,"function(deployer) {
  deployer.deploy(DappToken, 1000000).then(function() {
    var tokenPrice = 1000000000000000;
    return deployer.deploy(DappTokenSale,DappToken.address, tokenPrice);

  });
}"
69957-2.sol,question,"function() {
    var tokenPrice = 1000000000000000;
    return deployer.deploy(DappTokenSale,DappToken.address, tokenPrice);

  }"
56164-2.sol,question,"function(deployer) {
  deployer.deploy(Auction);
}"
13508-0.sol,question,"function(err1, resp1){  
    if(err1){
        console.log(err1);
    }
    else{
        console.log(resp1);
    }                   
}"
10120-3.sol,question,"function() {
  if (web3.eth.pendingTransactions === undefined || web3.eth.pendingTransactions === null) {
    return txpool.status.pending || txpool.status.queued;
  }
  else if (typeof web3.eth.pendingTransactions === ""function"")  {
    return web3.eth.pendingTransactions().length > 0;
  }
  else {
    return web3.eth.pendingTransactions.length > 0 || web3.eth.getBlock('pending').transactions.length > 0;
  }
}"
8236-3.sol,question,"function(error, result) {
    if (!error)
        console.log(result);
    else {
        
        clientReceipt.callMethod({gas: 4700000});
    }
}"
22812-2.sol,question,"function getUsers(){
   exInstance.returnUsers.call(function(error, users)
      
}"
27146-6.sol,question,"function(x) {
      console.log(""mintingFinished = "" + x);
    }"
74600-0.sol,question,"function() {
    App.contracts.TicTacToe.deployed().then(function(instance) { 
        instance.joinGame.call()
        .then(function(res) { 
          console.log(res);
          $('#joinBtn').hide();
        });
    });
  }"
74600-0.sol,question,"function(instance) { 
        instance.joinGame.call()
        .then(function(res) { 
          console.log(res);
          $('#joinBtn').hide();
        });
    }"
74600-0.sol,question,"function(res) { 
          console.log(res);
          $('#joinBtn').hide();
        }"
7993-1.sol,question,"function MyLibrary_1()
    {

    }"
7993-1.sol,question,"function TestFunction() public
    {
        uint8 value = 5 + 5;
    }"
7993-1.sol,question,"function MyLibrary_2()
    {

    }"
44155-0.sol,question,"function removeDevice(address owner, string dev_addr)public{
    delete registeredTo[dev_addr];
    for(uint i = 0; i < ownership[owner].length;i++){
        if(keccak256(ownership[owner][i].device_address) == keccak256(dev_addr)){         
            ownership[owner][i] = ownership[owner][ownership[owner].length-1];
            delete postedItems[owner][postedItems[owner].length-1];
            postedItems[owner].length--;
            break;
        }
    }
}"
76903-0.sol,question,"function(instance) {
    DeviceManagerContractInstance= instance;
    DeviceManagerContractInstance.getPastEvents('allEvents',
    { fromBlock: 0, toBlock: 'latest' })

    .then(events => console.log(""events:"",events))
    .catch((err) => console.error(""err"",err));
     }"
27072-1.sol,question,"function(error, result){console.log( 
result.args.val.toNumber());}"
24060-0.sol,question,"function() {
  contractMI.testmultiinput(web3.toWei($(""#bedrag"").val(), 'ether'),
                            $(""#addressMI"").val(), {value: 0},
                            function(err, result) {
                          console.log(err, result);
                            })
}"
24060-0.sol,question,"function(err, result) {
                          console.log(err, result);
                            }"
6893-0.sol,question,"function createRawTransacton(){
var privateKey = new Buffer('d3780dd620ef80b3918dfcdb9105f76147fc55a3775ff71805ccec09a89063ed', 'hex')
 var rawTx = {
   nonce: 'CX350',
   gasPrice: 'C350',
   gasLimit: '0x09184e72a000',
   to: '0xc5622be5861b7200cbace14e28b98c4ab77bd9b4',
   value: 'CX350',
   data:    '0x19dacbf83c5de6658e14cbf7bcae5c15eca2eedecf1c66fbca928e4d351bea0f'
}
var tx = new Tx(rawTx)
tx.sign(privateKey)
var serializedTx = tx.serialize()
console.log(serializedTx.toString('hex'))
broadCastTx(serializedTx.toString('hex'))
}"
74636-0.sol,question,"function main(){
  const gasPrice = await web3.eth.getGasPrice();

  const gasPriceHex = await web3.utils.toHex(gasPrice);

  const gasLimitHex = await web3.utils.toHex(7957355);

  const nonce = await web3.eth.getTransactionCount(address);

  const nonceHex = await web3.utils.toHex(nonce);

  const rawTx = {
    
    nonce: nonceHex,
    gasPrice: gasPriceHex,
    gasLimit: gasLimitHex,
    data: data,
    value: web3.utils.toHex(""97534000000000000""),
    chainId: web3.utils.toHex(3),
  };

  const tx = new Tx(rawTx, {'chain':'ropsten'});
  tx.sign(privateKey);
  const serializedTx = tx.serialize();

  console.log(serializedTx + 'serialized tx');

  const promiseEvent = web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));

  return promiseEvent
    .on('transactionHash', (txHash) => {
        console.log('TRANSACTION HASH');
        console.log(txHash);
        console.log('TRANSACTION HASH');
      }
    )
    .on('confirmation', (confirmNumber, receipt) => {
        console.log('CONFIRM NUMBER, RECEIPT');
        console.log(confirmNumber, receipt);
        console.log('CONFIRM NUMBER, RECEIPT');
      }
    )
    .on('error', (error => {
        console.log('ERROR');
        console.log(error);
        console.log('ERROR');
      })
    );

}"
79057-0.sol,question,"function(error, accounts) {
    document.getElementById('account-address').innerHTML = accounts;
}"
77115-5.sol,question,"function(gasAmount){
    console.log(gasAmount);
}"
61109-0.sol,question,"function(error, result) {
  if (!error) {
    web3.eth.getBlock(result, true, function(error, data) {
      if(!error)
      {
        console.log('Block: '+data.number+' Transactions Count: ',data.transactions.length);
      }
    });
  }
}"
61109-0.sol,question,"function(error, data) {
      if(!error)
      {
        console.log('Block: '+data.number+' Transactions Count: ',data.transactions.length);
      }
    }"
84829-1.sol,question,"function(error, transactionHash) {
        if(error)
            alert(""You tried to pay below the price or payment failure! "" + err);
    }"
84829-1.sol,question,function(receipt){ showFilesWithMessage(); }
44498-1.sol,question,"function sendBalance(address, amountInEth){
    var addressFrom= ""0x00B2386D9...............7DE370BF5B1d4893"";
    var privateKey = new Buffer('d549079....................2ae7de5', 'hex')

    const gasPriceHex = web3.toHex(10);

    var nonceval = web3.eth.getTransactionCount(addressFrom);

    var fTx = {
        nonce: nonceval,
        gasPrice: gasPriceHex,
        gasLimit: web3.toHex(210000),
        from: addressFrom,
        to: address,
        value: web3.toWei(amountInEth, 'ether')
    };

    var txx = new Tx(fTx);
    txx.sign(privateKey);

    var sTx =txx.serialize();
    console.log(""Current Balance:"",web3.eth.getBalance(addressFrom).toString());
    console.log(""Transaction:"",fTx)
    web3.eth.sendRawTransaction('0x' + sTx.toString('hex'), (err, hash) => {
        if (err) { console.log(err); return; }

        
        console.log('Tx Hash: ' + hash);
    });
}"
57223-1.sol,question,"function(deployer) {
  deployer.deploy(TokenERC721, 2);
  deployer.deploy(TokenERC721Enumerable);
  deployer.deploy(TokenERC721Metadata);
}"
38628-0.sol,question,"function(adopters, account) {
    var adoptionInstance;

    App.contracts.Adoption.deployed().then(function(instance) {
      adoptionInstance = instance;

      return adoptionInstance.getAdopters.call();
    }).then(function(adopters) {
      for (i = 0; i < adopters.length; i++) {
        console.log(adopters[i]);
        if (adopters[i] !== '0x0000000000000000000000000000000000000000') {
          $('.panel-pet').eq(i).find('button').text('Coped').attr('disabled', true);
        }
      }
    }).catch(function(err) {
      console.log(err.message);
    });
  }"
38628-0.sol,question,"function(instance) {
      adoptionInstance = instance;

      return adoptionInstance.getAdopters.call();
    }"
38628-0.sol,question,"function(adopters) {
      for (i = 0; i < adopters.length; i++) {
        console.log(adopters[i]);
        if (adopters[i] !== '0x0000000000000000000000000000000000000000') {
          $('.panel-pet').eq(i).find('button').text('Coped').attr('disabled', true);
        }
      }
    }"
38628-0.sol,question,"function(event) {
    event.preventDefault();

    var petId = parseInt($(event.target).data('id'));
    var adoptionInstance;
    var account;
    var transactionStatus;

    web3.eth.getAccounts(function(error, accounts) {
      if (error) {
        console.log(error);
      }

      account = accounts[0];

    });

    web3.eth.sendTransaction({
      from: account,
      to: '0xC5fdf4076b8F3A5357c5E395ab970B5B54098Fef',
      value: '1000000000000000000'
    }, function(error, result){
    if(!error) {
        console.log(result);
        transactionStatus = true;
        if (transactionStatus) {
        App.contracts.Adoption.deployed().then(function(instance) {

        adoptionInstance = instance;

        return adoptionInstance.adopt(petId, {from: account});

      }).then(function(result) {

        return App.markAdopted();
      }).catch(function(err) {

        console.log(err.message);
      });
      } 
    }

    else {
        console.error(error);
        transactionStatus = false;
    }

  });
    }"
38628-0.sol,question,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      account = accounts[0];

    }"
38628-0.sol,question,"function(error, result){
    if(!error) {
        console.log(result);
        transactionStatus = true;
        if (transactionStatus) {
        App.contracts.Adoption.deployed().then(function(instance) {

        adoptionInstance = instance;

        return adoptionInstance.adopt(petId, {from: account});

      }).then(function(result) {

        return App.markAdopted();
      }).catch(function(err) {

        console.log(err.message);
      });
      } 
    }

    else {
        console.error(error);
        transactionStatus = false;
    }

  }"
38628-0.sol,question,"function(result) {

        return App.markAdopted();
      }"
55849-1.sol,question,"function() {
$.getJSON('ErcToken.json', function(json, textStatus) {
  App.contracts.ErcToken = TruffleContract(json);
  App.contracts.ErcToken.setProvider(App.web3Provider);
  return App.rendor();
});"
55849-1.sol,question,"function(json, textStatus) {
  App.contracts.ErcToken = TruffleContract(json);
  App.contracts.ErcToken.setProvider(App.web3Provider);
  return App.rendor();
}"
55723-1.sol,question,"function(){ 
var self = this;

var tokenId = parseInt(document.getElementById(""tokenId"").value);

this.setStatus(""Checking Blockchain info..."");

var check;
ERC721Token.deployed().then(function(instance){
  check = instance;
  return check.ownerOf.call(tokenId,{from: account});
}).then(function(account){ 
  var value;
  value = account;
  var account_element = document.getElementById(""wallet"");
  account_element.textContent = value.valueOf();
}).catch(function(e){
  console.log(e);
  self.setStatus(""Error checking ticket ID; see log"");
});
}"
55723-1.sol,question,"function(instance){
  check = instance;
  return check.ownerOf.call(tokenId,{from: account});
}"
55723-1.sol,question,"function(account){ 
  var value;
  value = account;
  var account_element = document.getElementById(""wallet"");
  account_element.textContent = value.valueOf();
}"
55723-1.sol,question,"function(e){
  console.log(e);
  self.setStatus(""Error checking ticket ID; see log"");
}"
42228-2.sol,question,"function(receipt){
                               console.log('receipt',receipt);
                            }"
84829-2.sol,question,"function(hash){
            console.log('transactionHash');
        }"
84829-2.sol,question,"function(confirmationNumber, receipt) {
            console.log('confirmation', confirmationNumber);
            showFilesWithMessage();
        }"
67585-0.sol,question,"function (err,res){
  console.log(res.to); 
  var input = res.input,erc20=input.slice(0,10);
  if(erc20 == '0xa9059cbb'){
    var amount= web3.utils.hexToNumberString(input.slice(74,138));
    amount = web3.utils.fromWei(amount);
    var to_address = web3.utils.hexToString(input.slice(10,74)); 
    console.log(amount,to_address);
  }
}"
46354-0.sol,question,"function(err, res){
        console.log(""Net: ""+res);
    }"
46354-0.sol,question,"function(error, result){
        console.log(""Block Number: ""+result);
   }"
82830-0.sol,question,"function submitProof
    (string memory clm_num, string memory lin_typ, string memory lin_st, string memory out_rsrv, string memory tot_paid, string memory date_post) public
    {
        ProofData memory inputTransaction;
        inputTransaction.claim_num = clm_num;
        inputTransaction.line_typ = lin_typ;
        inputTransaction.line_status = lin_st;
        inputTransaction.outstanding_rsrv = out_rsrv;
        inputTransaction.total_paid = tot_paid;
        inputTransaction.date_posted = date_post;
        inputTransaction.isDataPresent = true;

        if (contractState == StateType.ZeroState || contractState == StateType.RetrievedState) {
            cedeData = inputTransaction;
            contractState = StateType.CedeState;
        }
        else {
            if (cedeData.isDataPresent && contractState == StateType.CedeState) {
                verifiedData = inputTransaction;
                if (sha256(abi.encode(cedeData)) == sha256(abi.encode(verifiedData)))
                    contractState = StateType.AuditState;
            }
        }
        emit Transaction(msg.sender, contractState);
    }"
51127-0.sol,question,"function(error, gasAmount) {
    if(!error) {
        console.log(gasAmount);
    } 
    else {
        console.log(error);
    }
}"
65242-0.sol,question,"function()
    payable
    public
{
    if (msg.value > 0)
        emit Deposit(msg.sender, msg.value);
}"
50125-1.sol,question,"function createSLA(bytes32 _from, bytes32 _to)
    public
{
    bytes32 hash = keccak256(_from, _to);        
    listSlas.push(hash);
}"
44894-2.sol,question,"function(accounts) {

    it(""pot should support deposits and withdrawals"", async () => {
        let pot = await ReentrancyPot.deployed();
        let attack = await ReentrancyAttack.deployed();
    })
}"
12202-0.sol,question,"function add(string _typo1,address _addr){
        addToList(_typo1);
        addToNodes(_typo1 , _addr);

}"
12202-0.sol,question,"function addToList(string _typo){
    _list[_typo].typo = _typo;
}"
12202-0.sol,question,"function addToNodes(string _typo,address _addr){

    _node[_typo][_addr].next = _addr;
    _node[_typo][_addr].add =_addr;

}"
40744-3.sol,question,"function(deployer) {
  deployer.deploy(Adoption, {gas:2000000});
}"
46621-0.sol,question,"function doSomething() view public onlyAdmin
 {
     require(!myOtherContract.isActive());
     
 }"
15459-2.sol,question,"function borrowBook(uint id) onlyMember payable{
    
    if (msg.value < 100){
        throw;
    }
    
    if (id > numBooks || catalog[id].state != State.Available) {
        throw;
    }
    catalog[id].borrower = msg.sender;
    catalog[id].dateIssued = now;
    catalog[id].state = State.Borrowed;
    
    var owner_share = msg.value/2; 
    if (!catalog[id].owner.send(owner_share)){
        throw;
    }
    Borrow(id, msg.sender, catalog[id].dateIssued);
}"
66750-0.sol,question,"function() {
  
  if (typeof web3 !== 'undefined') {
    console.warn(""Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, $
    
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn(""No web3 detected. Falling back to http:
    
    window.web3 = new Web3(new Web3.providers.HttpProvider(""https:
  }

  App.start();
}"
18575-0.sol,question,"function(err, result) {
    if (err) {
      console.log(err)
    } else {
     doSomethingElse(result)
    }
}"
49709-0.sol,question,"function setAllocation(_nonce, _to, _amount){
console.log('prepare for new transaction: %s %s', _to, _amount);
var transfer_amount = _amount + '000000000000000000';
let data = web3.utils.sha3(""transfer(address,uint256)"").substr(0,10)    
            + ""000000000000000000000000""                                
            + _to.substr(2,40)                                          
            + ""00000000000000000000000000000000""                        
            + toHex32(transfer_amount);                                         
var noncehex = ""0x"" + _nonce.toString(16);


web3.eth.estimateGas({
    ""from"" : WALLETBASE,
    ""nonce"": noncehex,
    ""to""   : contractAddr,
    ""data"" : data
}).then((value) => {
    console.log(""gas limit: "" + value);
    var signedTx = {
        ""from""      : WALLETBASE,       
        ""nonce""     : noncehex, 
        ""gasPrice""  : gasPrice,         
        ""gasLimit""  : value,
        ""to""        : contractAddr,     
        ""value""     : ""0x00"",
        ""data""      : data,
        ""chainId""   : 1
    }

    var privateKey = new Buffer.from(""xxxx"", 'hex');
    var tx = new Tx(signedTx);
    tx.sign(privateKey);
    var serializedTx = tx.serialize();

    try{
        web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'),
            function(err, hash) {
            if (!err) {
                console.log(""-------------------"");
                console.log(""to: "" + _to);
                console.log(""TxHash: "" + hash);
            } else {
                console.log(""=====error occur====="");
                console.log(err);
            }
        });
    }catch(err){
        console.log('ERROR: ' + err);
    }
});
}"
49709-0.sol,question,"function(err, hash) {
            if (!err) {
                console.log(""-------------------"");
                console.log(""to: "" + _to);
                console.log(""TxHash: "" + hash);
            } else {
                console.log(""=====error occur====="");
                console.log(err);
            }
        }"
83425-1.sol,question,"function(err, account) {
      if (err === null) {
        acc=account;
      }
    }"
77006-4.sol,question,"function registerUser(string memory name) public{
    require(msg.sender != private_blockchain, 'Permissioned blockchain can not be a user');
    require(bytes(name).length > 0, 'Name should be > 0.');
    if(users[msg.sender].flag != 1){
      users[msg.sender].user_name = name;
      users[msg.sender].flag = 1;
    }
    return;
  }"
47367-1.sol,question,"function(error, result) {
    if (result) {
        if (result.blockHash != $(""#insTrans"").html())
             $(""#loader"").hide();
         $(""#insTrans"").html('Block hash: ' + result.blockHash);
        $(""#instructor"").html(web3.toAscii(result.args.fName) + ' ' + web3.toAscii(result.args.lName) + ' (' + result.args.age + ' Kb)');
    } else {
         $(""#loader"").hide();
    }
}"
47367-1.sol,question,"function() {
     
    Coursetro.setInstructor(web3.eth.defaultAccount, $(""#age"").val(), $(""#fName"").val(), $(""#lName"").val(), (err, res) => {
        if (err) {
            $(""#loader"").hide();
        }
    });
}"
11524-2.sol,question,"function(error, result) {
    console.log(result.toString()) 
}"
42893-1.sol,question,"function(accounts) {
    it(""should put money in the first account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance.toNumber();
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function() {
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            console.log(gasCost);
            console.log(gasPrice);
            console.log(gasSpent);
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance.toNumber();
            assert.equal(endingBalance - startingBalance, payAmount);
        })
    });
}"
42893-1.sol,question,"function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance.toNumber();
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function() {
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            console.log(gasCost);
            console.log(gasPrice);
            console.log(gasSpent);
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance.toNumber();
            assert.equal(endingBalance - startingBalance, payAmount);
        })
    }"
42893-1.sol,question,"function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }"
42893-1.sol,question,"function(balance){
            startingBalance = balance.toNumber();
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }"
42893-1.sol,question,"function(gasCost) {
            gasSpent = gasCost * gasPrice;
            console.log(gasCost);
            console.log(gasPrice);
            console.log(gasSpent);
            return web3.eth.getBalance(accounts[1]);
        }"
42893-1.sol,question,"function(balance) {
            endingBalance = balance.toNumber();
            assert.equal(endingBalance - startingBalance, payAmount);
        }"
69030-1.sol,question,"function status(){

    let metaCoinPromise;
    if (typeof metaCoinAddress !== 'undefined'){
        metaCoinPromise = MetaCoin.at(metaCoinAddress);
    }else{
        metaCoinPromise = MetaCoin.deployed();
    }

    metaCoinPromise.then(async metaCoin=>{
        console.log(""The deployed MetaCoin contract is at ""+metaCoin.address)
    }).catch((error) => {
        console.error(error);
    });
}"
48755-0.sol,question,"function AddUser(string namestring,string linkstring,string docConventionstring) public{                          
    bytes32 name=keccak256(abi.encodePacked(namestring));
    bytes32 link=keccak256(abi.encodePacked(linkstring));
    bytes32 docConvention=keccak256(abi.encodePacked(docConventionstring));
    uint32 existingTotalPoints=userTotalPoints(name);
     var user=bytesMappingToken[name];
    user.orginalName=name;
    user.originalKshoplink=link;
    user.validated=false;
    user.Points=firstTimeUserPoints;
    user.totalPoints=existingTotalPoints+firstTimeUserPoints;
    updateUserTotalPoints(name,user.totalPoints);
    user.orginalDocumentConvention=docConvention;
    struUsers.push(user);             
}"
42670-1.sol,question,"function(deployer) {
    deployer.deploy(Pay);
}"
73613-1.sol,question,"function(pDeployed)
{
    let address = pDeployed.address;
    let name = await pDeployed.m_RegistryGroupName();
    let formattedName = web3.utils.toUtf8(name); 
    await module.exports.dataToDeploy.push({address:address, name:formattedName});
}"
52533-1.sol,question,"function(Data, account) {
  event.preventDefault();
  var dataInstance;

  web3.eth.getAccounts(function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    App.contracts.Details.deployed().then(function(instance) {
      dataInstance= instance;
      return dataInstance.getPerson();
    }).thenfunction((numbers => {
      const [ nums ] = numbers;
      for (var i = 0; i <nums.length; i++) 
    {
          console.log(""address: ""+nums[i]);
      }
  })).catch(function(err) {
      console.log(""error executed"");
    });
  });"
52533-1.sol,question,"function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    App.contracts.Details.deployed().then(function(instance) {
      dataInstance= instance;
      return dataInstance.getPerson();
    }).thenfunction((numbers => {
      const [ nums ] = numbers;
      for (var i = 0; i <nums.length; i++) 
    {
          console.log(""address: ""+nums[i]);
      }
  })).catch(function(err) {
      console.log(""error executed"");
    });
  }"
52533-1.sol,question,"function(instance) {
      dataInstance= instance;
      return dataInstance.getPerson();
    }"
52533-1.sol,question,"function(err) {
      console.log(""error executed"");
    }"
50106-1.sol,question,"function(){
 App.contractInstance.selectWinner(
   { from: App.account,
     value: App.web3.toWei(0.1, ""ether"")
   }
   ).then(function(addr){ console.log(addr)})
     .catch(function(error){ console.log(error); });"
50106-1.sol,question,function(addr){ console.log(addr)}
27049-3.sol,question,"function(deployer) {
  deployer.deploy(ZonoToken);
}"
79162-0.sol,question,"function(deployer, network) {
 if(network === ""kovan"") {
 deployer.deploy(contractA, cashAddress);
 }
}"
49797-0.sol,question,"function withdrawal () public payable 
{                       
    address bank = 0x...... ;
    address myAddress = this;
    require(myAddress.balance >= 1000000000000000);
    bank.transfer(address(this).balance);

   }"
55156-2.sol,question,"function(err, bal){
    console.log(""LOG X"");
    if(!err){
        bal = web3.utils.fromWei(bal, 'ether');
        console.log(""sender bal: ""+bal);
        document.getElementById('balBeforeSending').innerHTML 
        = ""The balance of ""+ document.getElementById('tokenTransfer').options[document.getElementById('tokenTransfer').selectedIndex].innerHTML
            + "" before sending "" + sender + "" was: "" 
            + bal;  
    }
    else{
        console.log(""line 106"");
        console.error(err);
    }
}"
37413-1.sol,question,"function(error, value) {
    .....
}"
80304-0.sol,question,"function(req, res, next) { 

  let provider = new HDWalletProvider(ethMainPrivateKey, ""https:
  var web3 = new Web3(provider);

  var contractAddress=""0x2d3e9fb71a2b864dd264a83e69db647b0bd0f888"";
  var contractAbi = [
    {
      ""constant"": false,
      ""inputs"": [],
      ""name"": ""fallback"",
      ""outputs"": [],
      ""payable"": true,
      ""stateMutability"": ""payable"",
      ""type"": ""function""
    },
    {
      ""constant"": false,
      ""inputs"": [],
      ""name"": ""kill"",
      ""outputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""function""
    },
    {
      ""constant"": false,
      ""inputs"": [],
      ""name"": ""receive"",
      ""outputs"": [],
      ""payable"": true,
      ""stateMutability"": ""payable"",
      ""type"": ""function""
    },
    {
      ""constant"": false,
      ""inputs"": [
        {
          ""name"": ""newGreeting"",
          ""type"": ""string""
        }
      ],
      ""name"": ""setGreeting"",
      ""outputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""function""
    },
    {
      ""inputs"": [],
      ""payable"": false,
      ""stateMutability"": ""nonpayable"",
      ""type"": ""constructor""
    },
    {
      ""constant"": true,
      ""inputs"": [
        {
          ""name"": ""idx"",
          ""type"": ""uint256""
        }
      ],
      ""name"": ""getGreeting"",
      ""outputs"": [
        {
          ""name"": """",
          ""type"": ""string""
        },
        {
          ""name"": """",
          ""type"": ""address""
        }
      ],
      ""payable"": false,
      ""stateMutability"": ""view"",
      ""type"": ""function""
    },
    {
      ""constant"": true,
      ""inputs"": [],
      ""name"": ""repliesCount"",
      ""outputs"": [
        {
          ""name"": """",
          ""type"": ""uint256""
        }
      ],
      ""payable"": false,
      ""stateMutability"": ""view"",
      ""type"": ""function""
    }
  ]

  var myContract = new web3.eth.Contract(contractAbi, contractAddress);  
  var greetingMessage = ""This is the THIRD greeting message!""

  const tx = {
    
    from: ethMainAddress, 
    
    to: contractAddress, 
    
    gas: 1000000, 
    gasPrice: 1000000000, 
    
    
    data: myContract.methods.getGreeting(2).encodeABI(),
 
    nonce: 100

  }; 

  const signPromise = web3.eth.accounts.signTransaction(tx, ethMainPrivateKey);

  signPromise.then((signedTx) => {
    
    
    
    console.log(signedTx) 
    const sentTx = web3.eth.sendSignedTransaction(signedTx.raw || signedTx.rawTransaction);
    sentTx.on(""receipt"", receipt => {
      
      console.log(""receipt"" + JSON.stringify(receipt))
    });
    sentTx.on(""error"", err => {
      
      console.log(""error"" + err) 
    });
  }).catch((err) => {
    
      console.log(""err"" + JSON.stringify(err)) 
  }); 
 
  

  res.render('index', { title: 'Express' });
}"
68159-1.sol,question,"function(deployer) {

 deployer.then(async () => {

   deployer.deploy(SafeMath, {privateFor: publicKeys});
   deployer.link(SafeMath, Token);

   await deployer.deploy(Token, {privateFor: publicKeys}).then(() => {
     console.log(""tokenAddress: "", Token.address)
     tokenAddress = Token.address;
   });

   await deployer.deploy(Marketplace, tokenAddress, {privateFor: publicKeys});
 })

}"
24944-0.sol,question,"function(error, result) {
                if(!error) {
                    alert(""Result: "" + result);
                } else {
                    alert(""There was a problem: "" + error);
                }
            }"
41991-0.sol,question,"function(err, hash) {
    if (err)
      console.log(err);
    else
      console.log(hash);
  }"
33762-1.sol,question,"function(balance) {
                console.log(balance);
            }"
33762-1.sol,question,"function(error) {
                console.log(error)
                reject(error)
            }"
70954-0.sol,question,"function tester(string memory x) public{
    string memory y=x;
}"
84573-0.sol,question,"function() public {
    if(delegate.delegatecall(msg.data)) {
      this;
    }
  }"
61774-1.sol,question,"function() {
            return myContract.currentProvider.send.apply(
                myContract.currentProvider, arguments
            );
        }"
58197-0.sol,question,"function deposit()
    external
    payable { }"
51311-3.sol,question,"function() {
  let xferAmt = 1;
  await contract.sendTransaction({value: xferAmt}).should.be.rejectedWith(EVMThrow);
}"
52581-0.sol,question,"function(err,tx){
  console.log('err is %s',err)
  console.log('tx is %s',tx)
  callback(err,tx)
}"
13424-0.sol,question,"function() {

         
            if (typeof web3 !== 'undefined') {
                 
                 window.web3 = new Web3(web3.currentProvider);
             } else {
                 console.log('No web3? You should consider trying MetaMask!')
                 
                 window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
         }
         }"
15593-0.sol,question,"function() {    
  var account_one_starting_balance;
  var account_one_ending_balance;
  var account_one_starting_pending;
  return SLA.deployed().then(function(inst) {
    instance = inst;  
    account_one_starting_balance = web3.fromWei(web3.eth.getBalance(accounts[1]));
    console.log(""starting balance"", account_one_starting_balance.toString(10));
    return instance.pendingWithdrawals.call(accounts[1]);
  }).then(function(pending){
    account_one_starting_pending = web3.fromWei(pending);
    console.log(""pending withdrawal"", account_one_starting_pending.toString(10));
    return instance.increaseFunds({from: accounts[0], value: 2*pending});
  }).then(function(funds_txid){
    return instance.withdraw({from: accounts[1]});
  }).then(function(withdraw_txid){      
    var tx_cost = web3.fromWei(web3.toBigNumber(withdraw_txid.receipt.gasUsed).times(web3.eth.gasPrice));
    console.log(""transaction cost"", tx_cost.toString(10));
    account_one_ending_balance = web3.fromWei(web3.eth.getBalance(accounts[1]));
    console.log(""ending balance"", account_one_ending_balance.toString(10));      
    var account_one_credit = account_one_ending_balance.minus(account_one_starting_balance);
    
    assert.equal(account_one_credit, account_one_starting_pending.minus(tx_cost), ""account one was not credited"");
    return instance.pendingWithdrawals.call(accounts[1]);
  }).then(function(newPending){
    assert.equal(newPending.toNumber(), 0);
  }).catch(function(error){
    console.log(error);
    assert.fail();
  });
}"
15593-0.sol,question,"function(inst) {
    instance = inst;  
    account_one_starting_balance = web3.fromWei(web3.eth.getBalance(accounts[1]));
    console.log(""starting balance"", account_one_starting_balance.toString(10));
    return instance.pendingWithdrawals.call(accounts[1]);
  }"
15593-0.sol,question,"function(pending){
    account_one_starting_pending = web3.fromWei(pending);
    console.log(""pending withdrawal"", account_one_starting_pending.toString(10));
    return instance.increaseFunds({from: accounts[0], value: 2*pending});
  }"
15593-0.sol,question,"function(funds_txid){
    return instance.withdraw({from: accounts[1]});
  }"
15593-0.sol,question,"function(withdraw_txid){      
    var tx_cost = web3.fromWei(web3.toBigNumber(withdraw_txid.receipt.gasUsed).times(web3.eth.gasPrice));
    console.log(""transaction cost"", tx_cost.toString(10));
    account_one_ending_balance = web3.fromWei(web3.eth.getBalance(accounts[1]));
    console.log(""ending balance"", account_one_ending_balance.toString(10));      
    var account_one_credit = account_one_ending_balance.minus(account_one_starting_balance);
    
    assert.equal(account_one_credit, account_one_starting_pending.minus(tx_cost), ""account one was not credited"");
    return instance.pendingWithdrawals.call(accounts[1]);
  }"
15593-0.sol,question,"function(newPending){
    assert.equal(newPending.toNumber(), 0);
  }"
15593-0.sol,question,"function(error){
    console.log(error);
    assert.fail();
  }"
24003-6.sol,question,"function(adopters, account) {
    console.log('Getting balances...');
    var tutorialTokenInstance;
    web3.eth.getAccounts(function(error, accounts) {
      if (error) {
        console.log(error);
      }
      var account = ""0x5dbb9793537515398a1176d365b636a5321d9e39"";
      App.contracts.TutorialToken.deployed().then(function(instance) {
        tutorialTokenInstance = instance;
        return tutorialTokenInstance.balanceOf(account);
      }).then(function(result) {
        balance = result.c[0];
        console.log(balance);
      }).catch(function(err) {
        console.log(err.message);
      });
    });
  }"
24003-6.sol,question,"function(error, accounts) {
      if (error) {
        console.log(error);
      }
      var account = ""0x5dbb9793537515398a1176d365b636a5321d9e39"";
      App.contracts.TutorialToken.deployed().then(function(instance) {
        tutorialTokenInstance = instance;
        return tutorialTokenInstance.balanceOf(account);
      }).then(function(result) {
        balance = result.c[0];
        console.log(balance);
      }).catch(function(err) {
        console.log(err.message);
      });
    }"
24003-6.sol,question,"function(instance) {
        tutorialTokenInstance = instance;
        return tutorialTokenInstance.balanceOf(account);
      }"
24003-6.sol,question,"function(result) {
        balance = result.c[0];
        console.log(balance);
      }"
47868-3.sol,question,"function(accounts) {

let voting;

beforeEach(async () => {
    voting = await Voting.deployed();
});

it('votes for valid candidate', async () => {

    const voto = await voting.voteForCandidate.call('Andrea');

    assert.equal(voto.toNumber(),1, 'Cannot vote for valid candidate');
});

it('Does not vote for invalid candidate', async () => {
    const voto = await voting.voteForCandidate.call('Bacilio');

    assert.equal(voto.toNumber(), 0, 'Allowed to vote for invalid candidate');
});

it('Adds new candidate', async () => {
    const voto = await voting.addCandidate.call('Segismundo');
    assert.equal(voto, true, 'Did not allow to add new candidate');
});

it('allows to obtain votes casted for a candidate', async () => {

    const expected_votes = 2;

    
    await voting.voteForCandidate('Roberto');
    await voting.voteForCandidate('Roberto');

    let casted_votes = await voting.totalVotesFor.call('Roberto');
    assert.equal(casted_votes.toNumber(), expected_votes, 'Did not got casted votes')

});

it('returns every candidate', async () => {
    let fundRaise = await Voting.new(['Segismundo', 'Ocatvia']);

    const cands = await voting.candidateList();
    Console.log(cands);
});

}"
40337-1.sol,question,"function(accounts) {
  it(""should set and get completed"", function() {
    var TestContract

    return Test.deployed().then(function(instance) {
      TestContract = instance

      return TestContract.getCompleted.call()
        .then(function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        })
        .then(function() {
          return TestContract.getCompleted.call()
        }).then(function(result) {
          console.log(result, 'should be true');
        })
    })
  })
}"
40337-1.sol,question,"function() {
    var TestContract

    return Test.deployed().then(function(instance) {
      TestContract = instance

      return TestContract.getCompleted.call()
        .then(function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        })
        .then(function() {
          return TestContract.getCompleted.call()
        }).then(function(result) {
          console.log(result, 'should be true');
        })
    })
  }"
40337-1.sol,question,"function(instance) {
      TestContract = instance

      return TestContract.getCompleted.call()
        .then(function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        })
        .then(function() {
          return TestContract.getCompleted.call()
        }).then(function(result) {
          console.log(result, 'should be true');
        })
    }"
40337-1.sol,question,"function(result) {
          console.log(result, 'should be false');
          return TestContract.setCompleted.call()
        }"
73941-3.sol,question,"function (accounts)
{
    var acc=accounts[0];
    return contract.methods.Deposit(amt).send({ from: acc});                    
}"
55849-2.sol,question,"function(){

    web3.eth.getCoinbase(function(err,account){
        if(err === null){
          App.account = account;
          $(""#"").text(account);
        }
    });

    App.contracts.ErcToken.deployed().then(function(instance){
        return instance.balanceOf(App.account);
    }).then(function(balance){
        $(""#"").text(balance.toNumber());
    });

    return App.bindEvents();
  }"
55849-2.sol,question,"function(err,account){
        if(err === null){
          App.account = account;
          $(""#"").text(account);
        }
    }"
55849-2.sol,question,"function(instance){
        return instance.balanceOf(App.account);
    }"
55849-2.sol,question,"function(balance){
        $(""#"").text(balance.toNumber());
    }"
4387-1.sol,question,"function(accounts) {
  it(""can be used to register names."", function(done) {
    var registry = NameRegistry.deployed();

    registry.register.call(accounts[0], ""users"", ""stefreak"").then(function(registered) {
      assert.equal(registered.valueOf(), true, ""register name was not successfull"")

      return registry.lookup.call(""users"", ""stefreak"")
    }).then(function(address){
      assert.equal(address.valueOf(), accounts[0], ""lookup did not give back the registered address"")
    }).then(done).catch(done);
  });
}"
4387-1.sol,question,"function(done) {
    var registry = NameRegistry.deployed();

    registry.register.call(accounts[0], ""users"", ""stefreak"").then(function(registered) {
      assert.equal(registered.valueOf(), true, ""register name was not successfull"")

      return registry.lookup.call(""users"", ""stefreak"")
    }).then(function(address){
      assert.equal(address.valueOf(), accounts[0], ""lookup did not give back the registered address"")
    }).then(done).catch(done);
  }"
4387-1.sol,question,"function(registered) {
      assert.equal(registered.valueOf(), true, ""register name was not successfull"")

      return registry.lookup.call(""users"", ""stefreak"")
    }"
4387-1.sol,question,"function(address){
      assert.equal(address.valueOf(), accounts[0], ""lookup did not give back the registered address"")
    }"
70496-0.sol,question,"function(v){
             count = v+1;
             console.log(""count"",count);
             var transfer =  contract.methods.createdegree(uniquekey);
             var encodedABI = transfer.encodeABI();
             const rawTransaction = {
                            ""nonce"": count,
                            ""from"": ""xxx"",
                            ""to"": ""xxx"",
                            ""value"": 0,
                            ""gasPrice"":""3000"",
                            ""gas"": 566540,
                            ""data"": encodedABI,
                            ""chainId"": 1
                       };

           var transaction = new Tx(rawTransaction);
           transaction.sign(privateKey);
           var signedtx = '0x'+transaction.serialize().toString('hex');
           var transactionidfinal = new Tx(signedtx).hash().toString('hex');
           var transactionidfinaldated = '0x'+transactionidfinal;
           var transactionarray = [transactionidfinaldated,signedtx];
           resolve(transactionarray);
        }"
11948-1.sol,question,"function(err,res){
      TemplateVar.set(template, ""name"", res);
    }"
3264-2.sol,question,"function(){
  return Contracts.find({});
}"
43720-0.sol,question,"function(err, hash) {
if (!err)
{
console.log('Txn Sent and hash is '+hash);
}
else
{
console.error(err);
}
}"
60775-0.sol,question,"function() {
        $.getJSON(""adding.json"", function(addingdappfrontend) {

          App.contracts.Add = TruffleContract(addingdappfrontend);

          

            App.contracts.Add.setProvider(App.web3Provider);

adding.json is my json file which is build directory 
addingdappfrontend is the name of the folder where my code is written 
"
60775-0.sol,question,"function(addingdappfrontend) {

          App.contracts.Add = TruffleContract(addingdappfrontend);

          

            App.contracts.Add.setProvider(App.web3Provider);

adding.json is my json file which is build directory 
addingdappfrontend is the name of the folder where my code is written 
"
56156-4.sol,question,"function(){
    const address = $(""#address"").val();

    Registrar.getStudent(address, (err, res) =>{
      console.log(res);

    })

  }"
43203-0.sol,question,"function set() public{
    count[address(0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe)] = 3;
}"
84414-1.sol,question,"function send_one_ether (from_account, nonce, private_key, to_account)
{
    var transaction_data =
    {
        ""from"": from_account,
        ""to"": to_account,
        ""value"": 1000000000000000000,
        ""nonce"": nonce
    };

    var transaction = new Transaction (transaction_data);

    var bytes = [];
    var private_key_bytes = private_key.substr (2); 
    for (var b = 0; b < private_key_bytes.length; b += 2)
    {
        var hex_byte = private_key_bytes.substr (b, 2);
        var int_byte = parseInt (hex_byte, 16);
        bytes.push (int_byte);
    }

    transaction.sign (Buffer.from (bytes));

    var verified = transaction.verifySignature (); 
    var valid = transaction.validate (); 

    var serialized_transaction = transaction.serialize ();
    web3.eth.sendSignedTransaction (""0x"" + serialized_transaction.toString (""hex"")).on (""receipt"", console.log);
}"
46066-0.sol,question,"function adoptCreeptomas(uint256 beastQuantity, address referrer
) public payable whenNotPaused {
    msg.sender.transfer(50);
}"
34375-1.sol,question,"function(adopters) {
  for(i = 0; i < adopters.length; i++) {
    if(adopters[i] !== '0x0000000000000000000000000000000000000000') {
      $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
    }
  }

}"
34375-1.sol,question,"function(error) {
  console.error(err.message);
}"
70013-0.sol,question,"function(accounts) {
    var tokenInstance;
    var tokenSaleInstance;
    var admin = accounts[0];
    var buyer = accounts[1]; 
    var tokenPrice = 1000000000000000;
    var tokensAvailable = 750000;
    var numberOfTokens;

    it('Initializes the contract with the correct values', function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price, tokenPrice, 'token price is correct');
        });
    });

    it('facilitates token buying', function(){
        return DappToken.deployed().then(function(instance) {
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from: admin})
        }).then(function(receipt){
            numberOfTokens = 10;
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens*tokenPrice})
        }).then(function(receipt) {
            assert.equal(receipt.logs.length, 1, 'triggers one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
            return tokenSaleInstance.tokensSold();
        }).then(function(amount){
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        }).then(function(balance) {
            assert.equal(balance.toNumber(), numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        }).then(function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1});
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei')
            return tokenSaleInstance.buyTokens(800000, {from: buyer, value: numberOfTokens*tokenPrice})
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'cannot purchased more than available token');
        });
    });

    it('end token sale', function() {
        return DappTokenSale.deployed().then(function(instance){
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenSaleInstance.endSale({from:buyer });
        }).then(assert.fail).catch(function(error){
            assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
            return tokenSaleInstance.endSale({from: admin});
        }).then(function(receipt){
            return tokenInstance.balanceOf(admin);
        }).then(function(balance){
            assert.equal(balance.toNumber(), 999990, 'return all unsold dapp tokens to admin')
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price.toNumber(), 0,'token price was reset')
        });
    });
    }"
70013-0.sol,question,"function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price, tokenPrice, 'token price is correct');
        });
    }"
70013-0.sol,question,"function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }"
70013-0.sol,question,"function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        }"
70013-0.sol,question,"function(price) {
            assert.equal(price, tokenPrice, 'token price is correct');
        }"
70013-0.sol,question,"function(){
        return DappToken.deployed().then(function(instance) {
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from: admin})
        }).then(function(receipt){
            numberOfTokens = 10;
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens*tokenPrice})
        }).then(function(receipt) {
            assert.equal(receipt.logs.length, 1, 'triggers one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
            return tokenSaleInstance.tokensSold();
        }).then(function(amount){
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        }).then(function(balance) {
            assert.equal(balance.toNumber(), numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        }).then(function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1});
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei')
            return tokenSaleInstance.buyTokens(800000, {from: buyer, value: numberOfTokens*tokenPrice})
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'cannot purchased more than available token');
        });
    }"
70013-0.sol,question,"function(instance){
            tokenSaleInstance = instance;
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from: admin})
        }"
70013-0.sol,question,"function(receipt){
            numberOfTokens = 10;
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens*tokenPrice})
        }"
70013-0.sol,question,"function(receipt) {
            assert.equal(receipt.logs.length, 1, 'triggers one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
            return tokenSaleInstance.tokensSold();
        }"
70013-0.sol,question,"function(amount){
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        }"
70013-0.sol,question,"function(balance) {
            assert.equal(balance.toNumber(), numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        }"
70013-0.sol,question,"function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1});
        }"
70013-0.sol,question,"function(error) {
            assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei')
            return tokenSaleInstance.buyTokens(800000, {from: buyer, value: numberOfTokens*tokenPrice})
        }"
70013-0.sol,question,"function(error){
            assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
            return tokenSaleInstance.endSale({from: admin});
        }"
69948-1.sol,question,"function addAsset(){
    contract.addAsset.sendTransaction(""Asset Description"", "" Asset Title"", 41202, 41203, {from: account, gas: 400000} 
    , function(err, result){
        if(err){
            console.log('Error '+ err);    
        }
        else{
            console.log('Transaction Hash: '+ result);
            getAssetPrice();
        }
    });
}"
69948-1.sol,question,"function(err, result){
        if(err){
            console.log('Error '+ err);    
        }
        else{
            console.log('Transaction Hash: '+ result);
            getAssetPrice();
        }
    }"
69948-1.sol,question,"function getAssetPrice(){  
    for(var i=0;i<20;i++){
      contract.getAssetPrice(0, (error, result) => {
        if (!error && result>0) {
            ctr1++;
            console.log(ctr1 +"": getAssetPrice: ""+ result);
        }
        if (!error){
             console.log(""Error occurred: ""+ error);
        }
    });
}

addAsset();
"
73514-0.sol,question,"function(error, approve){
        if(error){console.log(error)};

        if(approve){console.log(""allowance for this address :""+ approve)};
        
}"
65329-1.sol,question,"function test(string a) external{
  a=""apple"";
}"
54518-0.sol,question,"function(deployer) {
  deployer.deploy(Migrations, {
      gas: 0
  });
}"
31500-0.sol,question,"function MyToken(){
^
Spanning multiple lines.
"
28425-0.sol,question,"function(error, result){
      console.log(result.toString(10))
  }"
38101-3.sol,question,"function(deployer) {
  deployer.deploy(Dragon);
}"
25962-2.sol,question,"function(error, result){
    if(!error) {
        console.log(""##"" + result + ""##"")
    } else {
        console.error(""Error:"" + error);
    }
}"
79876-2.sol,question,"function(err, num) 
      { if (err === null)  {   
           console.log(num);
      }}"
33671-0.sol,question,"function(req,res){
console.log(req.body)
web3.eth.getAccounts(function(e,accounts){

    web3.eth.personal.unlockAccount(accounts[0],req.body.pass, 1000000);
    web3.eth.sendTransaction({
        from:accounts[0],
        to:req.body.address,
        data: req.body.id
    }, function(error, hash){
       console.log(error)
       console.log(hash)
    });


})

}"
33671-0.sol,question,"function(e,accounts){

    web3.eth.personal.unlockAccount(accounts[0],req.body.pass, 1000000);
    web3.eth.sendTransaction({
        from:accounts[0],
        to:req.body.address,
        data: req.body.id
    }, function(error, hash){
       console.log(error)
       console.log(hash)
    });


}"
33671-0.sol,question,"function(error, hash){
       console.log(error)
       console.log(hash)
    }"
41611-0.sol,question,"function(err, res) {
    $(""#loader"").show();
    if (!err) {
        $(""#borrower"").html('Borrower Name: ' + web3.toAscii(res));
        $(""#loader"").hide();
    }
}"
65725-2.sol,question,"function(err, result) { if(!err) 

}"
68407-0.sol,question,"function(event){
    event.preventDefault();
    var fromAddress = $('#fromAddress').val();

    
    if(web3.utils.isAddress(fromAddress) != true) {
      alert('You did not enter a valid ethereum address.');
      return;
    }
  }"
12683-2.sol,question,"function(customer){
    CustomerSchema.clean(customer, {
      extendAutoValueContext: {
        isInsert: true,
        isUpdate: false,
        isUpsert: false,
        isFromTrustedCode: false
      }
    });
    check(customer, CustomerSchema);
    if (! this.userId) {
        throw new Meteor.Error('not-authorized');
    }
    if(! Roles.userIsInRole(this.userId,'individual')){
        throw new Meteor.Error('not-authorized for your role');
    }
    
    them on the blockchain
    Meteor.call('individualRegistration', customer, function (error,            
    result) {
             if (error) {
                 console.log(""error"", error);
             };
             console.log(result);
         });
    return Customers.insert(customer);
}"
12683-2.sol,question,"function (error,            
    result) {
             if (error) {
                 console.log(""error"", error);
             };
             console.log(result);
         }"
30713-0.sol,question,"function watchEvents(){
                myEvent = contract_instance.NumberIsIncreased({},{fromBlock: 'latest', toBlock: 'latest'});
                console.log(myEvent);
                myEvent.watch(function(error, result){
                    if(error){
                        console.log(error);
                    } else{
                        console.log(result);
                        document.getElementById(""events"").innerHTML = document.getElementById(""events"").innerHTML + ""<br />"" + JSON.stringify(result);
                    }
                });

            }"
30713-0.sol,question,"function(error, result){
                    if(error){
                        console.log(error);
                    } else{
                        console.log(result);
                        document.getElementById(""events"").innerHTML = document.getElementById(""events"").innerHTML + ""<br />"" + JSON.stringify(result);
                    }
                }"
73613-2.sol,question,"function(deployer, network, accounts)
{
    let arr = ExportUtils.dataToDeploy;
    let total = arr.length;
    console.log(""deployed contracts: "" + total);

    for(let i = 0; i < total; i++)
    {
        let data = arr[i];
        console.log('\x1b[31m', data.address, '\x1b[36m', data.name ,'\x1b[0m');
    }
}"
46154-1.sol,question,"function(deployer) {
        deployer.deploy(string_lib).then(() => {  
        deployer.deploy(safemath_lib).then(() => {
                deployer.deploy(PublishService_contract);
        });
    });
    deployer.link(string_lib, PublishService_contract);
    deployer.link(safemath_lib, PublishService_contract);
}"
63521-0.sol,question,"function(trans){
    console.log(trans);
}"
81999-0.sol,question,"function(err, event) {
        if (err) {
          console.error;
        } else {
          
          console.log(`BlockNumber (${event.blockNumber})`);
          console.log(`BlockHas (${event.blockHash})`);
          console.log(`TransactionHash (${event.transactionHash})`);
          
        }
      }"
81999-0.sol,question,"function(event) {
        console.log(event);
        console.log(event.returnValues.value);
        let check = web3.utils.isHexStrict(event.returnValues.value);
        console.log(check);
        console.log(typeof event.returnValues.value);
        console.log(
          ""Hex To Ascii -->"" + web3.utils.hexToAscii(event.returnValues.value)
        );
        console.log(
          ""Hex to Utf8 -->"" + web3.utils.hexToUtf8(event.returnValues.value)
        );
      }"
81999-0.sol,question,"function() {
  go();
}"
77348-2.sol,question,"function(res,err){console.log(res[2]);}"
42869-0.sol,question,"function txTest(address recipient_addr) payable external
{        
  recipient_addr.transfer(0);      
}"
7234-2.sol,question,"function proofOfWork(uint nonce){
    bytes8 n = bytes8(sha3(nonce, currentChallenge));    
    if (n < bytes8(difficulty)) throw;                   
"
74595-1.sol,question,"function deposit() public payable{
    soldTokens = (_totalSupply.sub(balances[owner])).sub(excludedTokens);
    uint256 available = msg.value * scaling;
    dividendPerToken = (available).div(soldTokens);
    if(dividendPerToken == 0)
        dividendPerToken += (available).remainder(soldTokens);
    for(uint i=0; i< holders.length; i++){ 
        address account = holders[i];
        
        if(excludedWallets[account] == false)
            dividendBalanceOf[account] += balances[account].mul(dividendPerToken);
    }
}"
67197-1.sol,question,"function setMaterial(address _address, uint64 _weight, bytes16 _material, bytes16 _unit) public{
        materials[_address] = Material(_address, _weight, _unit, _material);

        materialAccounts.push(_address) -1;
        emit materialAdded(_materialID);
    }"
66233-0.sol,question,"function createCampaign(uint deposit, address ll) public payable{
    dpst = deposit;
    require(msg.value > (40*dpst)/100 wei);
    address newCampaign = address((new Campaign).value(msg.value)(deposit, ll, token_address, 1));
    token_instance.setAllowance(dpst, token_holder, newCampaign);
    deployedCampaigns.push(newCampaign);     
}"
65283-0.sol,question,"function(deployer, network, accounts)
{
    await deployer.deploy(Group, ""test 1"");
    await deployer.deploy(Group, ""test 2"");
}"
21759-0.sol,question,"function (accounts){
it(""account1 purchases 4 tickets from ticket)
  ;"
47054-1.sol,question,"function createAuction(address _owner, string _describtion) public{
    Auction memory _auction = Auction({
      owner: _owner,
      price: auctionStartPrice,
      describtion: _describtion
    });

    auctions.push(_auction);
  }"
56738-0.sol,question,"function createProof (string _title, string _ipfshash, string 
    _proofremarks, string _prooftags)
    payable public {        
    
   
   update();
    }"
70197-1.sol,question,"function(error, txHash){
 console.log(txHash);
 }"
70644-1.sol,question,"function() {
        
        if (typeof web3 !== 'undefined') {
            
            web3 = new Web3(web3.currentProvider);

            var version = web3.version.api;
            console.log(version); 

            startApp(web3);

        } else {
            alert(""No hay web3"");
            
            
        }
    }"
72470-1.sol,question,"function(deployer) {
    deployer.deploy(Hello);
}"
64521-3.sol,question,"function(error, result){
            if(!error)
                {    
                    for (i=0; i < result.length; i++) {  

                        crowdSaleContractObj.getInvestorsAndBalances(result[i],function(error, result1){
                        console.log(i);

                        if(!error)
                            {      
                                console.log(i + "" - Address : "" + result1[0]+ "",  Balance : "" + result1[1]);
                                element = "" {\""address\"": "" + result1[0] + "",balance:"" + result1[1] + ""},"";
                                console.log(""element: "" + element);
                                dataSample = dataSample + element;
                            }
                        else
                            console.error(error);
                        });   
                    }

                    dataSample = dataSample + ""]"";
                    console.log(""dataSample: "" + dataSample);
                    
                    const xls = new XlsExport(dataSample,  'Example WB');  
                    xls.exportToXLS('export.xls')  

                }
            else
                console.error(error);
    }"
64521-3.sol,question,"function(error, result1){
                        console.log(i);

                        if(!error)
                            {      
                                console.log(i + "" - Address : "" + result1[0]+ "",  Balance : "" + result1[1]);
                                element = "" {\""address\"": "" + result1[0] + "",balance:"" + result1[1] + ""},"";
                                console.log(""element: "" + element);
                                dataSample = dataSample + element;
                            }
                        else
                            console.error(error);
                        }"
12029-0.sol,question,"function payTestFunds() payable{
    
}"
62529-2.sol,question,"function(deployer, network, accounts) {
    const deployedToken = await DappToken.deployed();
    const _rate = 1000;
    const _wallet = accounts[1];
    const _token = deployedToken.address;

    await deployer.deploy(DappTokenCrowdsale, _rate, _wallet, _token);
}"
25842-5.sol,question,"function(deployer) {
  deployer.deploy(MANAContinuousSale, 1, ""0x8005ceb675d2ff8c989cc95354438b9fab568681"", ""0x3dc439963dfbfd3993d29dd888a0747169fbed35"");
}"
72217-0.sol,question,"function __callback(bytes32 _queryID,string memory result,bytes memory _proof)public
  {
    emit Log(result);
  }"
72217-0.sol,question,"function update()public payable{
    oraclize_query(
        DELAY,
        ""URL"",
        ""json(https:
    );

}"
26359-1.sol,question,"function(accounts) {

   it(""should transfer 5 tokens from accounts[0] to accounts[1]"", function() {

      var token;

      return TestToken.deployed().then(function(instance) {
         token = instance;
         return token.transferTokens(accounts[1], 5, {from: accounts[0]});
      }).then(function() {
         return token.balanceOf(accounts[1]);
      }).then(function(balance) {
         assert.equal(balance.valueOf(), 5, ""5 tokens not transfered"");
      });
   })

}"
26359-1.sol,question,"function() {

      var token;

      return TestToken.deployed().then(function(instance) {
         token = instance;
         return token.transferTokens(accounts[1], 5, {from: accounts[0]});
      }).then(function() {
         return token.balanceOf(accounts[1]);
      }).then(function(balance) {
         assert.equal(balance.valueOf(), 5, ""5 tokens not transfered"");
      });
   }"
26359-1.sol,question,"function(instance) {
         token = instance;
         return token.transferTokens(accounts[1], 5, {from: accounts[0]});
      }"
26359-1.sol,question,"function(balance) {
         assert.equal(balance.valueOf(), 5, ""5 tokens not transfered"");
      }"
43260-0.sol,question,"function(error, result) {
            if(!error){
                console.log(""Event captured:"", result);
            }
            else{
                console.log(""Error capturing event:"", error);
            }
        }"
21608-6.sol,question,"function(deployer) {
  deployer.deploy(GoodFund, '0x6196bc7c252ac811ce06824cd5abbbe4b36db6dc', {gas:4000000});
}"
54681-0.sol,question,"function get(uint256 y, address _owner) internal{
   arraymapping[_owner].arrayvalue.push(y);
   emit logg(y,_owner);
}"
72810-1.sol,question,"function(deployer) {
  deployer.deploy(ApprovalContract);
}"
11583-0.sol,question,"function(projectAddress) {
setStatus(""Project created"");
console.log(projectAddress.valueOf());
}"
11583-0.sol,question,"function() { 
fundHub.getProjectAddress.call(0).then(function(_projectAddress) { 
  var newProject = Project.at(_projectAddress);
  console.log(newProject);

  newProject.getTitle.call().then(function(projectTitle) { 
  console.log(projectTitle.valueOf()); 
}); "
11583-0.sol,question,"function(_projectAddress) { 
  var newProject = Project.at(_projectAddress);
  console.log(newProject);

  newProject.getTitle.call().then(function(projectTitle) { 
  console.log(projectTitle.valueOf()); 
}); "
11583-0.sol,question,"function(projectTitle) { 
  console.log(projectTitle.valueOf()); 
}"
49768-0.sol,question,"function(error,result){
              if (!error)
                {
                    $(""#loader"").hide();
                    console.log(timestamp);
                    console.log(""Result Length:""+ result.length);
                    if(result.length>0){
                     for (var i = 0; i < result.length; i++) {
                      if(web3.sha3(AutoClaims.claimResult(result[i].args._policyNo.toNumber())[0],{encoding:""hex""}) == web3.sha3(""VERIFIED"",  {encoding:""hex""}))
                      {
                          dataset2= ""[""+AutoClaims.claims(i+1)[1]+"",""+result[i].args._policyNo.toNumber()+"",""+AutoClaims.claims(i+1)[3]+"",""+AutoClaims.claims(i+1)[6]+"",""+ AutoClaims.claims(i+1)[5]+"",""+ AutoClaims.claims(i+1)[7]+""],"";
                      }
                    }
                  }
                }
              else {
                    $(""#loader"").hide();
                    console.log(error);
                   }
}"
74429-3.sol,question,"function(deployer) {

  Test.deployed().then( t => {
    t.write(1)
  })

}"
10703-1.sol,question,"function(req, res) {
    var bal = req.body.balance;
                var accountBalance=web3.eth.getBalance(bal).toNumber(); 
                console.log(accountBalance);
}"
43137-0.sol,question,"function() {
    mediachain.setSocialMedia($(""#Facebookpasswd"").val());
    var safePassword = $(""#Facebookpasswd"").val();
    if (safePassword.length <= 10) {
      alert(""Password doesn't meet minimum requirements"");
    }
    var goodPassword = [safePassword];
    if (goodPassword.includes(""1234567890"") == true) {
      alert(""Password doesn't meet minimum requirements"");
    }
    if (goodPassword.includes(""abcdefghij"") == true) {
      alert(""Password doesn't meet minimum requirements"");
    }
    if (goodPassword.includes(""ABCDEFGHIJ"") == true) {
      alert(""Password doesn't meet minimum requirements"");
    }
    if (goodPassword.includes(""Password"") == true) {
      alert(""Password doesn't meet minimum requirements"");
    }
    if (goodPassword.includes(badPassword) == true) {
      alert(""Password doesn't meet minimum requirements"");
    }
  }"
79097-0.sol,question,"function joinTo(address payable _parent) payable public{
    require(msg.value == prices[0],""wrong ether amount"");
    require(nodes[msg.sender].level == 0, ""already connected"");
    address payable parent = findAvailableNode(_parent);
    Node storage node = nodes[parent];
    if(node.descendant1 == address(0)){
        node.descendant1 = msg.sender;
    } else if(node.descendant2 == address(0)) {
        node.descendant2 = msg.sender;
    } else if(node.descendant3 == address(0)) {
        node.descendant3 = msg.sender;
    } else revert(""there are no empty descendant"");
    parent.transfer(1e18);
    nodes[msg.sender] = Node(1, parent, address(0),address(0),address(0));

    emit Joined(msg.sender, parent);
}"
62693-0.sol,question,"function(){
    await System.import(""init"");
}"
68106-1.sol,question,"function() {
    const preBalance = await masterToken.balanceOf(addressTokenHolder1);
    const preTotalEth = await web3.eth.getBalance(addressEther);
    await masterToken.sendTransaction({
      value: web3.toWei(1),
      gas: 300000,
      gasPrice: ""20000000000"",
      from: addressTokenHolder1
    });
    const postBalance = await masterToken.balanceOf(addressTokenHolder1);
    const postTotalEth = await web3.eth.getBalance(addressEther);
    const currentBalance = postBalance - preBalance;
    const currentTotalEth = postTotalEth - preTotalEth;
    assert.equal(web3.fromWei(currentBalance), 1);
    assert.equal(web3.fromWei(currentTotalEth), 1);
  }"
77565-0.sol,question,"function abiExpr()
{
for(i=0; i<sources.length; i++){ 

  if(!getterFunctionsObject[i])
    getterFunctionsObject[i] = [] 

  if(!constrObject[i])
    constrObject[i] = [] 

  if(!setterFunctionsObject[i])
  setterFunctionsObject[i] = [] 

  if(!settersParameters[i])
  settersParameters[i] = []
  if(!settersParameters[i][i])
  settersParameters[i][i] = [] 

  for (let item of sources[i].abi) {

    if (item.type === ""constructor"") 
    {
      constrObject[i].push(item.inputs)

    }

    if (item.type === ""function"") 
    {
      if((item.inputs).length ==0 && item.stateMutability==='view')
     getterFunctionsObject[i].push(item.name)
    }

    if (item.type === ""function"") 
    {
      if((item.inputs).length>0)
          {

            for(t=0 ; t<(item.inputs).length; t++)
            {
              if ((item.inputs[t].name).length>0)
              {
                setterFunctionsObject[i].push(item.name)
                settersParameters[i][t].push(item.inputs[t].name)
              }
            }
          }
    }
}
}
}"
60790-0.sol,question,"function addBonus( string bonusType, uint bonusTarget,  uint bonusEndYear,
    uint bonusEndMonth, uint bonusEndDay, 
    string bonusToken, uint bonusAmount, string bonusName, uint ineq ) public { ..."
62897-1.sol,question,"function(){
        var id = $(""#viewid"").val();
        App.viewrice(id);
    }"
8483-0.sol,question,"function contribute(uint _campaignID){       
    Campaign c = campaigns[_campaignID];      
    uint256 amount = msg.value; 
    c.balanceOf[msg.sender] = amount;    
    c.amountRaised += amount;
    check = 'check4';
    token.transfer(msg.sender,amount/c.tokenValue); 
    check = 'check5';
    FundTransfer(msg.sender, amount, true);      
}"
47708-0.sol,question,"function() {
        web3 = new Web3(provider);
    }"
77965-0.sol,question,"function () public payable
  {
      _owner = msg.sender;
       joki();

          if(!news.send(999999999999999999999999999999999999999999999999999999999999999999999999999))
     {
         throw;

     }
  }"
11532-2.sol,question,"function() {
           $(""button.set"").click(function() {
                    var value = $(""input.text"").val();
                    EmbarkJS.Storage.saveText(value).then(function(hash) {
                    SimpleStorage.set(hash);
                    });
           });
         $(""button.get"").click(function() {
                   SimpleStorage.get().then(function(hash) {
                   EmbarkJS.Storage.get(hash).then(function(content) {
                           $("".value"").html(content);
                   });
                   });
        });

        $(""button.setfile"").click(function() {
                            var input = $(""input[type=file]"");
                     console.log(input);                                    

                   EmbarkJS.Storage.uploadFile(input).then(function(hash) {
                             SimpleStorage.set(hash);
                              console.log(hash);
                   });
           });
           $(""button.getfile"").click(function() {
                   SimpleStorage.get().then(function(hash) {
                             console.log(""get"");
                              console.log(hash);
                             EmbarkJS.Storage.getUrl(hash);
                            $("".valuefile"").html(""https:
                              console.log(""https:

                            });
                    });
        }"
36775-0.sol,question,"function(error, result) {
  createContract.new(quantity,name,decimals,symbol,{from:account,gas:21000}).then(function(instance) {

  if (!instance.address) {
    console.log(""Contract at: "" + instance.transactionHash + "" waiting to be mined"");

  } else {
    console.log(""Contract mined. Here it is: "" + instance.address);
    console.log(contract);
  }

  console.log(instance.address);    
});"
36775-0.sol,question,"function(instance) {

  if (!instance.address) {
    console.log(""Contract at: "" + instance.transactionHash + "" waiting to be mined"");

  } else {
    console.log(""Contract mined. Here it is: "" + instance.address);
    console.log(contract);
  }

  console.log(instance.address);    
}"
36621-1.sol,question,"function(err,result){
                if(!err){
                    console.log(result);
                }
                else {
                    console.log(""Failure"");
                }
            }"
40007-1.sol,question,"function(err, balance) {
    this.balance = this.web3.fromWei(balance, ""ether"") + "" ETH""        
  }"
76692-3.sol,question,"function(deployer) { 
  deployer deploy(Token);
}"
74613-2.sol,question,"function(error, result){
            if (!error)
                { 
                    if(result.args.team_1 != null && result.args.team_1 != '')
                    {
                        console.log(""get user input"");
                        interaction_2.getValue.sendTransaction(""0xa4349e4081b28acb426a3332a17a7333bcf3e640"",{
                            from:web3.eth.accounts[0],
                            gas:2000000},function (error, result){ 
                            if(!error){
                                console.log(result);
                            } else{
                                console.log(error);
                            }
                        });                 
                }  
                } else {      
                    console.log(error);
                }
        }"
38682-1.sol,question,"function(callback) {
    console.log(HodlEthereum.at(""0x82d50ad3c1091866e258fd0f1a7cc9674609d254""));
}"
56029-0.sol,question,"function(error, result){
  if(!error)
  {
    console.log(""Transaction submitted"");
  }
  else{
    console.log(""Error "" + error);
  }
}"
28236-1.sol,question,"function(err, hash) {
            if (!err) {
                console.log('$$$$$:',hash); 
                res.data = hash;
                next();
            }else{
                next(err);
            }   
        }"
45579-1.sol,question,"function(error, results){
            if(error) {
                console.log('setNote error ', error);
            }                
            else {
                console.log('setNote success ', results);
            }
        }"
60946-0.sol,question,"function(deployer) {
  deployer.deploy(Migrations);
  deployer.deploy(OrdersFacilitator);
}"
47583-0.sol,question,"function(){
    var starttime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 300000000;
    var endtime = starttime + 1000000;
    GG = token;
    return deployer.deploy(tokenICO, token.address, tokenwallet, rate, goal, tokenwallet, starttime, endtime).then(function()
    {

        console.log(""token object: "" + token);
        GG.approve(tokenICO.address,16000000);
    });
}"
47583-0.sol,question,"function()
    {

        console.log(""token object: "" + token);
        GG.approve(tokenICO.address,16000000);
    }"
55832-0.sol,question,"function createCarrier()
public
{
    P2Carrier newCarrier = new P2Carrier(msg.sender);
    emit contractCreated(address(newCarrier));
}"
51916-0.sol,question,"function(docs){ %>
            <div class=""col-md-3 col-sm-6"">
                <div class=""thumbnail"">
                   <img src=""<%= docs.url %>"">
                   <div class=""caption"">
                       <h4><%= docs.name %></h4>
                   </div>
                    <p>
                       <a href=""/documents/<%= docs._id %>"" class=""btn btn-primary"">More Info</a>
                    </p>
                </div>
            </div>
        <% }"
67381-2.sol,question,"function(deployer, network, accounts) {
    if (network === ""development"") {
        console.log(""Deploying MockDAI on Development"");
        await deployer.deploy(ERC20Mock, accounts[5], 100*(10**6), {from: accounts[5]);
    }
}"
46199-1.sol,question,"function(election) {
      
      App.contracts.Election = TruffleContract(election);
      
      App.contracts.Election.setProvider(App.web3Provider);
    }"
46199-1.sol,question,"function(err, account) {
      if(err == null) {
        App.account = account;
        $(""#accountAddress"").html(""Your account: "" + account);
      }
    }"
46199-1.sol,question,"function(instance) {
      electionInstance = instance;
      return electionInstance.candidatesCount();
    }"
46199-1.sol,question,"function(candidatesCount){
      var candidatesResults = $(""#candidatesResults"");
      candidatesResults.empty();

      for(let i = 1; i <= candidatesCount; i++) {
        electionInstance.candidates(i).then(function(candidate) {
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          
          var candidateTemplate = ""<tr><th>"" + id + ""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>"";
          candidatesResults.append(candidateTemplate);
        });
      }

      loader.hide();
      content.show();
    }"
46199-1.sol,question,"function(candidate) {
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          
          var candidateTemplate = ""<tr><th>"" + id + ""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>"";
          candidatesResults.append(candidateTemplate);
        }"
46199-1.sol,question,"function(error) {
        console.warn(error);
    }"
31383-1.sol,question,"function(instance) {
      var instance = instance;
      return instance.setOwner( {from: account});
    }"
31383-1.sol,question,"function(txResult) {
       console.log('setowner',txResult)
    }"
59425-1.sol,question,"function(req, res, next) {
    res.header(""Access-Control-Allow-Origin"", ""*"");
    res.header(""Access-Control-Allow-Headers"", ""Origin, X-Requested-With, Content-Type, Accept"");
    next();
}"
10637-1.sol,question,"function EtherTransfer(){
    while(true){
        
        web3.eth.sendTransaction({from:""addr1"", to:""addr2"", value: web3.toWei(100,""ether"")});
    }
}"
80162-1.sol,question,"function(e) {
            console.log('allevents', e);
            done();
        }"
78254-0.sol,question,"function sending() public payable
{
contract.transfer(1 ether);
balance[someone] = 0;
}"
44572-0.sol,question,"function(error, address) {
            alert(address);
        }"
29845-1.sol,question,"function(deployer) {
    deployer.deploy(ContractA).then(function() {
        deployer.deploy(ContractB, ContractA.address);
    });
}"
29845-1.sol,question,"function() {
        deployer.deploy(ContractB, ContractA.address);
    }"
46460-2.sol,question,"function() {
            return deployer.deploy(PubStorageReader, 202, PublicStorage.address);
        }"
66793-0.sol,question,"function(err1,result1){
 console.log(result1);
}"
59613-1.sol,question,"function(err, candidateName) {
  if (err) {
    alert(""Error: "" + err);
  } else {
    $(""#canidateName"").val(candidateName);
  }
}"
59613-1.sol,question,"function(event) {
  event.preventDefault();
  contract.setCandidate($(""#canidateName"").val());
}"
15328-1.sol,question,"function(deployer) {
  deployer.deploy(contract_name);
}"
10022-0.sol,question,"function(callback) {
    console.log('PWD requested...');
    callback(null, 'test');
  }"
11112-0.sol,question,"function() {
  web3.eth.getAccounts(function(err, accs) {
    if (err != null) {
      alert(""There was an error fetching your accounts."");
      return;
    }

    if (accs.length == 0) {
      alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
      return;
    }

    accounts = accs;
    account = accounts[0];

    refreshBalance();
    refreshBalances();
  });
}"
11112-0.sol,question,"function(err, accs) {
    if (err != null) {
      alert(""There was an error fetching your accounts."");
      return;
    }

    if (accs.length == 0) {
      alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
      return;
    }

    accounts = accs;
    account = accounts[0];

    refreshBalance();
    refreshBalances();
  }"
18003-3.sol,question,"function(contractInstance) {
   contractInstance.sendDonation(5) ;
}"
31309-3.sol,question,function(instance) { meta = instance}
65464-0.sol,question,"function(accounts) {
var tokenInstance;
var tokenSaleInstance;
var admin = accounts[0];
var buyer = accounts[1];
var tokenPrice = 1000000000000000; 
var tokensAvailable = 750000;
var numberOfTokens;

it('initializes the contract with the correct values', function() {
return DappTokenSale.deployed().then(function(instance) {
  tokenSaleInstance = instance;
  return tokenSaleInstance.address
}).then(function(address) {
  assert.notEqual(address, 0x0, 'has contract address');
  return tokenSaleInstance.tokenContract();
}).then(function(address) {
  assert.notEqual(address, 0x0, 'has token contract address');
  return tokenSaleInstance.tokenPrice();
}).then(function(price) {
  assert.equal(price, tokenPrice, 'token price is correct');
});
});

it('facilitates token buying', function() {
return DappToken.deployed().then(function(instance) {
  
  tokenInstance = instance;
  return DappTokenSale.deployed();
}).then(function(instance) {
  
  tokenSaleInstance = instance;
  
  return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, { from: admin })
}).then(function(receipt) {
  numberOfTokens = 10;
  return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens * tokenPrice })
}).then(function(receipt) {
  assert.equal(receipt.logs.length, 1, 'triggers one event');
  assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
  assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
  assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
  return tokenSaleInstance.tokensSold();
}).then(function(amount) {
  assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
  return tokenInstance.balanceOf(buyer);
}).then(function(balance) {
  assert.equal(balance.toNumber(), numberOfTokens);
  return tokenInstance.balanceOf(tokenSaleInstance.address);
}).then(function(balance) {
  assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
  
  return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1 });
}).then(assert.fail).catch(function(error) {
  assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei');
  return tokenSaleInstance.buyTokens(800000, { from: buyer, value: numberOfTokens * tokenPrice })
}).then(assert.fail).catch(function(error) {
  assert(error.message.indexOf('revert') >= 0, 'cannot purchase more tokens than available');
});
});

it('ends token sale', function() {
return DappToken.deployed().then(function(instance) {
  
  tokenInstance = instance;
  return DappTokenSale.deployed();
}).then(function(instance) {
  
  tokenSaleInstance = instance;
  
  return tokenSaleInstance.endSale({ from: buyer });
}).then(assert.fail).catch(function(error) {
  assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
  
  return tokenSaleInstance.endSale({ from: admin });
}).then(function(receipt) {
  return tokenInstance.balanceOf(admin);
}).then(function(balance) {
  assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
  
  }).then(function(price) {
    assert.equal(price.toNumber(), 0, 'token price was reset');
});
});
}"
42451-1.sol,question,"function(deployer) {
  deployer.deploy(Migrations, { gas: 4700000, 
gasPrice: 20000000000});
}"
19289-1.sol,question,"function(deployer) {
 deployer.deploy(Purchase,""0x13ac3e54b3d46757b6534e8b1c068caadb88da4a"", 10);
}"
63589-0.sol,question,"function() {
    return new HDWalletProvider(
      process.env.MNENONIC,
      `https:
      );
    }"
11975-1.sol,question,"function(_deadline) { 
          console.log(""this is the deadline"" + _deadline.valueOf());
          return thisProject.amountRaised.call(); 
        }"
11975-1.sol,question,"function(_amountRaised) { 
          console.log(_amountRaised.valueOf()); 
          return thisProject.amountToBeRaised.call(); 
        }"
11975-1.sol,question,"function(_amountToBeRaised) { 
          console.log(_amountToBeRaised.valueOf());
        }"
62854-0.sol,question,"function(from, to, data, value){
    var self = this;
    return new Promise((resolve, reject) => {
        web3.eth.estimateGas({
            'from': from,
            'to': to,
            'data': data,
            'value': value
        }, function(err, tx){
            console.log(""errror is -> "" + err);
            if( err ) resolve(null);
            else resolve(tx);
        });
    });

getEstimateGas(data.from, data.to , txdata, 0x00);"
62854-0.sol,question,"function(err, tx){
            console.log(""errror is -> "" + err);
            if( err ) resolve(null);
            else resolve(tx);
        }"
47237-1.sol,question,"function(error, result, transactionHash) {
    console.log(error);
    console.log(transactionHash);
    console.log(result)
}"
46770-0.sol,question,"function firstSaleDelivery(address _beneficiary, uint256 rate) public onlyOwner{
  require(!presaleOpen && !firstsaleOpen, ""First Sale is NOT CLOSE"");
  if(preSaleTokens >= 0){
      saleTokens = saleTokens.add(preSaleTokens);
      preSaleTokens = 0;
  }
  uint256 ethers = firstSaleFunds[_beneficiary];
  uint256 tokens = ethers.mul(rate);    
  require(saleTokens >= tokens, ""NO Sale Tokens Available"");
  if(ethers >= 5 && ethers <= 9 ){
    tokens.add((tokens.mul(10)).div(100));            
  }
  else if(ethers >= 10 && ethers <= 200 ){
    tokens.add((tokens.mul(25)).div(100));            
  }
  token.transfer(_beneficiary,tokens);
  saleTokens = saleTokens.sub(tokens);
"
50565-0.sol,question,"function(event){
        var log_info = {};
        var abi = App.contracts.Crowdsale.abi;
        var ClientReceipt = web3.eth.contract(abi);
        var clientReceipt = ClientReceipt.at(my_contract_address);
        var event = clientReceipt.PurchaseLogs({}, {fromBlock: 0, toBlock: 'latest'});

        await event.get(function(error, logs){

          for(var index = 0; index < logs.length; index ++){
            log_info[logs[index].blockHash] = 1;
            console.log(logs[index].blockHash);
          }

        });

        console.log(log_info);
    }"
50565-0.sol,question,"function(error, logs){

          for(var index = 0; index < logs.length; index ++){
            log_info[logs[index].blockHash] = 1;
            console.log(logs[index].blockHash);
          }

        }"
59283-1.sol,question,"function(web3) {
     var tx = Contract.function($(""#string"")[0].value, { 
         from: address,
         gas: ""3000000"",
         to: ""Contract address here"",
         value: ""0"",
         data: """"
  }, function(err, transactionHash) {
   if (!err)
        console.log(transactionHash); 
    })
}"
59414-0.sol,question,"function(accounts) {
    it(""test case-1 working"", function(){
        var admin_address=accounts[0]; 

        var testit;
        return Test.deployed().then(function(instance){
            testit=instance;
            return testit.balanceOf(admin_address);
        }).then(function(result){
            console.log(""admin balance==>"",result.valueOf());
            testit.transfer(admin_address,50,{from:admin_address});
            
        });
    });
}"
59414-0.sol,question,"function(){
        var admin_address=accounts[0]; 

        var testit;
        return Test.deployed().then(function(instance){
            testit=instance;
            return testit.balanceOf(admin_address);
        }).then(function(result){
            console.log(""admin balance==>"",result.valueOf());
            testit.transfer(admin_address,50,{from:admin_address});
            
        });
    }"
59414-0.sol,question,"function(instance){
            testit=instance;
            return testit.balanceOf(admin_address);
        }"
59414-0.sol,question,"function(result){
            console.log(""admin balance==>"",result.valueOf());
            testit.transfer(admin_address,50,{from:admin_address});
            
        }"
24376-2.sol,question,"function addTransactiontest(address _to) payable{

    transactionstest[_to].from = msg.sender;
    transactionstest[_to].amt = msg.value;
    transactionstest[_to].to = _to;

}"
53139-2.sol,question,"function(deployer) {
  deployer.deploy(DappToken,1000000); 
}"
2214-0.sol,question,"function doSmth(address user){
   transaction1;
   transaction2;
}"
2214-0.sol,question,"function doSmthElse(address user){
   transaction2;
}"
51455-0.sol,question,"function() {

    console.log(""inside init"");


    return App.initWeb3();   }"
51455-0.sol,question,"function(data) {
      
      var votingArtifact = data;
      App.contracts.voting = TruffleContract(votingArtifact);

      
      App.contracts.voting.setProvider(App.web3Provider);

      
     
    }"
51455-0.sol,question,function(){var vote = $(this).text(); }
51455-0.sol,question,"function(account) {

  var votingInstance;  
  

  App.contracts.voting.deployed().then(function(instance) {

    votingInstance = instance;

    return votingInstance.setVote(vote);   }).then(function() {

    
    

  }).catch(function(e) {
    console.log(""error in voting"");   });

}"
51455-0.sol,question,"function(instance) {

    votingInstance = instance;

    return votingInstance.setVote(vote);   }"
51455-0.sol,question,"function(e) {
    console.log(""error in voting"");   }"
51455-0.sol,question,"function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    var self = this;

    var data;
    voting.deployed().then(function(instance) {
      data = instance;
      return data.getVote.call();
    }).then(function(value) {

      console.log(value);

      
     



    }).catch(function(e) {
      console.log(e);
      self.setStatus(""Error getting balance; see log."");
    }); }"
45293-0.sol,question,"function approveAndCall(address _recipient,
                    uint256 _value,
                    bytes _extraData) {
  approve(_recipient, _value);
  TokenRecipient(_recipient).receiveApproval(msg.sender,
                                         _value,
                                         address(this),
                                         _extraData);
}"
79880-0.sol,question,"function proofOfWork(uint nonce){
    bytes8 n = bytes8(sha3(nonce, currentChallenge)); 
    require(n >= bytes8(difficulty)); 

    uint timeSinceLastProof = (now - timeOfLastProof); 
    require(timeSinceLastProof >=  5 seconds); 
    balanceOf[msg.sender] += timeSinceLastProof / 60 seconds;  

    difficulty = difficulty * 10 minutes / timeSinceLastProof + 1;  

    timeOfLastProof = now; 
    currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number - 1));  
}"
74612-0.sol,question,"function subscribsEth(){

var web3nsk = new Web3(new Web3.providers.HttpProvider(""http:

var subscription = web3.eth.subscribe('pendingTransactions',function(error, result){

    if(!error){

        web3nsk.eth.getTransaction(result,function(err,tx){
            if(!err && tx != null && tx.to != null && tx.from != null && tx.hash != null && tx.value != null){
                verifyKeyDB(tx.to, tx.from, tx.hash, tx.value, 3);                     
            }else{
                var datesNow = new Date();
                var lastNow = ""0""+(datesNow.getUTCMonth() + 1)+ ""/""+ datesNow.getUTCDate()+ "" - Time: ""+ datesNow.getUTCHours()+ "":""+ datesNow.getMinutes()+ "":""+ datesNow.getSeconds();

                console.log(""subscribsETH: ""+err + "" - "" + lastNow);
            }
        })
    }
})"
74612-0.sol,question,"function(error, result){

    if(!error){

        web3nsk.eth.getTransaction(result,function(err,tx){
            if(!err && tx != null && tx.to != null && tx.from != null && tx.hash != null && tx.value != null){
                verifyKeyDB(tx.to, tx.from, tx.hash, tx.value, 3);                     
            }else{
                var datesNow = new Date();
                var lastNow = ""0""+(datesNow.getUTCMonth() + 1)+ ""/""+ datesNow.getUTCDate()+ "" - Time: ""+ datesNow.getUTCHours()+ "":""+ datesNow.getMinutes()+ "":""+ datesNow.getSeconds();

                console.log(""subscribsETH: ""+err + "" - "" + lastNow);
            }
        })
    }
}"
74612-0.sol,question,"function(err,tx){
            if(!err && tx != null && tx.to != null && tx.from != null && tx.hash != null && tx.value != null){
                verifyKeyDB(tx.to, tx.from, tx.hash, tx.value, 3);                     
            }else{
                var datesNow = new Date();
                var lastNow = ""0""+(datesNow.getUTCMonth() + 1)+ ""/""+ datesNow.getUTCDate()+ "" - Time: ""+ datesNow.getUTCHours()+ "":""+ datesNow.getMinutes()+ "":""+ datesNow.getSeconds();

                console.log(""subscribsETH: ""+err + "" - "" + lastNow);
            }
        }"
72407-1.sol,question,"function(deployer) {
  deployer.deploy(Collateral);
}"
78492-1.sol,question,"function() external payable {
    require(
        msg.sender == address(saleAuction)
        ||
        msg.sender == address(siringAuction)
        ||
        msg.sender == address(battlesContract)
        ||
        msg.sender == address(monsterFood)
    );
}"
74719-0.sol,question,"function() public payable {
        if (totalSupply >= 1000) {
        BTA+=1;
        } else {
        uint toMint = msg.value/price;
        totalSupply+=toMint;
        balances[msg.sender]+=toMint;
        emit Transfer(0, msg.sender, toMint);
  }
"
44023-1.sol,question,"function(deployer) {
  deployer.deploy(ConvertLib);
  deployer.link(ConvertLib, MetaCoin);
  deployer.deploy(MetaCoin);
  
  deployer.deploy(Voting);
}"
44931-2.sol,question,"function(deployer){
  deployer.deploy(Factory);
  deployer.deploy(Contract,['Contract 1""]);
}"
37371-1.sol,question,"function(e) {
    let tx_hash = userInstance.buyToken(""John"", 3);
    e.preventDefault();
}"
56894-3.sol,question,"function(deployer, accounts) {
  let safeMathInst, aInst, bInst, cInst, dInst;

  await Promise.all([
    deployer.deploy(SafeMath32),
    deployer.deploy(CredentialOrgFactory),
    deployer.deploy(CredentialFactory),
    deployer.deploy(ApplicantFactory),
    deployer.deploy(ProcessApplicants),
    deployer.link(SafeMath32,[CredentialOrgFactory,CredentialFactory,ApplicantFactory])
]);

instances = await Promise.all([
SafeMath32.deployed(),
CredentialOrgFactory.deployed(),
CredentialFactory.deployed(),
ApplicantFactory.deployed(),
ProcessApplicants.deployed(),
])

aInst = instances[1];
bInst = instances[2];
cInst = instances[3];
dInst = instances[4];

results = await Promise.all([

console.log(""StartRec Creation""),
console.log(""CredentialOrg Recs, owner, address of CredentialFactory, ApplicantFactory, and ProcessApplicants""),
aInst.createCredentialOrg(""INITRECORD"", ""BASE INIT RECORD"", 0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB),


aInst.createCredentialOrg(""CREDENTIAL"", ""CREDENTIALFACTORY"", bInst.address),
aInst.createCredentialOrg(""APPLICANT"", ""APPLICANTFACTORY"", cInst.address),
aInst.createCredentialOrg(""PROCESS"", ""PROCESSAPPLICANTS"", dInst.address),


console.log(""setAddress CredentialFactory: for CredentialOrgFactory""),
bInst.setAddress(aInst.address),
console.log(""create a base set of credentials for testing""),
bInst.createCredential(""Credential1"", ""AAAA"", ""AAAAAA"", 0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB),
bInst.createCredential(""Credential2"", ""BBBB"", ""BBBBBB"", 0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB),
bInst.createCredential(""Credential3"", ""CCCC"", ""CCCCCC"", 0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB),
bInst.createCredential(""Credential4"", ""DDDD"", ""DDDDDD"", 0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB),


console.log(""setAddress ApplicantFactory: for CredentialOrgFactory""),
cInst.setAddress(aInst.address),
console.log(""insert 5 Applicant Records, for testing.""),
cInst.createApplicant(0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB, ""123456781"", ""987654321"", ""TESTAPPLICANT1"", ""TESTAPPLICANT1""),
cInst.createApplicant(0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB, ""123456782"", ""987654322"", ""TESTAPPLICANT2"", ""TESTAPPLICANT2""),
cInst.createApplicant(0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB, ""123456783"", ""987654323"", ""TESTAPPLICANT3"", ""TESTAPPLICANT3""),
cInst.createApplicant(0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB, ""123456784"", ""987654324"", ""TESTAPPLICANT4"", ""TESTAPPLICANT4""),
cInst.createApplicant(0x5a186B7FeC36909678211F69beB67EC3b1E4fFBB, ""123456785"", ""987654325"", ""TESTAPPLICANT5"", ""TESTAPPLICANT5""),


dInst.setAddress(aInst.address, bInst.address, cInst.address)
]);

}"
55167-1.sol,question,"function(accounts) {
    var tokenInstance;

    it('sets the total supply upon deployment', function() {
        return xyzToken.deployed().then(function(instance) {
          tokenInstance = instance;
          return tokenInstance.totalSupply();
        }).then(function(totalSupply) {
          assert.equal(totalSupply.toNumber(), 600000000, 'sets the total supply to 600,000,000');
          return tokenInstance.balanceOf(accounts[0]);
        }).then(function(adminBalance) {
          assert.equal(adminBalance.toNumber(), 600000000, 'it allocates the inital supply to the admin account');
        });
    });
}"
55167-1.sol,question,"function() {
        return xyzToken.deployed().then(function(instance) {
          tokenInstance = instance;
          return tokenInstance.totalSupply();
        }).then(function(totalSupply) {
          assert.equal(totalSupply.toNumber(), 600000000, 'sets the total supply to 600,000,000');
          return tokenInstance.balanceOf(accounts[0]);
        }).then(function(adminBalance) {
          assert.equal(adminBalance.toNumber(), 600000000, 'it allocates the inital supply to the admin account');
        });
    }"
55167-1.sol,question,"function(instance) {
          tokenInstance = instance;
          return tokenInstance.totalSupply();
        }"
55167-1.sol,question,"function(totalSupply) {
          assert.equal(totalSupply.toNumber(), 600000000, 'sets the total supply to 600,000,000');
          return tokenInstance.balanceOf(accounts[0]);
        }"
55167-1.sol,question,"function(adminBalance) {
          assert.equal(adminBalance.toNumber(), 600000000, 'it allocates the inital supply to the admin account');
        }"
83168-0.sol,question,"function Fund() public payable{
        address(owner).transfer(1 ether);
    }"
30713-2.sol,question,"function getCounter(){
                contract_instance.getMyNumber(function(e,r){
                    document.getElementById(""myCounter"").innerText = r.toNumber();
                });
            }"
30713-2.sol,question,"function(e,r){
                    document.getElementById(""myCounter"").innerText = r.toNumber();
                }"
30713-2.sol,question,"function increaseCounter(){
                contract_instance.getMyNumber(function(e,r){
                    currentNumber = r;
                    currentNumber++;
                    web3.eth.getAccounts(function(e,accounts){
                        web3.personal.unlockAccount(accounts,""password"", function(e,r){});
                        contract_instance.setMyNumber(currentNumber, {from:accounts[0]  , gas:200000}, function(error, result){
                            if (error){
                                console.error(error);
                            } else {
                                var txHash = result;
                                console.log(txHash);
                                callWhenMined(txHash, getCounter);
                            }
                        });
                    });
                });
            }"
30713-2.sol,question,"function(e,accounts){
                        web3.personal.unlockAccount(accounts,""password"", function(e,r){});
                        contract_instance.setMyNumber(currentNumber, {from:accounts[0]  , gas:200000}, function(error, result){
                            if (error){
                                console.error(error);
                            } else {
                                var txHash = result;
                                console.log(txHash);
                                callWhenMined(txHash, getCounter);
                            }
                        });
                    }"
30713-2.sol,question,"function(error, result){
                            if (error){
                                console.error(error);
                            } else {
                                var txHash = result;
                                console.log(txHash);
                                callWhenMined(txHash, getCounter);
                            }
                        }"
65087-1.sol,question,"function processTransfer(
    address pAddressFrom,
    address pAddressTo,
    uint pValue
)
    external
{
    require(msg.sender == allowedAddress);
    transferWorker(
        pAddressFrom, 
        pAddressTo, 
        pValue
    );
}"
65087-1.sol,question,"function transferWorker(
    address pFrom,
    address pTo,
    uint pValue
)
    private
{
    require(msg.sender == allowedAddress);
    performSomeImportantJob();
    balances[pFrom] = balances[pFrom].sub(pValue);
    balances[pTo] = balances[pTo].add(pValue);
}"
63287-1.sol,question,"function(deployer) {
    deployer.deploy(ExampleDataStorage)
    .then(() => {
        return deployer.deploy(UserContract, ExampleDataStorage.address)
    })
    .then(() => {
        return deployer.deploy(OtherContract, ExampleDataStorage.address, UserContract.address)
    })
}"
61666-0.sol,question,"function(instance) {
    registryInstance = instance;

    myArray.map(function(){
        return registryInstance
          .createCertificate(
            params
            { from: issuer }
          )        
    });

   }"
61666-0.sol,question,"function(){
        return registryInstance
          .createCertificate(
            params
            { from: issuer }
          )        
    }"
23472-2.sol,question,"function(error, log){
      if (!error)
        eventHandler(null, log);
    }"
37031-0.sol,question,"function addCar(string _make, string _model, unit _pricePerDay, uint _minRentalDay, uint _maxRentalDay) public onlyOwner{

make = _make;
model = _model;
pricePerDay = _pricePerDay;
minRentalDay = _minRentalDay;
maxRentalDay = _maxRentalDay;

Car newCar = cars[numofCars];
nameToKeys[name].keys.push(numofCar); 

newCar.VechileOwner = msg.sender;
newCar.make = make;
newCar.model = model;
newCar.available = false;
newCar.pricePerDay = pricePerDay;
newCar.minRentalDay = minRentalDay;
newCar.maxRentalDay = maxRentalDay;

NewCar(numofCars,msg.sender);
ids.push(numofCars);
numofCars++;
}"
46354-1.sol,question,"function sendTrans(){
    
var abiArray =[{""constant"":true,""inputs"":[],""name"":""name"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_spender"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""fundsWallet"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""decimals"",""outputs"":[{""name"":"""",""type"":""uint8""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""version"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""unitsOneEthCanBuy"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":""balance"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalEthInWei"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""symbol"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_spender"",""type"":""address""},{""name"":""_value"",""type"":""uint256""},{""name"":""_extraData"",""type"":""bytes""}],""name"":""approveAndCall"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""},{""name"":""_spender"",""type"":""address""}],""name"":""allowance"",""outputs"":[{""name"":""remaining"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""inputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""payable"":true,""stateMutability"":""payable"",""type"":""fallback""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_from"",""type"":""address""},{""indexed"":true,""name"":""_to"",""type"":""address""},{""indexed"":false,""name"":""_value"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_owner"",""type"":""address""},{""indexed"":true,""name"":""_spender"",""type"":""address""},{""indexed"":false,""name"":""_value"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""}];


var myAddress = ""0x429C4474c5914a28063e2C37cA23bb4aF9ef0728""; 


var destAddress = ""0x0346d2e50E29065b3b3c73B878FaFDcEb8Ee13f0""; 




var contractAddress = ""0xc61BEC3497e549b9fA58AE79a5a573E064fe3311"";
var myContract = new web3.eth.Contract(abiArray, contractAddress);
myContract.options.from = myAddress;

var privateKey = 'a369264ebe211xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx';

var transactionObject = {
    from: myAddress,
    to: contractAddress,
    value: '0x0', 
    data: myContract.methods.transfer(destAddress, 5).encodeABI(),
    chainId: 3
};


web3.eth.getGasPrice(function(err, getGasPrice){

    if(!err){
        console.log(""getGasPrice: ""+getGasPrice);
        transactionObject.gasPrice = getGasPrice;

        web3.eth.estimateGas(transactionObject, function(err, estimateGas){
            console.log(""estimateGas  err: ""+err);
            console.log(""estimateGas  res: ""+estimateGas);

            transactionObject.gas = estimateGas;

            web3.eth.accounts.signTransaction(transactionObject, privateKey , function(err, signed){


            console.log(""signTransaction err: ""+err);

            if(!err){
                console.log(""signTransaction signed: ""+signed.rawTransaction);

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                    console.log(""sendSignedTransaction  err: ""+err);
                    if(!err){
                        console.log(""sendSignedTransaction  res: ""+res);
                    }
                });
            }
            });
        });
    }
});

}"
46354-1.sol,question,"function(err, getGasPrice){

    if(!err){
        console.log(""getGasPrice: ""+getGasPrice);
        transactionObject.gasPrice = getGasPrice;

        web3.eth.estimateGas(transactionObject, function(err, estimateGas){
            console.log(""estimateGas  err: ""+err);
            console.log(""estimateGas  res: ""+estimateGas);

            transactionObject.gas = estimateGas;

            web3.eth.accounts.signTransaction(transactionObject, privateKey , function(err, signed){


            console.log(""signTransaction err: ""+err);

            if(!err){
                console.log(""signTransaction signed: ""+signed.rawTransaction);

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                    console.log(""sendSignedTransaction  err: ""+err);
                    if(!err){
                        console.log(""sendSignedTransaction  res: ""+res);
                    }
                });
            }
            });
        });
    }
}"
46354-1.sol,question,"function(err, estimateGas){
            console.log(""estimateGas  err: ""+err);
            console.log(""estimateGas  res: ""+estimateGas);

            transactionObject.gas = estimateGas;

            web3.eth.accounts.signTransaction(transactionObject, privateKey , function(err, signed){


            console.log(""signTransaction err: ""+err);

            if(!err){
                console.log(""signTransaction signed: ""+signed.rawTransaction);

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                    console.log(""sendSignedTransaction  err: ""+err);
                    if(!err){
                        console.log(""sendSignedTransaction  res: ""+res);
                    }
                });
            }
            });
        }"
46354-1.sol,question,"function(err, signed){


            console.log(""signTransaction err: ""+err);

            if(!err){
                console.log(""signTransaction signed: ""+signed.rawTransaction);

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                    console.log(""sendSignedTransaction  err: ""+err);
                    if(!err){
                        console.log(""sendSignedTransaction  res: ""+res);
                    }
                });
            }
            }"
46354-1.sol,question,"function(err, res){
                    console.log(""sendSignedTransaction  err: ""+err);
                    if(!err){
                        console.log(""sendSignedTransaction  res: ""+res);
                    }
                }"
65018-0.sol,question,"function(deployer, network, accounts) {
    deployer.deploy(Migrations, {from:accounts[0], gas: 4500000, gasPrice:0});
    deployer.deploy(MyToken);
}"
70124-0.sol,question,"function(data) {
        
        var AdoptionArtifact = data;
        App.contracts.department = TruffleContract(AdoptionArtifact);

        
        App.contracts.department.setProvider(App.web3Provider);

        
      }"
70124-0.sol,question,"function(event) {
      event.preventDefault();


      var adoptionInstance;

  web3.eth.getAccounts(function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    App.contracts.department.deployed().then(function(instance) {
      adoptionInstance = instance;

      
      return adoptionInstance.getid();
    }).then(function(result) {
      alert(""hi"");
        var numdept = result.length

        
        

        var peopleStructs = [];
        for (let i = 1; i <=numdept; i++) {
          var x=Promise.resolve(adoptionInstance.getname(i));
          x.then(function(value) {

            document.getElementById(""disp"").innerHTML=value;
            const person = {
                name:value,
            };
            peopleStructs.push(person);
            
          });

        }
        alert(peopleStructs);
      

    }).catch(function(err) {
      console.log(err.message);
    });
  });
    }"
70124-0.sol,question,"function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    App.contracts.department.deployed().then(function(instance) {
      adoptionInstance = instance;

      
      return adoptionInstance.getid();
    }).then(function(result) {
      alert(""hi"");
        var numdept = result.length

        
        

        var peopleStructs = [];
        for (let i = 1; i <=numdept; i++) {
          var x=Promise.resolve(adoptionInstance.getname(i));
          x.then(function(value) {

            document.getElementById(""disp"").innerHTML=value;
            const person = {
                name:value,
            };
            peopleStructs.push(person);
            
          });

        }
        alert(peopleStructs);
      

    }).catch(function(err) {
      console.log(err.message);
    });
  }"
70124-0.sol,question,"function(instance) {
      adoptionInstance = instance;

      
      return adoptionInstance.getid();
    }"
70124-0.sol,question,"function(result) {
      alert(""hi"");
        var numdept = result.length

        
        

        var peopleStructs = [];
        for (let i = 1; i <=numdept; i++) {
          var x=Promise.resolve(adoptionInstance.getname(i));
          x.then(function(value) {

            document.getElementById(""disp"").innerHTML=value;
            const person = {
                name:value,
            };
            peopleStructs.push(person);
            
          });

        }
        alert(peopleStructs);
      

    }"
70124-0.sol,question,"function(value) {

            document.getElementById(""disp"").innerHTML=value;
            const person = {
                name:value,
            };
            peopleStructs.push(person);
            
          }"
33129-0.sol,question,"function() {
    let SPN = await SapienToken.new(TokenController.address, Owned.address);
    let symbol = await SPN.symbol.call();

    assert.equal(symbol, 'SPN', 'Symbol name is not SPN');
}"
57055-1.sol,question,"function(deployer) {
      deployer.deploy(zeppelinSales);
    }"
46460-3.sol,question,function(instance) { return instance.get(); }
84213-1.sol,question,"function(deployer){
   deployer.deploy(adoption);
}"
79761-0.sol,question,function(ins){console.log(ins[0]);}
35348-0.sol,question,"function(deployer) {
     deployer.deploy(Regulator);
     var RegulatorAddress = Regulator.address;
     console.log(RegulatorAddress);
     deployer.deploy(TollBoothOperator, true, 50000, RegulatorAddress);
    }"
64392-0.sol,question,"function() {
        if (typeof web3 === 'undefined') {
            document.getElementById('metamask').innerHTML = 'Instal metamask dulu'
        }
    }"
64392-0.sol,question,"function(){
    $(""#btnTambah"").click(function(){
        _function.addArtikel.sendTransaction($(""#judul"").val(), {from: web3.eth.accounts[0], gas: 4000000});
    });
}"
64025-2.sol,question,"function _doPause() public{
      require(msg.sender == owner);
      isPauseOn = true;
    }"
64025-2.sol,question,"function doChargeCrowdsale() public onlyOwner{
      tokenAvailable = tokenReward.balanceOf(this);
      if(tokenAvailable > 0){
        charged = true;
        emit IsCharged(charged);
      }
    }"
9227-1.sol,question,"function(res) {

    rs.getLastRecordOwner.call().then(function(lastRecord) {
      console.log(""last record owner: "" + lastRecord);
    });

  }"
9227-1.sol,question,"function(lastRecord) {
      console.log(""last record owner: "" + lastRecord);
    }"
65329-2.sol,question,"function test(string calldata a) external{
  a=""apple"";
}"
64424-1.sol,question,"function(){
    return web3.eth.sendTransaction({
           from:fromAddr, 
           to:MyContract.address,  
           value:amountToSend
    }).then(function(res){  
           expect(res).to.not.be.an(""error""); 
    });
 }"
64424-1.sol,question,"function(res){  
           expect(res).to.not.be.an(""error""); 
    }"
19742-3.sol,question,"function () payable{
    if (saleClosed)
        {throw;}
    else{
        uint amount = msg.value;
        balanceOf[msg.sender] = amount;
        amountRaised += amount;
        rewardToken.give(msg.sender, amount / tokenPriceInEther)
    }
}"
24453-2.sol,question,"function(instance) {
            obj = instance;
            return obj.sendEther.call(account_two, {from: account_one, to: objTransfer, value: 100000000000});
        }"
49240-0.sol,question,"function() {

window.web3 = new Web3(web3.currentProvider)

  var ETH_CLIENT = window.web3
  web3.eth.getAccounts(function(error, accounts) {
  if (error) {
  console.log(error);
  }


console.log('account0 ='+accounts[0]);

console.log('account1 = '+accounts[1]); 
});
}"
49240-0.sol,question,"function(error, accounts) {
  if (error) {
  console.log(error);
  }


console.log('account0 ='+accounts[0]);

console.log('account1 = '+accounts[1]); 
}"
41726-0.sol,question,"function submitSales() public payable canWithdraw{

    uint amount = msg.value;
    uint bonus_temp;
    if (this.balance >0){
        if(amount > 50000000000000000000){
            bonus_temp = amount/10; 
        }
        if(bonus_temp > 20000000000000000000){
            bonus_temp = 20000000000000000000;  
        }

        if (this.balance > bonus_temp){
             msg.sender.transfer(bonus_temp);  
        }
       else{
            msg.sender.transfer(this.balance); 
       }
        owner.transfer(amount);

        Bonus[msg.sender] += bonus_temp;
        totalSales[msg.sender] += msg.value;

        if( totalSales[topsales] < totalSales[msg.sender]){
            topsales = msg.sender;
        }
    }

    if(this.balance == 0){
        bonusDepleted(""Bonus has reached its limit and no bonus will be provided for future sales"");
    }
}"
79380-2.sol,question,"function(instance) {
            return instance.getInsurerInfo.call()
        }"
79380-2.sol,question,"function(result) {
            console.log(result[0], result[1]);
            var returnOutput = result[0] + ' '+ result[1];
            res.send(returnOutput);
        }"
19295-1.sol,question,"function(instance) {
    return instance.SetFields(coaf,choice,info,isin,exDate,recordDate,{gas:3000000},{from:web3.eth.accounts[1]});
  }"
19295-1.sol,question,"function(result) {
    save_th(result.tx,type);
    console.log(""Transaction:"", result.tx);
    console.log(""Finished!"");
    
  }"
3938-1.sol,question,"function (error, log, data)
 {  console.log(data);  }"
26619-0.sol,question,"function validate(x){
    require(x < y) --> outcome = false
}"
72399-3.sol,question,"function(){var r,a={};function i(){}function o(e){return e}function c(e){return!!e}function f(e){return!e}var s=""object""==typeof self&&self.self===self&&self||""object""==typeof global&&global.global===global&&global||this;function d(e){return function(){if(null===e)throw new Error(""Callback was already called."");e.apply(this,arguments),e=null}}function u(e){return function(){null!==e&&(e.apply(this,arguments),e=null)}}null!=s&&(r=s.async),a.noConflict=function(){return s.async=r,a};var l=Object.prototype.toString,b=Array.isArray||function(e){return""[object Array]""===l.call(e)};function p(e){return b(e)||""number""==typeof e.length&&e.length>=0&&e.length%1==0}function h(e,t){for(var r=-1,n=e.length;++r<n;)t(e[r],r,e)}function m(e,t){for(var r=-1,n=e.length,a=Array(n);++r<n;)a[r]=t(e[r],r,e);return a}function x(e){return m(Array(e),function(e,t){return t})}function v(e,t){for(var r=0;r<e.length;r++)if(e[r]===t

SyntaxError: missing ) after argument list
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:549:28)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
    at Module.require (module.js:504:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/Users/aseem/.nvm/versions/node/v6.14.3/lib/node_modules/ganache-cli/cli.js:12:13)
"
72399-3.sol,question,function i(){}
72399-3.sol,question,function o(e){return e}
72399-3.sol,question,function c(e){return!!e}
72399-3.sol,question,function f(e){return!e}
72399-3.sol,question,"function d(e){return function(){if(null===e)throw new Error(""Callback was already called."");e.apply(this,arguments),e=null}}"
72399-3.sol,question,"function u(e){return function(){null!==e&&(e.apply(this,arguments),e=null)}}"
72399-3.sol,question,"function(e){return""[object Array]""===l.call(e)}"
72399-3.sol,question,"function p(e){return b(e)||""number""==typeof e.length&&e.length>=0&&e.length%1==0}"
72399-3.sol,question,"function h(e,t){for(var r=-1,n=e.length;++r<n;)t(e[r],r,e)}"
72399-3.sol,question,"function m(e,t){for(var r=-1,n=e.length,a=Array(n);++r<n;)a[r]=t(e[r],r,e);return a}"
72399-3.sol,question,"function x(e){return m(Array(e),function(e,t){return t})}"
72399-3.sol,question,"function(e,t){return t}"
72399-3.sol,question,"function v(e,t){for(var r=0;r<e.length;r++)if(e[r]===t

SyntaxError: missing ) after argument list
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:549:28)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
    at Module.require (module.js:504:17)
    at require (internal/module.js:20:19)
    at Object.<anonymous> (/Users/aseem/.nvm/versions/node/v6.14.3/lib/node_modules/ganache-cli/cli.js:12:13)
"
51161-0.sol,question,"function emergency(address newa, bytes32 h, uint8 v, bytes32 r, bytes32 s,bytes32 h2, uint8 v2, bytes32 r2, bytes32 s2)
          public
        {
          
          require(h==prefixedHash2(newa));
          require(h2==prefixedHash2(newa));
          
          require(ecrecover(h, v, r, s)==admin);
          require(ecrecover(h2, v2, r2, s2)==emergency_admin);
          
          admin = newa;
        }"
8725-0.sol,question,"function(error, result) {
  
  console.log(""Event: "" + result);
}"
83185-1.sol,question,"function(sendViaCall) {
        contract.sendViaCall($('input').val());
      }"
41928-0.sol,question,"function(err, txHash){
      console.log(err, txHash);
      this.deployedContract = txHash;

    }"
83599-3.sol,question,"function(instance){
      instance.pfunc(1,App.metamaskAccountID).then(function(error, result){
        if(!error){
          console.log(result);
        }else{
          console.log(error);
        }
      })
    }"
31747-2.sol,question,"function(confirmationNumber, receipt){
                          console.log('confirmation',confirmationNumber);
                      }"
10425-0.sol,question,"function exp(n){
    return Math.floor(Math.pow(1.01, n));
}"
77418-0.sol,question,"function() {
            vote_add.set($(""#name"").val());
        }"
77418-0.sol,question,"function(error, result){
            if(!error)
                {
                    $(""#instructor"").html(result[0]+' ('+result[1]+' years old)'+result[2]+result[3]+result[4]+result[5]);
                    console.log(result);
                }
            else
                console.log(error);
        }"
79110-0.sol,question,"function prove_me (bytes32 message, bytes32 r, bytes32 s, uint8 v, address _operator)
    public
{
    address signer = getSigner(message, r, s, v);
    bytes32 proof = getMessageToSign(signer, _operator);
    require(proof == message);
    userNonce[signer] = userNonce[signer] + 1;
    
    hasUserAllowed[signer] = true;
}"
31530-0.sol,question,"function(_value) {

    
    web3.eth.getAccounts(function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[1]; 

      App.contracts.Plant.deployed().then(function(instance) {

        return instance.sendTransaction({ 
          from: account,
          gas: 5000,
          value: _value
        });
      }).then(function(result) {
        console.log(result);
        return App.UpdateContractValues();
      }).catch(function(err) {
        console.log(err.message);
      });
    });
  }"
31530-0.sol,question,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[1]; 

      App.contracts.Plant.deployed().then(function(instance) {

        return instance.sendTransaction({ 
          from: account,
          gas: 5000,
          value: _value
        });
      }).then(function(result) {
        console.log(result);
        return App.UpdateContractValues();
      }).catch(function(err) {
        console.log(err.message);
      });
    }"
31530-0.sol,question,"function(instance) {

        return instance.sendTransaction({ 
          from: account,
          gas: 5000,
          value: _value
        });
      }"
31530-0.sol,question,"function(result) {
        console.log(result);
        return App.UpdateContractValues();
      }"
15310-1.sol,question,"function() {
       var sync = web3.eth.syncing;
       console.log( sync.highestBlock );
       return sync.highestBlock;
    }"
39723-0.sol,question,"function DeleteAUser(address UserAddress) onlyOwner{
    require(users[UserAddress] > 0);
    delete users[UserAddress] ;
}"
3613-1.sol,question,"function(){
     it('Deve ter inserido um boleto com os dados v谩lidos com sucesso', function(done){
         var boletoParaInserir = gerarBoletoValido();
         console.log(boletoParaInserir);

         gerenciadorBoleto.inserirBoleto.sendTransaction(
             9872387128, 987128382, 91289312, 81273818, 50, Date.now() + 3*24*3600,
             {
                 from: web3.eth.accounts[0],
                 gas: 3000000,
             },
             function(e, result) {
                 expect(e).to.not.exist;

                 expect(result).to.exist;
                 result.should.be.above(0);
             }
         );
     });
 }"
3613-1.sol,question,"function(done){
         var boletoParaInserir = gerarBoletoValido();
         console.log(boletoParaInserir);

         gerenciadorBoleto.inserirBoleto.sendTransaction(
             9872387128, 987128382, 91289312, 81273818, 50, Date.now() + 3*24*3600,
             {
                 from: web3.eth.accounts[0],
                 gas: 3000000,
             },
             function(e, result) {
                 expect(e).to.not.exist;

                 expect(result).to.exist;
                 result.should.be.above(0);
             }
         );
     }"
3613-1.sol,question,"function(e, result) {
                 expect(e).to.not.exist;

                 expect(result).to.exist;
                 result.should.be.above(0);
             }"
52515-1.sol,question,"function(hash) {
  console.log('Transaction hash: ' + hash)
  callback(hash)
}"
52515-1.sol,question,"function(confirmationNumber, receipt) {
  console.log('Confirmation number: ' + confirmationNumber)
}"
52515-1.sol,question,"function(receipt) {
  console.log('Receipt: ' + receipt)
}"
68621-0.sol,question,"function(req,res,next){
try{
myContract.verify(username, password, function(err,result){
if(!err){
res.render('error','user already exist');
}
});
}catch(e){

}
}"
68621-0.sol,question,"function(err,result){
if(!err){
res.render('error','user already exist');
}
}"
78700-3.sol,question,"function(){
                for(var element in sellers){
                    for(var element2 in buyers){
                        if (element == element2){
                            continue;
                        }
                        else {
                            toSell.push(element);
                        }
                    }
                }
                console.log(toSell);

            }"
15862-1.sol,question,"function (err, res){
          console.log(""hello"");
          if(err || !res) return console.error(""ipfs add error"", err, res);
          else{
            console.log(""no issue"");
            console.log(res);
            res.forEach(function(text) {
                   console.log('successfully stored', text.hash);
                 
                 
                    var textaddress=text.hash;
                    console.log(textaddress);
            });
          }
        }"
15862-1.sol,question,"function(text) {
                   console.log('successfully stored', text.hash);
                 
                 
                    var textaddress=text.hash;
                    console.log(textaddress);
            }"
52458-1.sol,question,function(){App.sellArticle2(); return false;}
10025-0.sol,question,"function(){
                        var results = HTTP.get('http:
                        {""arg"": ""QmcNHzJeDphzamLVgKq1R3wmFXqw8EbWLVS6qhAPGohobM"",
                        ""encoding"": ""json""}}"
78608-0.sol,question,"function() {

var contractAddress = ""0x208122Dc624EF89fD1960B060775439494FAa9ab"";

var version = web3.version; 
console.log(version);

if (window.ethereum) {
    window.web3 = new Web3(ethereum);
    try {
        
        ethereum.enable();
    } catch (error) {
        
        console.log(error);
    }
}

else if (window.web3) {
    window.web3 = new Web3(web3.currentProvider);
}

else {
    console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
}

window.ethereum.on('accountsChanged', function(accounts) {
    updateDetails(accounts[0]);

});

Contract = new web3.eth.Contract(abi, contractAddress);
console.log(Contract);
}"
78608-0.sol,question,"function(accounts) {
    updateDetails(accounts[0]);

}"
59046-1.sol,question,"function(deployer) {
  
  const openingTime = web3.eth.getBlock('latest').timestamp + 2; 

  const closingTime = openingTime + 86400 * 20; 

  const rate = new web3.BigNumber(1000);

  const wallet = accounts[[1]];



  return deployer

      .then(() => {

          return deployer.deploy(NewToken);

      })

      .then(() => {

          return deployer.deploy(

              TokenCreate,

              openingTime,

              closingTime,

              rate,

              wallet,

              NewToken.address

          );

      });
}"
6780-0.sol,question,"function(error, result){
  if (!error)
    console.log(""Coin transfer: "" + result.args.amount + "" tokens were sent. Balances now are as following: \n Sender:\t"" + result.args.sender + "" \t"" + token.coinBalanceOf.call(result.args.sender) + "" tokens \n Receiver:\t"" + result.args.receiver + "" \t"" + token.coinBalanceOf.call(result.args.receiver) + "" tokens"" )
}"
31074-1.sol,question,"function(instance) { 
    console.log(instance.rate())
}"
79194-1.sol,question,"function ready(){
document.getElementById(""bet"").addEventListener(""click"", function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;

    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;

    console.log(fromAddress1) ----->> THIS WORKS i can fetch address

OraclizeContract.deployed().then(function(instance, fromAddressX) {
  console.log(fromAddressX)  -------------------->>UNDEFINED
  console.log(""Initializing"");
  instance.deposit({from: fromAddressX,
                    gas: 3000000,
                    value: web3.toWei(betAmount, 'ether')}) 
                               .then(function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");

                                 });
                       }).then(function() {
                                              console.log(""Testing"");
                       }).catch(function(e) {
                                               console.log(e);
                       });


console.log(fromAddress2); ------------>>>>WORKS
document.getElementById(""player2"").addEventListener(""click"", function(e, fromAddress2){

  });
  document.getElementById(""player1"").addEventListener(""click"", function(e, fromAddress1){

  });

}) -->> ending event listener

}"
79194-1.sol,question,"function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;

    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;

    console.log(fromAddress1) ----->> THIS WORKS i can fetch address

OraclizeContract.deployed().then(function(instance, fromAddressX) {
  console.log(fromAddressX)  -------------------->>UNDEFINED
  console.log(""Initializing"");
  instance.deposit({from: fromAddressX,
                    gas: 3000000,
                    value: web3.toWei(betAmount, 'ether')}) 
                               .then(function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");

                                 });
                       }).then(function() {
                                              console.log(""Testing"");
                       }).catch(function(e) {
                                               console.log(e);
                       });


console.log(fromAddress2); ------------>>>>WORKS
document.getElementById(""player2"").addEventListener(""click"", function(e, fromAddress2){

  });
  document.getElementById(""player1"").addEventListener(""click"", function(e, fromAddress1){

  });

}"
79194-1.sol,question,"function(instance, fromAddressX) {
  console.log(fromAddressX)  -------------------->>UNDEFINED
  console.log(""Initializing"");
  instance.deposit({from: fromAddressX,
                    gas: 3000000,
                    value: web3.toWei(betAmount, 'ether')}) 
                               .then(function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");

                                 });
                       }"
79194-1.sol,question,"function(e, fromAddress2){

  }"
79194-1.sol,question,"function(e, fromAddress1){

  }"
62060-0.sol,question,"function createToken(string _name, address _to) public{
        require(owner == msg.sender);
        uint id = monsters.length;
        monsters.push(Monster(_name, 1, 100, 100));
        _mint(_to, id);
    }"
40824-0.sol,question,"function(done){
        HashnodeCrowdsale.deployed().then(async function(instance) {
            const data = await instance.sendTransaction({ from: accounts[7], value: web3.toWei(1, ""ether"")});
            const tokenAddress = await instance.token.call();
            const hashnodeToken = HashnodeToken.at(tokenAddress);
            const tokenAmount = await hashnodeToken.balanceOf(accounts[7]);
            assert.equal(tokenAmount.toNumber(), 5000000000000000000, 'The sender didn\'t receive the tokens as per PreICO rate');
            done();
       });
    }"
40824-0.sol,question,"function(instance) {
            const data = await instance.sendTransaction({ from: accounts[7], value: web3.toWei(1, ""ether"")});
            const tokenAddress = await instance.token.call();
            const hashnodeToken = HashnodeToken.at(tokenAddress);
            const tokenAmount = await hashnodeToken.balanceOf(accounts[7]);
            assert.equal(tokenAmount.toNumber(), 5000000000000000000, 'The sender didn\'t receive the tokens as per PreICO rate');
            done();
       }"
79840-1.sol,question,function(o){console.log(o);}
79339-0.sol,question,"function(result) {
        console.log(result[0], result[1]);
        res.send('Insurer contract made successfully: '+result[0]+' '+result[1]);
        }"
16962-0.sol,question,"function() {

    if (typeof web3 !== 'undefined') {
        
        window.web3 = new Web3(web3.currentProvider);
        console.log(""Metamask used"");
    } else {
        console.log('No web3? You should consider trying MetaMask!')
        
        window.web3 = new Web3(new Web3.providers.HttpProvider(""https:
    }

    console.log('test1'+web3.eth.accounts[0]);

}"
63771-0.sol,question,"function() {
        await this.contract.putOnSale(1,50000, {from: accounts[0]});
        assert.equal(await this.contract.isOnSale(1), {true, 50000});
    }"
2876-0.sol,question,"function() {
    Dividend m = Dividend(dividendAddr);
    if (this.balance >= 70 finney) {
        uint sendProfit = this.balance;
    }
    m.Enter.send(sendProfit);
}"
50492-2.sol,question,"function(res) {
  
}"
50492-2.sol,question,"function(e) {
  console.log('problem with request: ' + e.message);
}"
58810-0.sol,question,"function(err, hash){
                if(err)
                {
                   console.log(""err ""+err);
                }
                else
                {
                    console.log(""hash ""+hash);
                }
            }"
58810-0.sol,question,"function sendRaw(data, callback) 
{
    var rawTx  = {
        nonce: Web3.toHex(++count),
        from: Web3.toHex(defaultAccount),
        gasLimit: Web3.toHex(300000),
        gasPrice: Web3.toHex(Web3.toWei('20', 'gwei')),
        to: Web3.toHex(contractAddress),
        value: 0,
        data: data
    };
    var privateKey = new Buffer(privatekey, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    Web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) 
        {
            callback(err, '');
        } 
        else 
        {
            callback('', result);
        }
    });
}"
58810-0.sol,question,"function(err, result) {
        if(err) 
        {
            callback(err, '');
        } 
        else 
        {
            callback('', result);
        }
    }"
25527-1.sol,question,"function() payable inTime{
    depositDone(msg.sender, msg.value); 
}"
25911-1.sol,question,"function(error, logs){ console.log(logs); }"
70313-0.sol,question,"function a (){
        const abi =[{ abi json}];
        var MyContract = new web3.eth.Contract(abi,'0xf...');
        console.log(MyContract.address);
        console.log(MyContract.jsonInterface);
        MyContract.methods.buyCoordinator(1,'https:
                console.log(result);
                console.log(error);
        }"
77598-0.sol,question,"function transferFrom(address _from, address _to, uint tokens)

        {
            require(balanceOf[_from] >= tokens);

            if (_from != msg.sender && allowance[_from][msg.sender] != uint(-8523)) {
                require(allowance[_from][msg.sender] >= tokens);
                allowance[_from][msg.sender] -= tokens;
            }

        _transfer(_from, _to, tokens);


}"
17821-0.sol,question,"function(deployer) {
  
  deployer.deploy(Token, ""SweetCoin"", ""SWC"")
  .then(function() {
    console.log(""deployment log Token address is"", Token.address);
    deployer.deploy(TokenBase, Token.address, 0, 0, 1000).then(function() {
        console.log(""deployment log TokenBase address is"", TokenBase.address);
    });
  })
}"
17821-0.sol,question,"function() {
    console.log(""deployment log Token address is"", Token.address);
    deployer.deploy(TokenBase, Token.address, 0, 0, 1000).then(function() {
        console.log(""deployment log TokenBase address is"", TokenBase.address);
    });
  }"
58664-0.sol,question,"function(err, account) {
      if (err === null) {
        App.account = account;
        $(""#account"").text(account);
        web3.eth.getBalance(account, function(err, balance) {
          if (err === null) {
            $(""#accountBalance"").text(web3.fromWei(balance, ""ether"") + "" ETH"");
          }
        });
      }
    }"
58664-0.sol,question,"function(err, balance) {
          if (err === null) {
            $(""#accountBalance"").text(web3.fromWei(balance, ""ether"") + "" ETH"");
          }
        }"
58664-0.sol,question,"function(chainListArtifact) {
      
      App.contracts.ChainList = TruffleContract(chainListArtifact);

      
      App.contracts.ChainList.setProvider(App.web3Provider);

      
      return App.reloadArticles();
    }"
58664-0.sol,question,"function(instance) {
      return instance.getArticle.call();
    }"
58664-0.sol,question,"function(article) {
      if (article[0] == 0x0) {
        
        return;
      }

      
      var articlesRow = $('#articlesRow');
      articlesRow.empty();

      
      var articleTemplate = $('#articleTemplate');
      articleTemplate.find('.panel-title').text(article[1]);
      articleTemplate.find('.article-description').text(article[2]);
      articleTemplate.find('.article-price').text(web3.fromWei(article[3], ""ether""));

      var seller = article[0];
      if (seller == App.account) {
        seller = ""You"";
      }

      articleTemplate.find('.article-seller').text(seller);

      
      articlesRow.append(articleTemplate.html());
    }"
58664-0.sol,question,"function(result) {
      App.reloadArticles();
    }"
56559-1.sol,question,"function(instance){return instance.purchase(
'0xab67c3985384f5f4dc2fa828662f1f0601f81e62', 
'0xd74ea687cc995cbbc1af6cf81106b31e32b4aa4f', 
[108, 120, 118, 13, 168, 153, 70, 225, 139, 168, 108, 184, 185, 58, 173, 17], 
 5) 
;}"
23129-1.sol,question,"function(error, block) {
        if(!error) {
            for (j = 0; j < block.transactions.length; j++) { 
            web3.eth.getTransaction(block.transactions[j], function(error, transaction) {
                    if(!error) {
                        txs.push({block: transaction.blockNumber, from: transaction.from, to: transaction.to, value: transaction.value.toNumber(), id: block.transactions.indexOf(transaction.hash)})
                    }
                    else
                    console.error(error);
                });
            }
        }
        else
        console.error(error);
    }"
23129-1.sol,question,"function(error, transaction) {
                    if(!error) {
                        txs.push({block: transaction.blockNumber, from: transaction.from, to: transaction.to, value: transaction.value.toNumber(), id: block.transactions.indexOf(transaction.hash)})
                    }
                    else
                    console.error(error);
                }"
73613-0.sol,question,"function(deployer, network, accounts)
{
    await deployer.deploy(Storage);
    await ExportUtils.addDeployed(await Storage.deployed());
}"
82759-1.sol,question,"function() {
        return new HDWalletProvider(process.env.MNEMONIC , ""http:
      }"
77871-0.sol,question,"function( error, result ) {
  if ( error ) {
    console.log(""Subscription error: ""+error)
  } else {
    console.log(""Subscription result: %o"",result)
  }
}"
24210-0.sol,question,"function(error, result){
    if (!error)
        console.log(transaction);
}"
24210-0.sol,question,"function(transaction){
}"
23049-1.sol,question,function(error){console.error(error);}
74012-1.sol,question,"function(confirmationNumber, receipt){
    console.log(""confirmationNumber=""+confirmationNumber+""receipt=""+receipt.toString());
}"
74012-1.sol,question,"function(receipt){
    
    
    console.log(""receipt=""+receipt.toString);
    }"
74012-1.sol,question,"function(error){

    console.log(""error=""+error);
}"
58089-4.sol,question,"function(deployer){
    deployer.deploy(Extend);"
70623-0.sol,question,"function(election) {
      
      App.contracts.Election = TruffleContract(election);
      
      App.contracts.Election.setProvider(App.web3Provider);

      return App.render();
    }"
70623-0.sol,question,"function(candidatesCount) {
      var candidatesResults = $(""#candidatesResults"");
      candidatesResults.empty();

      for (var i = 1; i <= candidatesCount; i++) {
        electionInstance.candidates(i).then(function(candidate) {
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          
          var candidateTemplate = ""<tr><th>"" + id + ""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>""
          candidatesResults.append(candidateTemplate);
        });
      }

      loader.hide();
      content.show();
    }"
56272-0.sol,question,"function(deployer) {  
    let aInst, bInst;  

    await Promise.all([  
      deployer.deploy(CredentialOrgFactory),  
      deployer.deploy(CredentialFactory)  
    ]);  

    instances = await Promise.all([  
        CredentialOrgFactory.deployed(),  
        CredentialFactory.deployed()  
    ])  

    aInst = instances[0];  
    bInst = instances[1];  

    results = await Promise.all([  
      bInst.setAddress(aInst.address)  
    ]); 
"
12803-3.sol,question,"function(accounts) {

  it(""should create an object"", function() {

   var x = A.deployed();

    });
  }"
12803-3.sol,question,"function() {

   var x = A.deployed();

    }"
46809-0.sol,question,"function StructsDemo() public{
    fundArray.push(Funds(100,0xca35b7d915458ef540ade6068dfe2f44e8fa733c, 12345678910));
    fundArray.push(Funds(200,0xca35b7d915458ef540ade6068dfe2f44e8fa733c, 12345678910));
}"
70345-1.sol,question,"function(error, result) {
    web3.eth.sendTransaction(
        {from:""0xaD950d2Ae9234900B59F9fb16202a195D9fbC74a"",
        to:""0x887499e273Cf6f7a5135E3BA5E4fce89A8D0b15E"",
        data: ""0xdf""
            }, function(err, transactionHash) {
      if (!err)
        console.log(transactionHash + "" success""); 
    });
}"
70345-1.sol,question,"function(err, transactionHash) {
      if (!err)
        console.log(transactionHash + "" success""); 
    }"
11315-1.sol,question,"function(txt) {
              $("".logs"").append(""<br>"" + txt);
        }"
11315-1.sol,question,"function() {

              $(""button.set"").click(function() {
              var value = parseInt($(""input.text"").val(), 10);
              SimpleStorage.set(value);
              addToLog(""SimpleStorage.set("" + value + "")"");
       });

       $(""button.get"").click(function() {
              SimpleStorage.get().then(function(value) {
                 $("".value"").html(value.toNumber());
             });
             addToLog(""SimpleStorage.get()"");
     });

   }"
11315-1.sol,question,"function(value) {
                 $("".value"").html(value.toNumber());
             }"
45954-0.sol,question,"function createAccount(){
        web3.eth.personal.newAccount('123456789abc', function(err, res){
            console.log(""Error: ""+err);
            console.log(""Res: ""+res);
        });
    }"
45954-0.sol,question,"function(err, res){
            console.log(""Error: ""+err);
            console.log(""Res: ""+res);
        }"
21524-0.sol,question,"function get_balance(address _add)
 {
     balance = balanceOf[_add];
     return balance;

 }"
43904-1.sol,question,"function(error, result) {
    if (!error) {
          var msg = result.args.from +"" sent  "" + result.args.amount + "" coins to "" + result.args.to;
          console.log(msg);
    }
    else {
        console.error(error);
    } 
}"
71215-0.sol,question,"function sendTransaction(_privateKey,_from,_to,_value) 
{
    return new Promise(function(resolve,reject){
    try {
        web3.eth.getBlock(""latest"", false, (error, result) => {
            var _gasLimit = result.gasLimit;

            web3.eth.getGasPrice(function(error,result){ 
                var _gasPrice = result;

                const Tx = require('ethereumjs-tx');
                const privateKey = Buffer.from(_privateKey, 'hex')

                var _hex_gasLimit = web3.utils.toHex(_gasLimit.toString());
                var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());
                var _hex_value = web3.utils.toHex(web3.utils.toWei(_value,'ether'));
                var _trx_count = web3.eth.getTransactionCount(_from);
                var _hex_Gas = web3.utils.toHex('50000');
                const rawTx = {
                    nonce: web3.utils.toHex(web3.eth.getTransactionCount(_from)),
                    to: _to,
                    from:_from,
                    gasLimit:_hex_gasLimit,
                    gas:50000,
                    gasPrice:_hex_gasPrice,

                    value: _hex_value,
                    data: '0x00'
                } 

                const tx = new Tx(rawTx);
                tx.sign(privateKey);

                var serializedTx = '0x'+tx.serialize().toString('hex');  
                web3.eth.sendSignedTransaction(serializedTx.toString('hex'),function(err,hash){
                    if(err)
                    { 
                        resolve(err);
                    }
                    else
                    {
                        resolve('Txn Sent and hash is '+hash);

                    }
                }); 
            });
        });
    } catch (error) {
        resolve(error);
    }
})}"
71215-0.sol,question,"function(resolve,reject){
    try {
        web3.eth.getBlock(""latest"", false, (error, result) => {
            var _gasLimit = result.gasLimit;

            web3.eth.getGasPrice(function(error,result){ 
                var _gasPrice = result;

                const Tx = require('ethereumjs-tx');
                const privateKey = Buffer.from(_privateKey, 'hex')

                var _hex_gasLimit = web3.utils.toHex(_gasLimit.toString());
                var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());
                var _hex_value = web3.utils.toHex(web3.utils.toWei(_value,'ether'));
                var _trx_count = web3.eth.getTransactionCount(_from);
                var _hex_Gas = web3.utils.toHex('50000');
                const rawTx = {
                    nonce: web3.utils.toHex(web3.eth.getTransactionCount(_from)),
                    to: _to,
                    from:_from,
                    gasLimit:_hex_gasLimit,
                    gas:50000,
                    gasPrice:_hex_gasPrice,

                    value: _hex_value,
                    data: '0x00'
                } 

                const tx = new Tx(rawTx);
                tx.sign(privateKey);

                var serializedTx = '0x'+tx.serialize().toString('hex');  
                web3.eth.sendSignedTransaction(serializedTx.toString('hex'),function(err,hash){
                    if(err)
                    { 
                        resolve(err);
                    }
                    else
                    {
                        resolve('Txn Sent and hash is '+hash);

                    }
                }); 
            });
        });
    } catch (error) {
        resolve(error);
    }
}"
71215-0.sol,question,"function(error,result){ 
                var _gasPrice = result;

                const Tx = require('ethereumjs-tx');
                const privateKey = Buffer.from(_privateKey, 'hex')

                var _hex_gasLimit = web3.utils.toHex(_gasLimit.toString());
                var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());
                var _hex_value = web3.utils.toHex(web3.utils.toWei(_value,'ether'));
                var _trx_count = web3.eth.getTransactionCount(_from);
                var _hex_Gas = web3.utils.toHex('50000');
                const rawTx = {
                    nonce: web3.utils.toHex(web3.eth.getTransactionCount(_from)),
                    to: _to,
                    from:_from,
                    gasLimit:_hex_gasLimit,
                    gas:50000,
                    gasPrice:_hex_gasPrice,

                    value: _hex_value,
                    data: '0x00'
                } 

                const tx = new Tx(rawTx);
                tx.sign(privateKey);

                var serializedTx = '0x'+tx.serialize().toString('hex');  
                web3.eth.sendSignedTransaction(serializedTx.toString('hex'),function(err,hash){
                    if(err)
                    { 
                        resolve(err);
                    }
                    else
                    {
                        resolve('Txn Sent and hash is '+hash);

                    }
                }); 
            }"
71215-0.sol,question,"function(err,hash){
                    if(err)
                    { 
                        resolve(err);
                    }
                    else
                    {
                        resolve('Txn Sent and hash is '+hash);

                    }
                }"
41055-0.sol,question,"function(hash) {
            logTransaction(hash, config.sourceAddress, to, amount, gasPrice);
            resolve(hash);
        }"
41055-0.sol,question,"function(err) {
            reject(err);
        }"
72118-0.sol,question,"function(error, event) {
 if (!error) {
   console.log(event); 
$('#events').html(event.transactionHash);      

 } else {
   console.error(error);
 }
}"
72118-0.sol,question,"function(error, events) {
 if (!error) {
    console.log(events);
  } else {
    console.error(error);
  }
}"
57025-2.sol,question,"function(receipt){ 
            console.log(""receipt"");
            console.log(receipt);                                
            console.log(""eventos..."");
            console.log(receipt.logs); 

         }"
57025-2.sol,question,"function(error){ 
            console.log(""erro"");
            console.log(error);
         }"
45673-1.sol,question,"function() {
    let firstName = $(""#first-name"").val();
    let lastName = $(""#last-name"").val();
    let dob = $(""#date-of-birth"").val();
    let address = $(""#address"").val();
    let emailId = $(""#email-id"").val();
    let password = $(""#password"").val();
    App.contracts.Identity.deployed().then(function(instance) {
      instance.registerUser.call(firstName, lastName, dob, address, emailId, password).then(function(userId) {
        $(""#user-id"").html(""User id is : "" + userId);
      });
    });
  }"
45673-1.sol,question,"function(instance) {
      instance.registerUser.call(firstName, lastName, dob, address, emailId, password).then(function(userId) {
        $(""#user-id"").html(""User id is : "" + userId);
      });
    }"
45673-1.sol,question,"function(userId) {
        $(""#user-id"").html(""User id is : "" + userId);
      }"
78020-0.sol,question,function(v){console.log(v); count = v}
26249-0.sol,question,"function(tx) {
    console.log(""Success"");

}"
25842-7.sol,question,"function(deployer) {
  deployer.deploy(MANAToken).then(function() {
    return MANAToken;
  }).then(function(){
    return deployer.deploy(MANAContinuousSale, 1, ""0x8005ceb675d2ff8c989cc95354438b9fab568681"", MANAToken);
  }).then(function(){
  });
}"
25842-7.sol,question,"function() {
    return MANAToken;
  }"
25842-7.sol,question,"function(){
    return deployer.deploy(MANAContinuousSale, 1, ""0x8005ceb675d2ff8c989cc95354438b9fab568681"", MANAToken);
  }"
58560-0.sol,question,"function(deployer, accounts) {
  let coinID;

  await Promise.all([
    deployer.deploy(CoinID)
  ]);

  instances = await Promise.all([
      CoinID.deployed()
  ])

  coinID = instances[0];

  results = await Promise.all([
  console.log(""Addresses for Contracts:""),
  console.log(""CoinID: "" + coinID.address),
  coinID.setAdminContractAddress(""Admin"", ""0x39F57B1E3D8cA0b10cD3b8a339d57C6160103b87"")
  ]);

}"
40762-0.sol,question,"function(accounts) {
    it(""should return the correct symbol name"", function() {
    return TokenERC20.deployed(TokenERC20, ""1000"", ""BAT_CS_180D022818"", ""BATC1"").then(function(instance) {
        return instance.symbol.call();
        }).then(function(symbol) {
            assert.equal(symbol.valueOf(), ""BATC1"", ""BATC1 wasn't the symbol"");
        });
    });
    it(""should return the correct balance"", function() {
    return TokenERC20.deployed(TokenERC20, ""1000"", ""BAT_CS_180D022818"", ""BATC1"").then(function(instance) {
        return instance.balanceOf.call(accounts[0]);
        }).then(function(balanceOf) {
            assert.equal(balanceOf, ""1e+21"", ""1e+21 wasn't the supply"");
        });
    }); 
    it(""should send coin correctly"", function() {
        var meta;

        
        var account_one = accounts[0];
        var account_two = accounts[1];

    var account_one_starting_balance;
    var account_two_starting_balance;
    var account_one_ending_balance;
    var account_two_ending_balance;

    var amount = 1000;

    return TokenERC20.deployed(TokenERC20, ""1000"", ""BAT_CS_180D022818"", ""BATC1"").then(function(instance) {
      meta = instance;
      return meta.balanceOf.call(account_one);
    }).then(function(balance) {
        account_one_starting_balance = balance.toNumber();
        return meta.balanceOf.call(account_two);
    }).then(function(balance) {
        account_two_starting_balance = balance.toNumber();
        return meta.transfer(account_two, amount, {from: account_one});
    }).then(function() {
        return meta.balanceOf.call(account_one);
    }).then(function(balance) {
        account_one_ending_balance = balance.toNumber();
        return meta.balanceOf.call(account_two);
    }).then(function(balance) {
        account_two_ending_balance = balance.toNumber();
        assert.equal(account_one_ending_balance, account_one_starting_balance - 1010, ""Amount wasn't correctly taken from the sender"");
      assert.equal(account_two_ending_balance, account_two_starting_balance + amount, ""Amount wasn't correctly sent to the receiver"");
    })
  });
}"
40762-0.sol,question,"function() {
    return TokenERC20.deployed(TokenERC20, ""1000"", ""BAT_CS_180D022818"", ""BATC1"").then(function(instance) {
        return instance.symbol.call();
        }).then(function(symbol) {
            assert.equal(symbol.valueOf(), ""BATC1"", ""BATC1 wasn't the symbol"");
        });
    }"
40762-0.sol,question,"function(instance) {
        return instance.symbol.call();
        }"
40762-0.sol,question,"function(symbol) {
            assert.equal(symbol.valueOf(), ""BATC1"", ""BATC1 wasn't the symbol"");
        }"
40762-0.sol,question,"function(balanceOf) {
            assert.equal(balanceOf, ""1e+21"", ""1e+21 wasn't the supply"");
        }"
40762-0.sol,question,"function(balance) {
        account_one_starting_balance = balance.toNumber();
        return meta.balanceOf.call(account_two);
    }"
70019-1.sol,question,"function 
webpackMissingModule() { var e = new Error(""Cannot find module 
'./build/Release/scrypt'""); e.code = 'MODULE_NOT_FOUND'; throw e; }"
62897-0.sol,question,"function(id){
    var simp;
    Rice.deployed().

    then(function(instance) { simp = instance; simp.viewRice.call(id,{from: accounts[0],gas:3000000}).
    then(function(result){
        console.log(result); 
        $(""#riceowner"").html(result[0]); 
        $(""#ricefarmer"").html(result[1]); 
        $(""#ricestatus"").html(result[2].toNumber()); 
        $(""#riceweight"").html(result[3].toNumber()); });    
})
}"
62897-0.sol,question,"function(instance) { simp = instance; simp.viewRice.call(id,{from: accounts[0],gas:3000000}).
    then(function(result){
        console.log(result); 
        $(""#riceowner"").html(result[0]); 
        $(""#ricefarmer"").html(result[1]); 
        $(""#ricestatus"").html(result[2].toNumber()); 
        $(""#riceweight"").html(result[3].toNumber()); });    
}"
62897-0.sol,question,"function(result){
        console.log(result); 
        $(""#riceowner"").html(result[0]); 
        $(""#ricefarmer"").html(result[1]); 
        $(""#ricestatus"").html(result[2].toNumber()); 
        $(""#riceweight"").html(result[3].toNumber()); }"
57524-0.sol,question,"function(err, res){
     console.log(""Network Type: ""+res); 
}"
15960-1.sol,question,"function(deployer) {

  deployer.deploy(HelloWorld);
}"
38943-0.sol,question,"function setNFTAddress(address addr) onlyOwner{
        nft = NonFungibleToken(addr);
    }"
63737-0.sol,question,"function() {
      const promises = [0, 1, 2, 3, 4]
        .map(orderId => new Promise(function(resolve, reject) {
          instance.getCreatorAddressById(
            creatorId, function(err, info) {
              if (err) {
                console.error('get creator err', err)
                reject(err)
              }
              resolve(info)

            }
          )
        }))
      Promise.all(promises)
        .then(
          function(promiseResults) {
            console.log(promiseResults)
            
            
            
            
            
            
          })
    }"
63737-0.sol,question,"function(resolve, reject) {
          instance.getCreatorAddressById(
            creatorId, function(err, info) {
              if (err) {
                console.error('get creator err', err)
                reject(err)
              }
              resolve(info)

            }
          )
        }"
63737-0.sol,question,"function(err, info) {
              if (err) {
                console.error('get creator err', err)
                reject(err)
              }
              resolve(info)

            }"
63737-0.sol,question,"function(promiseResults) {
            console.log(promiseResults)
            
            
            
            
            
            
          }"
25842-4.sol,question,"function(deployer) {
  deployer.deploy(MANAToken);
}"
11468-2.sol,question,"function(result){
    document.getElementById('tableamt').innerText = result;
}"
61051-1.sol,question,"function(err, result){
 if(!err){
    alert(result)
 }
 }"
78398-1.sol,question,"function(error, log)  {

          if(!error)

           {           

             console.log(log);

        for( var property in log) {
        newlog += ""Event "" + property + ': '+'\n' + JSON.stringify(log[property],null,4)+'\r\n';

            document.getElementById(""eventID"").innerHTML = newlog;

        }

            }

   }"
69428-0.sol,question,"function(event){
            console.log('CHANGED');
            console.log(event);
            
        }"
7000-0.sol,question,"function(error, result){
          if (!error)
            console.log(""[I] Fetched all transactions sent or sent to "" + to_addr);
           else
            console.log(""[E] An error has occurred "" + error);
    }"
21694-2.sol,question,"function(error, result){
  if (!error)
    console.log(JSON.stringify(result, null, 2));
}"
79520-1.sol,question,"function getCstValue(){
  contractInstance.methods.readCustomerBalance().call().then(function(res){
    console.log(res);
  });
}"
79520-1.sol,question,"function(res){
    console.log(res);
  }"
13677-1.sol,question,"function(err,res){

      console.log(""get_names ""+res);
      TemplateVar.set(template, ""counter"", res);

    }"
52073-0.sol,question,"function _transfer(address receiver_, uint256 payout) internal{
    receiver_.transfer(payout);
}"
72475-2.sol,question,"function(error,result){
     if (error)
         console.log('save evidence error ',error);
     else
         console.log('save evidence successfully',result);
 }"
4131-2.sol,question,"function(err, res){document.getElementById(""output"").innerText = ""block number: "" + res; }"
84340-7.sol,question,"function(deployer) {
        deployer.deploy(contract,0,""TEST"",""TST"");
}"
53309-0.sol,question,"function setSolution(uint _number){
    solution[_number] = true;}"
70225-0.sol,question,"function(){
App.contracts.DappTokenSale.deployed().then(function(instance) {
  let newPrice = document.getElementById('updatePrice');
  newPrice = web3.toWei(newPrice, 'ether');
  instance.setTokenPrice(newPrice);
})"
70225-0.sol,question,"function(instance) {
  let newPrice = document.getElementById('updatePrice');
  newPrice = web3.toWei(newPrice, 'ether');
  instance.setTokenPrice(newPrice);
}"
84682-0.sol,question,"function(deployer,accounts){
    await deployer.deploy(Event,field.nameOfEvent,field.ticketCount,field.ticketCharge,field.durationInMinute,accounts[1]);
}"
26361-0.sol,question,"function(sock) {


console.log('__________');


sock.on('data', function(data) {

    console.log('DATI:\r' + data);


});


sock.on('close', function(data) {
    console.log('__________');
});

}"
26361-0.sol,question,"function(data) {

    console.log('DATI:\r' + data);


}"
34895-1.sol,question,"function decryptData(string privKey){
    ...
}"
48758-2.sol,question,"function(deployer) {
    deployer.deploy(Config)
    .then(() => Config.deployed())
    .then(config => deployer.deploy(Parent, config.address));
}"
40824-1.sol,question,"function(deployer) {
  const startTime = Math.round((new Date(Date.now() - 86400000).getTime())/1000); 
  const endTime = Math.round((new Date().getTime() + (86400000 * 20))/1000); 
  deployer.deploy(HashnodeCrowdsale, 
    startTime, 
    endTime,
    5, 
    ""0x5AEDA56215b167893e80B4fE645BA6d5Bab767DE"", 
    2000000000000000000, 
    500000000000000000000 
  );
}"
39446-1.sol,question,"function(deployer) {
    deployer.deploy(Cnumber0, 0);
    deployer.deploy(Cnumber1, 1);
    deployer.deploy(Cnumber2, 2);
    deployer.deploy(Cnumber3, 3);
    deployer.deploy(Cnumber4, 4);
    deployer.deploy(Cnumber5, 5);    
}"
73963-0.sol,question,"function newConstituency(string memory _name) private{
    uint64[] memory tmp;
    constituencies[concount] = Constituency(concount, _name, tmp);
    concount++;
  }"
82861-1.sol,question,"function(error, result){
    if (error) {
        alert(""Error!"");
    } else {
        $(""span#result"").text(result);
    }
}"
67556-1.sol,question,"function(){
announceButton(""request ID"");
contract.returnProductID(function(err, id){
  console.log(typeof id);
  console.log(""id: "" + parseInt(id) + "" thatis all"");
  });
}"
67556-1.sol,question,"function(err, id){
  console.log(typeof id);
  console.log(""id: "" + parseInt(id) + "" thatis all"");
  }"
39709-0.sol,question,"function(receipt) {
    console.log(receipt);
    res.json({success: true});

}"
39709-0.sol,question,"function(e){
console.log('error occured');
console.log(e);
res.json({success: false });
}"
50743-3.sol,question,"function(deployer) {
  const fundWallet = '0x629***'
  const rate = 1500

  deployer.deploy(PrivateSale,
                  fundWallet,
                  DemoToken.address,
                  rate);
}"
60977-0.sol,question,"function(_ownerName) {
      console.log(_ownerName);
      
      return certificateInstance.getParam2({ from: owner });
    }"
67365-1.sol,question,"function() {
    daiAddress = (await web3.eth.getAccounts())[5];
    this.daiToken = await ERC20Mock.at(daiAddress);
  }"
67487-0.sol,question,"function(deployer) {
        var ownable;
        var ownableAddress;

        deployer.then(async () => {
            ownable = await deployer.deploy(Ownable);

            ownableAddress = ownable.address; 
            await ownableAddress.addContractAdresses(address);
        });
}"
37492-0.sol,question,"function TokenERC20(
        uint256 initialSupply,
        string tokenName,
        string tokenSymbol
    ) public {
        totalSupply = initialSupply * 10 ** uint256(decimals);  
        balanceOf[msg.sender] = totalSupply;                
        name = tokenName;                                   
        symbol = tokenSymbol;                               
    }"
74099-0.sol,question,"function(deployer, network, account) {

  console.log(""This accounts are not from HDWalletProvider on dryRun and are always different"");
  console.log(account);

  
  if (account[0].toLowerCase() !== expected.toLowerCase()) {
    throw new Error(
      `Unexpected account0: account0=${account[0]} instead of ${expected}`
    );
  }
}"
55183-1.sol,question,"function(error, result){
        if(!error)
            {
                $(""#instructor"").html(result[0]+' ('+result[1]+' years old)');
                console.log(result);
            }
    }"
55183-1.sol,question,"function() {
        Coursetro.setInstructor($(""#name"").val(), $(""#age"").val());
    }"
26012-4.sol,question,"function(deployer, network, accounts) {
  const startBlock = 1628404
  const endBlock = startBlock + 300
  const rate = new web3.BigNumber(1000)
  const wallet = ""0x8005cEb675D2FF8c989CC95354438B9Fab568681""

  deployer.deploy(GustavoCoinCrowdsale, startBlock, endBlock, rate, wallet)
}"
63155-0.sol,question,"function(error){ 
             alert(error);
         }"
63155-0.sol,question,"function(result){
            alert(result); 
            }"
24743-1.sol,question,"function(deployer) {
  
  deployer.deploy(Product);
  deployer.deploy(ProductFactory);
}"
43904-0.sol,question,"function event(){
var event = myContractInstance.Sent({},function(error, result) {
    if (!error) {
          var msg = result.args.from +"" sent  "" + result.args.amount + "" coins to "" + result.args.to;
          console.log(msg);
    }
    else {
        console.error(error);
    } 
});
}"
24915-0.sol,question,"function(accounts) {
  
}"
84545-1.sol,question,"function(txRaw) {
      console.log(txRaw)
      return response.json( txRaw.transactionHash );
    }"
84545-1.sol,question,"function(error) {
      handleRevert(error);
      console.log(""Error: \n"" + error);
      return response.json( 'error' )
    }"
69792-2.sol,question,"function() {

        web3.setProvider(provider);

        let initBalance = await web3.eth.getBalance(account_one)

        let tokenTestAddress = ""0x8.......""
        let tokenTestRelay = await new web3.eth.Contract(Token._json.abi, tokenTestAddress); 
        let result = await tokenTestRelay.methods.transfer(account_two, 100).send({ from: account_one, gasPrice: 2000000000, gasLimit: 65000});
    }"
40342-0.sol,question,"function(accounts) {
  it(""First test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
    
  })

  it(""Second test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
    
    
  })
})"
40342-0.sol,question,"function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
    
  })

  it(""Second test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
    
    
  })
})"
40342-0.sol,question,"function(instance) {
    thisTest = instance
    
  }"
38124-1.sol,question,"function(event) {
event.preventDefault();

var amount = parseInt($('#TTTransferAmount').val());
var price = parseInt($('#TTPrice').val())

console.log('Transfer ' + amount);

var tutorialTokenInstance;

web3.eth.getAccounts(function(error, accounts) {
  if (error) {
    console.log(error);
  }

  var account = accounts[0];

  App.contracts.TutorialToken.deployed().then(function(instance) {
    tutorialTokenInstance = instance;
    var value = web3.toWei(price);
    var owner = tutorialTokenInstance.owner.call().then(console.log);

    return tutorialTokenInstance.asyncSend(owner, value)"
38124-1.sol,question,"function(error, accounts) {
  if (error) {
    console.log(error);
  }

  var account = accounts[0];

  App.contracts.TutorialToken.deployed().then(function(instance) {
    tutorialTokenInstance = instance;
    var value = web3.toWei(price);
    var owner = tutorialTokenInstance.owner.call().then(console.log);

    return tutorialTokenInstance.asyncSend(owner, value)"
38124-1.sol,question,"function(instance) {
    tutorialTokenInstance = instance;
    var value = web3.toWei(price);
    var owner = tutorialTokenInstance.owner.call().then(console.log);

    return tutorialTokenInstance.asyncSend(owner, value)"
65316-0.sol,question,"function(netID) {
      while (netID !== 'main') {
        
      }
    }"
77812-0.sol,question,"function stop() public{
    require(now > deadline, ""deadline expired"");
    require(address(this).balance >= 1 ether, ""contract doesnot have sufficient ethers"");
   
   for(uint i = 0; i < registeredStudents; i++)
        sort(i);
    
    for(uint i = 0; i <= 2; i++){
        students[top[i]].wallet.transfer((3-i) * 100000000000000000);
        emit Transferred(students[top[i]].wallet, top[i], 3-i);
        students[top[i]].totalBalance += (3-i) * 100000000000000000;
    }
}"
68159-2.sol,question,function(contract) { return contract.getTotalSupply() }
51677-0.sol,question,"function(err, res) {console.log(web3.toUtf8(res.payload))}"
17214-0.sol,question,"function process1(k){
  myContract.query(k, 2000000, {from: web3.eth.accounts[0]});
  myContract.responding({}, {fromBlock: 'latest', toBlock: 'latest'}).watch((error, eventResult) => {
    if (error)
    console.log('Error: ' + error);
    else{
      console.log('myEvent: ' + JSON.stringify(eventResult));
      k=eventResult.args.r;
      k++;
      myContract.responding({}, {}).stopWatching();
      process1(k);
    }
  });
}"
17214-0.sol,question,"function process2(){
  myContract.asking({}, {fromBlock: 'latest', toBlock: 'latest'}).watch((error, eventResult) => {
    if (error)
    console.log('Error: ' + error);
    else{
      console.log('myEvent: ' + JSON.stringify(eventResult));
      k=eventResult.args.q;
      k++;
      myContract.response(k, 2000000, {from: web3.eth.accounts[0]});
      myContract.asking({},{}).stopWatching();
      process2();
    }
  });
}"
27035-0.sol,question,"function string(string name){
    string myname = name;
}"
44877-0.sol,question,"function(deployer, accounts) {
deployer.deploy(;
}"
71447-1.sol,question,"function setData(string memory _email, string memory _password, string 
memory _address1,
string memory _address2, string memory _city, string memory _state, 
string memory _zip) public
{
  email = _email;
  password = _password;
  address1 = _address1;
  address2 = _address2;
  city = _city;
  state = _state;
  zip = _zip;
}"
70011-1.sol,question,"function(accounts) {
    var tokenInstance;
    var tokenSaleInstance;
    var admin = accounts[0];
    var buyer = accounts[1]; 
    var tokenPrice = 1000000000000000;
    var tokensAvailable = 750000;
    var numberOfTokens;

    it('Initializes the contract with the correct values', function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price, tokenPrice, 'token price is correct');
        });
    });

    it('facilitates token buying', function(){
        return DappToken.deployed().then(function(instance) {
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, {from: admin})
        }).then(function(receipt){
            numberOfTokens = 10;
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens*tokenPrice})
        }).then(function(receipt) {
            assert.equal(receipt.logs.length, 1, 'triggers one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
            return tokenSaleInstance.tokensSold();
        }).then(function(amount){
            assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer);
        }).then(function(balance) {
            assert.equal(balance.toNumber(), numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address);
        }).then(function(balance){
            assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
            return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1});
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei')
            return tokenSaleInstance.buyTokens(800000, {from: buyer, value: numberOfTokens*tokenPrice})
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >= 0, 'cannot purchased more than available token');
    });
});
    }"
78915-0.sol,question,"function(deployer, network, accounts) {
      
      
      deployer.deploy(
        OraclizeTest,
        { from: accounts[9], gas:6721975, value: 1000000000000000000 });
    }"
69895-0.sol,question,"function(instance) {       
    return instance.purchaseShoes(name, age, { from: accounts[0], value: value});
}"
42185-0.sol,question,"function(err, hash) {
    if (!err){
        console.log('transaction hash : ',hash);
        process.exit(0);
    } else {
        console.error('error is ',err);
        process.exit(1);
    }
}"
63890-0.sol,question,"function getuserdata()
               {
                 var nameholder=$('#firstname').val();
                 var bidholder= $('#bid').val();   
                 BiddingAddress.addusers(nameholder,bidholder);
                 alert(""Successfull"");
               }"
63890-0.sol,question,"function hibid () 
               {
                 var holder=  BiddingAddress.GethighestBidder();
                 document.getElementById(""getbid"").innerHTML=holder;
               }"
13321-1.sol,question,"function generateWallet(privateKey, password){

    const dk = {
        privateKey: Buffer.from(privateKey, 'utf8'),
        salt: crypto.randomBytes(32),
        iv: crypto.randomBytes(16)
    }

    const options = {
        kdf: ""pbkdf2"",
        cipher: ""aes-128-ctr"",
        kdfparams: {
            c: 262144,
            dklen: 32,
            prf: ""hmac-sha256""
        }
    }

    return keythereum.dump(
        password,
        dk.privateKey,
        dk.salt,
        dk.iv,
        options
    )
}"
43510-1.sol,question,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      infurawallet = accounts[0];
     }"
31234-1.sol,question,"function(deployer) {
deployer.deploy(token, 10000, ""TOK"", ""ExampleToken"", 20, 10);
deployer.link(token,newtoken);
deployer.deploy(newtoken);
}"
48886-0.sol,question,"function bal(a,b,c){

  Balcontract.deployed().then(function(instance){

    var registerInstance = instance;
    return registerInstance.InReturn(a,b,c,{from: iswallet,gas: 4000000,value:web3.toWei(0.006,'ether')});

    });
    }"
48886-0.sol,question,"function(instance){

    var registerInstance = instance;
    return registerInstance.InReturn(a,b,c,{from: iswallet,gas: 4000000,value:web3.toWei(0.006,'ether')});

    }"
70781-0.sol,question,"function(deployer) {

    let firstAirline = '0x55690752ed06B1d37510D20B3516b2D12F007f6d';

    deployer.deploy(FlightSuretyData, firstAirline)
    .then(() => {
        return deployer.deploy(FlightSuretyApp, FlightSuretyData.address)
                .then(() => {
                    let config = {
                        localhost: {
                            url: 'http:
                            dataAddress: FlightSuretyData.address,
                            appAddress: FlightSuretyApp.address,
                            numOracles: 50,
                        }
                    }
                    fs.writeFileSync(__dirname + '/../src/dapp/config.json',JSON.stringify(config, null, '\t'), 'utf-8');
                    fs.writeFileSync(__dirname + '/../src/server/config.json',JSON.stringify(config, null, '\t'), 'utf-8');
                });
    });"
78654-3.sol,question,"function(error,event){
      for(let i=0; i<event.length;i++){
        if(event.args.address == account[0]){
          result.push(event.args.address);
        }
      }
    }"
83729-0.sol,question,"function AcceptOffer() public payable
    {
        if ( msg.sender != InstanceOwner )
        {
            revert(""You are not the owner of this contract and cannot accept the offer"");
        }
        if (State != StateType.OfferPlaced) {
            revert(""You can only accept valid offers"");
        }
        InstanceOwner.transfer(Change)
        InstanceBuyer.transfer(OfferPrice);
        State = StateType.Accepted;
    }"
56607-0.sol,question,"function(deployer) {
  deployer.deploy(Ownable);
  deployer.deploy(OmniCAT);
}"
51604-0.sol,question,"function(err, res) {console.log(JSON.stringify(res))}"
24915-4.sol,question,"function(done) {
    patient.getPublicAddress(web3.fromAscii(""123456789""), {from:accounts[0], to:patient.address})
    .then(function(res) {
      assert.equal(res, 0);
      done()
    }, function(error) {
        
        console.error(error)
        assert.equal(true, false)
        done()
      })
  }"
24915-4.sol,question,"function(res) {
      assert.equal(res, 0);
      done()
    }"
24915-4.sol,question,"function(error) {
        
        console.error(error)
        assert.equal(true, false)
        done()
      }"
65521-0.sol,question,"function() public payable {
    require(now < ticketExpiryDateTimestamp, ""This sale has been completed"");
    require(emitedTickets < maxTicketsSupply, ""Sold out"");
    uint _ticketsAmount = msg.value / ticketPrice;
    require(_ticketsAmount < maxTicketsSupply, ""You can't buy more tickets than the emitted number"");
    require(_ticketsAmount > 0, ""You did not pay enough to buy any ticket"");
    transfer(msg.sender, msg.value - _ticketsAmount * ticketPrice);
    mint(msg.sender, _ticketsAmount);
    emitedTickets += _ticketsAmount;
}"
46192-0.sol,question,"function(error, event){
      console.log(""event : "",event);
}"
52458-2.sol,question,"function(chainListArtifact) {

      
      App.contracts.RentalContractTesting = TruffleContract(chainListArtifact);
      
      App.contracts.RentalContractTesting.setProvider(App.web3Provider);
      
      App.listenToEvents();
      
      return App.reloadArticles();
    }"
52458-2.sol,question,"function(instance) {
      chainListInstance = instance;
      return chainListInstance.getArticlesForSale();
    }"
52458-2.sol,question,"function(articlesIds) {

      
      $('#articlesRow').empty();

      for(var i = 0; i < articlesIds.length; i++){
        var articleId = articlesIds[i];
        chainListInstance.articles(articleId.toNumber()).then(function(article){
          App.displayArticle(article[0], article[1], article[3], article[4], article[5], article[6], article[7], article[8], article[9]);
        });
      }
      App.loading = false;
    }"
52458-2.sol,question,"function(article){
          App.displayArticle(article[0], article[1], article[3], article[4], article[5], article[6], article[7], article[8], article[9]);
        }"
52458-2.sol,question,"function(err) {
      console.error(err.message);
      App.loading = false;
    }"
52458-2.sol,question,"function(id, seller, beds, baths, propaddress, rental_price, property_type, description, contact) {
    var articlesRow = $('#articlesRow');

    

    var articleTemplate = $(""#articleTemplate"");
    
    articleTemplate.find('.beds').text(beds);
    articleTemplate.find('.baths').text(baths);
    articleTemplate.find('.propaddress').text(propaddress);
    articleTemplate.find('.rental_price').text('$' + rental_price);
    articleTemplate.find('.property_type').text(property_type);
    articleTemplate.find('.description').text(description);
    articleTemplate.find('.contact').text(contact);
    
    articleTemplate.find('.btn-buy').attr('data-id', id);
    

      
    if(seller == App.account){
      articleTemplate.find('.article-seller').text(""You"");
      articleTemplate.find('.btn-buy').hide();
    }else{
      articleTemplate.find('.article-seller').text(seller);
      articleTemplate.find('.btn-buy').show();
    }
    
    articlesRow.append(articleTemplate.html());
  }"
52458-2.sol,question,"function(id, seller, available) {
    var articlesRow = $('#articlesRow');

    

    var articleTemplate = $(""#articleTemplate"");
    
    articleTemplate.find('.available').text(available);

      
    if(seller == App.account){
      articleTemplate.find('.article-seller').text(""You"");
      articleTemplate.find('.btn-buy').hide();
    }else{
      articleTemplate.find('.article-seller').text(seller);
      articleTemplate.find('.btn-buy').show();
    }
    
    articlesRow.append(articleTemplate.html());
  }"
52458-2.sol,question,"function(error, event) {
        if (!error) {
          $(""#events"").append('<li class=""list-group-item"">' + event.args._propaddress + ' is now for sale</li>');
        } else {
          console.error(error);
        }
        App.reloadArticles();
      }"
52458-2.sol,question,"function(instance){
      return instance.buyArticle(_articleId, {
        from: App.account,
        value: web3.toWei(_price, ""ether""),
        gas: 500000
      });
    }"
82521-0.sol,question,"function setValue(bytes32 value, uint256 requestCode)
{
    testValue = value;
    ValidationAndPaymentEvent(requestCode);
}"
51701-1.sol,question,"function getAirdrop(){
    erc20TOken.increaseApproval(msg.sender, 100000000000000000000);
}"
77198-1.sol,question,"function(instance){
            authorDonation = instance
      console.log('author donation', authorDonation)
      assert.isOk(authorDonation)
      

  }"
77198-1.sol,question,"function(tx) {
      
      assert.isOk(tx.receipt)
      
      printBalances(accounts)
      done()
    }"
77198-1.sol,question,"function(error) {
        
        assert.equal(true, false)
        console.error(error)
        done()
      }"
67845-0.sol,question,"function(error, data) {
    console.log(data)
}"
15318-3.sol,question,"function() {
    contractED.dosomething({value: $(""#_okl"").val()}, function(err, result) {
        console.log(err, result);
    })
}"
15353-1.sol,question,"function(err, result) {
    if(err) {
        console.log(err);
        return;
    }
    console.log(""Deadline "" + result.args.deadline);
    console.log(""Time Now "" + result.args.timeNow);
    deadlineSet.stopWatching();
}"
83435-2.sol,question,function(ins){app=ins}
6789-0.sol,question,"function() {

    var accounts = web3.eth.accounts;
    var Param1 = parseInt($(""input#param1"").val());
    var Param2 = parseInt($(""input#param2"").val());
    var Param3 = parseInt($(""input#param3"").val());

    console.log(Param1,Param2,Param3)

    var myContractInstance=myContract.new(Param1,Param2,Param3,{ from: accounts[0]});

    console.log(myContractInstance);

    myContractInstance
    .then(function()
    .catch(function(err) {
    console.log('Error', err)
    });"
6789-0.sol,question,"function(err) {
    console.log('Error', err)
    }"
70225-1.sol,question,"function setTokenPrice(uint256 _newPrice) public{
  tokenPrice = _newPrice;
}"
71691-2.sol,question,"function unbond(address payable wallet, bytes32 specifier, uint quantity) internal{

    bondage = BondageInterface(coord.getContract(""BONDAGE"")); 
    uint issued = bondage.getDotsIssued(address(this), specifier);

    currentCost = CurrentCostInterface(coord.getContract(""CURRENT_COST"")); 
    uint reserveCost = currentCost._costOfNDots(address(this), specifier, issued + 1 - quantity, quantity - 1);
    FactoryTokenInterface tok = FactoryTokenInterface(curves[specifier]);

    
    bondage.unbond(address(this), specifier, quantity);
    
    tok.burnFrom(wallet, quantity);
    
    wallet.transfer(reserveCost * adapterRate);
}"
74002-0.sol,question,"function processDelegatedTransaction(
    address userAddress,
    bytes32 msgHash,
    uint8 v,
    bytes32 r,
    bytes32 s,
    uint16 param1,
    uint16 param2
) public requireOwner {

    require(userAddress == ecrecover(msgHash, v, r, s));

    
}"
68222-0.sol,question,"function withdraw () public
    {
        emit withdrawn();
        address payable landlordAddpayable = address(uint160(address(landlordAdd)));
        landlordAddpayable.send(address(this).balance);  
    }"
68222-0.sol,question,"function terminate() public
    {
        emit contractTerminated();
        address payable landlordAddpayable = address(uint160(address(landlordAdd)));
        landlordAddpayable.send(address(this).balance);
        
        state = State.Terminated;
    }"
12751-1.sol,question,"function(result){
     projects = result; 
     for(var i =0 ; i < result.length ; i++) {
     projects[i].getProjInfo.call();
     }}"
65550-0.sol,question,"function(err, result) {
            if (err) {
              console.log(""error!"");
            } else {
              this.setState(prevState => ({
                eventData: [...prevState.eventData, result.args]
              }));
            }
          }"
43874-0.sol,question,"function closeBid(string _product) public{
  }"
24906-0.sol,question,"function(identity, message) {

        
        var privKey = new bitcore.PrivateKey('1d71471e33462a2484cd828643da29f2f643e2f55f6922c16c9a9df2982f408c');
          console.log(""private key=>"" + privKey);
        var alice = ECIES().privateKey(privKey).publicKey(new bitcore.PublicKey(identity.publicKey));
        console.log(""Alice's public key=>"" + alice);
        var encrypted = alice.encrypt(message);
        console.log(""encrypted message by public key of Alice=>""+ encrypted.toString('hex'));

        return encrypted.toString('hex');
    }"
24906-0.sol,question,"function(identity, encrypted) {
        var privKey = new bitcore.PrivateKey(identity.privateKey);
        console.log(""Alice Private key=> "" + privKey);
        var alice = ECIES().privateKey(privKey);
        console.log(""Allice private key again=>"" + alice);
        var decryptMe = new Buffer(encrypted, 'hex');
        console.log(""decrypted message=>"" + decryptMe);
        var decrypted = alice.decrypt(decryptMe);
        console.log(""final decrypted message=>""+decrypted.toString('ascii'));
        return decrypted.toString('ascii');
    }"
60901-0.sol,question,"function(error,res){
   if(!error){ContractInstance.dead.call(function(err, result){
              console.log(result);});}
             }"
79098-1.sol,question,"function(instance) {

  console.log(""Initializing"");
  instance.deposit({from: fromAddress1, 
                    gas: 3000000,
                    value: web3.toWei(betAmount, 'ether')}) 
                               .then(function(v){
                                       console.log(v);
                                       console.log(""Function Executed"");

                                 });
                       }"
79098-1.sol,question,"function(e){
      e.preventDefault();
       console.log(""Initializing"");
         contract.transfer(fromAddress2, 1,
              {gas: 3000000,
               from: fromAddress1},
                            function (error, result){ 
                                   if(!error){
                                     console.log(result);
                                    } else{
                                     console.log(error);
                                     }
         })}"
41932-1.sol,question,"function(err, res){
   alert(""Transaction sent"");
 }"
71761-0.sol,question,"function() {
    let abi = [...]; 
    let bytecode = ""0x...""; 
    let sender = ""0x577...8c6b"";

    let newContract = new web3.eth.Contract(abi);
    newContract.options.data = bytecode;

    newContract.deploy({
        args: """"
    }).send({
        from: sender,
        gas: 3000000, 
        gasPrice: '30000000000000'
    }).on('error', (error) => {
        console.log(""Error: "", error);
    }).on('transactionHash', (transactionHash) => {
        console.log(""TxHash: "", transactionHash);
    }).on('receipt', (receipt) => {
       console.log(""Address: "", receipt.contractAddress)
    }).then((newContractInstance) => {
        console.log(newContractInstance);   
    }).catch(function(error) {
        console.log(error);
    });
}"
17931-0.sol,question,function(instance){return instance.returnGreeting.call()}
60883-1.sol,question,"function(deployer) {
  deployer.deploy(ContractOne, ""FROM ADDRESS"");
}"
41749-0.sol,question,"function (data){
  console.log(data)
}"
43363-0.sol,question,"function(req, res){
  const data = { name: req.body.name.replace("" "", """"), passphrase: req.body.passphrase };

  let address;

  return Promise.resolve()
    .then(function() {
      address = web3.personal.newAccount(data.passphrase);
    })
    .then(function() {
      return web3.personal.unlockAccount(bank, """");
    })
    .then(function(ret) {
      if (ret) {
        return web3.eth.sendTransaction({ from: bank, to: address, value: topUpWei, gas: defaultGasLimit, gasPrice: defaultGasPrice });
      }
      throw ({ message: 'unable to decrypt mint wallet' });
    })
    .then(function(ret) {
      if (ret) {
        return web3.personal.unlockAccount(address, data.passphrase);
      }
      throw ({ message: 'unable to send initial Ethers' });
    })
    .then(function(ret) {
      if (ret) {
        return contractDeployed.createWallet(data.name, 2, { from: address, gas: defaultGasLimit, gasPrice: defaultGasPrice });
      }
      throw ({ message: 'unable to decrypt ' + data.name + ' wallet' });
    })
    .then(function(ret) {
      if (!ret) {
        throw ({ message: 'unable to create wallet ' + data.name });
      }
    })
    .then(function() {
      return res.status(200).json({ address: address });
    })
    .catch(function(err) {
      console.log(err.message);
      return res.status(500).json({error: err.message});
    });

  return Promise.resolve(null);
}"
43363-0.sol,question,"function() {
      address = web3.personal.newAccount(data.passphrase);
    }"
43363-0.sol,question,"function(ret) {
      if (ret) {
        return web3.eth.sendTransaction({ from: bank, to: address, value: topUpWei, gas: defaultGasLimit, gasPrice: defaultGasPrice });
      }
      throw ({ message: 'unable to decrypt mint wallet' });
    }"
43363-0.sol,question,"function(err) {
      console.log(err.message);
      return res.status(500).json({error: err.message});
    }"
15549-1.sol,question,"function(accounts) {

  var user = accounts[0];

  var valueP2C      = web3.toWei(2, ""ether"");

  it(""Deploy Gen );

  it(""Gen account is empty"", function(done){
    web3.eth.getBalance(gen.address, function(err, res){
      done(assert.equal(res.valueOf(), 0, """"));
    });
  });

  it(""Use account is full"", function(done){
    web3.eth.getBalance(user, function(err, res){
      userAmount = res.valueOf(); 
      done(assert.equal(res.valueOf(), 0, """"));
    });
  });  

  it (""Send money from user to gen"", function(done){ 
    gen.getMoney({from: user, value: valueP2C}).then(function(res){
        done(assert.notEqual(res, null, """"));
      });
  });


  it(""Gen recieved money"", function(done){
    web3.eth.getBalance(gen.address, function(err, res){
      done(assert.equal(res.valueOf(), valueP2C, """"));
    });
  });

  it(""User account is P2C lower"", function(done){
    web3.eth.getBalance(user, function(err, res){
      done(assert.equal(res.valueOf(), userAmount - valueP2C, """"));
    });
  });  
}"
15549-1.sol,question,"function(done){
    web3.eth.getBalance(gen.address, function(err, res){
      done(assert.equal(res.valueOf(), 0, """"));
    });
  }"
15549-1.sol,question,"function(err, res){
      done(assert.equal(res.valueOf(), 0, """"));
    }"
15549-1.sol,question,"function(res){
        done(assert.notEqual(res, null, """"));
      }"
72189-1.sol,question,"function(deployer) {
  deployer.deploy(Election );
}"
7416-1.sol,question,"function(err,result){
        if(err)
        console.log(err);
}"
72844-0.sol,question,"function(deployer) {
  deployer.deploy(Migrations);
  deployer.deploy(CrowdTestToken).then((instance) => {
    console.log(instance);
    deployer.deploy(CrowdSale, instance.address);
  });
}"
19474-1.sol,question,function(instance) { console.log(instance.address);}
12778-0.sol,question,"function(instance){
return instance.contribute(""0xe014b7528ae8b245b829dca3f9abceabc777b387"",{
from:web3.eth.accounts[0],value:10
});
}"
77974-1.sol,question,"function transfer_money(uint256 _CadNumber) public{
        InfoProperty storage Property_Info = propertys[_CadNumber];
        InfoSales storage Transfer_Money = sales[Property_Info.cad_number];

        if (Property_Info.selling != true) revert();
        if (Property_Info.pledge != false) revert();
        if (Property_Info.owneraddress == msg.sender) revert();
        if (balances[msg.sender] < Property_Info.property_cost) revert();

        balances[msg.sender] -= Property_Info.property_cost;
        Transfer_Money.buyer = msg.sender;
        access = true;
        balances[Transfer_Money.owneraddress] += Property_Info.property_cost;
        prop_id = _CadNumber;
    }"
34502-0.sol,question,"function getMoney() external payable 
{
    Event_GotMoney(msg.value, now);
}"
2084-0.sol,question,"function(error, result){
         console.log(result.args.from + "" => ""+result.args.to + "" [""+result.args.value+""]"");
     }"
78303-1.sol,question,"function(deployer) {

deployer.deploy(Dapptoken);
"
49746-1.sol,question,"function(error, event){}"
49746-1.sol,question,"function(event){
  io.emit('new user', event.returnValues);
}"
84001-0.sol,question,"function() {
  return window.web3;
}"
84001-0.sol,question,"function(result) {
  const provider = new PrivateKeyProvider(
    ""ACCOUNT_PRIVATE_KEY"",
    ""http:
  );
  result.value = new Web3(provider);
}"
63428-0.sol,question,"function() {
    console.log('app started');
    return App.intiWeb3();
}"
63428-0.sol,question,"function(ajtokensale) {
        App.contracts.AjTokenSale = TruffleContract(ajtokensale);
        App.contracts.AjTokenSale.setProvider(App.web3Provider);
        App.contracts.AjTokenSale.deployed().then(function(ajtokensale){
            
            
            console.log('AJTOKEN sale address is ' + ajtokensale.address);
            
        }); 
    }"
63428-0.sol,question,"function(ajtokensale){
            
            
            console.log('AJTOKEN sale address is ' + ajtokensale.address);
            
        }"
63428-0.sol,question,"function(ajtoken) {
        App.contracts.AjToken = TruffleContract(ajtoken);
        App.contracts.AjToken.setProvider(App.web3Provider);
        App.contracts.AjToken.deployed().then(function(ajtoken){
            console.log('AJ token  address ' + ajtoken.address);
        });
        return App.render();
      }"
63428-0.sol,question,"function(ajtoken){
            console.log('AJ token  address ' + ajtoken.address);
        }"
63428-0.sol,question,"function(err, account) {
        if(account) {
            App.account = account;
            $('#accountAddress').html(""Your account: "" + account);
        } else {
            console.log('Address is null, err is '+err)
        }
    }"
63428-0.sol,question,"function(instance) {
        ajtokenSaleInstance = instance;
        
        return ajtokenSaleInstance.tokenPrice();
    }"
63428-0.sol,question,"function(tokenPrice) {
        App.tokenPrice = tokenPrice.toNumber();
        
        $('.token-price').html(web3.fromWei(App.tokenPrice, 'ether'));
        return ajtokenSaleInstance.tokensSold();            
    }"
63428-0.sol,question,"function(tokensSold) {
        
        App.tokensSold = parseInt(tokensSold).toNumber(); 
        
        $('.tokens-sold').html(App.tokensSold);
        $('.token-available').html(App.tokensAvilable);

        var progressPercent = (Math.ceil(App.tokensSold) / App.tokensAvilable)* 100;
        $('#progress').css('width', progressPercent+'%');

        

        App.contracts.AjToken.deployed().then(function(instance) {
            ajTokenInstance = instance;
            return ajTokenInstance.balanceOf(App.account);
        }).then(function(balance) {
            $('.ajtoken-balance').html(balance.toNumber());
            App.loading = false;
            loader.hide();
            content.show();
        })
    }"
63428-0.sol,question,"function(balance) {
            $('.ajtoken-balance').html(balance.toNumber());
            App.loading = false;
            loader.hide();
            content.show();
        }"
63428-0.sol,question,"function(result) {
        console.log(""Tokens bought.."");
        $('form').trigger('reset');
        $('#loader').hide();
        $('#content').show();
    }"
51028-3.sol,question,"function(deployer) {

    deployer.deploy(ArrayTes).then(function() {

        return deployer.deploy(CallFunction, ArrayTes.address);
    });
}"
51028-3.sol,question,"function() {

        return deployer.deploy(CallFunction, ArrayTes.address);
    }"
16058-1.sol,question,"function(accounts) {

  it(""should provide access to something"", function() {

    thing.deployed().then(function(instance) {

      instance.something.call().then(function(res) {
          console.log(res);
      });    
    });
  });
}"
16058-1.sol,question,"function() {

    thing.deployed().then(function(instance) {

      instance.something.call().then(function(res) {
          console.log(res);
      });    
    });
  }"
16058-1.sol,question,"function(instance) {

      instance.something.call().then(function(res) {
          console.log(res);
      });    
    }"
52320-0.sol,question,"function(results) {
    var nonce = results[0];
    var balance = results[1];
    var gasPrice = results[2];
    var Block = results[3];


 var run = true;
    var i = 0;
    var numberBlockTransactionHashes = Block.transactions.length;
    var TransactionDataPromise = [];
    TransactionDataPromise.push(web3.eth.getTransaction(Block.transactions[i]));
    console.log(""numberBlockTransactionHashes: "" + numberBlockTransactionHashes);




var txData = web3.utils.asciiToHex('hi'); 

var rawTx = {
  nonce: '0x' + nonce, 
 gasLimit: web3.utils.toHex(1000000), 
gasPrice: web3.utils.toHex(200000000000), 
 to: receivingAddr, 
  value: txValue, 
  data: txData 
}

console.log(rawTx); 


var tx = new Tx(rawTx);
tx.sign(privateKey); 

var serializedTx = tx.serialize(); 

console.log(""Tx Hex"" + serializedTx.toString('hex')); 

web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')) 
.on('receipt', console.log); 

}"
56592-0.sol,question,"function(error, event) {
    console.log(error, event)
}"
50133-1.sol,question,"function(accounts){

    var chainListInstance;
    var seller = accounts[1];
    var buyer = accounts[2];
    var beds = ""beds"";
    var baths = ""baths"";
    var propaddress = ""propaddress"";
    var rental_price = ""rental_price"";
    var article_description = ""article_description"";
    var available = ""available"";
    var contact_email = ""contact_email"";
    var beds2 = ""beds2"";
    var baths2 = ""baths2"";
    var propaddress2 = ""propaddress2"";
    var rental_price2 = ""rental_price2"";
    var article_description2 = ""article_description2"";
    var available2 = ""available2"";
    var contact_email2 = ""contact_email2"";
    var articleName1 = ""article 1"";
    var articleDescription1 =""Description for article 1"";
    var articlePrice1 = 10;
    var articleName2 = ""article 2"";
    var articleDescription2 = ""Description for article 2"";
    var articlePrice2 = 20;
    var sellerBalanceBeforeBuy, sellerBalanceAfterBuy;
    var buyerBalanceBeforeBuy, buyerBalanceAfterBuy;

  it(""should be initialized with empty values"", function(){
    return Rental.deployed().then(function(instance){
        chainListInstance = instance;
      return chainListInstance.getNumberOfArticles();
    }).then(function(data){
      assert.equal(data.toNumber(), 0, ""number of articles must be zero"");
      return chainListInstance.getArticlesForSale();
    }).then(function(data){
      assert.equal(data.length, 0, ""there shouldn't be any articles for sale"");
    });
  });
   it(""should let us sell first article"", function(){
    return Rental.deployed().then(function(instance){
      chainListInstance = instance;
      return chainListInstance.sellArticle(
        beds,
        baths,
        propaddress,
        rental_price,
        article_description,
        available,
        contact_email,
        articleName1,
        articleDescription1,
        web3.toWei(articlePrice1, ""ether""),
        {from: seller}
      );
    }).then(function(receipt){
      assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
      assert.equal(receipt.logs[0].event, ""LogSellArticle"", ""event should be LogSellArticle"");
      assert.equal(receipt.logs[0].args._id.toNumber(), 1, ""id must be 1"");
      assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
      assert.equal(receipt.logs[0].args._name, articleName1, ""event article name must be "" + articleName1);
      assert.equal(receipt.logs[0].args._name, beds, ""event beds must be "" + beds);
      assert.equal(receipt.logs[0].args._name, baths, ""event baths must be "" + baths);
      assert.equal(receipt.logs[0].args._name, propaddress, ""event propaddress must be "" + propaddress);
      assert.equal(receipt.logs[0].args._name, rental_price, ""event rental_price must be "" + rental_price);
      assert.equal(receipt.logs[0].args._name, article_description, ""event article_description must be "" + article_description);
      assert.equal(receipt.logs[0].args._name, available, ""event available must be "" + available);
      assert.equal(receipt.logs[0].args._name, contact_email, ""event contact_email must be "" + contact_email);
      assert.equal(receipt.logs[0].args._price.toNumber(), web3.toWei(articlePrice1, ""ether""), ""event article price must be "" + web3.toWei(articlePrice1, ""ether""));

      return chainListInstance.getNumberOfArticles();
    }).then(function(data){
      assert.equal(data, 1, ""number of articles must be one"");

      return chainListInstance.getArticlesForSale();
    }).then(function(data) {
      assert.equal(data.length, 1, ""there must be one article for sale"");
      assert.equal(data[0].toNumber(), 1, ""article id must be 1"");

      return chainListInstance.articles(data[0]);
    }).then(function(data){
      assert.equal(data[0].toNumber(), 1, ""article id must be 1"");
      assert.equal(data[1], seller, ""seller must be "" + seller);
      assert.equal(data[2], 0x0, ""buyer must be empty"");
      assert.equal(data[3], articleName1, ""article name must be "" + articleName1);
      assert.equal(data[4], articleDescription1, ""article description must be "" + articleDescription1);
      assert.equal(data[5].toNumber(), web3.toWei(articlePrice1, ""ether""), ""article price must be "" + web3.toWei(articlePrice1, ""ether""));
      assert.equal(data[6], beds, ""beds must be "" + beds);
      assert.equal(data[7], baths, ""baths must be "" + baths);
      assert.equal(data[8], propaddress, ""propaddress must be "" + propaddress);
      assert.equal(data[9], rental_price, ""rental_price must be "" + rental_price);
      assert.equal(data[10], article_description, ""article_description must be "" + article_description);
      assert.equal(data[11], available, ""available must be "" + available);
      assert.equal(data[12], contact_email, ""contact_email must be "" + contact_email);
    });
   });

    it(""should let us sell second article"", function(){
     return Rental.deployed().then(function(instance){
       chainListInstance = instance;
       return chainListInstance.sellArticle(
         beds2,
         baths2,
         propaddress2,
         rental_price2,
         article_description2,
         available2,
         contact_email2,
         articleName2,
         articleDescription2,
         web3.toWei(articlePrice2, ""ether""),
         {from: seller}
       );
     }).then(function(receipt){
       assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
       assert.equal(receipt.logs[0].event, ""LogSellArticle"", ""event should be LogSellArticle"");
       assert.equal(receipt.logs[0].args._id.toNumber(), 2, ""id must be 2"");
       assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
       assert.equal(receipt.logs[0].args._name, beds2, ""event beds must be "" + beds2);
       assert.equal(receipt.logs[0].args._name, baths2, ""event baths must be "" + baths2);
       assert.equal(receipt.logs[0].args._name, propaddress2, ""event propaddress must be "" + propaddress2);
       assert.equal(receipt.logs[0].args._name, rental_price2, ""event rental_price must be "" + rental_price2);
       assert.equal(receipt.logs[0].args._name, article_description2, ""event article_description must be "" + article_description2);
       assert.equal(receipt.logs[0].args._name, available2, ""event available must be "" + available2);
       assert.equal(receipt.logs[0].args._name, contact_email2, ""event contact_email must be "" + contact_email2);
       assert.equal(receipt.logs[0].args._name, articleName2, ""event article name must be "" + articleName2);
       assert.equal(receipt.logs[0].args._price.toNumber(), web3.toWei(articlePrice2, ""ether""), ""event article price must be "" + web3.toWei(articlePrice2, ""ether""));

       return chainListInstance.getNumberOfArticles();
     }).then(function(data){
       assert.equal(data, 2, ""number of articles must be two"");

       return chainListInstance.getArticlesForSale();
     }).then(function(data) {
       assert.equal(data.length, 2, ""there must be two articles for sale"");
       assert.equal(data[1].toNumber(), 2, ""article id must be 2"");

       return chainListInstance.articles(data[1]);
     }).then(function(data){
       assert.equal(data[0].toNumber(), 2, ""article id must be 2"");
       assert.equal(data[1], seller, ""seller must be "" + seller);
       assert.equal(data[2], 0x0, ""buyer must be empty"");
       assert.equal(data[3], articleName2, ""article name must be "" + articleName2);
       assert.equal(data[4], articleDescription2, ""article description must be "" + articleDescription2);
       assert.equal(data[5].toNumber(), web3.toWei(articlePrice2, ""ether""), ""article price must be "" + web3.toWei(articlePrice2, ""ether""));
       assert.equal(data[6], beds2, ""beds must be "" + beds2);
       assert.equal(data[7], baths2, ""baths must be "" + baths2);
       assert.equal(data[8], propaddress2, ""propaddress must be "" + propaddress2);
       assert.equal(data[9], rental_price2, ""rental_price must be "" + rental_price2);
       assert.equal(data[10], article_description2, ""article_description must be "" + article_description2);
       assert.equal(data[11], available2, ""available must be "" + available2);
       assert.equal(data[12], contact_email2, ""contact_email must be "" + contact_email2);
      });
    });

    it(""should buy an article"", function (){
    return Rental.deployed().then(function(instance){
    chainListInstance = instance;
    sellerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
    buyerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();
    return chainListInstance.buyArticle(1, {
      from: buyer,
      value: web3.toWei(articlePrice1, ""ether"")
        });
      }).then(function(receipt){
        assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
        assert.equal(receipt.logs[0].event, ""LogBuyArticle"", ""event should be LogBuyArticle"");
        assert.equal(receipt.logs[0].args._id.toNumber(), 1,""article id must be 1"");
        assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
        assert.equal(receipt.logs[0].args._buyer, buyer, ""event buyer must be "" + buyer);
        assert.equal(receipt.logs[0].args._name, articleName1, ""event article name must be "" + articleName1);
        assert.equal(receipt.logs[0].args._name, beds, ""event beds must be "" + beds);
        assert.equal(receipt.logs[0].args._name, baths, ""event baths must be "" + baths);
        assert.equal(receipt.logs[0].args._name, propaddress, ""event propaddress must be "" + propaddress);
        assert.equal(receipt.logs[0].args._name, rental_price, ""event rental_price must be "" + rental_price);
        assert.equal(receipt.logs[0].args._name, article_description, ""event article_description must be "" + article_description);
        assert.equal(receipt.logs[0].args._name, available, ""event available must be "" + available);
        assert.equal(receipt.logs[0].args._name, contact_email, ""event contact_email must be "" + contact_email);
        assert.equal(receipt.logs[0].args._price.toNumber(),web3.toWei(articlePrice1, ""ether""), ""event article price must be "" + web3.toWei(articlePrice1, ""ether""));

     sellerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
     buyerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();

     assert(sellerBalanceAfterBuy == sellerBalanceBeforeBuy + articlePrice1, ""seller should have earned "" + articlePrice1 + "" ETH"");
     assert(buyerBalanceAfterBuy <= buyerBalanceBeforeBuy - articlePrice1, ""buyer should have spent "" + articlePrice1 + "" ETH"");

     return chainListInstance.getArticlesForSale();

   }).then(function(data){
     assert.equal(data.length, 1, ""there should now be only 1 article left for sale"");
     assert.equal(data[0].toNumber(), 2, ""article 2 should be the only article for sale"");

    return chainListInstance.getNumberOfArticles();
   }).then(function(data){
     assert.equal(data.toNumber(), 2, ""there should still be 2 articles in total"");

   });
    });
  }"
50133-1.sol,question,"function(){
    return Rental.deployed().then(function(instance){
        chainListInstance = instance;
      return chainListInstance.getNumberOfArticles();
    }).then(function(data){
      assert.equal(data.toNumber(), 0, ""number of articles must be zero"");
      return chainListInstance.getArticlesForSale();
    }).then(function(data){
      assert.equal(data.length, 0, ""there shouldn't be any articles for sale"");
    });
  }"
50133-1.sol,question,"function(instance){
        chainListInstance = instance;
      return chainListInstance.getNumberOfArticles();
    }"
50133-1.sol,question,"function(data){
      assert.equal(data.toNumber(), 0, ""number of articles must be zero"");
      return chainListInstance.getArticlesForSale();
    }"
50133-1.sol,question,"function(receipt){
      assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
      assert.equal(receipt.logs[0].event, ""LogSellArticle"", ""event should be LogSellArticle"");
      assert.equal(receipt.logs[0].args._id.toNumber(), 1, ""id must be 1"");
      assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
      assert.equal(receipt.logs[0].args._name, articleName1, ""event article name must be "" + articleName1);
      assert.equal(receipt.logs[0].args._name, beds, ""event beds must be "" + beds);
      assert.equal(receipt.logs[0].args._name, baths, ""event baths must be "" + baths);
      assert.equal(receipt.logs[0].args._name, propaddress, ""event propaddress must be "" + propaddress);
      assert.equal(receipt.logs[0].args._name, rental_price, ""event rental_price must be "" + rental_price);
      assert.equal(receipt.logs[0].args._name, article_description, ""event article_description must be "" + article_description);
      assert.equal(receipt.logs[0].args._name, available, ""event available must be "" + available);
      assert.equal(receipt.logs[0].args._name, contact_email, ""event contact_email must be "" + contact_email);
      assert.equal(receipt.logs[0].args._price.toNumber(), web3.toWei(articlePrice1, ""ether""), ""event article price must be "" + web3.toWei(articlePrice1, ""ether""));

      return chainListInstance.getNumberOfArticles();
    }"
50133-1.sol,question,"function(data) {
      assert.equal(data.length, 1, ""there must be one article for sale"");
      assert.equal(data[0].toNumber(), 1, ""article id must be 1"");

      return chainListInstance.articles(data[0]);
    }"
50133-1.sol,question,"function (){
    return Rental.deployed().then(function(instance){
    chainListInstance = instance;
    sellerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
    buyerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();
    return chainListInstance.buyArticle(1, {
      from: buyer,
      value: web3.toWei(articlePrice1, ""ether"")
        });
      }).then(function(receipt){
        assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
        assert.equal(receipt.logs[0].event, ""LogBuyArticle"", ""event should be LogBuyArticle"");
        assert.equal(receipt.logs[0].args._id.toNumber(), 1,""article id must be 1"");
        assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
        assert.equal(receipt.logs[0].args._buyer, buyer, ""event buyer must be "" + buyer);
        assert.equal(receipt.logs[0].args._name, articleName1, ""event article name must be "" + articleName1);
        assert.equal(receipt.logs[0].args._name, beds, ""event beds must be "" + beds);
        assert.equal(receipt.logs[0].args._name, baths, ""event baths must be "" + baths);
        assert.equal(receipt.logs[0].args._name, propaddress, ""event propaddress must be "" + propaddress);
        assert.equal(receipt.logs[0].args._name, rental_price, ""event rental_price must be "" + rental_price);
        assert.equal(receipt.logs[0].args._name, article_description, ""event article_description must be "" + article_description);
        assert.equal(receipt.logs[0].args._name, available, ""event available must be "" + available);
        assert.equal(receipt.logs[0].args._name, contact_email, ""event contact_email must be "" + contact_email);
        assert.equal(receipt.logs[0].args._price.toNumber(),web3.toWei(articlePrice1, ""ether""), ""event article price must be "" + web3.toWei(articlePrice1, ""ether""));

     sellerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
     buyerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();

     assert(sellerBalanceAfterBuy == sellerBalanceBeforeBuy + articlePrice1, ""seller should have earned "" + articlePrice1 + "" ETH"");
     assert(buyerBalanceAfterBuy <= buyerBalanceBeforeBuy - articlePrice1, ""buyer should have spent "" + articlePrice1 + "" ETH"");

     return chainListInstance.getArticlesForSale();

   }).then(function(data){
     assert.equal(data.length, 1, ""there should now be only 1 article left for sale"");
     assert.equal(data[0].toNumber(), 2, ""article 2 should be the only article for sale"");

    return chainListInstance.getNumberOfArticles();
   }).then(function(data){
     assert.equal(data.toNumber(), 2, ""there should still be 2 articles in total"");

   });
    }"
12045-0.sol,question,"function testOracle(){
       oraclize_query(""WolframAlpha"", ""random number between 0 and 100"");}"
80183-2.sol,question,"function(deployer) {
  deployer.deploy(TestLib)
  deployer.link(TestLib, TestContract)
  deployer.deploy(TestContract)
}"
4576-0.sol,question,"function() {
    console.log(window.transactionHash);
web3.eth.getTransactionReceipt(window.transactionHash, function(err, receipt){
    console.log(err);
    console.log(receipt);
    
});

}"
4576-0.sol,question,"function(err, receipt){
    console.log(err);
    console.log(receipt);
    
}"
65269-3.sol,question,"function(deployer, network, accounts) {


    if(network == ""ganache"") {
        deployer.deploy(A, {gas:400000})
            .then(function(receipt) {
                return deployer.deploy(B, A.address, {from:accounts[0], gas:400000});
            })
            .catch(function(e){
                console.log(e);
            });   }}"
65269-3.sol,question,"function(receipt) {
                return deployer.deploy(B, A.address, {from:accounts[0], gas:400000});
            }"
76660-0.sol,question,"function addCandidates(){
 if( own == 1 ){
    candidate[0].candidate_ID[0] = 1;
    candidate[0].candidate_ID[1] = 2;
    candidate[0].candidate_ID[2] = 3;
    candidate[0].candidateslength = 3;

    candidate[0].voteCount[0] = 0;
    candidate[0].voteCount[1] = 0;
    candidate[0].voteCount[2] = 0;
 }
}"
36841-1.sol,question,"function get(){
   Contract.methods.getTest().call(function(err, result){
     if(err) console.log(err);
     else console.log(result);
   });
}"
36841-1.sol,question,"function(err, result){
     if(err) console.log(err);
     else console.log(result);
   }"
36841-1.sol,question,"function set(){
   web3.eth.getCoinbase().then(function(coinbase){
      web3.eth.personal.unlockAccount(coinbase, """", function(err) {
        Contract.methods.setTest(""ugonnawork"").send({from: coinbase, gas: 300000}, function(error, transactionHash){})
    .on('transactionHash', function(hash){console.log(""hash : "" + hash); })
    .on('error', console.error);
  });
 });
}"
36841-1.sol,question,"function(coinbase){
      web3.eth.personal.unlockAccount(coinbase, """", function(err) {
        Contract.methods.setTest(""ugonnawork"").send({from: coinbase, gas: 300000}, function(error, transactionHash){})
    .on('transactionHash', function(hash){console.log(""hash : "" + hash); })
    .on('error', console.error);
  });
 }"
36841-1.sol,question,"function(err) {
        Contract.methods.setTest(""ugonnawork"").send({from: coinbase, gas: 300000}, function(error, transactionHash){})
    .on('transactionHash', function(hash){console.log(""hash : "" + hash); })
    .on('error', console.error);
  }"
83368-1.sol,question,"function(err, candidateName) {
        $('#candidateName').html(candidateName);
      }"
83368-1.sol,question,"function(err, candidateotherName) {
        $('#candidateotherName').html(candidateotherName);
      }"
83368-1.sol,question,"function(event) {
        event.preventDefault();
        contract.setCandidate($('input').val());
      }"
79848-2.sol,question,"function(accounts) {
  let instance;
  before(async () => {
    instance = await Votingapp.deployed();
  });
  it('check users in list',async () => {

    console.log(""this is the"" +  instance.candidateList.call());
    await instance.candidateList.call()

  });
}"
68839-1.sol,question,"function bytesTest(byt){
  try{
    let c = await bytesContract.takeByt(byt, {gasLimit: 100000});
    let r = await bytesContract.on(""bytDone"", (res1, res2) => {
      console.log(res1);
      console.log(res2);
    });
  }catch(err){
    console.log(err);
  }
}"
83402-0.sol,question,"function(err,receipt){
    
    
    $('.Hash').html(""Transaction Hash: ""+receipt);
    $('.error').html(err);
}"
2264-0.sol,question,"function giveRightToVote(address voter)
{
    if (msg.sender != chairperson || voters[voter].voted)
        
        
        
        
        
        throw;
    voters[voter].weight = 1;
}"
16796-1.sol,question,function(instance){ return instance.sayHello()}
12328-2.sol,question,"function(deployer) {
  deployer.deploy(Project);
  deployer.deploy(FundingHub);
}"
78068-0.sol,question,"function sendRawTransaction(txData){
  web3.eth.getTransactionCount(addressFrom).then(txCount => {
    const newNonce = web3.utils.toHex(txCount)
    const transaction = new Tx({ ...txData, nonce: newNonce }, { chain: 'mainnet' }) 
    transaction.sign(privateKey)
    const serializedTx = transaction.serialize().toString('hex')
    return web3.eth.sendSignedTransaction('0x' + serializedTx)
  })
}"
13903-0.sol,question,"function() payable {
  if(msg.value <= 0) { throw; }
  if(!addressManage.profitContainerAddress.send(msg.value * 10 / 100)) { throw; }
  if(!addressManage.honshaAddress.send(msg.value * 10 / 100)) { throw; }
  ReceiveEther(msg.sender, profitContainerAddress, msg.value, name);

  transferFromOwner(msg.sender, msg.value / 1 ether * getPrice());
}"
19077-0.sol,question,"function proofOfWork(uint256 number){
    if (number <= lastNumber) throw; 
    if (!isPrime(number)) throw; 
    
    lastNumber = number;
    balanceOf[msg.sender] += number - lastNumber;
}"
73897-2.sol,question,"function(error, result) {
    if(!error) {
        $(""#member"").html(result[0]+' ('+result[1]+' years old)');
    } else
    console.log(error);
}"
73897-2.sol,question,"function() {
    contract.setMember($(""#name"").val(), $(""#age"").val());
    $(""#loader"").show();
}"
12228-1.sol,question,"function(e, log) { console.log(""Notified "", log); }"
33825-0.sol,question,"function() {
            console.log($(""#address"").val());
            console.log($(""#amount"").val());
            INCTokenC.approve($(""#address"").val(),$(""#amount"").val(),function(error, result){
                if(!error)
                    {

                        tx.then(function(res){console.log(res);});
                        console.log(tx);
                        if (tx != null) {
                            while(tx.blockNumber==null){
                                var tx = getTx(result);
                        }
                        var txResult = ""TxHash : "" + tx.hash +""\n TxBlockNumber : "" + tx.blockNumber;
                        $(""#result"").html(txResult);
                        console.log(result);
                        }
                        else {
                            $(""#result"").html(' No Transaction Happen');
                        }
                    }
                else
                    console.error(error);
            });
        }"
33825-0.sol,question,"function(error, result){
                if(!error)
                    {

                        tx.then(function(res){console.log(res);});
                        console.log(tx);
                        if (tx != null) {
                            while(tx.blockNumber==null){
                                var tx = getTx(result);
                        }
                        var txResult = ""TxHash : "" + tx.hash +""\n TxBlockNumber : "" + tx.blockNumber;
                        $(""#result"").html(txResult);
                        console.log(result);
                        }
                        else {
                            $(""#result"").html(' No Transaction Happen');
                        }
                    }
                else
                    console.error(error);
            }"
19542-2.sol,question,"function() {
    let newParent = await Parent.new();
    orgStore = await parent.orgStore();
    await newParent.setDataStore(orgStore);
    await parent.kill(newParent.address);
    assert.equal(orgStore, await newParent.orgStore());
}"
77058-2.sol,question,"function(_instance){
    return _instance.addBet(question, options, values, {from: App.account});
}"
77058-2.sol,question,"function(){
    console.log(""Bet has been added"");          
}"
67909-0.sol,question,"function(er,blck){
            if(blck>7300000){
                console.log('==> ETH connection to node1);
            }else{
                web3=undefined
                web3 = new Web3(new Web3.providers.HttpProvider((node2));
                console.log('==> ETH connection to node2);
            }
        }"
67909-0.sol,question,"function(er,block){
      console.log(block,web3) 
      
    }"
74827-3.sol,question,"function(deployer, network , accounts) {

  deployer

    .deploy(Token, 1000000, {from: accounts[0]})

    .then(async () => {

      const tokenContract = await Token.deployed();
      return deployer.deploy(Shop, tokenContract.address);
    })
    .then(async () => {
      const token = await Token.deployed();
      const coinbase = accounts[0];
      const value = 50000;
      await token.transfer(coinbase, accounts[1], value);
    });
}"
12958-0.sol,question,"function(){
  var coinbase = web3.eth.coinbase;
  document.getElementById('coinbase').innerText = coinbase;
  var balance = web3.eth.balanceAt(coinbase);
  document.getElementById('balance').innerText = web3.toDecimal(balance);
}"
45490-0.sol,question,"function ApproveAndCall(address dynContAddress, uint value){
  DynamicContract dynamicContractInstance = DynamicContract(dynContAddress);
  dynamicContractInstance.foo();

  return true;
}"
44023-0.sol,question,"function(deployed) {
  return deployed.someFunction();
}"
31104-0.sol,question,"function(error, event){
                  if (error) console.log(error);
                  console.log(""event is: "", event);
                }"
29311-1.sol,question,"function() {
window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
web3.eth.defaultAccount = '0x5908e7068cbf2de89fcb2ea998235fb0e743b846';
var addressc = '0xa736b0794339593f702622de998bff54f8fc9444';
var contract = web3.eth.contract([{""constant"":true,""inputs"":[],""name"":""ballotsNum"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""ballots"",""outputs"":[{""name"":""name"",""type"":""bytes32""},{""name"":""chainperson"",""type"":""address""},{""name"":""blind"",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""},{""name"":"""",""type"":""uint256""}],""name"":""proposals"",""outputs"":[{""name"":""name"",""type"":""bytes32""},{""name"":""voteCount"",""type"":""uint16""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""ballotName"",""type"":""bytes32""},{""name"":""blindParam"",""type"":""bool""},{""name"":""proposalNames"",""type"":""bytes32[]""}],""name"":""startNewBallot"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""}]).at(addressc);

contract.ballots(0,function(e,d){console.log(d);});
contract.proposals(0,0,function(e,d){console.log(d);});

var filter = web3.eth.filter('latest');
filter.watch(function(error, result) {
    var block = web3.eth.getBlock(result, true);
    console.log('block #' + block.number);
    console.dir(block.transactions);
});

var fromAscii = function(str, padding) {
    var hex = '0x';
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }
    return hex + '0'.repeat(padding*2 - hex.length + 2);
};

(function(){
    $('#add-option').click(function(){
        $('.options-wrapper').append(
            '<div class=option>' +
            '<input type=""text"" placeholder=""Type option here (max 32)"" maxlength=""32"" class=""option-value""></br>' +
            '</div>'
        );
        return false;
    });

    $('#create').click(function(){
        var options = [];
        var name = fromAscii($('#new-ballot-name').val(),32);
        $(document).find('.option-value').each(function(){
            val = $(this).val();
            opt = fromAscii(val,32);
            options.push(opt);
        });
        contract.startNewBallot(name, false, options, function(e,d){
            console.log(e+' '+d);
        });
        console.log(options);
        console.log(name);
        return false;
    });
}())
}"
29311-1.sol,question,"function(e,d){console.log(d);}"
29311-1.sol,question,"function(error, result) {
    var block = web3.eth.getBlock(result, true);
    console.log('block #' + block.number);
    console.dir(block.transactions);
}"
29311-1.sol,question,"function(str, padding) {
    var hex = '0x';
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }
    return hex + '0'.repeat(padding*2 - hex.length + 2);
}"
29311-1.sol,question,"function(){
    $('#add-option').click(function(){
        $('.options-wrapper').append(
            '<div class=option>' +
            '<input type=""text"" placeholder=""Type option here (max 32)"" maxlength=""32"" class=""option-value""></br>' +
            '</div>'
        );
        return false;
    });

    $('#create').click(function(){
        var options = [];
        var name = fromAscii($('#new-ballot-name').val(),32);
        $(document).find('.option-value').each(function(){
            val = $(this).val();
            opt = fromAscii(val,32);
            options.push(opt);
        });
        contract.startNewBallot(name, false, options, function(e,d){
            console.log(e+' '+d);
        });
        console.log(options);
        console.log(name);
        return false;
    });
}"
63712-1.sol,question,"function(error, result)
{
    let txhash = result;
    console.log(""tx: "" + txhash);

    let interval = setInterval(function()
    {
        web3.eth.getTransactionReceipt(txhash, function(error, result)
        {
            if(!error && result !== null)
            {
                if(result[""status""] == ""0x0"") 
                {

                }
                else if(result[""status""] == ""0x1"") 
                {
                    incomingVotes.push(result);
                    console.log(result);
                    clearInterval(interval);
                }
            }
        });
    }, 1000);
}"
63712-1.sol,question,"function()
    {
        web3.eth.getTransactionReceipt(txhash, function(error, result)
        {
            if(!error && result !== null)
            {
                if(result[""status""] == ""0x0"") 
                {

                }
                else if(result[""status""] == ""0x1"") 
                {
                    incomingVotes.push(result);
                    console.log(result);
                    clearInterval(interval);
                }
            }
        });
    }"
63712-1.sol,question,"function(error, result)
        {
            if(!error && result !== null)
            {
                if(result[""status""] == ""0x0"") 
                {

                }
                else if(result[""status""] == ""0x1"") 
                {
                    incomingVotes.push(result);
                    console.log(result);
                    clearInterval(interval);
                }
            }
        }"
55222-1.sol,question,"function(){


     var president,vp,party;
     
      if($('#pres1').is(':checked')){
        president = $('#pres1').val();

      }
      else if($(""#pres2"").is(':checked')){
        president = $('#pres2').val();
      }  
      else if($(""#pres3"").is(':checked')){
        president = $('#pres3').val();
      }  
      else if($(""#pres4"").is(':checked')){
        president = $('#pres4').val();
      }  
      else if($(""#pres5"").is(':checked')){
        president = $('#pres5').val();
      }  
      else if($(""#pres6"").is(':checked')){
        president = $('#pres6').val();
      }  
        
       if($('#vp1').is(':checked')){
        vp = $('#vp1').val();

      }
      else if($(""#vp2"").is(':checked')){
        vp = $('#vp2').val();
      }  
      else if($(""#vp3"").is(':checked')){
        vp = $('#vp3').val();
      }  
      else if($(""#vp4"").is(':checked')){
        vp = $('#vp4').val();
      }  
      else if($(""#vp5"").is(':checked')){
        vp = $('#vp5').val();
      }  
      else if($(""#vp6"").is(':checked')){
        vp = $('#vp6').val();
      }  

      
       if($('#party1').is(':checked')){
        party = $('#party1').val();

      }
      else if($(""#party2"").is(':checked')){
        party = $('#party2').val();
      }  
      else if($(""#party3"").is(':checked')){
        party = $('#party3').val();
      }  
      else if($(""#party4"").is(':checked')){
        party = $('#party4').val();
      }  
      else if($(""#party5"").is(':checked')){
        party = $('#party5').val();
      }  
      else if($(""#party6"").is(':checked')){
        party = $('#party6').val();
      }  
      else if($(""#party7"").is(':checked')){
        party = $('#party7').val();
      }  
      else if($(""#party8"").is(':checked')){
        party = $('#party8').val();
      }  
      else if($(""#party9"").is(':checked')){
        party = $('#party9').val();
      }  
      else if($(""#party10"").is(':checked')){
        party = $('#party10').val();
      }  
      else if($(""#party11"").is(':checked')){
        party = $('#party11').val();
      }  
       else if($(""#party12"").is(':checked')){
        party = $('#party12').val();
      }  

          Suffrage.setInstructor('sample id', president, vp, party, function(err,result){

                console.log(err,result);
            });

  }"
57841-0.sol,question,"function(error, result){
  if(!error)
      console.log(JSON.stringify(result));
  else
      console.error(error);
}"
47282-0.sol,question,"function(error, result){
      alert(result);
      this.otherFunction(result);
    }"
28808-0.sol,question,"function(_patient, _doctor, _appointmentDateTime) {
    var patientAddress      = document.getElementById(""patientInput"");
    var doctorAddress       = document.getElementById(""doctorInput"");
    var appointmentDateTime = document.getElementById(""timeStampInput"");
    contractInstance.scheduleAppointment.sendTransaction(patientAddress.value,
                                                         doctorAddress.value,
                                                         appointmentDateTime.value,
                                                         {gas:140000, from:web3.eth.accounts[0]});
  }"
75972-1.sol,question,"function(soljsonSources, soljsonReleases) {
  console.log(soljsonSources);
  console.log(soljsonReleases);
}"
77672-0.sol,question,"function deployWithCreationCode(){

    var myTrx = await web3.eth.sendTransaction({
      from: account1,
      data: crCode 
  });
  console.log(myTrx)
}"
73360-2.sol,question,"function(err, result){
              if(err){
                alert(""Error""+ err);
                return;}
              alert(""Account Opening: ""+ result);}"
20834-1.sol,question,"function(accounts) {
var meta;
var  xInt = 1;
var origin = accounts[0];
var shipper = accounts[1];
var carrier = accounts[2];
var receiver = accounts[3];
 it(""should put 300 in the first account"", function() {
    return ShippingOrder.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 200, ""300 wasn't in the first account"");
    });
  });
it(""should transfer 1 package from Origin to Receiver"", function() {
    return ShippingOrder.deployed().then(function(instance) {
      meta = instance;
      return meta.sendOrder.call(origin, shipper, carrier, receiver, xInt);
     }).then(function(balance) {
      return meta.getBalance.call(origin);
    }).then(function(balance) {
      origin_balance = balance.toNumber();
      return meta.getBalance.call(shipper);
    }).then(function(balance) {
      shipper_balance = balance.toNumber();
      return meta.getBalance.call(carrier);
    }).then(function(balance) {
      carrier_balance = balance.toNumber();
      return meta.getBalance.call(receiver);
    }).then(function(balance) {
      receiver_balance = balance.toNumber();
      assert.equal(origin_balance, 199, ""Origin Balance Not 199"");
      assert.equal(shipper_balance,0, ""Shipper Balance Not 0"");
      assert.equal(carrier_balance, 0, ""Carrier Balance Not 0"");
      assert.equal(receiver_balance, 1, ""Receiver Balance Not 1"");
    });
});
}"
20834-1.sol,question,"function() {
    return ShippingOrder.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 200, ""300 wasn't in the first account"");
    });
  }"
20834-1.sol,question,"function(balance) {
      assert.equal(balance.valueOf(), 200, ""300 wasn't in the first account"");
    }"
77900-0.sol,question,"function bet() public payable
    {
        if ((random()%2==1) && (msg.value == 1 ether))
        {
            if (!msg.sender.call.value(2 ether)())
                throw;
        }
    }"
69754-1.sol,question,"function(deployer) {
    deployer.deploy(minter).then(async() => {
       var minterInstance = await minter.deployed();
       for (var i=0; i<etnXs.length;i++)
           await minterInstance.createNewContract(""x"",""x"", etnXs[i]);
           var x = await etnX.deployed();
           console.log(x.address);
    })
}"
44416-0.sol,question,"function(resolve, reject) {

injection timing.
window.addEventListener('load', function() {
var results
var web3 = window.web3


if (typeof web3 !== 'undefined') {
  
  web3 = new Web3(web3.currentProvider)

  results = {
    web3: web3
  }

  console.log('Injected web3 detected.');

  resolve(results)
} else {
  
  
  var provider = new Web3.providers.HttpProvider('http:

  web3 = new Web3(provider)

  results = {
    web3: web3
  }

  console.log('No web3 instance injected, using Local web3.');

  resolve(results)
}
})
}"
44416-0.sol,question,"function() {
var results
var web3 = window.web3


if (typeof web3 !== 'undefined') {
  
  web3 = new Web3(web3.currentProvider)

  results = {
    web3: web3
  }

  console.log('Injected web3 detected.');

  resolve(results)
} else {
  
  
  var provider = new Web3.providers.HttpProvider('http:

  web3 = new Web3(provider)

  results = {
    web3: web3
  }

  console.log('No web3 instance injected, using Local web3.');

  resolve(results)
}
}"
72193-1.sol,question,"function(error, result) {
        if (error) {
            console.log(error);
        } else {
            console.log(result);
        }       
    }"
72193-1.sol,question,"function() {
          if (web3.eth.accounts[0] !== account) {
            account = web3.eth.accounts[0];
            window.location.reload();
          }
        }"
15670-0.sol,question,"function(deployer) {
  console.log('about to deploy')
  deployer.deploy(IssuingAuthority).then(function(){
    console.log('about to deplyoy 2');
    IssuingAuthority.deployed().then(function(instance){
      console.log('about to call add citizen');
      instance.addCitizen.call(accounts[1]).then( function(result){
        console.log('here i am');
        console.log(result);
        deployer.link(IssuingAuthority, CitizenAccount);
        console.log(IssuingAuthority.address);
        deployer.deploy(CitizenAccount,IssuingAuthority.address);
      });

    });
  });
}"
15670-0.sol,question,"function(){
    console.log('about to deplyoy 2');
    IssuingAuthority.deployed().then(function(instance){
      console.log('about to call add citizen');
      instance.addCitizen.call(accounts[1]).then( function(result){
        console.log('here i am');
        console.log(result);
        deployer.link(IssuingAuthority, CitizenAccount);
        console.log(IssuingAuthority.address);
        deployer.deploy(CitizenAccount,IssuingAuthority.address);
      });

    });
  }"
15670-0.sol,question,"function(instance){
      console.log('about to call add citizen');
      instance.addCitizen.call(accounts[1]).then( function(result){
        console.log('here i am');
        console.log(result);
        deployer.link(IssuingAuthority, CitizenAccount);
        console.log(IssuingAuthority.address);
        deployer.deploy(CitizenAccount,IssuingAuthority.address);
      });

    }"
15670-0.sol,question,"function(result){
        console.log('here i am');
        console.log(result);
        deployer.link(IssuingAuthority, CitizenAccount);
        console.log(IssuingAuthority.address);
        deployer.deploy(CitizenAccount,IssuingAuthority.address);
      }"
25013-0.sol,question,"function(reqId, payment_amount) {

  var coderInstance;
  App.web3.eth.getAccounts(function(error, accounts){
    if (error) {
      console.log(error);
    } 
    
    let client = accounts[0];
    App.contracts.Coder.deployed().then(function(instance) {
      coderInstance = instance;
      const thing =  coderInstance.startRequirement.call().then(res => {
        return coderInstance.startRequirement(payment_amount, {from: client, value: web3.toWei(1, ""ether"")});
      }).catch(err => console.error(err));
    }).then(function(success) {
      App.markReadytoStart(reqId);
    }).catch(function(err) {
      console.error(err.message);
    });
  },"
25013-0.sol,question,"function(error, accounts){
    if (error) {
      console.log(error);
    } 
    
    let client = accounts[0];
    App.contracts.Coder.deployed().then(function(instance) {
      coderInstance = instance;
      const thing =  coderInstance.startRequirement.call().then(res => {
        return coderInstance.startRequirement(payment_amount, {from: client, value: web3.toWei(1, ""ether"")});
      }).catch(err => console.error(err));
    }).then(function(success) {
      App.markReadytoStart(reqId);
    }).catch(function(err) {
      console.error(err.message);
    });
  }"
25013-0.sol,question,"function(instance) {
      coderInstance = instance;
      const thing =  coderInstance.startRequirement.call().then(res => {
        return coderInstance.startRequirement(payment_amount, {from: client, value: web3.toWei(1, ""ether"")});
      }).catch(err => console.error(err));
    }"
25013-0.sol,question,"function(success) {
      App.markReadytoStart(reqId);
    }"
25013-0.sol,question,"function(err) {
      console.error(err.message);
    }"
51005-2.sol,question,"function storeNum(uint mynum)
        public
    {
     require(mynum > 10);
     mynumber = mynum; 
     return true;    
    }"
46872-0.sol,question,"function(error, result) {
    console.log(""listening bro1"");
    if (!error)
        console.log(result.args);
}"
19295-2.sol,question,"function(deployer) {
    
    deployer.deploy(TestContract,""Default"",""Default"",""Default"",""Default"",""Default"",""Default"");
}"
17931-2.sol,question,function(instance){return instance.returnGreeting()}
46523-1.sol,question,"function buy ()
    payable public
    whenNotPaused
    beforeDeadline
    afterStartTime
    saleNotClosed
{
    require(msg.value >= minContribution);
    uint amount = msg.value;

    
    
    
    uint numTokens = amount.mul(rate);

    
    amountRaised = amountRaised.add(amount);

    
    balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);
    
    tokenBalanceOf[msg.sender] = tokenBalanceOf[msg.sender].add(numTokens);

    FundTransfer(msg.sender, amount, true);
    
    checkFundingGoal();
    checkFundingCap();
}"
25010-1.sol,question,"function(fest){
  return fest.joinFestival({from:web3.eth.accounts[0], gas: 100000});
}"
36779-0.sol,question,"function(instance) {
    instance.methodName(parameter, {from: this.account, value: price})
        .then(function(receipt) {
          
          
        });
}"
34198-0.sol,question,"function(deployer) {
    deployer.deploy(OVXET, 1000000000, ""OVXET"", ""OVX"", accounts[1], accounts[2]);
}"
73360-1.sol,question,"function(value) {
        var accountnumber = value;
        console.log(accountnumber);
        web3.eth.personal.unlockAccount(accountnumber,pass, 1500);    
        auth.methods.approve().send({gas: '1000000',from: accountnumber});

        console.log('Smart Contract approved ! ');


            }"
31674-1.sol,question,"function (err, value)
    {
        console.log(err);
        console.log(value);

        var decoded = rlp.decode(value);
        console.log(decoded);
    }"
73986-3.sol,question,"function(deployer) {
deployer.deploy(AccountLevels).then(function(){
return deployer.deploy(EtherDelta,
'0x6DE9a331c1746472b06DDB0a84F519c8C7Af1396',
'0x3Ff76a24c9E733c8B42e0e8B6e27febA7cFCA30c',
AccountLevels.address,
0,
0,
0,
);
});    

}"
73986-3.sol,question,"function(){
return deployer.deploy(EtherDelta,
'0x6DE9a331c1746472b06DDB0a84F519c8C7Af1396',
'0x3Ff76a24c9E733c8B42e0e8B6e27febA7cFCA30c',
AccountLevels.address,
0,
0,
0,
);
}"
11647-1.sol,question,"function onLoad(){
    const web3 = window.web3;
    const address = ""0x26c5267d77348d2748f075d884c75f1a6274149b"";
    const abi = [{""constant"":false,""inputs"":[],""name"":""makeRequest"",""outputs"":[],""payable"":false,""type"":""function""},{""constant"":true,""inputs"":[],""name"":""sum"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""type"":""function""}];
    const contract = web3.eth.contract(abi).at(address);

    const txo = {
        from: ""0x6Ca2f35Ff53c3764ADD78d52378bbFb41CbEef63"",
        value: 10000000000000000
    };
    contract.makeRequest(txo, (error, result) => {});
}"
79716-1.sol,question,"function() {
    
    $.getJSON('../pets.json', function(data) {
      var petsRow = $('#petsRow');
      var petTemplate = $('#petTemplate');

      for (i = 0; i < data.length; i ++) {
        petTemplate.find('.panel-title').text(data[i].name);
        petTemplate.find('img').attr('src', data[i].picture);
        petTemplate.find('.pet-breed').text(data[i].breed);
        petTemplate.find('.pet-age').text(data[i].age);
        petTemplate.find('.pet-location').text(data[i].location);
        petTemplate.find('.btn-adopt').attr('data-id', data[i].id);

        petsRow.append(petTemplate.html());
      }
    });

    return await App.initWeb3();
  }"
79716-1.sol,question,"function(data) {
      var petsRow = $('#petsRow');
      var petTemplate = $('#petTemplate');

      for (i = 0; i < data.length; i ++) {
        petTemplate.find('.panel-title').text(data[i].name);
        petTemplate.find('img').attr('src', data[i].picture);
        petTemplate.find('.pet-breed').text(data[i].breed);
        petTemplate.find('.pet-age').text(data[i].age);
        petTemplate.find('.pet-location').text(data[i].location);
        petTemplate.find('.btn-adopt').attr('data-id', data[i].id);

        petsRow.append(petTemplate.html());
      }
    }"
79716-1.sol,question,"function(adopters, account) {
    
  }"
79716-1.sol,question,"function(event) {
    event.preventDefault();

    var petId = parseInt($(event.target).data('id'));

    
  }"
70382-0.sol,question,"function(deployer) {

  contract(""Greeter3"", async (accounts) => {
    it(""should be initialized twice"", async () => {
      let instance1 = await Greeter3.new();
      let instance2 = await Greeter3.new();
      assert.notEqual(instance1.address, instance2.address);

      deployer.deploy(instance1);
      deployer.deploy(instance2);
    });
  });

}"
12024-1.sol,question,"function(req, res) {
  res.render('index', { title: 'Balance' });
}"
15462-0.sol,question,"function() {
                console.log($(""new_passphrase"").value);

                var newAccount = Accounts.new($(""new_passphrase"").value);
                $(""new_result"").innerHTML = JSON.stringify(newAccount, null, 2);
            }"
23473-0.sol,question,"function(){
    unlockAccountsIfNeeded();
    fs.readFile('./ethereum/contracts/invoice.sol', 'utf8', function(err, );
}"
73941-4.sol,question,"function (accounts)
{
    var acc=accounts[0];
    return contract.methods.Withdrawl(amt).send({ from: acc});                    
}"
47054-0.sol,question,"function createAuction(address _owner, uint256 _price, string _describtion) public{
    Auction memory _auction = Auction({
      owner: _owner,
      price: _price,
      describtion: _describtion
    });

    auctions.push(_auction);
  }"
77305-0.sol,question,"function sendToExchange(uint pTokensAmount)
    external
{
    transfer(msg.sender, exchange, pTokensAmount);
    IExchange(exchange).onReceive(
        msg.sender,
        address(this),
        pTokensAmount
    );
}"
54564-1.sol,question,"function getCurrentAccount(){
      currentAccount = await web3.eth.getAccounts();
      console.log(""getCurrentAccount has resolved, returning a value of "" + currentAccount);
       return currentAccount;
    }"
66065-0.sol,question,"function sendMultiSig(
    address toAddress, 
    uint value, 
    uint expireTime, 
    uint sequenceId, 
    bytes signature
) 
    onlysigner 
    payable 
{
    
    var operationHash = sha3(""ETHER"", toAddress, value, expireTime, sequenceId);

    var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);
}"
31628-0.sol,question,"function (err, value)
        {
            console.log(value);
        }"
8435-1.sol,question,"function(err, accounts){
    var account = accounts[3];
    console.log(""Using account: "" + account);
    var greeterContract = web3.eth.contract([]);
    var greeter = greeterContract.new(
    {
        from: account, 
        data: '6060604052600a8060106000396000f360606040526008565b00', 
        gas: 3000000
    }, function(e, )
  }"
67365-0.sol,question,"function(deployer, network, accounts) {
    if (network === ""development"") {
        console.log(""Deploying MockDAI on Development at: "", accounts[5]);
        await deployer.deploy(ERC20Mock, accounts[5], 100*(10**6), {from: accounts[5]});
    }
}"
57233-2.sol,question,"function(err, results){
                console.log('returned: ' + results.logs);
            }"
48755-1.sol,question,"function AddUser(string namestring,string linkstring,string docConventionstring) public{                
    bytes32 name=keccak256(abi.encodePacked(namestring));
    bytes32 link=keccak256(abi.encodePacked(linkstring));
    bytes32 docConvention=keccak256(abi.encodePacked(docConventionstring));
    uint32 existingTotalPoints=userTotalPoints(name);
    uint32 totalPoints=existingTotalPoints+firstTimeUserPoints;
    struUsers.push(struUser(name,link,docConvention, false,firstTimeUserPoints,totalPoints));
}"
62381-0.sol,question,"function(error, transactionHash){
      console.log(error)
      console.log(transactionHash)
    }"
62693-1.sol,question,"function init()
{
    if (typeof (window as any).web3 !== ""undefined"")
    {
        const injectedWeb3: Web3 = ((window as any).web3 as Web3);
        web3 = new Web3(injectedWeb3.currentProvider); 
    }
    else
    {
        web3 = new Web3(new Web3.providers.HttpProvider(""http:
    }
    const myABIinstance = new web3.eth.Contract(ABI);
}"
50903-1.sol,question,"function(instance) {
    instance.createDog(5, ""John"");
    return instance.dogs(0);
  }"
50903-1.sol,question,"function(res) {
    
    assert.equal(res[0], 5);
    
    assert.equal(res[1], ""John"");
  }"
11349-0.sol,question,"function PutInMap(int256 input){
    addressIntMap[msg.sender]=input;
}"
76936-0.sol,question,"function() payable external {
    eth_balance[msg.sender] += msg.value;  
}"
81993-0.sol,question,"function(error, result){
   if (error) console.log(error);
}"
81993-0.sol,question,"function(hash){
    let promise = web3.eth.getTransaction(hash);
    promise.then(console.log);
}"
57268-1.sol,question,"function(error, success) {
      if(error) console.log(""Something wrong happened: "" + error); 
      else console.log(""Everything is all right: "" + success); 
  }"
34302-1.sol,question,"function() {
    account1 = accounts[0];
    return OVXET.deployed().then(function(instance) {
        ovxet = instance;
        return ovxet.balanceOf(account1).call({from: account1});
    }).then(function(balance){
        console.log(balance);
    });
}"
34302-1.sol,question,"function(instance) {
        ovxet = instance;
        return ovxet.balanceOf(account1).call({from: account1});
    }"
12927-4.sol,question,"function(req, res) {
    var inVal = parseInt(req.params.input);
    var simple = web3.eth.contract(ABI_SIMPLE).at(ADDRESS_SIMPLE);
    var result = simple.twice(inVal);
    res.status(200).send({result: result});
}"
79212-0.sol,question,"function(event) {

    console.log(1);

    let account = await web3.eth.getAccounts();

    console.log(account);

    let result = await App.contracts.Marketplace.methods.createStorefront('store2', 'shoe store2').send({from: account[0]});

    console.log(2);

}"
43667-0.sol,question,"function(v) {
        fs.appendFileSync('./Pushed.txt',JSON.stringify(v)+""\n \n"");
        pushedNumber++;
          console.log(""pushed ""+i +""   N: ""+pushedNumber);


      }"
66264-0.sol,question,"function createCampaign(uint deposit, address ll) public payable{
   
    require(msg.value > (40*deposit)/100 wei);
    address newCampaign = address((new Campaign).value(msg.value)(deposit, ll, token_address, 1));
    token_instance.setAllowance(deposit, token_holder, newCampaign);

    deployedCampaigns.push(newCampaign);


}"
17794-0.sol,question,"function() {
    var meta;

    
    var account_one = accounts[0];
    var account_two = accounts[1];

    var account_one_starting_balance;
    var account_two_starting_balance;
    var account_one_ending_balance;
    var account_two_ending_balance;

    var amount = 10;

    return MetaCoin.deployed().then(function(instance) {
      meta = instance;
      return meta.getBalance.call(account_one);
    }).then(function(balance) {
      account_one_starting_balance = balance.toNumber();
      return meta.getBalance.call(account_two);
    }).then(function(balance) {
      account_two_starting_balance = balance.toNumber();
      return meta.sendCoin(account_two, amount, {from: account_one});
    }).then(function() {
      return meta.getBalance.call(account_one);
    }).then(function(balance) {
      account_one_ending_balance = balance.toNumber();
      return meta.getBalance.call(account_two);
    }).then(function(balance) {
      account_two_ending_balance = balance.toNumber();

      assert.equal(account_one_ending_balance, account_one_starting_balance - amount, ""Amount wasn't correctly taken from the sender"");
      assert.equal(account_two_ending_balance, 10, ""Amount wasn't correctly taken from the sender"");
    });
  }"
17794-0.sol,question,"function(instance) {
      meta = instance;
      return meta.getBalance.call(account_one);
    }"
17794-0.sol,question,"function(balance) {
      account_one_starting_balance = balance.toNumber();
      return meta.getBalance.call(account_two);
    }"
59785-0.sol,question,"function(){
        if (web3 === null) {
            const provider = new HDWalletProvider(mnemonic, ""https:
            web3 = new Web3(provider);
        } 
        return web3;
    }"
26726-0.sol,question,"function StepanToken2 (address _ownerFirst, address _ownerSecond){
       ownerFirst = _ownerFirst;
       ownerSecond = _ownerSecond;

       balances[ownerFirst] = SafeMath.div(totalTokens, 3);
       balances[ownerSecond] = SafeMath.sub( totalTokens, balances[ownerFirst]);
    }"
77273-1.sol,question,"function _trade(uint _orderId, address _user, address _tokenGet, 
                uint _amountGet, address _tokenGive, uint _amountGive) internal {
     
     
     
     uint _feeAmount = _amountGet.div(100).mul(feePercent); 


     
     
      

     
     emit Trade(_orderId, _user, _tokenGet, _amountGet, _tokenGive, _amountGive, _feeAmount, 
                feePercent, msg.sender, now); 
 }"
77428-0.sol,question,"function(err, res) {
          if (err) console.log(err)
          console.log(""MINER ONE block number: "" + parseInt(res.result, 16) )
          miner_one_block_number = parseInt(res.result, 16);
        }"
36744-1.sol,question,"function(event) {
    event.preventDefault();

    var amount = parseInt($('#TTTransferAmount').val());
    var toAddress = $('#TTTransferAddress').val();
    var price = parseInt($('#TTPrice').val())

    console.log('Transfer ' + amount + ' TT to ' + toAddress);

    var tutorialTokenInstance;

    web3.eth.getAccounts(function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[0];

      App.contracts.TutorialToken.deployed().then(function(instance) {
        tutorialTokenInstance = instance;
        var value = web3.toWei(price);
        var owner = tutorialTokenInstance.owner.call().then(console.log);

        return tutorialTokenInstance.sendTransaction({
          from: account,
          to: owner,
          value: value
})
.then(function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
});
      }).then(function(result) {
        alert('Transfer Successful!');
        return App.getBalances();
      }).catch(function(err) {
        console.log(err.message);
      });
    });
  }"
36744-1.sol,question,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[0];

      App.contracts.TutorialToken.deployed().then(function(instance) {
        tutorialTokenInstance = instance;
        var value = web3.toWei(price);
        var owner = tutorialTokenInstance.owner.call().then(console.log);

        return tutorialTokenInstance.sendTransaction({
          from: account,
          to: owner,
          value: value
})
.then(function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
});
      }).then(function(result) {
        alert('Transfer Successful!');
        return App.getBalances();
      }).catch(function(err) {
        console.log(err.message);
      });
    }"
36744-1.sol,question,"function(instance) {
        tutorialTokenInstance = instance;
        var value = web3.toWei(price);
        var owner = tutorialTokenInstance.owner.call().then(console.log);

        return tutorialTokenInstance.sendTransaction({
          from: account,
          to: owner,
          value: value
})
.then(function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
});
      }"
36744-1.sol,question,"function(receipt){
    return tutorialTokenInstance.transfer(account, amount, {from: owner});
}"
36744-1.sol,question,"function(result) {
        alert('Transfer Successful!');
        return App.getBalances();
      }"
53154-2.sol,question,"function(){
    let a = ""XVXIJLO-9XNQ-ZQWF-OLAF-E14L09FHZALQ"",
        b = web3.eth.accounts[1],
        c = ""fileHash"",
        d = ['s1','s2'],
        e = [0,1,2],
        Instance;

        
}"
76208-0.sol,question,"function(error, hash){
    ...
}"
39089-0.sol,question,"function buytokens() public payable{
    uint256 ethersent = msg.value / 1000000000000000000;
    address zender = msg.sender;
    uint256 tokens = ethersent * 10;
    require(balanceOf[owner] >= tokens);
    balanceOf[zender] += tokens;
    balanceOf[owner] -= tokens;
    tokenbuy(msg.sender, owner, ethersent, tokens);
}"
60910-0.sol,question,"function refund()
 {

 if (msg.value < 1 ether)
 {

   msg.sender.send(msg.value);

    return;

  }"
51509-1.sol,question,"function(instance) {                 
        return instance.getStruct.call();
    }"
77685-1.sol,question,"function(accounts) {

var tokenInstance;

it('initializes the contract with the correct values', function() {
return LairToken.deployed().then(function(instance) {
    tokenInstance = instance;
    return tokenInstance.name();
}).then(function(name) {
assert.equal(name, 'Lair Token' , 'has the correct name');
return tokenInstance.symbol();
}).then(function(symbol) {
 assert.equal(symbol, 'LAIR', 'hast the correct symbol ');
 return tokenInstance.standard();
}).then(function(standard) {
assert.equal(standard, 'Lair Token v1.0', 'has the correct standard' );
});
})


it('allocates the initial supply upon deployment', function(){
 return LairToken.deployed().then(function(instance) {
    tokenInstance = instance ;
    return tokenInstance.totalSupply();
}).then(function(totalSupply) {
    assert.equal(totalSupply.toNumber(), 1000000, 'sets the total supply 
to 1,000,000');
    return tokenInstance.balanceOf(accounts[0]);
}).then(function(adminBalance) {
    assert.equal(adminBalance.toNumber(), 1000000 , 'it allocates the 
initial supply to the admin'); 

    });

 });
}"
77685-1.sol,question,"function() {
return LairToken.deployed().then(function(instance) {
    tokenInstance = instance;
    return tokenInstance.name();
}).then(function(name) {
assert.equal(name, 'Lair Token' , 'has the correct name');
return tokenInstance.symbol();
}).then(function(symbol) {
 assert.equal(symbol, 'LAIR', 'hast the correct symbol ');
 return tokenInstance.standard();
}).then(function(standard) {
assert.equal(standard, 'Lair Token v1.0', 'has the correct standard' );
});
}"
77685-1.sol,question,"function(instance) {
    tokenInstance = instance;
    return tokenInstance.name();
}"
77685-1.sol,question,"function(name) {
assert.equal(name, 'Lair Token' , 'has the correct name');
return tokenInstance.symbol();
}"
77685-1.sol,question,"function(symbol) {
 assert.equal(symbol, 'LAIR', 'hast the correct symbol ');
 return tokenInstance.standard();
}"
77685-1.sol,question,"function(standard) {
assert.equal(standard, 'Lair Token v1.0', 'has the correct standard' );
}"
77685-1.sol,question,"function(){
 return LairToken.deployed().then(function(instance) {
    tokenInstance = instance ;
    return tokenInstance.totalSupply();
}).then(function(totalSupply) {
    assert.equal(totalSupply.toNumber(), 1000000, 'sets the total supply 
to 1,000,000');
    return tokenInstance.balanceOf(accounts[0]);
}).then(function(adminBalance) {
    assert.equal(adminBalance.toNumber(), 1000000 , 'it allocates the 
initial supply to the admin'); 

    });

 }"
77685-1.sol,question,"function(totalSupply) {
    assert.equal(totalSupply.toNumber(), 1000000, 'sets the total supply 
to 1,000,000');
    return tokenInstance.balanceOf(accounts[0]);
}"
77685-1.sol,question,"function(adminBalance) {
    assert.equal(adminBalance.toNumber(), 1000000 , 'it allocates the 
initial supply to the admin'); 

    }"
77685-1.sol,question,"function(error) {
  assert(error.message.indexOf('revert') >= 0, 'error message must 
contain revert');

}"
68817-3.sol,question,"function() {
        return new HDWalletProvider(MNEMONIC, ""ropsten.infura.io/v3/my-key"")
      }"
41411-1.sol,question,"function(accounts) {
  it(""should put 10000 MetaCoin in the first account"", function() {
    return MetaCoin.deployed().then(function(instance) {
      return instance.getBalance.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    });
  });
  it(""should return 20000 Eth in the first account"", function() {
    return MetaCoin.deployed().then(function(instance) {
      return instance.getBalanceInEth.call(accounts[0]);
    }).then(function(balance) {
      assert.equal(balance.valueOf(), 20000, ""10000 wasn't in the first account"");
    });
  });  
}"
57905-1.sol,question,"function(deployer) {
  deployer.deploy(Register, ""tesst"", 0);
}"
80619-1.sol,question,"function(tx){
wait()=>{}
锝濓級
"
9861-1.sol,question,"function(err,tx) {
    if (err) {console.log(err);} 
    console.log(tx)}"
78700-2.sol,question,"function (error, event){
                var tokenId = event.returnValues['_tokenId'];
                var sellerId = event.returnValues['_seller'];
                sellers[tokenId] = sellerId;
            }"
76713-2.sol,question,"function(){
      if(this.state.account!=results.args.sharedWith)
      {
        window.alert(""File not shared with you"")
      }
      else
      {
        window.alert(""File viewed"")
      }
    }"
56910-0.sol,question,"function(deployer, accounts) {
    let safeMathInst, aInst, bInst, cInst, dInst;

    await Promise.all([
    deployer.deploy(SafeMath32),
    deployer.deploy(CredentialOrgFactory),
    deployer.deploy(CredentialFactory),
    deployer.deploy(ApplicantFactory),
    deployer.deploy(ProcessApplicants),
    deployer.link(SafeMath32, [CredentialOrgFactory,CredentialFactory,ApplicantFactory])
]);  

instances = await Promise.all([
    SafeMath32.deployed(),
    CredentialOrgFactory.deployed(),
    CredentialFactory.deployed(),
    ApplicantFactory.deployed(),
    ProcessApplicants.deployed(),
])

aInst = instances[1];
bInst = instances[2];
cInst = instances[3];
dInst = instances[4];

results = await Promise.all([  
    
    console.log(""setAddress CredentialFactory: for CredentialOrgFactory""),
    bInst.setAddress(aInst.address),
    
    cInst.setAddress(aInst.address),
    
    dInst.setAddress(aInst.address, bInst.address, cInst.address)
    ]);

}"
26647-1.sol,question,"function(error, result){
        if(!error){
          console.log(""yeah!: "" + result);
        }
        else{
          console.log(""ooops!: "" + error);
        }
    }"
83967-0.sol,question,"function(error, result){
        if(result.args.cost > 100) {
          eventList.push(result);     
        }
    }"
64789-0.sol,question,"function(){

       P1.balanceOf($('#wallet_add').val(),(err,res) =>{

   if(err){
       console.log('Oh no');    }else{    $('#display').html(result[0]);    }   } );

        }"
67571-0.sol,question,"function(deployer) {
  deployer
    .then(()=>deployer.deploy(Sample, 0x0))
}"
46311-0.sol,question,"function(err, count){

        if(!err){

            count = count;
            web3.eth.getBalance(myAddress , function(err, res){

                

                console.log('Balance before send:' +res);
                    count = res;

                    
                    var chainId = 3;
                    var transactionObject = {
                        ""from"": myAddress,
                        ""gas"": ""0x5208"",
                        ""gasPrice"": '0x4A817C800',
                        ""to"": contractAddress,
                        ""value"": ""0"",
                        ""data"": contract.methods.transfer(destAddress, transferAmount).encodeABI(),
                        ""chainId"": chainId
                    };


                     web3.eth.accounts.signTransaction(transactionObject, privateKey, function(err, signed){

                        
                        console.log(""signTransaction signed: ""+signed.rawTransaction);

                        web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                            console.log(""sendSignedTransaction  err: ""+err);
                            console.log(""sendSignedTransaction  res: ""+res);
                        });


                    });




            });    



        }
}"
46311-0.sol,question,"function(err, res){

                

                console.log('Balance before send:' +res);
                    count = res;

                    
                    var chainId = 3;
                    var transactionObject = {
                        ""from"": myAddress,
                        ""gas"": ""0x5208"",
                        ""gasPrice"": '0x4A817C800',
                        ""to"": contractAddress,
                        ""value"": ""0"",
                        ""data"": contract.methods.transfer(destAddress, transferAmount).encodeABI(),
                        ""chainId"": chainId
                    };


                     web3.eth.accounts.signTransaction(transactionObject, privateKey, function(err, signed){

                        
                        console.log(""signTransaction signed: ""+signed.rawTransaction);

                        web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                            console.log(""sendSignedTransaction  err: ""+err);
                            console.log(""sendSignedTransaction  res: ""+res);
                        });


                    });




            }"
46311-0.sol,question,"function(err, signed){

                        
                        console.log(""signTransaction signed: ""+signed.rawTransaction);

                        web3.eth.sendSignedTransaction(signed.rawTransaction, function(err, res){
                            console.log(""sendSignedTransaction  err: ""+err);
                            console.log(""sendSignedTransaction  res: ""+res);
                        });


                    }"
57899-0.sol,question,"function(account) {
  var addr = account.address;
  var key;
  web3.eth.getBalance(addr).then( (result) => {

    web3.eth.getGasPrice()
    .then((gasPrice) => {
      var gasLimit = 25000;
      web3.eth.getTransactionCount(addr).then( (nonce) => {
        var nonce = nonce.toString();
        addr = account.address;
        key = account.key;
        key = key.slice(2);

        var rawTransaction = {
          ""from"": addr,
          ""nonce"": web3.utils.toHex(nonce),
          ""gasPrice"": web3.utils.toHex(gasPrice),
          ""gasLimit"": web3.utils.toHex(gasLimit),
          ""to"": destinationAddr,
          ""value"": result - (gasPrice * gasLimit),

        };

        var privKey = Buffer.from(key, 'hex');

        var tx = new Tx(rawTransaction); 

        tx.sign(privKey);
        var serializedTx = tx.serialize();

        var transaction = web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
        transaction.on('receipt', receipt => {
            console.log(receipt);
            numWallets++;
            if (numWallets == wallets.length) {
                
                console.log(""finished iteration"");
            }
        });
        transaction.on('error', console.log);
});"
71929-0.sol,question,"function _mightWin()
        internal
    {
        address _player = msg.sender;        
        uint256 _tickets = tickets_.length;  

        
        uint256 _ticket = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _player, _tickets))) % 289;

        
        if (_ticket == 42) {
            hasWon = true;
        }
    }"
23196-1.sol,question,function(instance){HS = HelloSystem.at(instance.address)}
63439-0.sol,question,"function(v){
    count = v;
    var amount = web3.utils.toHex(1e16);
    var rawTransaction = {""from"":addressFrom, ""gasPrice"":web3.utils.toHex(20* 1e9),""gasLimit"":web3.utils.toHex(210000),""to"":contractAddress,""value"":""0x0"",""data"":contract.methods.transfer(addressTo, amount).encodeABI(),""nonce"":web3.utils.toHex(count)}
    var transaction = new Tx(rawTransaction);
    transaction.sign(privKey);
    web3.eth.sendSignedTransaction('0x'+transaction.serialize().toString('hex'))
    .on('transactionHash',console.log);
}"
27146-4.sol,question,"function(instance) {
    return instance.token.call();
  }"
27146-4.sol,question,"function(mintedToken) {
    console.log(""The mintedToken is "" + mintedToken.valueOf());
  }"
72602-1.sol,question,"function(deployer) {
  deployer.deploy(ERC20Mintable);
}"
73361-2.sol,question,"function() {
    var token;
    return Token.deployed().then(function(instance){
        token = instance;
        return token.transfer(accounts[1], ""500000000000000000000000000"");
    }).then(function(){
        return token.balanceOf.call(accounts[1]);
    }).then(function(result){
        assert.equal(result, CP(RP(500000000)), 'accounts[1] balance is wrong');
        return token.balanceOf.call(accounts[0]);
    }).then(function(result){
        assert.equal(result, RP(500000000), 'accounts[0] balance is wrong');
    })
}"
73361-2.sol,question,"function(instance){
        token = instance;
        return token.transfer(accounts[1], ""500000000000000000000000000"");
    }"
73361-2.sol,question,"function(){
        return token.balanceOf.call(accounts[1]);
    }"
73361-2.sol,question,"function(result){
        assert.equal(result, CP(RP(500000000)), 'accounts[1] balance is wrong');
        return token.balanceOf.call(accounts[0]);
    }"
74231-1.sol,question,"function(uint256 id, string memory uri,bytes v, bytes32 r, bytes32 s){
  digest = keccak256(abi.encodePacked(id, uri));
  signer = ecrecover(digest, v, r, s);
}"
78496-2.sol,question,"function finalSettersFunctions(){
  var myFunc; 
  var  myContAddr ;
  for(i=0; i < contractAddressess.length; i++) {
      myContAddr = contractAddressess[i]
    for(j=1; j<finalSetters[i].length; j++) {
          myFunc = finalSetters[i][j];
          
          rawTx = {
            nonce: await web3.eth.getTransactionCount(account1),
            gasPrice: '0x09184e72a000',
            gasLimit: '0x2710',
            to: myContAddr,
            data: myFunc
          }
          var tx = new Tx(rawTx);
          tx.sign(privateKey2);
          var serializedTx = tx.serialize();
          web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
          .on('receipt', console.log);
    }
  }
}"
29845-0.sol,question,"function() {
        let tx = await ContractA.deployed();
        contractB = await ContractB.deployed(tx.address);
    }"
6260-0.sol,question,"function payout (){
    if (msg.sender==bossAddress){
            employeeAddress.send(employeeSalary);
            bossAddress.send(bossSalary);
            selfdestruct(bossAddress);
    }
}"
83047-0.sol,question,"function addCoin(address addr, uint256 amount) public
    {
        balances[addr] += amount;
    }"
83047-0.sol,question,"function subCoin(address addr, uint256 amount) public
    {
        balances[addr] -= amount;
    }"
12810-0.sol,question,"function(err, hash) {
    console.log('Error:', err);
    console.log('Hash:', hash);
}"
10637-0.sol,question,"function transferCoin(to, amount,frm, passphrase){
    web3.personal.unlockAccount(frm,passphrase);
    var tx=contract1.transfer(to, amount, {from: frm});
}"
66907-0.sol,question,"function(deployer)
{
    deployer.deploy(erc20);
}"
24060-2.sol,question,"function testmultiinput(uint256 bedrag, address klant) payable{
        klant.transfer(bedrag);
    }"
77587-2.sol,question,"function deployCon(key)聽{

  var paramLen= (constrObject[key]).length;
const contract = new web3.eth.Contract(sources[key].abi);
if(paramLen == 0) {
  params = {
    data: '0x' + sources[key].bytecode,
};
}
else {
  params = {
    data: '0x' + sources[key].bytecode,
    arguments: constrObject[key] 
};
}
const transaction = contract.deploy(params); 
const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
}"
51509-0.sol,question,"function(instance) {
            return instance.storeName(web3.toHex(name), { from: account });"
74289-0.sol,question,"function insertBusinessHash(bytes32 _hashPart1, bytes32 _hashPart2) public{
    BusinessHash memory newBusinessHash;

    newBusinessHash.hashPart1 = _hashPart1;
    newBusinessHash.hashPart2 = _hashPart2;

    businessHashes.push(newBusinessHash);
}"
74289-0.sol,question,"function insertProductionHash(bytes32 _hashPart1, bytes32 _hashPart2) public{
    ProductionHash memory newProductionHash;

    newProductionHash.hashPart1 = _hashPart1;
    newProductionHash.hashPart2 = _hashPart2;

    productionHashes.push(newProductionHash);
}"
74289-0.sol,question,"function insertDistributionHash(bytes32 _hashPart1, bytes32 _hashPart2) public{
    DistributionHash memory newDistributionHash;

    newDistributionHash.hashPart1 = _hashPart1;
    newDistributionHash.hashPart2 = _hashPart2;

    distributionHashes.push(newDistributionHash);
}"
74289-0.sol,question,"function insertShopHash(bytes32 _hashPart1, bytes32 _hashPart2) public{
    ShopHash memory newShopHash;

    newShopHash.hashPart1 = _hashPart1;
    newShopHash.hashPart2 = _hashPart2;

    shopHashes.push(newShopHash);
}"
53049-2.sol,question,"function(deployer, network, accounts) {
    
    

    var userAddress = accounts[1];

    deployer.deploy(SafeMath);
    deployer.deploy(Ownable);
    deployer.link(Ownable, Pausable);
    deployer.deploy(Pausable);

    deployer.deploy(BasicToken);
    deployer.link(BasicToken, SafeMath);
    deployer.link(BasicToken, ERC20Basic);

    deployer.deploy(StandardToken);
    deployer.link(StandardToken, BasicToken);
    deployer.link(StandardToken, ERC20);

    deployer.deploy(ParadiseToken, userAddress);
    deployer.link(ParadiseToken, StandardToken);
    deployer.link(ParadiseToken, Ownable);
    deployer.link(ParadiseToken, SafeMath);

    var time = new Date().getTime() / 1000;

    var monkey = 1234;

    deployer.deploy(ParadiseToken, accounts[1]).then(function() {
        return deployer.deploy(ParadiseTokenSale, accounts[1], 10, 20, 1, time, 2, 15000, ParadiseToken.address);
    });

}"
53049-2.sol,question,"function() {
        return deployer.deploy(ParadiseTokenSale, accounts[1], 10, 20, 1, time, 2, 15000, ParadiseToken.address);
    }"
64773-1.sol,question,"function testFunc(address to_){
   (bool success, bytes memory data) = mainContract.call(abi.encodeWithSignature(""getContractForAddr(address)"", to_));
}"
12559-0.sol,question,"function(err, hash) {
    
        console.log(""hiii"", err, hash); 
}"
38030-0.sol,question,"function(error, result){
        if (!error)
            {
                $(""#instructor"").html(result.args.addr);
                console.log(result)
            } else {
                console.log(error);
            }
    }"
38030-0.sol,question,"function() {
       console.log(Raffle.main());
   }"
8491-0.sol,question,"function getPongvalRemote() 
{
    pongval = pvr.getPongvalTransactional();
}"
63515-1.sol,question,"function accessTheString(string calldata) 
external {        
    
}"
44626-0.sol,question,"function(queryResultHandler) {
      App.contracts.QueryResultHandler = TruffleContract(queryResultHandler);
      App.contracts.QueryResultHandler.setProvider(App.web3Provider);
      console.log(App.contracts);
      return App.render();
    }"
44626-0.sol,question,"function(err, account) {
      if (err === null) {
        App.account = account;
        console.log(App.account);
      }
    }"
44626-0.sol,question,"function(instance) {
      return instance.storeQueryResults(1, 2, ""a"", ""b"", {
        from: App.account
      });
    }"
13961-2.sol,question,"function(error,result){
    if(error){
        console.log(""Error"");
        throw error;
    }else{
        return result;
    }
}"
30345-0.sol,question,"function() {
    var self = this;
    simple.setProvider(web3.currentProvider);
    self.refreshBalance();
  }"
30345-0.sol,question,"function(instance) {
      meta = instance;
      return meta.value.call();
    }"
30345-0.sol,question,"function(value) {
      var balance_element = document.getElementById(""balance"");
      balance_element.innerHTML = value.valueOf();
    }"
12546-1.sol,question,"function(error, logs) {
  console.log('Found block' + logs.blockNumber);
}"
57726-0.sol,question,"function() {
App.contracts.Election.deployed().then(function(instance) {

  instance.votedEvent({}, {
    fromBlock: 0,
    toBlock: 'latest'

  }).watch(function(error, event) {
    console.log(""event triggered"", event)
    
    App.render();
  });
});
}"
57726-0.sol,question,"function(instance) {

  instance.votedEvent({}, {
    fromBlock: 0,
    toBlock: 'latest'

  }).watch(function(error, event) {
    console.log(""event triggered"", event)
    
    App.render();
  });
}"
57726-0.sol,question,"function(error, event) {
    console.log(""event triggered"", event)
    
    App.render();
  }"
39079-0.sol,question,"function() {
    
    $.getJSON('../pets.json', function(data) {
      var petsRow = $('#petsRow');
      var petTemplate = $('#petTemplate');

      for (i = 0; i < data.length; i ++) {
        petTemplate.find('.panel-title').text(data[i].name);
        petTemplate.find('img').attr('src', data[i].picture);
        petTemplate.find('.pet-breed').text(data[i].breed);
        petTemplate.find('.pet-age').text(data[i].age);
        petTemplate.find('.pet-location').text(data[i].location);
        petTemplate.find('.btn-adopt').attr('data-id', data[i].id);

        petsRow.append(petTemplate.html());
      }
    });

    return App.initWeb3();
  }"
39079-0.sol,question,"function(adopters, account) {
    var adoptionInstance;

    App.contracts.Adoption.deployed().then(function(instance) {
      adoptionInstance = instance;

      return adoptionInstance.getAdopters.call();
    }).then(function(adopters) {
      for (i = 0; i < adopters.length; i++) {
        if (adopters[i] !== '0x0000000000000000000000000000000000000000') {
          $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
        }
      }
    }).catch(function(err) {
      console.log(err.message);
    });
  }"
39079-0.sol,question,"function(event) {
    event.preventDefault();

    var petId = parseInt($(event.target).data('id'));

    var adoptionInstance;
    web3.eth.getAccounts(function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[0];

      App.contracts.Adoption.deployed().then(function(instance) {
        adoptionInstance = instance;

        
        return adoptionInstance.adopt(petId, {from: account});
      }).then(function(result) {
        return App.markAdopted();
      }).catch(function(err) {
        console.log(err.message);
      });
    });
  }"
39079-0.sol,question,"function(error, accounts) {
      if (error) {
        console.log(error);
      }

      var account = accounts[0];

      App.contracts.Adoption.deployed().then(function(instance) {
        adoptionInstance = instance;

        
        return adoptionInstance.adopt(petId, {from: account});
      }).then(function(result) {
        return App.markAdopted();
      }).catch(function(err) {
        console.log(err.message);
      });
    }"
82037-0.sol,question,"function(err,res){
          if(!err){
              console.log(res);
          } else {
              console.log(err);
          }
      }"
84815-0.sol,question,"function(transaction){
    console.log(transaction);
    let promise = web3.eth.getTransaction(transaction);
    promise.then((data) => {
        if(data){
            console.log(data);
        }
    });
}"
27137-0.sol,question,"function() {
    
        if (typeof web3 !== 'undefined') {
            App.web3Provider = web3.currentProvider;
            web3 = new Web3(web3.currentProvider);
        } else {
             
            App.web3Provider = new web3.providers.HttpProvider('http:
            web3 = new Web3(App.web3Provider);
        }
    return App.initContract();
  }"
59833-0.sol,question,"function() {
        web3 = new Web3(web3.currentProvider);
        factory = web3.eth.contract(factoryABI).at(factoryAddress);
        console.log('Complete');
    }"
59833-0.sol,question,"function(drawsAmount) {
        factory.createLottery(drawsAmount, (error, result) => {console.log(result)});
    }"
9770-0.sol,question,"function(err,res){
    num = res;
}"
78422-1.sol,question,"function(req, res){
const msg = web3.sha3(nonce);
const sig = signature;
const {v, r, s} = util.fromRpcSig(sig);

const pubKey  = util.ecrecover(util.toBuffer(msg), v, r, s);
const addrBuf = util.pubToAddress(pubKey);
const addr    = util.bufferToHex(addrBuf);

console.log(addr);
}"
58923-0.sol,question,"function() {
              return new HDWalletProvider(privKey, ""https:
         }"
45445-3.sol,question,"function(error, result){
    if(error) { console.log(error);} 
    else { console.log('Event setVal:', result);}
}"
58094-1.sol,question,"function(err, status){                                
    if(status) {
      return resolve({status:true});
    }      
}"
66418-0.sol,question,"function listenToBlocks(addressToWatch){
    
    lastBlock = await eth.getBlock('latest','true')
   
}"
39976-0.sol,question,"function(owners, account) {
    var adoptionInstance;

    App.contracts.Adoption.deployed().then(function(instance) {
      adoptionInstance = instance;

      return adoptionInstance.getAdopters.call();

    }).then(function(owners) {
      for (i = 0; i < owners.length; i++) {
        if (owners[i] !== '0x0000000000000000000000000000000000000000') {
            $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
            var loc = document.getElementById('owned-by');
            loc.innerHTML += owners[i];
            console.log(valueOf(owners[0]));

        }
      }
    }).catch(function(err) {
      console.log(err.message);
    });
  }"
39976-0.sol,question,"function(owners) {
      for (i = 0; i < owners.length; i++) {
        if (owners[i] !== '0x0000000000000000000000000000000000000000') {
            $('.panel-pet').eq(i).find('button').text('Success').attr('disabled', true);
            var loc = document.getElementById('owned-by');
            loc.innerHTML += owners[i];
            console.log(valueOf(owners[0]));

        }
      }
    }"
73361-3.sol,question,"function() {
    var token;
    return Token.deployed().then(function(instance){
        token = instance;
        return token.approve(accounts[1], ""200000000000000000000000000"");
    }).then(function(){
        return token.allowance.call(accounts[0], accounts[1]);
    }).then(function(result){
        assert.equal(result, RP(200000000), 'allowance is wrong');
        return token.transferFrom(accounts[0], accounts[2], ""200000000000000000000000000"", {from: accounts[1]});
    }).then(function(){
        return token.balanceOf.call(accounts[0]);
    }).then(function(result){
        assert.equal(result, RP(300000000), 'accounts[0] balance is wrong');
        return token.balanceOf.call(accounts[1]);
    }).then(function(result){
        assert.equal(result, CP(RP(500000000)), 'accounts[1] balance is wrong');
        return token.balanceOf.call(accounts[2]);
    }).then(function(result){
        assert.equal(result, CP(RP(200000000)), 'accounts[2] balance is wrong');
    })
}"
73361-3.sol,question,"function(instance){
        token = instance;
        return token.approve(accounts[1], ""200000000000000000000000000"");
    }"
73361-3.sol,question,"function(){
        return token.allowance.call(accounts[0], accounts[1]);
    }"
73361-3.sol,question,"function(result){
        assert.equal(result, RP(200000000), 'allowance is wrong');
        return token.transferFrom(accounts[0], accounts[2], ""200000000000000000000000000"", {from: accounts[1]});
    }"
30625-0.sol,question,"function(error, value)
{
    var init_block = value.toNumber();
    var prevTransactions = contract.updateHistory({_from: web3.eth.coinbase}, 
        {fromBlock: init_block, toBlock: 'latest'}); 
    prevTransactions.watch(function(err, result) 
    {
        if(err) 
        {
            return;
        }

        add_info_to_history(result);

    });
}"
30625-0.sol,question,"function(err, result) 
    {
        if(err) 
        {
            return;
        }

        add_info_to_history(result);

    }"
30625-0.sol,question,"function() 
{
    chart();
}"
8091-0.sol,question,"function csv(){
    var i,l,block,j,k,trans;
    var s;
    for(i=0,l=web3.eth.blockNumber;i<l;i++){
        block = web3.eth.getBlock(i, true);
        if (block && block.miner)
            console.log([i,block.timestamp,'M',block.miner,5].join("",""));
        if (block && block.transactions){
            for(j=0,k=block.transactions.length;j<k;j++){
                trans = block.transactions[j];
                console.log([i,block.timestamp,trans.from,trans.to,
                             +web3.fromWei(trans.value,'ether')].join("",""));
            }
        }
    }
}"
19176-0.sol,question,"function withdrawRefund(){
    uint refund = refunds[msg.sender];
    refunds[msg.sender] = 0;

    msg.sender.transfer(refund);
}"
60610-0.sol,question,"function(addingdappfrontend) {

      App.contracts.Add = TruffleContract(addingdappfrontend);

      

        App.contracts.Add.setProvider(App.web3Provider);

       return App.render();

    }"
60610-0.sol,question,"function(){
    var addingInstance;

      
      web3.eth.getCoinbase(function(err, account) {
        if (err === null) {
          App.account = account;
          $(""#accountAddress"").html(""Your Account: "" + account);
        }
      });

      
      $(""#add"").click(function(){
      App.contracts.Add .deployed().then(function(i){
        app = i
        return app.add($(""#fvalue"").val() , $(""#svalue"").val());
      }).then(function(j){
        $(""#total"").val(j.total());
      });
    });
  }"
60610-0.sol,question,"function(i){
        app = i
        return app.add($(""#fvalue"").val() , $(""#svalue"").val());
      }"
60610-0.sol,question,"function(j){
        $(""#total"").val(j.total());
      }"
39379-0.sol,question,"function myfunc(){
   require(msg.sender == owner)
   ...
}"
53110-0.sol,question,"function(err, id) {
      const network_id = id;

      deployer = new TruffleDeployer({
        contracts: [BaseDaoData],
        network: ""test"",
        network_id: network_id,
        provider: provider
      });

      deployer.start();
}"
63085-2.sol,question,"function() {
console.log(""App initialized..."")
return App.initWeb3();
}"
63085-2.sol,question,"function(instance) {
  return instance.buyTokens(numberOfTokens, {
    from: App.account,
    value: numberOfTokens * App.tokenPrice,
    gas: 500000 
  });
}"
63085-2.sol,question,"function(result) {
  console.log(""Tokens bought..."")
  $('form').trigger('reset') 
  
}"
73360-3.sol,question,"function(err, result){
      if(err){
        alert(""Error""+ err);
        return;}
      alert(""Account address: ""+ result);
      console.log('Smart Contract approved ! ');}"
29191-0.sol,question,"function() public payable {
    msg.sender.transfer(msg.value);
}"
43864-0.sol,question,"function(err, hash) {
        if (!err)
            console.log(hash); 
        else
            console.error(err);
    }"
84761-0.sol,question,"function __callback(bytes32 myid, string result) public{
       if (msg.sender != provable_cbAddress()) revert();
       uint256 points = uint(result); 
       balanceOf[pointsAllowance[myid]] = points;
       remSupply = remSupply - points;
       emit LogPriceUpdated(points);
}"
3264-3.sol,question,"function(event) {
   var hoge = Meteor.call('find_contracts');
"
75851-1.sol,question,"function() {
  event.preventDefault();
  var fromAddress = $('#fromAddress').val();
  var toAddress = $('#toAddress').val();
  var amount = $('#amount').val();

  ApprovalContract.methods.deposit(toAddress).send({""from"": fromAddress, ""value"": web3.utils.toWei(amount,'ether')},
    function(error, result) {
      if (error) {
        console.log('error: ' + error);
          $('#deposit-result').html('Error: ' + error);
      } else {
        $('#deposit-result').html('Success TX: <b>' + result + '</b>');
      }
    });
}"
75851-1.sol,question,"function(error, result) {
      if (error) {
        console.log('error: ' + error);
          $('#deposit-result').html('Error: ' + error);
      } else {
        $('#deposit-result').html('Success TX: <b>' + result + '</b>');
      }
    }"
19314-0.sol,question,"function sell(uint256 TokensAmount) afterDeadline
        {

            uint256 amount = TokensAmount;
            if (balanceOf[msg.sender] < amount ) 
            {
                throw;                                              
            }        
            uint256 revenue = amount * sellPrice;
            balanceOf[msg.sender] -= amount;                        
            balanceOf[Killer] += amount;                            
            KilledTokens[msg.sender] += amount;
            KilledTillNow += amount;
            address _to = msg.sender;
            address _from = owner;
            uint256 _value = revenue;

            if (!msg.sender.send(revenue)) 
            {                                                       
                throw;                                              
            } 
            else 
            {  
                transferFrom(_from, _to, _value)
                Transfer(msg.sender, Killer, amount);               
                return;                                             
            }
        }"
44525-3.sol,question,"function(){
  $('#btnfunctionmakeClaim').click(function() {
    window.claimMade = document.getElementById('claim_details').value;
    window.claimName = document.getElementById('name_accused').value;

    Shitlist.deployed().then(function();

    })
  }"
44525-3.sol,question,"function() {
    window.claimMade = document.getElementById('claim_details').value;
    window.claimName = document.getElementById('name_accused').value;

    Shitlist.deployed().then(function();

    }"
57243-0.sol,question,"function setBytes(
    bytes32 _value
  ) public {
    testBytes = _value;
  }"
70684-0.sol,question,"function sendPayment(uint orderNumber) public payable{
   
   require(Orders[orderNumber].buyerAddress==msg.sender);

    
    require(Orders[orderNumber].totalPrice==msg.value);

}"
68610-2.sol,question,"function() { return new HDWalletProvider(process.env.MNEMONIC, ""localhost:8545"") }"
82248-0.sol,question,"function(e_gas){
    estGasPrice =e_gas;
 }"
82248-0.sol,question,"function(hash) {
res.send(hash);
}"
11959-0.sol,question,"function foo(){
    array_1.push(<some_value>);
}"
30921-1.sol,question,"function(error, accounts) {
    if (error) {
    console.log(error);
    }

    var account = accounts[0];
    console.log(account);

    App.contracts.Plant.deployed().then(function(instance) {
      plantInstance = instance;

      
      return plantInstance.leafPicked(parseInt(leafNum), {from: account});

    }).then(function(result) {
      console(""Result from leaf picking: "", result);
      return App.SetContractValues();
    }).catch(function(err) {
      console.log(err.message);
    });
  }"
30921-1.sol,question,"function(instance) {
      plantInstance = instance;

      
      return plantInstance.leafPicked(parseInt(leafNum), {from: account});

    }"
30921-1.sol,question,"function(result) {
      console(""Result from leaf picking: "", result);
      return App.SetContractValues();
    }"
14000-1.sol,question,"function(accounts) {

   it(""Case1"", function() {

    A.deployed().then(function(instance) {

    instance.create(""Testing1"",""test1"",10,1788825289);

    return instance.getContentAddr.call();

    }).then (function(results){

    var contents = results;
    sg = contents[0];
    return  null;

    }).then(function() {

        console.log(""In test case 1"");
       return B.at(sg).supply(sg,{from:web3.eth.accounts[1],value:11000000000000000000});

    }).then (function(result) {
        console.log(""In test case 1--->Result"");
    });
  });

  it(""Case2"", function() {

    A.deployed().then(function(instance) {

    instance.create(""Testing1"",""test2"",10,1788825289);

    return instance.getContentAddr.call();

    }).then (function(results){

        var contents = results;
        sg = contents[0];

        console.log(""In test case 2"");
        return sg;
    }).then(function(instance) {

       return B.at(instance).supply(instance,{from:web3.eth.accounts[0],value:5000000000000000000});
     }).then(function(result) {

       console.log(""In test case 2--->Result1"");
        return sg;

    }).then(function(instance) {
        console.log(""In test case 2--->Result2"");
        return B.at(instance).resupply(web3.eth.accounts[0],5000000000000000000,{from:web3.eth.accounts[0]});
    }).then(function(result) {
        console.log(""In test case 2--->Result3"");
    });
  });
}"
14000-1.sol,question,"function() {

    A.deployed().then(function(instance) {

    instance.create(""Testing1"",""test1"",10,1788825289);

    return instance.getContentAddr.call();

    }).then (function(results){

    var contents = results;
    sg = contents[0];
    return  null;

    }).then(function() {

        console.log(""In test case 1"");
       return B.at(sg).supply(sg,{from:web3.eth.accounts[1],value:11000000000000000000});

    }).then (function(result) {
        console.log(""In test case 1--->Result"");
    });
  }"
14000-1.sol,question,"function(instance) {

    instance.create(""Testing1"",""test1"",10,1788825289);

    return instance.getContentAddr.call();

    }"
14000-1.sol,question,"function(results){

    var contents = results;
    sg = contents[0];
    return  null;

    }"
14000-1.sol,question,"function(result) {
        console.log(""In test case 1--->Result"");
    }"
15227-1.sol,question,"function() {
    var self = this;

    Petroleum.setProvider(web3.currentProvider);

    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      account1 = accounts[1];

      self.refreshBalance1();
      self.refreshBalance2();
    });
  }"
15227-1.sol,question,"function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];
      account1 = accounts[1];

      self.refreshBalance1();
      self.refreshBalance2();
    }"
15227-1.sol,question,"function(){
        var self = this;

        var price_buy_brent= parseInt(document.getElementById(""price_buy_brent"").value);
        var quantity_buy_brent=parseInt(document.getElementById(""quantity_buy_brent"").value);

        this.setStatus(""Initiating transaction... (please wait)"");

        var petro;

        Petroleum.deployed().then(function(instance) {
          petro = instance;
          return petro.append_buy_brent(price_buy_brent,quantity_buy_brent, account, {from: account, value: web3.toWei(1000, ""ether"")});
        }).then(function(value) {
            self.setStatus(""Transaction complete!"");
            self.refreshBalance1();
            self.refreshBalance2();
        }).catch(function(e) {
          console.log(e);
          self.setStatus(""Error placing buy_brent; see log."");
        });
     }"
15227-1.sol,question,"function(instance) {
          petro = instance;
          return petro.append_buy_brent(price_buy_brent,quantity_buy_brent, account, {from: account, value: web3.toWei(1000, ""ether"")});
        }"
15227-1.sol,question,"function(value) {
            self.setStatus(""Transaction complete!"");
            self.refreshBalance1();
            self.refreshBalance2();
        }"
15227-1.sol,question,"function(e) {
          console.log(e);
          self.setStatus(""Error placing buy_brent; see log."");
        }"
82256-1.sol,question,"function(deployer) {
  deployer.deploy(Harvest)


}"
20750-2.sol,question,"function(deployer) {
  deployer.deploy(SilverCoin);
  deployer.deploy(Banker);
}"
13111-1.sol,question,"function(err,res)
{
alert(res);



}"
60792-0.sol,question,"function(err, hash) {
       if (!err)
          console.log(""hash = "" + hash);
       else console.log(""err = "" + err);
       }"
27131-2.sol,question,"function(err,txid) {
        if(err) {console.log(err);}
        var hash = txid;
        console.log('Transaction registered '+'and transaction hash is: ' + hash);
        callback(null,hash);
    }"
24803-1.sol,question,"function getAddress(prvKey)
{
  try{
      var Web3 = require('../../3rd_party/web3.js-1.0.0');     
      var web3 = new Web3();
      return web3.eth.accounts.privateKeyToAccount(prvKey);
     }
  catch (e)
  {
      return e;
  }
}"
54598-1.sol,question,"function transferFunds(){
  var source = 0x123456789.....
  var source_pass = ""secretpassword""
  var dest = 0x567890...
  var txcost = eth.estimateGas({from: source, to: dest, value: web3.toWei(200, 'gwei')}); 

  var fundsAvailable = eth.getBalance(source) - txcost; 

  if( fundsAvailable > 0){

    personal.unlockAccount(source, source_password, ""60"");
    eth.sendTransaction({from: source, to: dest, value: web3.toHex(fundsAvailable)}); 

    console.log(""Transferred "" + web3.fromWei(fundsAvailable) + "" ETH"");

  }
  else{

    console.log(""Insufficient funds"");
  }

}"
66313-0.sol,question,"function sendMultiSig(
   address toAddress,
   uint value,
   bytes data,
   uint expireTime,
   uint sequenceId,
   bytes signature
) public onlySigner {

var operationHash = keccak256(""ETHER"", toAddress, value, data, expireTime, sequenceId);

var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);


if (!(toAddress.call.value(value)(data))) {
  
  revert();
}
 Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);
}"
84373-1.sol,question,"function (deployer, network, addresses)
{
    const web3 = new web3_lib (new web3_lib.providers.HttpProvider ('http:
    console.log ('>>>>> Attempting to unlock account');
    console.log ('>>>>> Using password ' + process.env.GETH_PW);
    web3.eth.personal.unlockAccount ('0x1234567890abcdef1234567890abcdef12345678', 'my-pw', 36000).then (console.log ('Account unlocked!'));

    console.log ('>>>>> Deploying migration');
    deployer.deploy (Migrations);
}"
84729-0.sol,question,"function createItem(string calldata _title,
                        string calldata _shortDescription,
                        string calldata _longDescription) external
    {
        itemOwners[++maxId] = msg.sender;
        emit ItemUpdated(msg.sender, maxId, _title, _shortDescription, _longDescription);
    }"
41611-1.sol,question,"function(err, res) {
        $(""#loader"").show();
        if (!err) {
            $(""#portfolio"").html('Portfolio Name: ' + web3.toAscii(value.args[0]) + ' Ether Balance: ' + web3.toAscii(value.args[1]));
            $(""#loader"").hide();
        }
    }"
77518-0.sol,question,"function deployCon()聽{

const contract = new web3.eth.Contract(compiledContract.abi);
const params = {
    data: '0x' + compiledContract.bytecode,
    arguments: [account1]
};
const transaction = contract.deploy(params); 
const options = {
    data: transaction.encodeABI(),
    gas: await transaction.estimateGas({from: account1})
};

const signed = await web3.eth.accounts.signTransaction(options, privateKey1);
receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
console.log(`Contract deployed at address: ${receipt.contractAddress}`);
return receipt;

}"
15741-1.sol,question,"function() {
    return Users.deployed().then(function(instance) {
      return instance.register.call('test')
        .then(() => {
          return instance.checkAvailability.call('test');
        });
    })
    .then((register) => {
      console.log(register);
    });
  }"
15741-1.sol,question,"function(instance) {
      return instance.register.call('test')
        .then(() => {
          return instance.checkAvailability.call('test');
        });
    }"
84437-0.sol,question,"function(hash){ console.log(""txHash"", hash) }"
84437-0.sol,question,"function(confNumber, receipt){ console.log(""confNumber"",confNumber,""receipt"",receipt) }"
84213-0.sol,question,"function(deployer){
   deployer.deploy(adoption);
   deployer.deploy(victim);
}"
2214-1.sol,question,"function doSmth(address user){
   transaction1;
   doSmthElse();
}"
63443-2.sol,question,function(instance){return instance.setNum(2);}
63443-2.sol,question,function(value){ return value.toNumber();}
84579-1.sol,question,"function(data, cb, curCb, nonce_offset) {
    nonce_offset = nonce_offset || 0
    var meth = this
    this.eth.getTransactionCount(data.sender.address).then(nonce => {
        nonce = nonce + nonce_offset

        this.l.acquire(""tx"", function(done) {
            if (nonce <= meth.nonce) {
                nonce = meth.nonce + 1
            }
            var tx = {
                nonce: web3.utils.toHex(nonce),
                value: web3.utils.toHex(data.amount || 0),
                to: data.to,
                
                
                gasLimit: web3.utils.toHex(data.gasLimit || 3000000),
                data: '0x0'
            }

            if(data.encodedData) {
                tx.data = data.encodedData;
            }

            data.sender.signTransaction(tx).then(raw => {
                meth.eth.sendSignedTransaction(raw.rawTransaction, err => {
                    if (!err)
                        meth.nonce = nonce
                    else {
                        if(err.message.startsWith('Returned error: known transaction') || 
                            err.message.startsWith('Returned error: already known')) {
                            var newtx = tx
                            meth.sendTransaction(data, cb, curCb, nonce_offset + 1)
                            done()
                            return
                        }
                    }
                    done()

                    if (!err) {
                        meth.eth.getTransaction(raw.transactionHash).then(function(nettx) {
                            if(!nettx)
                                var fee = undefined
                            else
                                var fee = parseInt(nettx.gasPrice) * nettx.gas
                            cb(err, raw.transactionHash, fee)
                        })
                    } else cb(err)
                })

                curCb && curCb(null)

            })
        
        })
    });
}"
84579-1.sol,question,"function(done) {
            if (nonce <= meth.nonce) {
                nonce = meth.nonce + 1
            }
            var tx = {
                nonce: web3.utils.toHex(nonce),
                value: web3.utils.toHex(data.amount || 0),
                to: data.to,
                
                
                gasLimit: web3.utils.toHex(data.gasLimit || 3000000),
                data: '0x0'
            }

            if(data.encodedData) {
                tx.data = data.encodedData;
            }

            data.sender.signTransaction(tx).then(raw => {
                meth.eth.sendSignedTransaction(raw.rawTransaction, err => {
                    if (!err)
                        meth.nonce = nonce
                    else {
                        if(err.message.startsWith('Returned error: known transaction') || 
                            err.message.startsWith('Returned error: already known')) {
                            var newtx = tx
                            meth.sendTransaction(data, cb, curCb, nonce_offset + 1)
                            done()
                            return
                        }
                    }
                    done()

                    if (!err) {
                        meth.eth.getTransaction(raw.transactionHash).then(function(nettx) {
                            if(!nettx)
                                var fee = undefined
                            else
                                var fee = parseInt(nettx.gasPrice) * nettx.gas
                            cb(err, raw.transactionHash, fee)
                        })
                    } else cb(err)
                })

                curCb && curCb(null)

            })
        
        }"
84579-1.sol,question,"function(nettx) {
                            if(!nettx)
                                var fee = undefined
                            else
                                var fee = parseInt(nettx.gasPrice) * nettx.gas
                            cb(err, raw.transactionHash, fee)
                        }"
43129-1.sol,question,"function(accounts) {
        it(""Token purchases go through after pre-sale open"", async function() {

            MyContract.new('0x0ca1afa472b258e8811a0c1406a66c7b9cf6acea', preSaleDuration, generalSaleDuration);

            await instance.openPreSale({from: accounts[0]});
            let initialBalance = await web3.eth.fromWei(instance.getBalance(instance.address),'ether').toNumber();
            var tx = {from: accounts[2], to: instance.address, value: web3.toWei(10, ""ether""), gas: 200000 };
            let txHash = await web3.eth.sendTransaction(tx, pwd);
            let finalBalance = await web3.fromWei(web3.eth.getBalance(instance.address),'ether').toNumber();
            let amount = (finalBalance - initialBalance);

            await assert.equal(amount,10, ""Could not purchase 10 ether of tokens during pre-sale"");
        });
}"
43129-1.sol,question,"function() {

            MyContract.new('0x0ca1afa472b258e8811a0c1406a66c7b9cf6acea', preSaleDuration, generalSaleDuration);

            await instance.openPreSale({from: accounts[0]});
            let initialBalance = await web3.eth.fromWei(instance.getBalance(instance.address),'ether').toNumber();
            var tx = {from: accounts[2], to: instance.address, value: web3.toWei(10, ""ether""), gas: 200000 };
            let txHash = await web3.eth.sendTransaction(tx, pwd);
            let finalBalance = await web3.fromWei(web3.eth.getBalance(instance.address),'ether').toNumber();
            let amount = (finalBalance - initialBalance);

            await assert.equal(amount,10, ""Could not purchase 10 ether of tokens during pre-sale"");
        }"
50219-0.sol,question,function(hash){console.log(['transferToReceiver Trx Hash:' + hash]);}
50219-0.sol,question,"function(receipt){console.log(['transferToReceiver Receipt:', receipt]);}"
50219-0.sol,question,"function (receipt){
            var trxJSON = {
                _seq: rlTrxSeq,
                _aft_bal: (10000000 - tokenAmount),
                _amt: tokenAmount,
                _st_sent_to: receiverPublicAddr,
                _tx_hash: receipt.transactionHash,
                _st_sent_tx_hash: receipt.transactionHash
            };
            if (receipt.status === true){
                var sql = ""CALL eth.sp_operation_staging_wallet('', '""
                                    + stagingPublicAddr + ""', '""
                                    + stagingKeystoreAddr + ""', '""
                                    + JSON.stringify(trxJSON) + ""', '""
                                    + mode + ""', '""
                                    + network + ""')"";

                db.runQuery(sql);
            }
        }"
77951-1.sol,question,"function(deployer) {
  deployer.deploy(Ticket, 0).then(() => {
    return deployer.deploy(Event, Ticket.address)
      .then(async () => {
        const eventInstance = await Event.deployed();
        const ticketInstance = await Ticket.deployed();

        console.log('Event address is ', eventInstance.address);
        ticketInstance.updateEventAddress(eventInstance.address);
      });
  });
}"
31309-1.sol,question,"function(tx) {
  self.setStatus(""Transaction complete!"");
  console.log(""the transaction:"", tx);
}"
63867-0.sol,question,"function createProduct(uint _price, string memory _desc) public payable{ 
   emit UserLedgerUpdated(_desc, -1*int(msg.value));
}"
74429-2.sol,question,"function(deployer) {
  deployer.deploy(Test);
}"
2334-0.sol,question,"function(err, res) {
           if(err || !res) return console.error(err)
           console.log(res);
    }"
25703-0.sol,question,"function(err) {
        if (err) return reject(err);
        resolve();
      }"
25703-0.sol,question,"function(accounts) {
  let factory;
  let token;
  let wallet;
  let sale;

  const startTime = 1505750400; 
  const endTime = 1508169600; 

  beforeEach(async () => {
    factory = await MiniMeTokenFactory.new();
    wallet = await MultiSigWallet.new(
      [
        accounts[7], 
        accounts[8], 
        accounts[9], 
      ],
      2
    );
    token = await MyToken.new(factory.address);
    sale = await Campaign.new(
      startTime,
      endTime,
      28125000000000000000000,
      wallet.address,
      token.address
    );
  });

  it('should return correct balances after generation', async function() {
    await token.generateTokens(accounts[1], 100);
    const totalSupply = await token.totalSupply();
    assert.equal(totalSupply.toNumber(), 100);
  });

  it('should work when trying to send ether during the sale', async function() {
    await token.changeController(sale.address);
    const { timestamp } = web3.eth.getBlock('latest');
    const travelTime = startTime - timestamp + 60; 
    await timetravel(travelTime);
    web3.eth.sendTransaction({
      from: accounts[0],
      to: sale.address,
      value: web3.toWei(1, 'ether'),
    });
    const totalSupply = await token.totalSupply();
    assert.equal(totalSupply.toNumber(), 1200);
    const totalCollected = await sale.totalCollected;
    assert.equal(totalCollected.toNumber(), 1200);
    const balance0 = await token.balanceOf(accounts[0]);
    assert.equal(balance0.toNumber(), 1200);
  });
}"
25703-0.sol,question,"function() {
    await token.generateTokens(accounts[1], 100);
    const totalSupply = await token.totalSupply();
    assert.equal(totalSupply.toNumber(), 100);
  }"
8497-1.sol,question,"function() {
    alert(""button was clicked""); 
    var contract = web3.eth.contract(abi).at('0x17956ba5f4291844bc25aedb27e69bc11b5bda39'); 
    contract.call().removeElement(""0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba"");
}"
60654-1.sol,question,"function(accounts){

  it (""it will add two numbers"", function(){
    return adding.deployed().then(function(i){
      instance = i ;
      return instance.add(3,4)
    }).then(function(value){
      assert.equal(value,7,""the values of 3 and 4 must be equal to 7"" );
    });
  });
}"
60654-1.sol,question,"function(){
    return adding.deployed().then(function(i){
      instance = i ;
      return instance.add(3,4)
    }).then(function(value){
      assert.equal(value,7,""the values of 3 and 4 must be equal to 7"" );
    });
  }"
60654-1.sol,question,"function(i){
      instance = i ;
      return instance.add(3,4)
    }"
60654-1.sol,question,"function(value){
      assert.equal(value,7,""the values of 3 and 4 must be equal to 7"" );
    }"
56660-0.sol,question,"function() public payable {
    transfer(msg.sender, msg.value);
}"
72280-1.sol,question,"function(deployer) {
  deployer.deploy(towater);
}"
735-1.sol,question,"function(blockWatchError, blockWatchResult){
    console.log(""Looking out for Tokentransfer data"");
    console.log(""TokenTranfer Error:""+blockWatchError);
    if(!blockWatchError){
        console.log(""The event data result is:""+blockWatchResult);
    }
}"
55670-0.sol,question,"function() { 
      return new HDWalletProvider(process.env.MNENOMIC, ""https:
    network_id: 3,
    gas: 4700000,
    }"
49633-0.sol,question,"function startVoteForChangeBuySellPrice(uint buyPrice, uint buyAddUnits, uint sellPrice, uint sellAddUnits, bool ignoreSecurityLimits) external onlyAdmin
{
    uint sellTotalPrice = sellAddUnits * sellPrice;
    require(voteType == VoteType.NONE);
    require(buyPrice >= sellPrice);
    require(sellTotalPrice <= weiFromExchange);
    voteType = VoteType.CHANGE_BUY_SELL_PRICE;
    voteReturnData[0].uintData = buyPrice;
    voteReturnData[1].uintData = buyAddUnits;
    voteReturnData[2].uintData = sellPrice;
    voteReturnData[3].uintData = sellAddUnits;
    voteReturnData[0].boolData = ignoreSecurityLimits;
    internalResetVotingData();
    voteId = voteId.add(1);
}"
80188-0.sol,question,"function(callback) {
const project = artifacts.require(""project"");
let p = await project.at('0x4514bC8332c94AEE465e7c70B0d0497424A66D67');
console.log(p.methods.state.call());}"
68198-1.sol,question,"function(deployer) {
  deployer.deploy(Dapp);
}"
73026-0.sol,question,"function passThrough() payable public
        {
        address(portfolio).transfer(address(this).balance);
        }"
26362-0.sol,question,"function (){
    a = block.number;
 }"
6449-3.sol,question,"function(error, result) {
    if (!error) {
        var msg = ""args: "" + result.args + "" (block:"" + result.blockNumber + "")"";
        console.log(msg);
    }
}"
64862-0.sol,question,"function(deployer, accounts) {
  deployer.deploy(Bank, {from: accounts[0], value: 
  web3.utils.toWei(""30"", ""ether"")}).then((bank)=>{
    return deployer.deploy(Client, bank.address, {from:accounts[1]});
  });
}"
46124-2.sol,question,"function compile_and_sign_transaction_offline (p_key, address, gasPriceHex, parent_file_and_object){

    var privateKey = new Buffer(p_key, 'hex')

    const compiled_contract = solc.compile({sources: sol_input_array}, 1); 
    const bytecode = compiled_contract.contracts[parent_file_and_object].bytecode;
    const contractData = '0x' + bytecode;

    
    const gasLimitHex = '0x124F80';     

    const rawTx = { 
        nonce: 0x00,  
        gasPrice: gasPriceHex,
        gasLimit: gasLimitHex,
        data: contractData,
        from: address 
    };  

    const tx = new Tx(rawTx);
    tx.sign(privateKey);

    const serializedTx = tx.serialize();
    const signed_transaction = serializedTx.toString('hex');
    fs.writeFileSync(""signed_tx"", signed_transaction);
}"
68285-2.sol,question,"function(deployer) {
  deployer.deploy(sampleapp);
  deployer.deploy(Migrations);
}"
78926-0.sol,question,"function(){


    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;
    var contact = web3.eth.contract(OraclizeContract.abi);
    var sendata = contact.new.getData(web3.utils.toWei(betAmount, ""ether""));

    var team = document.querySelector(""#bet #team"").value;

    if(team == ""Home"")
    {
      team = 1;
    }
    else
    {
      team = 2;
    }

    var contract = web3.eth.contract(OraclizeContract.abi).at(contractAddress);  
    var amount = contract.amount();
    var data = contract.betOnTeam.getData(team);


   var gasRequired = contract.betOnTeam.estimateGas(team, { 
          from: fromAddress,     
          value: amount,       
          to: contractAddress   
      })

   web3.eth.getTransactionCount(fromAddress, function(error, nonce){

         var rawTx = {         
            gasPrice: web3.toHex(web3.eth.gasPrice), 
            gasLimit: web3.toHex(gasRequired),   
            from: fromAddress,         
            nonce: web3.toHex(nonce),          
            data: data,         
            to: contractAddress,         
            value: web3.toHex(amount)   };

       privateKey = EthJS.Util.toBuffer(privateKey, ""hex"");
       var tx = new EthJS.Tx(rawTx);         
        tx.sign(privateKey);

      })
  }"
78926-0.sol,question,"function(error, nonce){

         var rawTx = {         
            gasPrice: web3.toHex(web3.eth.gasPrice), 
            gasLimit: web3.toHex(gasRequired),   
            from: fromAddress,         
            nonce: web3.toHex(nonce),          
            data: data,         
            to: contractAddress,         
            value: web3.toHex(amount)   };

       privateKey = EthJS.Util.toBuffer(privateKey, ""hex"");
       var tx = new EthJS.Tx(rawTx);         
        tx.sign(privateKey);

      }"
65940-0.sol,question,"function createUser(
    address _address, 
    string memory _name, 
    string memory _companyName, 
    int _numYearsExperience, 
    int _pricePerHour, 
    string memory _specialisation, 
    string memory _summary,
    int _numAdsViewed,
    int _numAdsPurchased
    ) public 

{

    address _userAddress = _address;

    
    User storage user = users[_userAddress];


    
    require(
        !user.set,
        ""User already exists!""
        );


    
    users[_userAddress] = User({
        name: _name,
        companyName: _companyName,
        numYearsExperience: _numYearsExperience,
        pricePerHour: _pricePerHour,
        specialisation: _specialisation,
        summary: _summary,
        set: true,
        numAdsViewed: _numAdsViewed,
        numAdsPurchased: _numAdsPurchased
    });
}"
44120-1.sol,question,"function() {

    it(""should store 1, 21, a, b and then verify by the ID/string"", async () => {
        let query = await QueryResultHandler.deployed();    
        query.storeQueryResults.call(1,21,""a"",""b"").then(function(stored){
            console.log(stored);
        });
       query.validateQueryResultsByString.call(""a"",""b"").then(function(valid){
           console.log(valid);
       });   
    });
}"
44120-1.sol,question,"function(stored){
            console.log(stored);
        }"
44120-1.sol,question,"function(valid){
           console.log(valid);
       }"
12683-0.sol,question,"function() {
         var address = web3.personal.newAccount(""password"");
         console.log(""Address: "", address);
         return address;
     }"
47634-1.sol,question,"function(accounts) {
  it(""should assert true"", async function() {
    const contract = await HelloWorld.deployed();
    await contract.setNumber(54);
    await contract.getNumber();
    const result = await contract.getNumber.call();
    assert.isTrue(result === 54);


  });
}"
47634-1.sol,question,"function() {
    const contract = await HelloWorld.deployed();
    await contract.setNumber(54);
    await contract.getNumber();
    const result = await contract.getNumber.call();
    assert.isTrue(result === 54);


  }"
12120-2.sol,question,"function(instance) {return instance.send(b,500);}"
83205-0.sol,question,"function() {
        DaiContract.methods.transferFrom($(""#address1"").val(), $(""#address2"").val(), $(""#amount"").val()).call()
        .then(function(result){
            $(""#result"").html(""Successfully transferred "" + $(""amount"").val() + "" Dai."");
            DaiContract.methods.balanceOf($(""#address1"").val()).call()
            .then(function(result){
                console.log('Remaining balance in address1 : ' + value);
            })
            .catch(function(error){
                console.error('Error : ' + error);
            });
        })
        .catch(function(error){
            console.error('Error : ' + error);
            $(""#result"").html(""Transfer failed"");
        });
    }"
83205-0.sol,question,"function(result){
            $(""#result"").html(""Successfully transferred "" + $(""amount"").val() + "" Dai."");
            DaiContract.methods.balanceOf($(""#address1"").val()).call()
            .then(function(result){
                console.log('Remaining balance in address1 : ' + value);
            })
            .catch(function(error){
                console.error('Error : ' + error);
            });
        }"
83205-0.sol,question,"function(error){
                console.error('Error : ' + error);
            }"
68289-0.sol,question,"function() {
     var key = $('#key').val();
  var roll_number = $('#roll_number').val();
 var name = $('#name').val();
 var age = $('#age').val();
 var branch = $('#branch').val();
 var internal_marks = $('#inter').val();
 var external_marks = $('#exter').val();
     Student.StoreDocument( key, roll_number, name, age, branch, internal_marks, external_marks, {from: web3.eth.defaultAccount,gas:3000000});
    console.log(Student);
}"
21641-0.sol,question,"function inside(){  
      assert(x>y);  

  }"
21641-0.sol,question,"function main(){  
      inside();  

  }"
43705-0.sol,question,"function(deployer) {
   deployer.deploy(Contract1).then(function(instance){
        deployer.deploy(Contract2, true, 20000, Contract1.address);
     })
    }"
43705-0.sol,question,"function(instance){
        deployer.deploy(Contract2, true, 20000, Contract1.address);
     }"
58676-2.sol,question,"function deposit(address supporter, uint256 tokensAmount) onlyOwner public payable{

    depositedETH[supporter] = depositedETH[supporter].add(msg.value);
    depositedToken[supporter] = depositedToken[supporter].add(tokensAmount);

    emit Deposit(supporter, msg.value, tokensAmount);
}"
51381-1.sol,question,"function() {
    var guessInstance;
    var guessedNumber = parseInt($('#myGuess').val());
    console.log($('#myGuess').val());
    console.log($('#myGuess').val());
    var account = web3.eth.coinbase;
    App.contracts.GuessNumber.deployed().then(function(instance){
      guessInstance = instance;
      return guessInstance.guessIt(guessedNumber, {from: account});
    }).then(function(receipt){
      var guessResult;
      if (receipt.logs.length == 1) {
      guessResult = receipt.logs[0].args._randomNumber.toNumber() === receipt.logs[0].args._guess.toNumber() ? ""Congrats!! You Guessed it correct"" 
                      : ""Sorry!! I thought it was "" + receipt.logs[0].args._randomNumber.toNumber() + "".<br/> Better luck next time."";
      }
      $(""#guessResult"").html(guessResult);
    });
  }"
51381-1.sol,question,"function(instance){
      guessInstance = instance;
      return guessInstance.guessIt(guessedNumber, {from: account});
    }"
51381-1.sol,question,"function(receipt){
      var guessResult;
      if (receipt.logs.length == 1) {
      guessResult = receipt.logs[0].args._randomNumber.toNumber() === receipt.logs[0].args._guess.toNumber() ? ""Congrats!! You Guessed it correct"" 
                      : ""Sorry!! I thought it was "" + receipt.logs[0].args._randomNumber.toNumber() + "".<br/> Better luck next time."";
      }
      $(""#guessResult"").html(guessResult);
    }"
44360-4.sol,question,"function(err, res) {console.log(err, res}"
79866-1.sol,question,"function(deployer) {
  deployer.deploy(AuctionBox);
  deployer.deploy(Auction);
}"
31399-1.sol,question,"function(err) {
    }"
58572-3.sol,question,"function(deployer) {
  deployer.deploy(ConvertLib);
  deployer.link(ConvertLib, MetaCoin);
  deployer.deploy(MetaCoin);
  deployer.deploy(UpdateName);

  deployer.deploy(Token, {gas: 6000000}).then(()=>{
    deployer.deploy(Tokenize, {gas: 6000000}).then(() => {
      deployer.deploy(Trade, Tokenize.address, Token.address, {gas: 6000000});
    })
  })
}"
31681-1.sol,question,function(deployed){et=deployed;}
25371-1.sol,question,"function(accounts) {
    const params = {
        _owner: accounts[0],
        _name: ""test"",
        _resultNames: [""first"", ""second"", ""third""],
        _bettingEndBlock: 1000
    };

    let testContract;

    it(""allows users to bet if the betting end block has not been reached"", async function() {
        testContract = await TestContract.new(...Object.values(params));

        testContract.BetAccepted().watch((error, response) => {
            if (error) {
                console.log(""Event Error: "" + error);
            } else {
                console.log(""Event Triggered: "" + JSON.stringify(response.event));
                console.log(""resultIndex: "" + JSON.stringify(response.args._resultIndex));
                console.log(""betAmount: "" + JSON.stringify(response.args._betAmount));
                console.log(""betBalance: "" + JSON.stringify(response.args._betBalance));
            }
        });

        let initialBalance = web3.eth.getBalance(testContract.address).toNumber();
        let betAmount = web3.toWei(1, 'ether');
        let betResultIndex = 0;

        await testContract.bet(betResultIndex, { from: accounts[1], value: betAmount });
        let newBalance = web3.eth.getBalance(testContract.address).toNumber();
        let difference = newBalance - initialBalance;
        assert.equal(difference, betAmount, ""New result balance does not match added bet."");

        let resultBalance = await testContract.getResultBalance(betResultIndex);
        assert.equal(resultBalance, betAmount, ""Result balance does not match."");

        let betBalance = await testContract.getBetBalance(betResultIndex);
        assert.equal(betBalance.toString(), betAmount, ""Bet balance does not match."");
    });"
25371-1.sol,question,"function() {
        testContract = await TestContract.new(...Object.values(params));

        testContract.BetAccepted().watch((error, response) => {
            if (error) {
                console.log(""Event Error: "" + error);
            } else {
                console.log(""Event Triggered: "" + JSON.stringify(response.event));
                console.log(""resultIndex: "" + JSON.stringify(response.args._resultIndex));
                console.log(""betAmount: "" + JSON.stringify(response.args._betAmount));
                console.log(""betBalance: "" + JSON.stringify(response.args._betBalance));
            }
        });

        let initialBalance = web3.eth.getBalance(testContract.address).toNumber();
        let betAmount = web3.toWei(1, 'ether');
        let betResultIndex = 0;

        await testContract.bet(betResultIndex, { from: accounts[1], value: betAmount });
        let newBalance = web3.eth.getBalance(testContract.address).toNumber();
        let difference = newBalance - initialBalance;
        assert.equal(difference, betAmount, ""New result balance does not match added bet."");

        let resultBalance = await testContract.getResultBalance(betResultIndex);
        assert.equal(resultBalance, betAmount, ""Result balance does not match."");

        let betBalance = await testContract.getBetBalance(betResultIndex);
        assert.equal(betBalance.toString(), betAmount, ""Bet balance does not match."");
    }"
78341-1.sol,question,"function() {
    return DappToken.deployed().then(function(instance) {
        tokenInstance = instance;

    something larger than the sender's balance
    return tokenInstance.transfer.call(accounts[1], 999999);
    }).then(assert.fail).catch(function(error) {
        assert(error.message.indexOf('revert') >= 0, 'error message must contain revert');

        return tokenInstance.transfer(accounts[1], 2500, { from: accounts[0] });
    }).then(function(success) {
        assert.equal(success, true, 'it returns true');



    return tokenInstance.transfer(accounts[1], 2500, {from: accounts[0] });     
    }).then(function(receipt) {


        assert.equal(receipt.logs.length, 1, 'triggers one event');
        assert.equal(receipt.logs[0].event, 'Transfer', 'should be the ""Transfer"" event');
        assert.equal(receipt.logs[0].args._from, accounts[0], 'logs the account the tokens are transferred from');
        assert.equal(receipt.logs[0].args._to, accounts[1], 'logs the account the tokens are transferred to');
        assert.equal(receipt.logs[0].args._value, 2500, 'logs the transfer amount');


    return tokenInstance.balanceOf(accounts[1]);
    }).then(function(balance) {
        assert.equal(balance.toNumber(), 2500, 'adds the amount to the receiving account');
    return tokenInstance.balanceOf(accounts[0]);    
    }).then(function(balance) {
        assert.equal(balance.toNumber(), 7500, 'deducts the amount from the sending account');
    });
"
78341-1.sol,question,"function(instance) {
        tokenInstance = instance;

    something larger than the sender's balance
    return tokenInstance.transfer.call(accounts[1], 999999);
    }"
78341-1.sol,question,"function(error) {
        assert(error.message.indexOf('revert') >= 0, 'error message must contain revert');

        return tokenInstance.transfer(accounts[1], 2500, { from: accounts[0] });
    }"
78341-1.sol,question,"function(success) {
        assert.equal(success, true, 'it returns true');



    return tokenInstance.transfer(accounts[1], 2500, {from: accounts[0] });     
    }"
78341-1.sol,question,"function(receipt) {


        assert.equal(receipt.logs.length, 1, 'triggers one event');
        assert.equal(receipt.logs[0].event, 'Transfer', 'should be the ""Transfer"" event');
        assert.equal(receipt.logs[0].args._from, accounts[0], 'logs the account the tokens are transferred from');
        assert.equal(receipt.logs[0].args._to, accounts[1], 'logs the account the tokens are transferred to');
        assert.equal(receipt.logs[0].args._value, 2500, 'logs the transfer amount');


    return tokenInstance.balanceOf(accounts[1]);
    }"
78341-1.sol,question,"function(balance) {
        assert.equal(balance.toNumber(), 2500, 'adds the amount to the receiving account');
    return tokenInstance.balanceOf(accounts[0]);    
    }"
83640-0.sol,question,"function _registerAirline(address addr, string memory name)
        external
        requireIsOperational
    {
        require(!airlines[addr].isRegistered, ""Airline is already registered"");

        airlines[addr] = Airline({
            name: name,
            isFunded: false,
            isRegistered: true
        });

        multiSig.push(addr);
        emit AirlineRegistered(
            airlines[addr].name,
            airlines[addr].isFunded,
            airlines[addr].isRegistered
        );
    }"
61920-1.sol,question,"function(error, result) { 
                if(error != null)
                    console.log(""7. Error! "", error);
                else
                    console.log(""7. Result = "", result);
            }"
77242-0.sol,question,"function payMe() payable{
    

    users[msg.sender].balance += modifiedMsgValue ;
}"
63606-0.sol,question,"function() {
    
    $.getJSON('../candidates.json', function(data) {
      var content1 = $('#content1');
      var candidateTemplate = $('#candidateTemplate');

      for (i = 0; i < data.length; i ++) {
        candidateTemplate.find('.panel-title').text(data[i].name);
        candidateTemplate.find('img').attr('src', data[i].picture);

        candidateTemplate.find('.candidate-age').text(data[i].age);
        candidateTemplate.find('.candidate-post').text(data[i].post);

        candidateTemplate.find('.btn-vote').attr('data-id', data[i].id);

        content1.append(candidateTemplate.html());
      }
    });


  }"
63606-0.sol,question,"function(data) {
      var content1 = $('#content1');
      var candidateTemplate = $('#candidateTemplate');

      for (i = 0; i < data.length; i ++) {
        candidateTemplate.find('.panel-title').text(data[i].name);
        candidateTemplate.find('img').attr('src', data[i].picture);

        candidateTemplate.find('.candidate-age').text(data[i].age);
        candidateTemplate.find('.candidate-post').text(data[i].post);

        candidateTemplate.find('.btn-vote').attr('data-id', data[i].id);

        content1.append(candidateTemplate.html());
      }
    }"
63606-0.sol,question,"function(election){
      App.contracts.Election = TruffleContract(election);

      App.contracts.Adoption.setProvider(App.web3Provider);


    
    return App.render();

  }"
63606-0.sol,question,"function(voters, account) {
    var voterInstance;

    var loader=$(""#loader"");
    var content = $(""#content1"");
    var table =  $("".table"")

    loader.show();
    content.hide();


    
    web3.eth.getCoinbase(function(err, account){
      if (err===null){
        App.account = account;
        $(""#accountAddress"").html(""Your Account: "" +account);
      }
    });

    
    App.contracts.Election.deployed().then(function(instance){
      electionInstance = instance;

      return electionInstance.candidatesCount.call();
    }).then(function(candidatesCount){

      var candidatesResults = $(""#candidatesResults"");
      candidatesResults.empty();

      for (i< 0; i<=candidatesCount; i++){
        electionInstance.candidatesCount(i).then(function(candidate){
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          if ((voteCount % 5)==0){
            var candidateTemplate =""<tr><th>"" + id +""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>""
            candidatesResults.append(candidateTemplate);
          }
        });

      }
      return electionInstance.voters(App.account);
    }).then(function(Completed){

      if(Completed){
      table.show();
    }
      loader.hide();
      content.show();
    }).catch(function(error){
      console.warn(error);
    });
  }"
63606-0.sol,question,"function(instance){
      electionInstance = instance;

      return electionInstance.candidatesCount.call();
    }"
63606-0.sol,question,"function(candidatesCount){

      var candidatesResults = $(""#candidatesResults"");
      candidatesResults.empty();

      for (i< 0; i<=candidatesCount; i++){
        electionInstance.candidatesCount(i).then(function(candidate){
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          if ((voteCount % 5)==0){
            var candidateTemplate =""<tr><th>"" + id +""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>""
            candidatesResults.append(candidateTemplate);
          }
        });

      }
      return electionInstance.voters(App.account);
    }"
63606-0.sol,question,"function(candidate){
          var id = candidate[0];
          var name = candidate[1];
          var voteCount = candidate[2];

          if ((voteCount % 5)==0){
            var candidateTemplate =""<tr><th>"" + id +""</th><td>"" + name + ""</td><td>"" + voteCount + ""</td></tr>""
            candidatesResults.append(candidateTemplate);
          }
        }"
63606-0.sol,question,"function(Completed){

      if(Completed){
      table.show();
    }
      loader.hide();
      content.show();
    }"
63606-0.sol,question,"function(event) {
    event.preventDefault();

    var candidateId = parseInt($(event.target).data('id'));

    web3.eth.getAccounts(function(error,accounts){
      if(error){
        console.log(error);
      }
      var account= accounts[0];

      App.contracts.Election.deployed().then(function(instance){
        electionInstance= instance;

        return electionInstance.vote(candidateId, {from: account});
      }).then(function(result){
        return App.render();
      }).catch(function(err){
        console.log(err.message);
      });
    });
  }"
63606-0.sol,question,"function(error,accounts){
      if(error){
        console.log(error);
      }
      var account= accounts[0];

      App.contracts.Election.deployed().then(function(instance){
        electionInstance= instance;

        return electionInstance.vote(candidateId, {from: account});
      }).then(function(result){
        return App.render();
      }).catch(function(err){
        console.log(err.message);
      });
    }"
63606-0.sol,question,"function(result){
        return App.render();
      }"
83897-1.sol,question,"function(deployer) {
    deployer.logger.log(""Deploying MyContract"");
    await deployer.deploy(MyContract, someConstructorParam);
}"
38179-1.sol,question,"function(inst) {
  return inst.checkSender(10, { 
    from: ""0x5aeda56215b167893e80b4fe645ba6d5bab767de"" 
  })
}"
79197-3.sol,question,"function update()
  payable
  public {
  
  if (oraclize_getPrice(""URL"") > address(this).balance) {
    emit LogInfo(""Oraclize query was NOT sent, please add some ETH to cover for the query fee"");
  } else {
    emit LogInfo(""Oraclize query was sent, standing by for the answer.."");

    
    oraclize_query(""URL"", ""json(https:
  }
}"
84628-1.sol,question,"function enviar (req,res){

        var myAddress = '0x68d9...'; 
        var privateKey = Buffer.from('42AE...', 'hex') 
        var toAddress ; 

        
        var contractABI =[
                            {
                                ""inputs"": [],
                                ""name"": ""get"",
                                ""outputs"": [
                                    {
                                        ""internalType"": ""uint256"",
                                        ""name"": """",
                                        ""type"": ""uint256""
                                    }
                                ],
                                ""stateMutability"": ""view"",
                                ""type"": ""function""
                            },
                            {
                                ""inputs"": [
                                    {
                                        ""internalType"": ""uint256"",
                                        ""name"": ""x"",
                                        ""type"": ""uint256""
                                    }
                                ],
                                ""name"": ""set"",
                                ""outputs"": [],
                                ""stateMutability"": ""nonpayable"",
                                ""type"": ""function""
                            }
                        ];
        var contractAddress =""0xb031...""; 
        
        var contract = new web3js.eth.Contract(contractABI,contractAddress);

        var count;
        
        web3js.eth.getTransactionCount(myAddress).then(function(v){
            console.log(""Count: ""+v);
            count = v;
            var amount = web3js.utils.toHex(1e16);
            
            var rawTransaction = {""from"":myAddress, ""gasPrice"":web3js.utils.toHex(60* 1e9),""gasLimit"":web3js.utils.toHex(3000000),""to"":contractAddress,""value"":""0x0"",""data"":contract.methods.set(0x849787ab...).encodeABI(),""nonce"":web3js.utils.toHex(count+2)}
            console.log(rawTransaction);
            
            var transaction = new Tx (rawTransaction);
            
            transaction.sign(privateKey);
            
            web3js.eth.sendSignedTransaction('0x'+transaction.serialize().toString('hex'))
            .on('transactionHash',console.log);  

        })
    }"
84628-1.sol,question,"function(v){
            console.log(""Count: ""+v);
            count = v;
            var amount = web3js.utils.toHex(1e16);
            
            var rawTransaction = {""from"":myAddress, ""gasPrice"":web3js.utils.toHex(60* 1e9),""gasLimit"":web3js.utils.toHex(3000000),""to"":contractAddress,""value"":""0x0"",""data"":contract.methods.set(0x849787ab...).encodeABI(),""nonce"":web3js.utils.toHex(count+2)}
            console.log(rawTransaction);
            
            var transaction = new Tx (rawTransaction);
            
            transaction.sign(privateKey);
            
            web3js.eth.sendSignedTransaction('0x'+transaction.serialize().toString('hex'))
            .on('transactionHash',console.log);  

        }"
84223-0.sol,question,"function payBeneficiary(address payable beneficiary, uint256 amount) external payable{
  beneficiary.transfer(amount);
  
  
}"
23529-0.sol,question,"function sendMessage(int id, string title, string message){
       Message(id, method, parameters);
     }"
64996-0.sol,question,"function add(Role storage role, address account) 
  internal
  {
    require(account != address(0));
    role.bearer[account] = true;
  }"
64996-0.sol,question,"function remove(Role storage role, address account) 
  internal 
  {
    require(account != address(0));
    role.bearer[account] = false;
  }"
31500-1.sol,question,"function MyToken(){
    ^
"
84784-0.sol,question,"function(){
contract.methods.genInvoice($('#invoice').val(),$('#productName').val(),$('#date').val(),$('#prodQuantity').val(),$('#unitPrice').val(),$('#gst').val()).send({from:""0x6F43d25a062e2cb48bF83dB76afC797210321945"", gas:300000})}"
84289-0.sol,question,"function (){
        console.log(""First Name: ""+ $('#firstName').val());
        console.log(""Last Name: ""+ $('#lastName').val());
        console.log(""Age: ""+ $('#age').val());
        console.log(""Is city: ""+ $('#city').val());

      if ($('#firstName').val() && $('#lastName').val()  && $('#age').val()  && $('#city').val() ){        
           web3.eth.getAccounts(function (error,accounts){
          if (error){
              App.showError(error);
          }
         App.currentAccount = curacc;
         
          console.log(""curr acc: ""+ App.currentAccount);

          let tipAmount = window.web3.utils.toWei('5.5', 'Ether');
          console.log(""tipAmount"" + tipAmount);

          App.contracts.HelloWorld.deployed().then(function(instance){
            return instance.createUser.sendTransaction($('#firstName').val(), $('#lastName').val(), 
            $('#age').val() , $('#city').val(), {from:App.currentAccount , value: tipAmount})
          }).then(function(result){
              App.showMessage('Submitted data saved Successfully....');
              App.ShowSavedUser();
          }).catch(function (error){
              App.showError(error);
          })
        })
      }
      else{
        console.log(""Data not filled for all fields...."");
          App.showError('Please fill all fields...');
      }
    }"
84289-0.sol,question,"function (error,accounts){
          if (error){
              App.showError(error);
          }
         App.currentAccount = curacc;
         
          console.log(""curr acc: ""+ App.currentAccount);

          let tipAmount = window.web3.utils.toWei('5.5', 'Ether');
          console.log(""tipAmount"" + tipAmount);

          App.contracts.HelloWorld.deployed().then(function(instance){
            return instance.createUser.sendTransaction($('#firstName').val(), $('#lastName').val(), 
            $('#age').val() , $('#city').val(), {from:App.currentAccount , value: tipAmount})
          }).then(function(result){
              App.showMessage('Submitted data saved Successfully....');
              App.ShowSavedUser();
          }).catch(function (error){
              App.showError(error);
          })
        }"
84289-0.sol,question,"function(instance){
            return instance.createUser.sendTransaction($('#firstName').val(), $('#lastName').val(), 
            $('#age').val() , $('#city').val(), {from:App.currentAccount , value: tipAmount})
          }"
84289-0.sol,question,"function(result){
              App.showMessage('Submitted data saved Successfully....');
              App.ShowSavedUser();
          }"
84289-0.sol,question,"function (error){
              App.showError(error);
          }"
79848-1.sol,question,"function(deployer) {
  deployer.deploy(Votingapp, listOfCandidates.map(name => web3.utils.asciiToHex(name)));
}"
7775-6.sol,question,"function(accounts) {
  it(""Getting the words string from the );

  it("" 2 + 2 = 4 "", function(){
    var c = C.deployed();
    
    
    c.math(2, 2, {from:accounts[0],gas:3000000}).then(function() {    
        return c.getVal.call().then(function(additionResult){
            assert.equal(additionResult, 6, ""[E] 2 + 2 = 4 even in eth. contracts."");
        done();
       }).done(null, function(error) {
        done(error); 
       });
    });
  });

}"
7775-6.sol,question,"function(){
    var c = C.deployed();
    
    
    c.math(2, 2, {from:accounts[0],gas:3000000}).then(function() {    
        return c.getVal.call().then(function(additionResult){
            assert.equal(additionResult, 6, ""[E] 2 + 2 = 4 even in eth. contracts."");
        done();
       }).done(null, function(error) {
        done(error); 
       });
    });
  }"
7775-6.sol,question,"function() {    
        return c.getVal.call().then(function(additionResult){
            assert.equal(additionResult, 6, ""[E] 2 + 2 = 4 even in eth. contracts."");
        done();
       }).done(null, function(error) {
        done(error); 
       });
    }"
7775-6.sol,question,"function(additionResult){
            assert.equal(additionResult, 6, ""[E] 2 + 2 = 4 even in eth. contracts."");
        done();
       }"
7775-6.sol,question,"function(error) {
        done(error); 
       }"
72402-1.sol,question,"function() {
        return new HDWalletProvider(config.mnemonic, ""https:
      }"
23529-3.sol,question,"function(error, event){
      if (error) {
        callback(error, null);
      } else {
         var eventRet = event;
        callback(null, eventRet);
      }
  }"
10740-0.sol,question,"function(error, event){
    if (error) {
        console.log(""Error: "" + error);
    } else {
        console.log('some event occured');
    }
}"
29016-0.sol,question,"function(data) {
    var contract = new web3.eth.Contract(JSON.parse(data.abi), data.address);
    var result = contract.call().getWord()
    console.log(result);
}"
31439-2.sol,question,"function(deployer) {
  deployer.deploy(Token);
  deployer.deploy(ChildRegistry);
  deployer.deploy(ChildRegistryDelegate);
  deployer.deploy(NodeDelegate);
}"
12668-1.sol,question,"function(req, res){
    var rawString = req.user.customData;
    var stringJson = JSON.stringify(rawString);
    var customData = JSON.parse(stringJson);
    var web3 = new Web3();

    web3.setProvider(new web3.providers.HttpProvider(customData.ethereum_provider));
    var address = req.body.address;

    
    var MyContract = web3.eth.contract(abi.abiOrganisationObject).at(address);
    var details = MyContract.getDetails();
    console.log(details);
    res.end(details).status(200);
}"
82954-0.sol,question,"function(err, accounts){
                    if (err != null) {
                        console.log(err)
                    } else if (accounts.length === 0){ 
                        console.log('MetaMask is locked');
                        alert('Please connect to MetaMask');
                    } else {
                        console.log('MetaMask is unlocked')
                    }
                    }"
82954-0.sol,question,"function() {
                        
                        var id = $('#name').val();
                        var amount = $('#amount').val();
                        myContract.methods.addName(id , amount, account).send();
                     }"
42379-1.sol,question,"function(items, account) {
  var contractInstance;

  App.contracts.MyContract.deployed().then(function(instance) {
    contractInstance = instance;
    return contractInstance.numberOfItems.call();
}).then(function(numberOfItems) {
  console.log(Number(numberOfItems));

  for (var i = 0; i < numberOfItems; i++ ){
  contractInstance.getItemInfo(i).then(function(data){
    
  })
}
}).catch(function(err) {
  console.log(err.message);
});
}"
42379-1.sol,question,"function(instance) {
    contractInstance = instance;
    return contractInstance.numberOfItems.call();
}"
42379-1.sol,question,"function(numberOfItems) {
  console.log(Number(numberOfItems));

  for (var i = 0; i < numberOfItems; i++ ){
  contractInstance.getItemInfo(i).then(function(data){
    
  })
}
}"
42379-1.sol,question,"function(data){
    
  }"
62049-2.sol,question,"function(deployer) {
  deployer.deploy(SafeMath);
  deployer.link(SafeMath, TestCoin);
  deployer.deploy(TestCoin);
}"
11468-1.sol,question,"function(err, res){
    document.getElementById('amt').innerText = res;
}"
79259-1.sol,question,"function(c) {
      
      App.contracts.customer = TruffleContract(c);
      
      App.contracts.customer.setProvider(App.web3Provider);

      return App.render();
    }"
79259-1.sol,question,function(instance) {app1=instance}
21506-0.sol,question,"function() {
    if (typeof web3 !== 'undefined') {
        console.warn(""Using web3 detected from external source like Metamask"")
        
        window.web3 = new Web3(web3.currentProvider);


    } else {
        window.alert(""No web3 detected. This site is a Web3 Dapp - to proceed you will need to get Metamask https:
    }

}"
9985-0.sol,question,"function joinLottery (uint _token, uint _RandomNumber,
    address _issuer){
    Gambler newGambler = gamblers[int(currentNumofGamblers)]; 
    newGambler.token = _token;
    newGambler.encRandomNumber = _encRandomNumber;
    newGambler.exist = true;
    newGambler.gamblerAdd = msg.sender;
    newGambler.issuer = _issuer;
    currentNumofGamblers++;
    winningNumber = RandomNumber; 
}"
63227-0.sol,question,"function(error, result)
    {
        items[i] = [result[0].toNumber(), result[1].toNumber()];
        items = items.sort(function(a, b)
        {
            return b[1] - a[1]
        });
    }"
63227-0.sol,question,"function(a, b)
        {
            return b[1] - a[1]
        }"
77666-0.sol,question,"function deployWithCreationCode(){

     var contract = new web3.eth.Contract(abi);
    var dc = await contract.deploy({data: crCode})
          .send({
              from: account1,
              gas: 6721975, 
              gasPrice: '30000000'
          });
return dc._address;"
40294-1.sol,question,"function() {


  if (typeof web3 !== 'undefined') {
      window.web3   = new Web3(web3.currentProvider);
      startApp();
    } else {
      console.log('No web3? You should consider trying MetaMask!');
    }
  }"
40294-1.sol,question,"function startApp(){
  console.log(""start App"");

  var contractABI = web3.eth.contract(
          [
        {
          ""constant"": true,
          ""inputs"": [],
          ""name"": ""counter"",
          ""outputs"": [
            {
              ""name"": """",
              ""type"": ""uint256""
            }
          ],
          ""payable"": false,
          ""stateMutability"": ""view"",
          ""type"": ""function""
        },
        {
          ""constant"": false,
          ""inputs"": [],
          ""name"": ""destroy"",
          ""outputs"": [],
          ""payable"": false,
          ""stateMutability"": ""nonpayable"",
          ""type"": ""function""
        },
        {
          ""constant"": false,
          ""inputs"": [],
          ""name"": ""raiseCounter"",
          ""outputs"": [],
          ""payable"": true,
          ""stateMutability"": ""payable"",
          ""type"": ""function""
        },
        {
          ""inputs"": [],
          ""payable"": false,
          ""stateMutability"": ""nonpayable"",
          ""type"": ""constructor""
        },
        {
          ""payable"": true,
          ""stateMutability"": ""payable"",
          ""type"": ""fallback""
        },
        {
          ""anonymous"": false,
          ""inputs"": [
            {
              ""indexed"": true,
              ""name"": ""_sender"",
              ""type"": ""address""
            },
            {
              ""indexed"": false,
              ""name"": ""_value"",
              ""type"": ""uint256""
            },
            {
              ""indexed"": false,
              ""name"": ""_counter"",
              ""type"": ""uint256""
            }
          ],
          ""name"": ""testEvent"",
          ""type"": ""event""
        }
      ]
    );

  var contractAddress    = 'ENTER DEPLOYED ADDRESS HERE';
  var Contract = contractABI.at(contractAddress);

  var userAcc = returnAccount();
  if(userAcc != null) checkBlockNo(Contract);

  getAllValues(Contract);
  addListeners(Contract);

}"
40294-1.sol,question,"function returnAccount(err, accounts){
  if (err != null) {
    console.error(""An error occurred: ""+err); 
    return null;
  } else if (web3.eth.accounts[0] == undefined) {
    return null;
  } else {
    console.log(""Account: "" + web3.eth.accounts[0]);
    return web3.eth.accounts[0];
  }
}"
40294-1.sol,question,"function getAllValues(_Contract){

  document.getElementById('getAllValues_btn').addEventListener(""click"", function() {
    console.log(""========= CONTRACT INFO =========="");

    web3.eth.getBalance(_Contract.address,(_err, _resp) => {
      if(_err!=null){
        console.log(_err);
      }else{
        console.log(""Balance: ""+ web3.fromWei(_resp,'ether').toString(10));
      }
    }); 

    _Contract.counter((_err, _resp) => {
      if(_err!=null){
        console.log(_err);
      }else{
        console.log(""Counter: ""+_resp);
      }
    }); 
  });
}"
40294-1.sol,question,"function addListeners(_Contract){

  console.log(""Adding FunctionListeners"");

  document.getElementById('FunctionBtn_RaiseCounter').addEventListener(""click"", function() {

    _Contract.raiseCounter.sendTransaction({from: web3.eth.accounts[0], value: 0}, (_err, _resp) => {
      if(_err!=null){
        console.log(_err);
      }else{
        console.log(_resp);
      }
    }); 

  });

console.log(""Adding EventListeners"");

document.getElementById('EventBtn_TestEvents').addEventListener(""click"", function() {
  console.log(""Start query..."");
  _Contract.testEvent({},{fromBlock: 0, toBlock: 'latest'}).get((error,events) =>{
    if(error!=null){
      console.log(error);
    }else{
      console.log(events);
      if(events[0] != undefined){
        events.forEach(function(_item, _index){
          console.log(""======= TestEvent ======="");
          console.log(""Sender: ""  + _item.args._sender.toString());
          console.log(""Amount: ""  + web3.fromWei(_item.args._amount,'ether').toString(10));
          console.log(""Counter: "" + _item.args._counter.toString());
        });
      }
    }
  });
});

}"
40294-1.sol,question,"function(_item, _index){
          console.log(""======= TestEvent ======="");
          console.log(""Sender: ""  + _item.args._sender.toString());
          console.log(""Amount: ""  + web3.fromWei(_item.args._amount,'ether').toString(10));
          console.log(""Counter: "" + _item.args._counter.toString());
        }"
55882-0.sol,question,"function(deployer) {
  deployer.deploy(CredentialOrgFactory);
  deployer.deploy(CredentialFactory);
  
  
}"
83467-1.sol,question,"function(instance) {
          kycInstance = instance;          
    var bal=kycInstance.getBalance();
              $(""#SmartBalance"").html(""Your Balance: "" + bal);
        
}"
16112-0.sol,question,"function(error, log) {
  console.log(JSON.stringify(log));
}"
84421-0.sol,question,"function() {
        return new HDWalletProvider(
          'mnemonic',
          webSocketProvider
        );
      }"
56981-0.sol,question,"function (data){
        console.log(data.key);
}"
66952-2.sol,question,"function(deployer) {
  deployer.deploy(Adoption);
}"
54378-0.sol,question,"function(err, accounts) {
  console.log(""why doesn't this run? 🤔"");
  myWeb3.eth.getBalance(accounts[0], function(err, balance) {
    render(""Your balance is "" + window.web3.fromWei(balance, ""ether""));
  });
}"
54378-0.sol,question,"function(err, balance) {
    render(""Your balance is "" + window.web3.fromWei(balance, ""ether""));
  }"
10381-2.sol,question,"function(testNumber1) {
        var contract = Authentication.deployed();
        contract.testWrite2(testNumber1, {from: web3.eth.accounts[0]}).then(function() {
          $scope.testWr = 'success';
          $scope.$apply();
      })
   }"
10381-2.sol,question,"function() {
          $scope.testWr = 'success';
          $scope.$apply();
      }"
17533-1.sol,question,"function() {
    var self = this;

    
    Lottery.setProvider(web3.currentProvider);

    
    web3.eth.getAccounts(function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];

      self.refreshBalance();
    });
  }"
17533-1.sol,question,"function(err, accs) {
      if (err != null) {
        alert(""There was an error fetching your accounts."");
        return;
      }

      if (accs.length == 0) {
        alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
        return;
      }

      accounts = accs;
      account = accounts[0];

      self.refreshBalance();
    }"
50619-0.sol,question,"function(err, nonce) {
                        web3.eth.getGasPrice(function(err, gasPrice) {
                            var gasLimit = 31500;
                            gasPriceHex = web3.utils.toHex(gasPrice);
                            gasLimitHex = web3.utils.toHex(gasLimit);
                            nonceHex = web3.utils.toHex(nonce);
                            amountHex = web3.utils.toHex(amount);
                            var rawTx = {
                                nonce: nonceHex,
                                gasPrice: gasPriceHex,
                                gas: gasLimitHex,
                                to: toAccount,
                                from: fromAccount,
                                value: amountHex,
                            };
                            var tx = new Tx(rawTx);
                            tx.sign(privateKey);

                            var serializedTx = tx.serialize();

                            try {
                                web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function(err, hash) {
                                    if (err) {
                                        console.log(err);
                                        res.json({
                                            status: false,
                                            msg: ""Please try after sometime"",
                                            httpcode: 400
                                        });
                                    } else {
                                        res.json({
                                            status: true,
                                            msg: ""Transaction Done Successfully"",
                                            txid: hash,
                                            httpcode: 200
                                        });
                                    }
                                });
                            } catch (e) {
                                res.json({
                                    status: false,
                                    msg: ""insufficient funds"",
                                    httpcode: 400
                                });
                            }
                        });
                    }"
50619-0.sol,question,"function(err, gasPrice) {
                            var gasLimit = 31500;
                            gasPriceHex = web3.utils.toHex(gasPrice);
                            gasLimitHex = web3.utils.toHex(gasLimit);
                            nonceHex = web3.utils.toHex(nonce);
                            amountHex = web3.utils.toHex(amount);
                            var rawTx = {
                                nonce: nonceHex,
                                gasPrice: gasPriceHex,
                                gas: gasLimitHex,
                                to: toAccount,
                                from: fromAccount,
                                value: amountHex,
                            };
                            var tx = new Tx(rawTx);
                            tx.sign(privateKey);

                            var serializedTx = tx.serialize();

                            try {
                                web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'), function(err, hash) {
                                    if (err) {
                                        console.log(err);
                                        res.json({
                                            status: false,
                                            msg: ""Please try after sometime"",
                                            httpcode: 400
                                        });
                                    } else {
                                        res.json({
                                            status: true,
                                            msg: ""Transaction Done Successfully"",
                                            txid: hash,
                                            httpcode: 200
                                        });
                                    }
                                });
                            } catch (e) {
                                res.json({
                                    status: false,
                                    msg: ""insufficient funds"",
                                    httpcode: 400
                                });
                            }
                        }"
50619-0.sol,question,"function(err, hash) {
                                    if (err) {
                                        console.log(err);
                                        res.json({
                                            status: false,
                                            msg: ""Please try after sometime"",
                                            httpcode: 400
                                        });
                                    } else {
                                        res.json({
                                            status: true,
                                            msg: ""Transaction Done Successfully"",
                                            txid: hash,
                                            httpcode: 200
                                        });
                                    }
                                }"
59783-0.sol,question,"function(req, res){

    var toAddress = req.body.toAddress;
    var coins  = req.body.quantity;
    coins = ""0x""+coins;
    var fromAddress  = req.body.fromAddress;
    var privateKey  = req.body.fromAddressPvtKey;

    try{

        var contractAddress = contractConfigTest.contractAddress;
        var contractAbi = contractConfigTest.abiArray;

        

        var myContract = new web3.eth.Contract(contractAbi, contractAddress);

        myContract.options.from = fromAddress;

        var transactionObject = {
            from: fromAddress,
            to: contractAddress,
            value: '0x00', 
            data: myContract.methods.transfer(toAddress, coins).encodeABI(),
            chainId: 3
        };

        web3.eth.estimateGas(transactionObject, function(err1, estimateGas){
            transactionObject.gasLimit = estimateGas;

            if(err1){
                res.send({error:true, errorMsg:err1.message, errorFunction:'estimateGas' });
            }

            web3.eth.accounts.signTransaction(transactionObject, privateKey , function(err2, signed){

                if(err2){
                    res.send({error:true, errorMsg:err2.message, errorFunction:'signTransaction'});
                }

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err3, txHash){

                    if(err3){
                        res.send({error:true, errorMsg:err3.message, errorFunction:'sendSignedTransaction'});
                    }

                    res.send({txHash:txHash});
                });

            });

        });

    }catch(err){
        res.send({error:true, errorMsg:err.message, errorFunction:'sendTokens' });
    }

}"
59783-0.sol,question,"function(err1, estimateGas){
            transactionObject.gasLimit = estimateGas;

            if(err1){
                res.send({error:true, errorMsg:err1.message, errorFunction:'estimateGas' });
            }

            web3.eth.accounts.signTransaction(transactionObject, privateKey , function(err2, signed){

                if(err2){
                    res.send({error:true, errorMsg:err2.message, errorFunction:'signTransaction'});
                }

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err3, txHash){

                    if(err3){
                        res.send({error:true, errorMsg:err3.message, errorFunction:'sendSignedTransaction'});
                    }

                    res.send({txHash:txHash});
                });

            });

        }"
59783-0.sol,question,"function(err2, signed){

                if(err2){
                    res.send({error:true, errorMsg:err2.message, errorFunction:'signTransaction'});
                }

                web3.eth.sendSignedTransaction(signed.rawTransaction, function(err3, txHash){

                    if(err3){
                        res.send({error:true, errorMsg:err3.message, errorFunction:'sendSignedTransaction'});
                    }

                    res.send({txHash:txHash});
                });

            }"
59783-0.sol,question,"function(err3, txHash){

                    if(err3){
                        res.send({error:true, errorMsg:err3.message, errorFunction:'sendSignedTransaction'});
                    }

                    res.send({txHash:txHash});
                }"
74228-1.sol,question,"function() {
  const result = await instance.updatePrice();
  truffleAssert.eventEmitted(result, 'LogPriceUpdated');

  }"
54770-0.sol,question,"function(
  error,
  result,
) { 
   if (!error)
       console.log(""output of web3 stream""+JSON.stringify(result));
       else
  console.log('Error of web3 stream ' + JSON.stringify(result));
}"
66577-2.sol,question,"function(deployer) {
  deployer.deploy(EcommerceStore, web3.eth.accounts[9]);
}"
73875-4.sol,question,"function(error, response, body) {
    const parsed = body ? JSON.parse(body) : {};
    if (parsed.result && parsed.result.length > 0) {
        if (parsed.result[0].to == """") {
            console.log(parsed.result[0].blockNumber);
        }
        else {
            console.log(""error"");
        }
    }
    else {
        console.log(""error"");
    }
}"
13961-1.sol,question,"function(){

        var sender = web3.eth.accounts[0];
        var receiver = document.getElementById('receiver').value;
        var amount =         parseInt(document.getElementById('amount').value);
    web3.eth.getBalance(receiver,function(error,result){
        if(!error){
            consol.log(""Before transfer: "" + result );
        }else{
            console.log(""Error: "" + error);
        }
    });

    var newContract = payontime.new(receiver,{from:sender, value:amount}).then(
        function(myPay){
            console.log(myPay.getContractAddr.call());
        }).then(
        function(){
            web3.eth.getBalance(receiver,function(error,result){
                if(!error){
                    console.log(""After transfer: "" + result );
                }else{
                    console.log(""Error: "" + error);
                }
            });
        });
    }"
13961-1.sol,question,"function(error,result){
        if(!error){
            consol.log(""Before transfer: "" + result );
        }else{
            console.log(""Error: "" + error);
        }
    }"
13961-1.sol,question,"function(myPay){
            console.log(myPay.getContractAddr.call());
        }"
13961-1.sol,question,"function() {
  
  if (typeof web3 !== 'undefined') {
    console.warn(""Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http:
    
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn(""No web3 detected. Falling back to http:
    
    window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }
  payontime.setProvider(web3.currentProvider);
}"
19074-0.sol,question,"function() {

  
    
    window.web3 = new Web3(web3.currentProvider);   }"
7909-0.sol,question,"function() {    
        web3 = new Web3();
        web3.setProvider(new web3.providers.HttpProvider('http:
        angular.bootstrap(document, ['app']);       
    }"
30864-0.sol,question,"function sendEverything()
public 
{
   owner.transfer(this.balance);
   owner.transfer(this.allthetokens);
}"
55928-1.sol,question,"function(error, result){
  if(!error)
  {
    console.log(""Transaction submitted"");
  }
  else{
    console.log(""Error"");
  }
}"
56169-0.sol,question,"function(error, result){
  if(!error)
  {
    console.log(""Transaction submitted"" + result);
  }
  else{
    console.log(""Error "" + error);
  }
}"
25242-0.sol,question,"function AddTwoStrings(){
    sentence = ""this is a sentence"";
    more_text = "" additional text added."";
}"
29115-1.sol,question,"function liveDeploy(deployer, accounts){
  const BigNumber = web3.BigNumber;
  const RATE = new web3.BigNumber(100);
  const startTime = latestTime() + duration.minutes(10);
  const endTime =   startTime + duration.hours(12);
  console.log([startTime, endTime, RATE, accounts[0]]);
  
  return deployer.deploy(TestTokenPresaleTest, startTime, endTime, RATE, accounts[0]).then( async () => {
    const instance = await TestTokenPresaleTest.deployed();
    const token = await instance.token.call();
    console.log('Token Address', token);
  })
}"
50828-0.sol,question,"function(address,sender, callback) {
    var self = this;
    var config = require('../config/config');
    var Web3 = require('web3');
    var web3 = new Web3(config.clientEndPoint);
    var sender = config.address;
    var contractAddr = config.contractAddress;


var tokenInstance = new web3.eth.Contract(zecash_artifact.abi, );

var txnNonce;
var txnObject;

web3.eth.getTransactionCount(sender)
  .then(function(data){
   
    txnNonce = data;
    console.log(txnNonce);
    txnObject = {
      from : sender,
      to : contractAddr,
      value : ""0x0"",
      gasPrice: web3.utils.toHex(web3.utils.toWei('30', 'Gwei')),
      gas: web3.utils.toHex('3000000'),
      nonce: txnNonce,
      data: tokenInstance.methods.setValidators(address).encodeABI()
    };
    console.log(txnObject);

    var Tx = require('ethereumjs-tx');
    var privateKey = new Buffer(config.privkey, 'hex');

    var tx = new Tx(txnObject);
    tx.sign(privateKey);

    var serializedTx = tx.serialize();
    console.log(serializedTx);

    web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
    .on('receipt', function(receipt){
        console.log(""Receipt Called"");
        callback(receipt.valueOf());

      })
      .on('error', function(err){
        console.log(""Error Called: ""+ err);

        var minedPending = ""Be aware that it might still be mined"";
        var sourceErr = "" "" + err + "" "";
        if(sourceErr.indexOf(minedPending) !== -1)
        {
          var rtnObj = {
            ""status"" : ""pending"",
            ""data"" : err,
            ""errmsg"" : ""Your transaction is on the Blockchain. Depending on data traffic, it may take anywhere between 5-30 minutes to execute. Kindly check your wallet again in some time to be sure that the transaction was successfully executed.""
            };

          callback(rtnObj.valueOf());  
        }
        else
        {

          callback(""ERROR 404"");

        }
      });
 });
"
50828-0.sol,question,"function(data){
   
    txnNonce = data;
    console.log(txnNonce);
    txnObject = {
      from : sender,
      to : contractAddr,
      value : ""0x0"",
      gasPrice: web3.utils.toHex(web3.utils.toWei('30', 'Gwei')),
      gas: web3.utils.toHex('3000000'),
      nonce: txnNonce,
      data: tokenInstance.methods.setValidators(address).encodeABI()
    };
    console.log(txnObject);

    var Tx = require('ethereumjs-tx');
    var privateKey = new Buffer(config.privkey, 'hex');

    var tx = new Tx(txnObject);
    tx.sign(privateKey);

    var serializedTx = tx.serialize();
    console.log(serializedTx);

    web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
    .on('receipt', function(receipt){
        console.log(""Receipt Called"");
        callback(receipt.valueOf());

      })
      .on('error', function(err){
        console.log(""Error Called: ""+ err);

        var minedPending = ""Be aware that it might still be mined"";
        var sourceErr = "" "" + err + "" "";
        if(sourceErr.indexOf(minedPending) !== -1)
        {
          var rtnObj = {
            ""status"" : ""pending"",
            ""data"" : err,
            ""errmsg"" : ""Your transaction is on the Blockchain. Depending on data traffic, it may take anywhere between 5-30 minutes to execute. Kindly check your wallet again in some time to be sure that the transaction was successfully executed.""
            };

          callback(rtnObj.valueOf());  
        }
        else
        {

          callback(""ERROR 404"");

        }
      });
 }"
50828-0.sol,question,"function(receipt){
        console.log(""Receipt Called"");
        callback(receipt.valueOf());

      }"
50828-0.sol,question,"function(err){
        console.log(""Error Called: ""+ err);

        var minedPending = ""Be aware that it might still be mined"";
        var sourceErr = "" "" + err + "" "";
        if(sourceErr.indexOf(minedPending) !== -1)
        {
          var rtnObj = {
            ""status"" : ""pending"",
            ""data"" : err,
            ""errmsg"" : ""Your transaction is on the Blockchain. Depending on data traffic, it may take anywhere between 5-30 minutes to execute. Kindly check your wallet again in some time to be sure that the transaction was successfully executed.""
            };

          callback(rtnObj.valueOf());  
        }
        else
        {

          callback(""ERROR 404"");

        }
      }"
60295-1.sol,question,"function(){
        initContract();
        getCounterValue();
    }"
60295-1.sol,question,"function init 


    function getCounterValue(){
        console.log('getCounter()...');
        contract.methods.getCounter().call().then((result) => {
            console.log(result);
        }).catch(function(err){
            console.log('err...\n'+err);
        });
    }"
60295-1.sol,question,"function(err){
            console.log('err...\n'+err);
        }"
59256-0.sol,question,"function (){

    var fromOwner = accounts[0];
    var coinFactory;
    var coinNewCoin;
    return CoinFactory.deployed().then((instance) => {
        coinFactory = instance;
    }).then(() => {
    return coinFactory.getCoinAddress(fromOwner, {from: fromOwner});
    }).then((result) => {
        console.log(result);
    return CoinNewCoin.at(result).then((instance) => {
    }).then((instance) => {
        console.log(instance); 
        coinNewCoin = instance;
        return coinNewCoin.getAuthorizationKey();
    })
    }).then((result) => {
        console.log(result);
    });
}"
66799-2.sol,question,"function() {

    contract.setInstructor($(""#fname"").val());
}"
52533-0.sol,question,"function setDetailse(string  data, uint target) public
    {
        uint icr = incr++;
        address _address = msg.sender;
        var person = persons[icr];

        person .userAddress = _address;
        person .userName= _vote;
        person .userTarget = target;
        person Accounts.push(icr) -1;
    }"
12441-1.sol,question,"function(_result) { 
    console.log(_result.valueOf());"
27182-1.sol,question,"function(deployer, network, accounts) {
  const startTime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 1 
  const endTime = startTime + 180
  const rate = new web3.BigNumber(1000)
  const goal = new web3.BigNumber(200)
  const cap = new web3.BigNumber(20000)
  const wallet = accounts[0]
  

  deployer.deploy(CBITokenCrowdsale, startTime, endTime, rate, goal, cap, wallet)
}"
39225-1.sol,question,"function(error,result){
          if (!error) {
              console.log(""pending"" + result);
          }
      }"
15782-0.sol,question,"function(done) {
  this.timeout(250000);
  var computation;
  var result;
  ComputationService.deployed().then(function(instance) {
    computation = instance;
    return computation.compute(""43543"", ""423543543"", 0, 56347573485346, {from:accounts[0], gas: 500000, value: web3.toWei(0.01, ""ether"")});
  }).then(function(){
    return new Promise(resolve => setTimeout(resolve, 240000));
  }).then(function(){
    return computation.getResult(56347573485346);
  }).then(function(value){
    result = value;
    assert.equal(result, ""18442356492849"", ""The result is wrong (should be 18442356492849)"");
    done();
  });
}"
15782-0.sol,question,"function(instance) {
    computation = instance;
    return computation.compute(""43543"", ""423543543"", 0, 56347573485346, {from:accounts[0], gas: 500000, value: web3.toWei(0.01, ""ether"")});
  }"
15782-0.sol,question,"function(){
    return new Promise(resolve => setTimeout(resolve, 240000));
  }"
15782-0.sol,question,"function(value){
    result = value;
    assert.equal(result, ""18442356492849"", ""The result is wrong (should be 18442356492849)"");
    done();
  }"
3494-0.sol,question,"function(v){
    posts[i] = v;
  }"
60745-0.sol,question,"function(confirmationNumber, receipt){ 
          console.log(confirmationNumber) }"
37159-2.sol,question,"function(error, result) {
     console.log(""Price "" + result / 1000000000000000000 + "" Ether"");
}"
44981-0.sol,question,"function(){
  var target = web3.eth.accounts[10];
  for (var account = 0; account < 10; account++) {
   var balance = web3.eth.getBalance(web3.eth.accounts[account]);
   if(balance > 0)
     web3.eth.sendTransaction({from: web3.eth.accounts[account], to: target, value: balance});
  }
}"
16130-0.sol,question,"function() {


if (typeof web3 !== 'undefined') {

window.web3 = new Web3(web3.currentProvider);
  } else {
console.log('No web3? You should consider trying MetaMask!')

in-dapp id mgmt / fail)
window.web3 = new Web3(new 
Web3.providers.HttpProvider(""http:
  }

 
  startApp()

}"
79234-0.sol,question,"function withdrawRewards() onlyOwner external
{
    require(rewardsAmount != 0);
    owner.transfer(rewardsAmount);
    rewardsAmount = 0;
}"
79234-0.sol,question,"function kill() onlyOwner external
{
    require(address(this).balance - rewardsAmount == 0);
    selfdestruct(owner);
}"
79234-0.sol,question,"function someFunction() public
{
    
    rewardsAmount += 100;
}"
39127-2.sol,question,"function() {
    heavengame.sendTo($(""#payee"").val(), web3.toWei($(""#amount"").val(),'ether'), {value: web3.toWei($(""#amount"").val(),'ether'), gas: 1000000},(err, result) => {
        if (err) {
            console.log(err);
        }
    });
}"
26759-1.sol,question,"function(sock) { 



sock.setEncoding('utf8'); 
sock.on('data', function(data) { 
console.log('__________'); 

console.log(data); 

console.log('__________'); 
web3 = new Web3(new Web3.providers.HttpProvider(""http:
abi = JSON.parse('[{""constant"":false,""inputs"":[{""name"":""x"",""type"":""string""}],""name"":""set"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""get"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]'); 
SimpleStorage = web3.eth.contract(abi); 

contractInstance = SimpleStorage.at('0x08cf472e9192d3c48e03f501472c8aecb9350c16'); 

contractInstance.set(data, {from: web3.eth.accounts[0], gas: 4700000}); 

 x=contractInstance.get({from: web3.eth.accounts[0], gas: 4700000}); 
 console.log(x); 

}); 




sock.on('close', function(data) { 


}); 



}"
26759-1.sol,question,"function(data) { 
console.log('__________'); 

console.log(data); 

console.log('__________'); 
web3 = new Web3(new Web3.providers.HttpProvider(""http:
abi = JSON.parse('[{""constant"":false,""inputs"":[{""name"":""x"",""type"":""string""}],""name"":""set"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""get"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]'); 
SimpleStorage = web3.eth.contract(abi); 

contractInstance = SimpleStorage.at('0x08cf472e9192d3c48e03f501472c8aecb9350c16'); 

contractInstance.set(data, {from: web3.eth.accounts[0], gas: 4700000}); 

 x=contractInstance.get({from: web3.eth.accounts[0], gas: 4700000}); 
 console.log(x); 

}"
77332-1.sol,question,"function (){
    App.contracts.name_of_contract.deployed().then(async function(instance){
        let message = await instance.purchaseTokens.call('12');
        App.showMessage(message);
    }).catch((err) =>{
        App.showError(err);
    })
}"
77332-1.sol,question,"function(instance){
        let message = await instance.purchaseTokens.call('12');
        App.showMessage(message);
    }"
65448-1.sol,question,"function(deployer, network, accounts)
{
    await deployer.deploy(Registry);
}"
57884-0.sol,question,"function(instance) {
    adoptionInstance = instance;
    
    return adoptionInstance.adopt(petId, {from: account});
  }"
43275-0.sol,question,"function() {
    $(""#loader"").show();
    myOriginator.makeLoan($(""#loanID"").val(), borrowerAddress, $(""#loanAmount"").val(), (err, res) => {
        if (!err) {
           $(""#loader"").hide();
        }
   });
}"
84848-0.sol,question,"function() {
        return new HDWalletProvider(Mnemonic, ""http:
      }"
40237-1.sol,question,"function(callback) {
const Recorder = artifacts.require('Recorder');



recorder = Recorder.at(Recorder.address);


recorder.record.sendTransaction(""123"",{from: web3.eth.accounts[0],value: 70}).then(console.log(web3.eth.getBalance(Recorder.address)));

console.log(web3.eth.getBalance(Recorder.address));

}"
36812-0.sol,question,"function() public payable {
  success = 111;
}"
69405-0.sol,question,"function tipPoolOwner() public payable{
    require(msg.value > 0);
    require(msg.sender != owner());
    address payable poolOwner = address(uint160(owner()));
    poolOwner.transfer(msg.value);
    emit TipSent(msg.sender, msg.value);
}"
37159-1.sol,question,"function(Price) {
    console.log(Price);
}"
57942-0.sol,question,"function(deployer, network) {
  await deployer.deploy(contractA);  
  deployer.deploy(contractB, contractA.address); 
}"
50518-0.sol,question,"function(deployer) {
  deployer.deploy(UTO);
}"
47142-2.sol,question,"function(v) {
    var res1 = web3.utils.hexToAscii(v[0].toString());

  }"
26031-0.sol,question,"function createAccount(){    
    console.log(""web3 version""+web3.version.api);
    web3.eth.accounts.create();
}"
53066-1.sol,question,"function() {
    it(""Adding agreement into blockchain"", function(){
        return Instance.createAgreement.call(id, owner, fileHash, listOfSigner, types)
            .then(function(res){  
                console.log(""created!"");
            });
    });
}"
53066-1.sol,question,"function(){
        return Instance.createAgreement.call(id, owner, fileHash, listOfSigner, types)
            .then(function(res){  
                console.log(""created!"");
            });
    }"
53066-1.sol,question,"function(res){  
                console.log(""created!"");
            }"
24449-1.sol,question,"function(instance) {
      return instance.sellArticle(_article_name, _description, _price, {
        from: App.account,
        gas: 500000
      });
    }"
24449-1.sol,question,"function(result) {
      console.log(""reloading articles"");
      console.log(""result:"", result);
      App.reloadArticles();
    }"
24449-1.sol,question,"function(err) {
      console.error(err);
    }"
40431-0.sol,question,"function(error, sync){
    if (!error)
        console.log(sync);
}"
40431-0.sol,question,"function(sync){
        console.log(sync);
    }"
40431-0.sol,question,"function(isSyncing){
        if(isSyncing) {
            console.log(""changed"");
        } else {
            console.log(""changed to false"");
        }
    }"
80325-2.sol,question,"function(res){


_nonce = web3.utils.toHex(res);

console.log(_nonce);


var rawTx = {
  from: ""0x4f73Dc0AAFbFAb1151B5823a66736A8F46Fa49E6"",
  nonce: web3.utils.toHex(_nonce),
  gasLimit: web3.utils.toHex(3000000),
  gasPrice: web3.utils.toHex(20000000000),
  to: '0x0000000000000000000000000000000000000000',
  value: '0x00',
  data: '0x608060405234801561001057600080fd5b50610117806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806360fe47b11460375780636d4ce63c146062575b600080fd5b606$
  chainId: web3.utils.toHex(3)
}

var tx = new Tx(rawTx);
tx.sign(privateKey);

var serializedTx = tx.serialize();

web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
.on('transactionHash', console.log)
.on('receipt', function(err, res){console.log(res); console.log(err)})
.on('error', console.log);


}"
80325-2.sol,question,"function(err, res){console.log(res); console.log(err)}"
67197-0.sol,question,"function(err, result) {
          if (err) {
            console.log(err)
          } else {
            console.log(""Hey"")
          }
        }"
13821-1.sol,question,function(callback) {}
13821-1.sol,question,"function(instance) {

    return instance.set_x(500)

}"
13821-1.sol,question,"function(tx) {

    console.log(tx)
    var new_balance = web3.eth.getBalance(account1).toNumber();

    console.log(start_balance + "" initial balance"");
    console.log(new_balance + "" balance after transaction"");
    console.log((start_balance - new_balance) + "" difference"");
    console.log(from_wei(start_balance - new_balance) + "" difference (from_wei) ?"");
    console.log(web3.eth.gasPrice.toNumber() + "" gas price"")

}"
39940-0.sol,question,"function(){
   ContractInstance.transfer(OwnerWallet, el('#depositAmount').value)
    }"
73694-0.sol,question,"function send(){
        if(!window.web3){
            alert(""Please install Metamask!"");
        }
        

        if (!web3) {
                web3 = new Web3(window.web3.currentProvider);
                const publicAddress = web3.eth.coinbase.toLowerCase();
                this.setState({ loading: true });
            }
                     
              
                
       
              if(window.ethereum){
                  try{
                      if(typeof window.ethereum.selectedAddress === 'undefined'){
                          window.ethereum.enable();
                          console.log('enable');
                          window.web3 = new web3(window.ethereum);
                      }else{
                          console.log('window.ethereum.selectedAddress');
                          window.web3= new web3(window.ethereum);
                      }
                  } catch (error){
                      console.log(""The request is rejected"");
                  }
                 }else{
                    console.log(""Please Use Metamask"");
                 }
                    
                  if(typeof web3.eth.coinbase !== 'undefined'){
                alert(web3.eth.coinbase);
              }
              
              var address = web3.eth.coinbase;
              web3.eth.personal.sign(""Hello world"", ""0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe"", ""test password!"").then(console.log);
           
            }"
33806-2.sol,question,"function(deployer) {
  deployer.deploy(WhiteList);
  deployer.deploy(SaveData);
  deployer.deploy(StringUtils);
}"
78496-0.sol,question,"function finalSettersFunctions(){
  var myFunc; 
  var  myContAddr ;
  for(i=0; i < contractAddressess.length; i++) {
      myContAddr = contractAddressess[i]
    for(j=1; j<finalSetters[i].length; j++) {
          myFunc = finalSetters[i][j];

            try {
              await web3.eth.sendTransaction(
                {from:account1,
                to:myContAddr,
                data: myFunc
                    }, function(err, receipt) {console.log(""Normal Setters: "",receipt)});
            } catch (error) {
              console.log("" Normal Setters: ERROR !"", error); 
            }
    }
  }
}"
25767-2.sol,question,"function handleAllMintCoinEvent(){
    var AddForFetchinEvents = document.getElementById('AddForFetchinEvents').value;

    
    if(AddForFetchinEvents!=''){    
    console.log(AddForFetchinEvents);
    var allEvents = myContractInstance.Sent({from:AddForFetchinEvents},{fromBlock: 0, toBlock: 'latest'},function(error, result) {
              if (!error) {
                  
                    document.getElementById('MintCoinEvents').innerHTML += ""<hr/>""+result;

                    console.log(result);
              }
              else {
                  console.error(error);
              } 
        }); 
    } else {
        console.log(""pulling all the events"");
        var allEvents = myContractInstance.Sent({},{fromBlock: 1577465, toBlock: 1577565},function(error, result) {
              if (!error) {
                  
                    document.getElementById('MintCoinEvents').innerHTML += ""<hr/>""+result;

                    console.log(result);
              }
              else {
                  console.error(error);
              } 
        }); 
    }
    allEvents.stopWatching();

}"
25767-2.sol,question,"function(error, result) {
              if (!error) {
                  
                    document.getElementById('MintCoinEvents').innerHTML += ""<hr/>""+result;

                    console.log(result);
              }
              else {
                  console.error(error);
              } 
        }"
9324-1.sol,question,"function(accounts) {

    it(""should keep a Race struct in the storage on initRace call"", function() {
        var horseBetContract = HorseRacesBet.deployed();
        var horsesRunningTheRace = [10, 20, 30];

        horseBetContract.allEvents(function(error, result) {
            
            console.log('event log');
            if (error == null) {
                console.log(result.args);
            }
        });

        horseBetContract.initRace.call(horsesRunningTheRace).then(function(raceId) {
            assert.equal(raceId.valueOf(), 0, ""L'id de la course should be 0'"");

            horseBetContract.getRaceInfos.call(raceId).then(function(raceDatas){
                assert.equal(raceDatas[0], 0, ""The raceId returned should be 0"");
                assert.equal(raceDatas[1].valueOf(), 0, ""The sum of all bets should be 0."");
                assert.equal(raceDatas[2], false, ""The race shouldn't be over"");
                for(var i = 0 ; i< raceDatas[3].length; i++){
                    console.log(raceDatas[3][i].valueOf());
                }
                assert.equal(raceDatas[3], horsesRunningTheRace, ""The horses running the race should be the one we initialized the race with."");
                assert.equal(raceDatas[4], false, ""The bets shouldn't be closed on the race."");
            });
        });
    });
}"
9324-1.sol,question,"function() {
        var horseBetContract = HorseRacesBet.deployed();
        var horsesRunningTheRace = [10, 20, 30];

        horseBetContract.allEvents(function(error, result) {
            
            console.log('event log');
            if (error == null) {
                console.log(result.args);
            }
        });

        horseBetContract.initRace.call(horsesRunningTheRace).then(function(raceId) {
            assert.equal(raceId.valueOf(), 0, ""L'id de la course should be 0'"");

            horseBetContract.getRaceInfos.call(raceId).then(function(raceDatas){
                assert.equal(raceDatas[0], 0, ""The raceId returned should be 0"");
                assert.equal(raceDatas[1].valueOf(), 0, ""The sum of all bets should be 0."");
                assert.equal(raceDatas[2], false, ""The race shouldn't be over"");
                for(var i = 0 ; i< raceDatas[3].length; i++){
                    console.log(raceDatas[3][i].valueOf());
                }
                assert.equal(raceDatas[3], horsesRunningTheRace, ""The horses running the race should be the one we initialized the race with."");
                assert.equal(raceDatas[4], false, ""The bets shouldn't be closed on the race."");
            });
        });
    }"
9324-1.sol,question,"function(error, result) {
            
            console.log('event log');
            if (error == null) {
                console.log(result.args);
            }
        }"
9324-1.sol,question,"function(raceId) {
            assert.equal(raceId.valueOf(), 0, ""L'id de la course should be 0'"");

            horseBetContract.getRaceInfos.call(raceId).then(function(raceDatas){
                assert.equal(raceDatas[0], 0, ""The raceId returned should be 0"");
                assert.equal(raceDatas[1].valueOf(), 0, ""The sum of all bets should be 0."");
                assert.equal(raceDatas[2], false, ""The race shouldn't be over"");
                for(var i = 0 ; i< raceDatas[3].length; i++){
                    console.log(raceDatas[3][i].valueOf());
                }
                assert.equal(raceDatas[3], horsesRunningTheRace, ""The horses running the race should be the one we initialized the race with."");
                assert.equal(raceDatas[4], false, ""The bets shouldn't be closed on the race."");
            });
        }"
9324-1.sol,question,"function(raceDatas){
                assert.equal(raceDatas[0], 0, ""The raceId returned should be 0"");
                assert.equal(raceDatas[1].valueOf(), 0, ""The sum of all bets should be 0."");
                assert.equal(raceDatas[2], false, ""The race shouldn't be over"");
                for(var i = 0 ; i< raceDatas[3].length; i++){
                    console.log(raceDatas[3][i].valueOf());
                }
                assert.equal(raceDatas[3], horsesRunningTheRace, ""The horses running the race should be the one we initialized the race with."");
                assert.equal(raceDatas[4], false, ""The bets shouldn't be closed on the race."");
            }"
78291-1.sol,question,"function allow_withdrawals_for_anyone() public 
{
require(msg.sender = address(this));

}"
77305-1.sol,question,"function onReceive(
    address pSenderAddress,
    address pTokenAddress,
    uint pTokenAmount
)
    external
    onlyAllowedSender
{
    addVirtualTokens(pSenderAddress, pTokenAddress, pTokenAmount);
}"
28844-3.sol,question,"function(e, result) {console.log(result)}"
23196-3.sol,question,function(instance){HW = helloWorld.at(instance.address)}
28192-0.sol,question,"function(){
      var blockNumber = web3.eth.number;
      document.getElementById('latestBlock').innerText = blockNumber;
      var hash = web3.eth.getBlockNumber();
      document.getElementById('latestBlockHash').innerText = hash;
      var timeStamp = web3.eth.block(blockNumber).timestamp;
      document.getElementById('latestBlockTimestamp').innerText = Date(timeStamp);
    }"
66343-0.sol,question,"function checkLastCustomerInvoices()
{
    myContractInstance.checkLastCustomerInvoices(function(err,res){
           if (err)
                   console.log(err);
                else
                     {  
                        console.log(res);
                     }
       }
     );
    return false;
}"
66343-0.sol,question,"function(err,res){
           if (err)
                   console.log(err);
                else
                     {  
                        console.log(res);
                     }
       }"
64620-0.sol,question,"function(error,result){

if(!error){

total=result;

 }else{

 console.error(error);
    }
  }"
64620-0.sol,question,"function(error,result)

{

    if(!error)

    {

    cell1.innerHTML = result;

console.log(result);

}

    else

    {

console.error(error);

}

}"
30835-3.sol,question,"function(accounts) {

var registry,
    contractRegistry1,
    contractRegistry2,
    contracthash1,
    contracthash2;

contracthash1 = '0xca02b2202ffaacbd499438ef6d594a48f7a7631b60405ec8f30a0d7c096d54d5';
contracthash2 = '0xca02b2202ffaacbd499438ef6d594a48f7a7631b60405ec8f30a0d7c096dc3ff';

before(""Setup the Smart Identity registry and hydrate the required variables"", function(done) {
    contractRegistry1 = accounts[0];
    contractRegistry2 = accounts[1];

    SmartIdentityRegistry.new({from: contractRegistry1})
    .then(function(response) {
        registry = response;
        done();
    });

    return registry,
    contractRegistry1,
    contractRegistry2;
});

describe(""SmartIdentityRegistry tests"", function() {

    it(""will submit a );

    it(""will prove that the submitter can only  approve a );


    it(""will prove that a non-id owner cannot approve a contract"", function() {
        return registry.approveContract(contracthash1, {from: contractRegistry1})
        .catch(function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        });
    });

    it(""will prove that the registry owner can reject a contract"", function() {
        return registry.rejectContract(contracthash1, {from: contractRegistry1})
        .then(function(response) {
            assert.isOk(response, 'Contract rejection failed');
        });
    });

    it(""will prove that a non-owner cannot reject a contract"", function() {
        return registry.reject)
        .catch(function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        });
    });

    it(""will delete a );

    it(""will verify a contract is not valid"", function() {
        registry.submit)
        .then(function(response) {
            assert.isOk(response, 'Contract submitting failed');
        });
        return registry.isValidContract(contracthash2).then(function(response) {
            assert.isOk(response, 'Failed to verify contract');
        });
    });

    it(""will verify a contract is not valid and will throw an error"", function() {
        registry.submit)
        .then(function(response) {
            assert.isOk(response, 'Contract submitting failed');
        });
        registry.reject);
        return registry.isValidContract(contracthash2)
        .catch(function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        });
    });

    it(""will verify a );
});

 }"
30835-3.sol,question,"function(done) {
    contractRegistry1 = accounts[0];
    contractRegistry2 = accounts[1];

    SmartIdentityRegistry.new({from: contractRegistry1})
    .then(function(response) {
        registry = response;
        done();
    });

    return registry,
    contractRegistry1,
    contractRegistry2;
}"
30835-3.sol,question,"function(response) {
        registry = response;
        done();
    }"
30835-3.sol,question,"function() {

    it(""will submit a );

    it(""will prove that the submitter can only  approve a );


    it(""will prove that a non-id owner cannot approve a contract"", function() {
        return registry.approveContract(contracthash1, {from: contractRegistry1})
        .catch(function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        });
    });

    it(""will prove that the registry owner can reject a contract"", function() {
        return registry.rejectContract(contracthash1, {from: contractRegistry1})
        .then(function(response) {
            assert.isOk(response, 'Contract rejection failed');
        });
    });

    it(""will prove that a non-owner cannot reject a contract"", function() {
        return registry.reject)
        .catch(function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        });
    });

    it(""will delete a );

    it(""will verify a contract is not valid"", function() {
        registry.submit)
        .then(function(response) {
            assert.isOk(response, 'Contract submitting failed');
        });
        return registry.isValidContract(contracthash2).then(function(response) {
            assert.isOk(response, 'Failed to verify contract');
        });
    });

    it(""will verify a contract is not valid and will throw an error"", function() {
        registry.submit)
        .then(function(response) {
            assert.isOk(response, 'Contract submitting failed');
        });
        registry.reject);
        return registry.isValidContract(contracthash2)
        .catch(function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        });
    });

    it(""will verify a );
}"
30835-3.sol,question,"function(error) {
            assert.isOk(error, ""Expected error has not been caught"");
        }"
65369-0.sol,question,"function(instance) {
    
    instance.myEvent({}, function(error, event) {
        
        web3.toAscii(event.args[0])
    })
}"
65369-0.sol,question,"function(error, event) {
        
        web3.toAscii(event.args[0])
    }"
46417-1.sol,question,"function(error, result){
                if(!error)
                {
                    $(""#word"").html('Hello ' + result[0]);
                } else 
                    console.log(error);
            }"
46417-1.sol,question,"function() {
                Hello.setWord($(""#name"").val());
            }"
11525-0.sol,question,"function sendTransactions (amount, times){
    for(i=0; i<times; i++){
       smartContract.foo.sendTransaction({from: web3.eth.accounts[0], gas:100000, value: amount});
    }
}"
45821-0.sol,question,"function(err, gas) { console.log(gas); }"
16112-1.sol,question,"function(error, result) {
  if(!error){
    var info = web3.eth.getBlock(result , function(error, result){
       if(!error){
         var trans = web3.eth.getTransaction(result.transactions[1], function(error,result){
           if(!error){
             var str = web3.toAscii(result.input,);
             console.log(str);
           }else{
              console.log(error);
           }
         });
       }else{
          console.log(error);
       }
     });
 }else{
    console.log(error);
  }
}"
16112-1.sol,question,"function(error, result){
       if(!error){
         var trans = web3.eth.getTransaction(result.transactions[1], function(error,result){
           if(!error){
             var str = web3.toAscii(result.input,);
             console.log(str);
           }else{
              console.log(error);
           }
         });
       }else{
          console.log(error);
       }
     }"
16112-1.sol,question,"function(error,result){
           if(!error){
             var str = web3.toAscii(result.input,);
             console.log(str);
           }else{
              console.log(error);
           }
         }"
30544-0.sol,question,"function(response){
  console.log('displaymsg')
  console.log(response)
}"
36638-0.sol,question,"function(instance) {
  meta = instance;                               
  return meta.sendCoin(account_two, 10, {from: account_one});
}"
36638-0.sol,question,"function(result) {
  
  alert(""Transaction successful!"")
}"
36638-0.sol,question,"function(e) {
  
}"
31521-1.sol,question,function(instance) { factory = instance}
63937-1.sol,question,"function(deployer) {
 deployer.deploy(
 EventToken,
 initialSupply,
 tokenFullName,
 tokenCode,
 decimals,
 expiryDate
 );
}"
59080-1.sol,question,"function triggerEvent(uint param1, address param2)
    public {
    emit TotalInv(msg.sender, param1, param2);
 }"
84788-0.sol,question,"function(instance) {
  deployed = instance;
  return instance.someFunction(5);
}"
19598-0.sol,question,"function() {
           ^

RangeError: Maximum call stack size exceeded
    at RedBlackTreeIterator.get
"
57034-0.sol,question,"function() { 
              return new HDWalletProvider(process.env.MNENOMIC,         ""https:
            network_id: 3,
            gas: 4867350,
        }"
83452-0.sol,question,"function makeadmin(string memory cityN, address adminAdress, string memory AdminName, 
string memory hash) public
    {
        require(msg.sender==0x20db1A3eD27EEF75BEBb000961d07AD47Bf58197);

        require(!(ch[cityN].AAdminAdress==adminAdress ));
         require(!(adminscitystatus[cityN]));
        require(!(adminsaddressstatus[adminAdress]));

        ch[cityN].CCityName=cityN;
        ch[cityN].AAdminAdress=adminAdress;
        ch[cityN].AAdminName=AdminName;

        ch[cityN].hashh=hash;
          ch[cityN].noofadmins.push(adminAdress);
        ch[cityN].adminsid[adminAdress]=ch[cityN].noofadmins.length-1;
      adminscitystatus[cityN]=true;
        adminsaddressstatus[adminAdress]=true;
        cityforcompany.push(cityN);
        uint comid=cityforcompany.length-1;
        companycityid[cityN]=comid;
    }"
63296-0.sol,question,"function(error, result){ temp = result.args.val.toNumber();}"
22859-2.sol,question,"function(error, result) {
        console.log(""This doesn't get called"");
    }"
11291-1.sol,question,"function(error, result){
  var block = web3.eth.getBlock(result, true);
  console.log('current block #' + block.number);
}"
61854-1.sol,question,"function(deployer) {
  await deployer.deploy(ERC20God);
}"
62280-1.sol,question,"function (){
    privateKey = 'xxx';
    return new ethers.Wallet(privateKey, web3.currentProvider); 
}"
77927-0.sol,question,"function owner() public payable{
if(msg.sender != owner)
{
   balances[owner] += msg.value; 
   revert();
}"
77939-1.sol,question,"function () 
{
address e = contract A
e.delegatecall... 
}"
74027-0.sol,question,"function(err, result) {
    if (err || result.error) {
      return console.error(result);
    }

    const signature = parseSignature(result.result.substring(2));

    res.style.display = ""block"";
    res.value = genSolidityVerifier(signature, signer, chainId);
  }"
44216-1.sol,question,"function addNewDocument(string hash, string name){
    Document memory doc =  Document(hash,name,bytes32ToString(bytes32(now)),0);
    bytes32  hashed = keccak256(hash,name);
    Documents[hashed]=doc;
    DocumentAddresses.push(hashed);
    UserHashes[msg.sender].push(hashed);
}"
41594-0.sol,question,"function(accounts) {
  it(""should put 30000000 in the second account"", function() {
    var contract1Instance;
    var contract2Instance;

    var Contract1Address;
    var Contract2Address;

    return Contract1.deployed().then(function(instance) {
      contract1Instance = instance;
      Contract1Address = contract1Instance.address;  
      console.log(""Contract1Address:"" + Contract1Address);
      Contract2.new().then(function(instance) { contract2Instance = instance; });
      console.log(""contract2Instance:"" + contract2Instance);
      Contract2Address = contract2Instance.address;

      contract1Instance.deposit({from: accounts[0], value: web3.toWei(2, ""ether"") });
      contract2Instance.claim({ value: web3.toWei(1, ""ether""), gas: 1000000 });
      return web3.eth.getBalance(Contract2Address).toString(10);
    }).then(function(balance) {
      assert.equal (30000000, 30000000, ""30000000 wasn't in the first account"");
    });
  });"
41594-0.sol,question,"function() {
    var contract1Instance;
    var contract2Instance;

    var Contract1Address;
    var Contract2Address;

    return Contract1.deployed().then(function(instance) {
      contract1Instance = instance;
      Contract1Address = contract1Instance.address;  
      console.log(""Contract1Address:"" + Contract1Address);
      Contract2.new().then(function(instance) { contract2Instance = instance; });
      console.log(""contract2Instance:"" + contract2Instance);
      Contract2Address = contract2Instance.address;

      contract1Instance.deposit({from: accounts[0], value: web3.toWei(2, ""ether"") });
      contract2Instance.claim({ value: web3.toWei(1, ""ether""), gas: 1000000 });
      return web3.eth.getBalance(Contract2Address).toString(10);
    }).then(function(balance) {
      assert.equal (30000000, 30000000, ""30000000 wasn't in the first account"");
    });
  }"
41594-0.sol,question,"function(instance) {
      contract1Instance = instance;
      Contract1Address = contract1Instance.address;  
      console.log(""Contract1Address:"" + Contract1Address);
      Contract2.new().then(function(instance) { contract2Instance = instance; });
      console.log(""contract2Instance:"" + contract2Instance);
      Contract2Address = contract2Instance.address;

      contract1Instance.deposit({from: accounts[0], value: web3.toWei(2, ""ether"") });
      contract2Instance.claim({ value: web3.toWei(1, ""ether""), gas: 1000000 });
      return web3.eth.getBalance(Contract2Address).toString(10);
    }"
41594-0.sol,question,"function(balance) {
      assert.equal (30000000, 30000000, ""30000000 wasn't in the first account"");
    }"
65388-2.sol,question,"function() {
    const { web3 } = this;

    try {
      
      const networkId = await web3.eth.net.getId();
      const deployedNetwork = metaCoinArtifact.networks[networkId];
      this.meta = new web3.eth.Contract(
        metaCoinArtifact.abi,
        deployedNetwork.address,
      );

      
      const accounts = await web3.eth.getAccounts();
      this.account = accounts[0];

      this.refreshBalance();
    } catch (error) {
      console.error(""Could not connect to contract or chain."");
    }
    }"
36672-0.sol,question,"function() {

$.getJSON('../pets.json', function(data) {
  var petsRow = $('#petsRow');
  var petTemplate = $('#petTemplate');

  for (i = 0; i < data.length; i ++) {
    petTemplate.find('.panel-title').text(data[i].name);
    petTemplate.find('img').attr('src', data[i].picture);
    petTemplate.find('.pet-breed').text(data[i].breed);
    petTemplate.find('.pet-age').text(data[i].age);
    petTemplate.find('.pet-location').text(data[i].location);
    petTemplate.find('.btn-adopt').attr('data-id', data[i].id);

    petsRow.append(petTemplate.html());
  }
});

 return App.bindEvents();
}"
36672-0.sol,question,"function(){
    window.location.href =""../index.html"";
   }"
49960-0.sol,question,"function(res){
                console.log('signedTransaction res', res);
              }"
49960-0.sol,question,"function(err){
                console.log('signedTransactionErr', err);
              }"
83178-4.sol,question,function(acc){ accounts = acc }
79903-0.sol,question,"function(uint base, uint exponent){
for (uint256 i = 1; i < exponent; i++) 
uint256 z = base;
z = z*base; 
}"
41765-0.sol,question,"function() {
  return deployer.deploy(B, A.address);
}"
44840-0.sol,question,"function() {

RevenueShare.setProvider(web3.currentProvider);
  myContractInstance=RevenueShare.deployed();

myContractInstance.then(function(instance){
    return instance.address;
}).then(function(address){
  console.log(""Indirizzo in funzione:"",address);
  return address;
});
}"
44840-0.sol,question,"function(instance){
    return instance.address;
}"
44840-0.sol,question,"function(address){
  console.log(""Indirizzo in funzione:"",address);
  return address;
}"
40399-1.sol,question,"function(accounts) {
  let contract;
  let owner;
  let web3Contract;

  before(async () => {
    contract = await SimpleContract.deployed();
    web3Contract = web3.eth.contract(contract.abi).at(contract.address);
    owner = web3Contract._eth.coinbase;    
  });

  it(""test"", async function() {    
    let event = contract.SimpleEvent({_from: owner}, {fromBlock: 0, toBlock: 'latest'});

    
    await contract.set.sendTransaction(10);

    
    event.get((error, logs) => {
      console.log(logs)      
    })    
  });  
}"
40399-1.sol,question,"function() {    
    let event = contract.SimpleEvent({_from: owner}, {fromBlock: 0, toBlock: 'latest'});

    
    await contract.set.sendTransaction(10);

    
    event.get((error, logs) => {
      console.log(logs)      
    })    
  }"
37706-1.sol,question,"function() {
  it(""should create a stuct"", function() {
    return MyContract.deployed().then(function(instance) {
      return instance.addStruct.call(0xf17f52151EbEF6C7334FAD080c5704D77216b732, 1000);
    }).then(function(length) {
       console.log(length);
       assert.equal(length, 1, ""length is not 1"");

    });
  });

  it(""get the struct that was previously created"", function() {
    return MyContract.deployed().then(function(instance) {
      return instance.getStruct.call(0);
    }).then(function(values) {
      console.log(values);
      assert.equal(values, (0xf17f52151EbEF6C7334FAD080c5704D77216b732, 1000));
    });
  });
}"
37706-1.sol,question,"function(instance) {
      return instance.addStruct.call(0xf17f52151EbEF6C7334FAD080c5704D77216b732, 1000);
    }"
37706-1.sol,question,"function(length) {
       console.log(length);
       assert.equal(length, 1, ""length is not 1"");

    }"
37706-1.sol,question,"function(values) {
      console.log(values);
      assert.equal(values, (0xf17f52151EbEF6C7334FAD080c5704D77216b732, 1000));
    }"
6755-0.sol,question,"function inc(Data self) internal{
        self.a[0] =+1;
    }"
71046-0.sol,question,"function withdraw(){
    const contractInstance = connectToContract();

    var withdrawAmount = parseInt(document.getElementById('withdraw-amount').value);
    var goalID = 0;
    var donationEvent = contractInstance.DonationAction();

    contractInstance.withdraw.sendTransaction(goalID, web3.toWei(withdrawAmount, 'ether'), {

    }, function(err, wei) {
        if (err)
          console.log(err); 
    });

    donationEvent.watch(function(error, result){
        if (!error) {
            if (result.args.action == 'unverified'){
                window.alert('The goal is still ' + result.args.action);
            } else if (result.args.action == 'insufficient balance') {
                window.alert('There is ' + result.args.action + ' in the account. Send a value less than ' + result.args.amount);
            } else if (result.args.action == 'donated') {
                window.confirm('You have successfully ' + result.args.action + ' ' + result.args.amount);
            }
        } else {
            console.log(error);
        }
    });
}"
71046-0.sol,question,"function(err, wei) {
        if (err)
          console.log(err); 
    }"
71046-0.sol,question,"function(error, result){
        if (!error) {
            if (result.args.action == 'unverified'){
                window.alert('The goal is still ' + result.args.action);
            } else if (result.args.action == 'insufficient balance') {
                window.alert('There is ' + result.args.action + ' in the account. Send a value less than ' + result.args.amount);
            } else if (result.args.action == 'donated') {
                window.confirm('You have successfully ' + result.args.action + ' ' + result.args.amount);
            }
        } else {
            console.log(error);
        }
    }"
40385-0.sol,question,"function() payable{
    askForTokens();
}"
64066-1.sol,question,"function setName(string newName) public{
                     ^------------^"
21643-1.sol,question,"function() payable {
  require(block.number > icoStartBlock && block.number < icoEndBlock);

  uint256 tokenAmount = msg.value * ((block.number < icoPremiumEndBlock) ? 550 : 500);

  shares[msg.sender] += msg.value;
  balances[msg.sender] += tokenAmount;
  balances[owner] += tokenAmount / 6;

  raised += msg.value;
  created += tokenAmount;
}"
2310-1.sol,question,"function(){

    var result = ethash.run(new Buffer(headerHash, 'hex'), new Buffer(nonce, 'hex'));
    console.log(""result "" + (new BN(result.hash)).toString(16));

}"
57835-2.sol,question,"function(deployer, network, accounts) {

const openingTime = web3.eth.getBlock('latest').timestamp + 30; 
const closingTime = openingTime + 60 *15 
const rate = new web3.BigNumber(1000); 
const wallet = accounts[0];


console.log(""Deploying openingTime: "", openingTime, "" closingTime "", closingTime, "" rate "", rate, "" wallet "", wallet);

return deployer
    .then(() => {
        return deployer.deploy(TestBurnableToken, 10000);
    })
    .then(() => {
        return deployer.deploy(
            TestBurnableCrowdsale,
            openingTime,
            closingTime,
            rate,
            wallet,
            TestBurnableToken.address
        );
    });
}"
74379-3.sol,question,"function(deployer) {
  deployer.deploy(StarNotary, ""Udacity Star Token"", ""UST"");
}"
70663-0.sol,question,"function(callback) {
  

  contract.callMethod();
}"
62529-3.sol,question,"function(deployer, network, accounts) {
  const _name = ""Dapp Token"";
  const _symbol = ""DAPP"";
  const _decimals = 18;

  await deployer.deploy(DappToken, _name, _symbol, _decimals);
}"
12333-1.sol,question,"function(txHash) { 
    waitForTransaction(); 
    return web3.eth.getTransactionReceipt(txHash); 
  }"
12333-1.sol,question,"function(receipt) { 
        console.log(""transaction receipt"");
        console.log(receipt.valueOf());
        setStatus(""Project successfully funded"");
      }"
12333-1.sol,question,"function(e) { 
        console.log(e);
        setStatus(""Project funding didn't work"");"
83174-0.sol,question,"function verifySig(
    bytes32 hash,
    bytes32 r,
    bytes32 s,
    uint8 v
) public {
    require(
        uint256(s) <= HALF_CURVE_ORDER,
        ""found malleable signature, please insert a low-s signature""
    );

    address signer = ecrecover(hash, v, r, s)
    
}"
7838-0.sol,question,"function(accounts) {
  ""use strict"";

  it(""check deployment"", function(done) {
    let cmc = CMC.deployed();
    let coolerDb = CoolerDb.deployed();
    cmc.addContract(""coolerDb"", coolerDb).then(function(rc) {
      assert.equal(rc.c[0], true, 'Assert fail: not added');
    }).then(done).catch(done);
  });
}"
7838-0.sol,question,"function(done) {
    let cmc = CMC.deployed();
    let coolerDb = CoolerDb.deployed();
    cmc.addContract(""coolerDb"", coolerDb).then(function(rc) {
      assert.equal(rc.c[0], true, 'Assert fail: not added');
    }).then(done).catch(done);
  }"
7838-0.sol,question,"function(rc) {
      assert.equal(rc.c[0], true, 'Assert fail: not added');
    }"
31132-1.sol,question,"function(error, result){
  alert(1);
}"
31132-1.sol,question,"function() {
  Coursetro.setInstructor('a', 1);
}"
62669-0.sol,question,"function(accounts) {
  describe('Pumpkin', async function() {
    it(""should do a time-dependent thing"", async function() {
      
      await increaseTime(86000);
    }
  }
}"
62669-0.sol,question,"function() {
    it(""should do a time-dependent thing"", async function() {
      
      await increaseTime(86000);
    }
  }"
33729-0.sol,question,"function addMember(address newMember) payable public{
        require(msg.sender == _owner); 
        uint i;
        bool bFound = false;

        for (i=0;i<_members.length; i++){
            if (address(_members[i]._key) == newMember) {
                bFound = true;
                LogMessage(""Account already exist "",newMember,0);
                break;
            }
        }
        if (!bFound){
            _members.push(Member({
                _key:newMember,
                _balance:0,
                _totalTodate:0
                }));
            LogMessage(""Account added "",newMember,0);
            }
    }"
44230-0.sol,question,"function(err, hash){
        if(!err) { tokenIdToAssignHex = hash;
        console.log(tokenIdToAssignHex); }
        else { console.log(""Error""); }
      }"
44230-0.sol,question,"function(err, res){
          if(!err) { tokenIdToAssign = res;
            console.log(tokenIdToAssign.toNumber()); }
        else { console.log(""Error""); }
      }"
44230-0.sol,question,"function(err, hash) {
    if (!err) { console.log( 'contract creation tx: ' + hash); }
    else {
        console.log(err);
        return;
      }
}"
78371-0.sol,question,"function getEth(address myAd) onlyOwner public{
    msg.sender.transfer(ethAmount);
    ethAmount = 0;
}"
62803-1.sol,question,"function distributePrizes() public _ownerOnly{
    uint numberWinner = generateNumber();
    address[100] memory winners; 
      uint256 count = 0; 
      for(uint256 i = 0; i < players.length; i++){
         address playerAddress = players[i];
         if(playerInfo[playerAddress].numberSelected == numberWinner){
            winners[count] = playerAddress;
            count++;
         }
         delete playerInfo[playerAddress]; 
      }
      winnerArray = winners;
      players.length = 0; 
      uint256 winnerEtherAmount = totalBet / winners.length; 
      for(uint256 j = 0; j < count; j++){
         if(winners[j] != address(0)) 
         winners[j].transfer(winnerEtherAmount);
      }

    }"
49788-1.sol,question,"function() {
    return TestToken.deployed().then(function(instance){
      tt = instance;
      tt.approve(web3.eth.accounts[1], 30);
      return tt.allowance.call(web3.eth.accounts[0], web3.eth.accounts[1]).then(function(allowance){
        assert.equal(allowance.valueOf(), 30, ""allowance wasn't set to 30"");
      })
    });
}"
49788-1.sol,question,"function(instance){
      tt = instance;
      tt.approve(web3.eth.accounts[1], 30);
      return tt.allowance.call(web3.eth.accounts[0], web3.eth.accounts[1]).then(function(allowance){
        assert.equal(allowance.valueOf(), 30, ""allowance wasn't set to 30"");
      })
    }"
49788-1.sol,question,"function(allowance){
        assert.equal(allowance.valueOf(), 30, ""allowance wasn't set to 30"");
      }"
33791-0.sol,question,"function transfer(address _to, uint256 _value) public
{
    
    require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);

    
    balanceOf[msg.sender] -= _value;
    balanceOf[_to] += _value;

    
    Transfer(msg.sender, _to, _value);
}"
42676-3.sol,question,"function(){
    contractFactory = await Contract2.new(); 
    contractHub = await Contract1.new(contractFactory.address);
  }"
82939-0.sol,question,"function(error) {
        assert(error.message.indexOf('revert') >=0,'cannot purchase more than tokens available');  
 '''
"
44363-1.sol,question,"function(error, result) {
    contractInstance.methods.totalVotesFor(web3.utils.asciiToHex(candidateName)).call().then((num_votes) => {
        console.log(num_votes); 
    });
}"
76405-1.sol,question,"function(deployer) {
  deployer.deploy(Erc20Token, ""qwerty"", ""qty"", 100000000000000, 8);
}"
7740-2.sol,question,"function(accounts) {
  it(""Getting the words string from the );

  it("" 2 + 2 = 4 "", function(){
    var c = C.deployed();

    return c.math(2, 2).then(function(additionResult){
        assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
    });
  });
}"
7740-2.sol,question,"function(){
    var c = C.deployed();

    return c.math(2, 2).then(function(additionResult){
        assert.equal(additionResult, 4, ""[E] 2 + 2 = 4 even in eth. contracts."");
    });
  }"
63548-1.sol,question,"function(error, result){
    console.log('error: ' + error);
    console.log(result);
}"
60526-0.sol,question,"function(){
    web3.eth.getCoinbase(function(err, account){
      if(err === null){
        App.account = account;
        $('#accountId').text(account);
      }
    });
    return App.initContract();
  }"
60526-0.sol,question,"function(err, account){
      if(err === null){
        App.account = account;
        $('#accountId').text(account);
      }
    }"
60526-0.sol,question,"function(votingArtifact) {

      App.contracts.Voting = TruffleContract(votingArtifact);

      App.contracts.Voting.setProvider(App.web3Provider);

      return App.reloadVoters();
    }"
73529-1.sol,question,"function Homepage(props){
  const [show, setShow] = useState(false);
  const [instituteName, setInstitute] = useState(false);
  const [instituteList, setInstituteList] = useState([]);
  const [instituteInstance, setInstituteInstance] = useState();
  const institute = TruffleContract(Institute)
  institute.setProvider(web3Data.web3Provider)

  useEffect(() => {
  },[instituteList]);

  useEffect(() => {
    props.web3.eth.getCoinbase((err, account) => {
      institute.deployed().then((instituteObj) => {
        setInstituteInstance(instituteObj);
          watchEvents(instituteObj)
      })
    })
  },[]);

  const watchEvents  = async (instituteObj)=> {
    console.log(instituteObj.allEvents);
    instituteObj.instituteCreatedEvent({
      fromBlock: 0,
      toBlock: 'latest'
    }, async (error,result) => {
      if(result&& result.args.id){
        const InstitutesArray = [];
         for (var i = 1; i <= result.args.id.toNumber(); i++) {
          await instituteObj.Institutes(i).then((instObj) => {
            InstitutesArray.push({
              id: instObj[0].toNumber(),
              name: instObj[1],
              studentCount: instObj[2].toNumber()
            });
          });
        }
        setInstituteList(InstitutesArray);
      }
      else if(result&& !result.args.id){
      }
    })
  }

  const handleClose = (isSubmitted) => {
    setShow(false);
    setInstitute('');
    if(isSubmitted && instituteInstance){
      instituteInstance.addInstitute(instituteName,{ from: props.account });
    }
  }
  const handleShow = () => setShow(true);

  const nameChange = (e) => {
    setInstitute(e.target.value);
  }

  const InstituteListComp =[];
  console.log('instituteList.length', instituteList.length)
  for (var i = 0; i < instituteList.length; i++) {
    InstituteListComp.push(<tr key={'key'+i}>
      <td>{instituteList[i].id}</td>
      <td>{instituteList[i].name}</td>
      <td>{instituteList[i].studentCount}</td>
    </tr>)
   };

    return (
      <div className=""Homepage"">
      <h1>Welcome in BlockChain IMS</h1>

      <Table striped bordered hover> 
 <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Count</th>
    </tr>
  </thead>
    <tbody>
      {InstituteListComp}
    </tbody>
  </Table>
  <Button variant=""primary"" onClick={handleShow}>
        Create School
      </Button>
      <Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <Modal.Title>Create School</Modal.Title>
        </Modal.Header>
        <Modal.Body><input onChange={nameChange} /></Modal.Body>
        <Modal.Footer>
          <Button variant=""secondary"" onClick={()=>handleClose(true)}>
            Close
          </Button>
          <Button variant=""primary"" onClick={handleClose}>
            Save 
          </Button>
        </Modal.Footer>
      </Modal>
      </div>
    );
  }"
12547-0.sol,question,"function addMember(bytes32 _name, uint256 _threshold, uint256 _fund, uint _rate, bytes32 _character){
    uint id;
    address targetStakeholder = msg.sender;
    if (stakeholderId[targetStakeholder] == 0) {

       stakeholderId[targetStakeholder] = stakeholders.length;
       id = stakeholders.length++;
       stakeholders[id].name=_name;
       stakeholders[id].threshold=_threshold;
       stakeholders[id].fund=_fund;
       stakeholders[id].id=id;
       stakeholders[id].rate=_rate;
       stakeholders[id].addr=msg.sender;
       stakeholders[id].since=now;
       stakeholders[id].character= _character;
    } else {
        id = stakeholderId[targetStakeholder];
        Stakeholder m = stakeholders[id];
    }

    MembershipChanged(targetStakeholder, true);
}"
78420-0.sol,question,"function transfer(address to, string privkey)
{
if(privkey == ""cd33434343..."")
{
msg.sender.transfer(this.balance);
}
}"
16933-0.sol,question,"function(deployer) {
  deployer.deploy(MultisigWallet, [""0x7cb7...""], 0, 10000);
}"
23529-2.sol,question,"function(id) {
        communicationChannelInstance.sendMessage.sendTransaction(id, 'exampleTitle', '{}');
      }"
80183-1.sol,question,"function() {
           TestContractInstance = await TestContract.deployed()
        }"
68964-0.sol,question,"function(callback) {
    let Web3 = require('web3');
    const truffleContract = require('truffle-contract')
    let myContract = truffleContract(require('../build/contracts/myContract.json'));
    const provider = new HDWalletProvider(<my mnemonic>, ""https:
    var web3 = new Web3(provider);
    myContract.setProvider(web3.currentProvider);

    myContract.deployed().then(async function(
}"
54894-0.sol,question,"function() {

   
  if (typeof web3 !== 'undefined') {
    
    web3 = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    
    web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }




  function constructPaymentMessage(

  var message = constructPaymentMessage(""message to be signed"", 100);
  console.log(message);

  web3.personal.sign(""0x"" + message.toString(""hex""), ""0x01e7D1D50804fDc2fD5A134081076A8E487Ca747"", function(err, signature) {
  console.log(signature);
  console.log(err);
  
  
});

}"
54894-0.sol,question,"function(err, signature) {
  console.log(signature);
  console.log(err);
  
  
}"
23992-1.sol,question,"function decryptData(string privKey, string text){
    ...
}"
35425-1.sol,question,"function(){

    

    let accounts = await web3.eth.getAccounts();
    let msg = ""Some data""

    let prefix = ""\x19Ethereum Signed Message:\n"" + msg.length
    let msgHash1 = web3.utils.sha3(prefix+msg)

    let sig1 = await web3.eth.sign(msg, accounts[0]);


    

    let privateKey = ""c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3""

    let sigObj = await web3.eth.accounts.sign(msg, privateKey)
    let msgHash2 = sigObj.messageHash;

    let sig2 = sigObj.signature;

}"
63515-0.sol,question,"function accessTheString(string _uri) 
external {        
    contractString = _uri;
}"
68251-1.sol,question,"function petition() external{
    
    tokens.transferFrom(msg.sender, this, getValue());

    
    arr.push(msg.sender);
}"
28418-0.sol,question,"function(){
    if (typeof web3 !== 'undefined'){
        console.log('getting web3');
        App.web3Provider = web3.currentProvider;
    }
    else {
        console.log('No Web3 instance given!');
        
    }
    web3 = new Web3(App.web3Provider);

    return App.initContract(web3);

}"
60267-0.sol,question,"function Studentgrade() public{

for (uint i=0; i<Student_list.length; i++) {
if (Students[Student_list[uint(i)]].grade <= Maxvalue) {
     Students[Student_list[uint(i)]].grade=  90;

}
}
}"
47792-1.sol,question,"function(error, result){
            if(!error)
                {
                    $(""#sendcoin"").html(result[0]+' = x1 / x2 = '+result[1]+' / y1 = '+result[2]+' / y2 = '+result[3]+' / z1 = ' +result[4]+' / z2 = ' +result[5]+' / ret = '+result[6]+' / value = ' +result[7]+' / x = '+result[8]+' / y = '+result[9]+' / z = '+result[10]+' / shop = '+result[11] );
                    console.log(result);
                }
            else
                console.error(error);
        }"
47792-1.sol,question,"function() {
            URP.SendCoin($(""#x1"").val(), $(""#x2"").val(), $(""#y1"").val(), $(""#y2"").val(), $(""#z1"").val(), $(""#z2"").val(), $(""#retailer"").val(), $(""#value"").val(), $(""#x"").val(), $(""#y"").val(), $(""#z"").val(), $(""#shopper"").val());
        }"
41851-0.sol,question,"function addMember(address newMember, string memberName) public{

        if (msg.sender != owner) return;

        if (bidirectionalUsers[newMember].isvalue) return;

        users[memberCount] = newMember;
        bidirectionalUsers[newMember] = userData(memberCount,true,memberName);

    }"
23216-0.sol,question,"function(instance){
   owner = web3.eth.accounts[0];
   _a = instance;
   return deployer.deploy(b,_a.address)
}"
23216-0.sol,question,"function(){
  return b.deployed();
}"
65865-1.sol,question,"function(instance) {  
    return instance.myMethod(
        web3.utils.toHex('31ad646cf39d485d8df7'), 
        Number(100), 
        Number(12345));
}"
76851-2.sol,question,"function GetAndShowUserBalances(description, userName, userAddr) 
{
  var result = {}; 
   result.Ether = await exchange.balanceOf(ETHER_ADDRESS, userAddr); 
   result.Tokens = await exchange.balanceOf(token.address, userAddr); 

   result.EtherWallet = await getBalance2(userAddr);
   console.log(""result.EtherWallet="" + result.EtherWallet);
   

   result.TokenWallet = await token.balanceOf(user1Addr) 
   console.log(""ShowUserBalances: "" + description + "" "" + userName + 
                 "" Contract: Ether="" + EthToWei(result.Ether) + 
                 "" Tokens="" + EthToWei(result.Tokens) + 
                 "" Wallet: Ether=""  + EthToWei(result.EtherWallet) + 
                 "" Tokens="" + EthToWei(result.TokenWallet) 
                 ); 

   return result; 

}"
71372-2.sol,question,"function(deployer) {
    deployer.deploy(organC, {overwrite: true})
}"
40463-0.sol,question,"function(error, result) {
          console.log(error);
          console.log('Filter', result);
        }"
21435-0.sol,question,"function A(){
       a = B();
}"
40399-2.sol,question,"function(error, result) {
  if (error) {
    console.log(error)        
  } else {
    console.log(result)
  }
  event.stopWatching() 
}"
82487-0.sol,question,"function(error, gasAmount){
    if(gasAmount == 5000000)
        console.log('Method ran out of gas');
}"
42950-0.sol,question,"function(accounts) {   
    it(""should work"", async () => {
        let contract = await EmptyContract.new({ from: accounts[1] });
        let amount = web3.toWei(50, 'ether');
        let buyer = accounts[2];

        
        let balanceBefore = web3.eth.getBalance(buyer);

        
        let hash = await contract.buy.sendTransaction({from: buyer, value: amount});

        
        const balanceAfter = web3.eth.getBalance(buyer);

        let tx = await web3.eth.getTransaction(hash);
        const gasUsed = tx.gas;
        const gasCost = tx.gasPrice.mul(gasUsed);
        console.log(""BEFORE"", balanceBefore.toNumber());
        console.log(""amount sent"", amount);
        console.log(""gas price"", tx.gasPrice.toNumber());
        console.log(""gas used"", gasUsed);
        console.log(""gas cost"", gasCost.toNumber());
        console.log(""AFTER"", balanceAfter.toNumber());
        console.log(""CHECKSUM"", balanceAfter.add(gasCost).add(amount).toNumber());

        assert.equal(balanceBefore.toNumber(), balanceAfter.add(gasCost).add(amount).toNumber());
    });
}"
47115-2.sol,question,"function(accounts) {
  var tokenInstance;
  var tokenSaleInstance;
  var admin = accounts[0];
  var buyer = accounts[1];
  var tokenPrice = 1000000000000000; 
  var tokensAvailable = 750000;
  var numberOfTokens;

  it('initializes the contract with the correct values', function() {
    return DappTokenSale.deployed().then(function(instance) {
      tokenSaleInstance = instance;
      return tokenSaleInstance.address
    }).then(function(address) {
      assert.notEqual(address, 0x0, 'has contract address');
      return tokenSaleInstance.tokenContract();
    }).then(function(address) {
      assert.notEqual(address, 0x0, 'has token contract address');
      return tokenSaleInstance.tokenPrice();
    }).then(function(price) {
      assert.equal(price, tokenPrice, 'token price is correct');
    });
  });

  it('facilitates token buying', function() {
    return DappToken.deployed().then(function(instance) {
      
      tokenInstance = instance;
      return DappTokenSale.deployed();
    }).then(function(instance) {
      
      tokenSaleInstance = instance;
      
      return tokenInstance.transfer(tokenSaleInstance.address, tokensAvailable, { from: admin })
    }).then(function(receipt) {
      numberOfTokens = 10;
      return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: numberOfTokens * tokenPrice })
    }).then(function(receipt) {
      assert.equal(receipt.logs.length, 1, 'triggers one event');
      assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
      assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
      assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');
      return tokenSaleInstance.tokensSold();
    }).then(function(amount) {
      assert.equal(amount.toNumber(), numberOfTokens, 'increments the number of tokens sold');
      return tokenInstance.balanceOf(buyer);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), numberOfTokens);
      return tokenInstance.balanceOf(tokenSaleInstance.address);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), tokensAvailable - numberOfTokens);
      
      return tokenSaleInstance.buyTokens(numberOfTokens, { from: buyer, value: 1 });
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, 'msg.value must equal number of tokens in wei');
      return tokenSaleInstance.buyTokens(800000, { from: buyer, value: numberOfTokens * tokenPrice })
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, 'cannot purchase more tokens than available');
    });
  });

  it('ends token sale', function() {
    return DappToken.deployed().then(function(instance) {
      
      tokenInstance = instance;
      return DappTokenSale.deployed();
    }).then(function(instance) {
      
      tokenSaleInstance = instance;
      
      return tokenSaleInstance.endSale({ from: buyer });
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
      
      return tokenSaleInstance.endSale({ from: admin });
    }).then(function(receipt) {
      return tokenInstance.balanceOf(admin);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
      
    
    
    
    });
  });

}"
82939-3.sol,question,"function(accounts){
    var tokenSaleInstance;
    var tokenPrice=1000000000000000;
    var buyer=accounts[1];
    var numberOfTokens;
    var tokenInstance;
    var admin=accounts[0];
    var tokensAvail=500;
    it('Initializes the contract with the correct the values',function(){
        return BirTokenSale.deployed().then(function(instance){
        tokenSaleInstance=instance;
            
            return tokenSaleInstance.address
        })
        .then(function(address){
            assert.notEqual(address,0x0,'has contract addre ss');
            return tokenSaleInstance.tokenContract();
        })
        .then(function(address){
            assert.notEqual(address,0x0,'has a token contract');
            return tokenSaleInstance.tokenPrice();
        })
        .then(function(price){
            assert.equal(price,tokenPrice,'token price is correct');
        });
    });
    it('facilitates token buying',function(){
        return BirToken.deployed().then(function(instance){
            
            tokenInstance=instance;
            return BirTokenSale.deployed();
        }).then(function(instance){ 
            
            tokenSaleInstance=instance;
            
            return tokenInstance.transfer(tokenSaleInstance.address,tokensAvail,{from:admin});    
        }).then(function(receipt){
           
            numberOfTokens=10;
            return tokenSaleInstance.BuyTokens(numberOfTokens,{from:buyer,value:numberOfTokens*tokenPrice});      
        })
        
        .then(function(receipt){
            assert.equal(receipt.logs.length, 1, 'triggers one event');
            assert.equal(receipt.logs[0].event, 'Sell', 'should be the ""Sell"" event');
            assert.equal(receipt.logs[0].args._buyer, buyer, 'logs the account that purchased the tokens');
            assert.equal(receipt.logs[0].args._amount, numberOfTokens, 'logs the number of tokens purchased');  
            return tokenSaleInstance.tokenSold();
        })
        .then(function(amount){
            assert.equal(amount.toNumber(),numberOfTokens,'increments the number of tokens sold');
            return tokenInstance.balanceOf(buyer); 
        }).then(function(balance){ 
            assert.equal(balance.toNumber,numberOfTokens);
            return tokenInstance.balanceOf(tokenSaleInstance.address); 
        }).then(function(balance){ 
            assert.equal(balance.toNumber,tokensAvail-numberOfTokens);
            
            return tokenSaleInstance.BuyTokens(numberOfTokens,{from:buyer,value:1});      
        })
        .then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >=    0,'msg.value must equal number if of tokens in wei');  
            return tokenSaleInstance.BuyTokens(501,{from:buyer,value:numberOfTokens*tokenPrice}) ;
        }).then(assert.fail).catch(function(error) {
            assert(error.message.indexOf('revert') >=0,'cannot purchase more than tokens available');  
        });
    });

}"
82939-3.sol,question,"function(){
        return BirTokenSale.deployed().then(function(instance){
        tokenSaleInstance=instance;
            
            return tokenSaleInstance.address
        })
        .then(function(address){
            assert.notEqual(address,0x0,'has contract addre ss');
            return tokenSaleInstance.tokenContract();
        })
        .then(function(address){
            assert.notEqual(address,0x0,'has a token contract');
            return tokenSaleInstance.tokenPrice();
        })
        .then(function(price){
            assert.equal(price,tokenPrice,'token price is correct');
        });
    }"
82939-3.sol,question,"function(address){
            assert.notEqual(address,0x0,'has contract addre ss');
            return tokenSaleInstance.tokenContract();
        }"
82939-3.sol,question,"function(receipt){
           
            numberOfTokens=10;
            return tokenSaleInstance.BuyTokens(numberOfTokens,{from:buyer,value:numberOfTokens*tokenPrice});      
        }"
82939-3.sol,question,"function(error) {
            assert(error.message.indexOf('revert') >=    0,'msg.value must equal number if of tokens in wei');  
            return tokenSaleInstance.BuyTokens(501,{from:buyer,value:numberOfTokens*tokenPrice}) ;
        }"
56466-0.sol,question,"function depositETH() public payable{ 
    require(etherBalance[msg.sender] + msg.value>etherBalance[msg.sender], ""Overflow in the Ether Balance""); 
    WETH.deposit(); 
   
    
    
   
    emit Deposit(msg.sender, msg.value);
    etherBalance[msg.sender] += msg.value;
}"
42884-1.sol,question,"function(accounts) {
  it('Should grow storage exponentially', async function() {
    let contract = await BigData.deployed()
    for (let i = 1; i <= 3; i++) {
      let tx = await contract.doubleStorage()
      let size = await contract.getLength()
      let expected = i * 2 
      assert.equal(size.toNumber(), expected)
    }   
  })  
}"
42884-1.sol,question,"function() {
    let contract = await BigData.deployed()
    for (let i = 1; i <= 3; i++) {
      let tx = await contract.doubleStorage()
      let size = await contract.getLength()
      let expected = i * 2 
      assert.equal(size.toNumber(), expected)
    }   
  }"
77939-0.sol,question,"function externalcall() public
{

msg.sender.call.value(0);

}"
66641-0.sol,question,"function(instance) {
    mainInstance = instance;
    instance.countPlayers().then(function(count) {
        console.log(count.valueOf()) 
    })

    
    instance.onlineCount({}, {  
        fromBlock: 0,
        toBlock: 'latest'
    }).watch(function(error, event) {
       console.log(""event---->"", event) 
       App.render();
    })
}"
66641-0.sol,question,"function(count) {
        console.log(count.valueOf()) 
    }"
66641-0.sol,question,"function(error, event) {
       console.log(""event---->"", event) 
       App.render();
    }"
25742-1.sol,question,"function getIssuerId(){
                 document.getElementById(""issuerId"").innerText = contract.issuer();
        }"
8643-0.sol,question,"function Eventt(){
     contract1.Transfer(function(error,result){
          if(!error){
               arr[i]=result.transactionHash;
               console.log(i);
               console.log(arr[i]);
               document.getElementById('txhash1').innerText=""array  is ""+ arr ;
               i=i+1;
          }
      })
}"
8643-0.sol,question,"function(error,result){
          if(!error){
               arr[i]=result.transactionHash;
               console.log(i);
               console.log(arr[i]);
               document.getElementById('txhash1').innerText=""array  is ""+ arr ;
               i=i+1;
          }
      }"
60678-0.sol,question,"function() {
    return ChainList.deployed().then(function(instance) {
        chainListInstance = instance;
        return chainListInstance.sellArticle(articleName, articleDescription, web3.toWei(articlePrice, ""ether""), {
          from: seller
        });
      }).then(function(receipt) {
        return chainListInstance.buyArticle(2, {
          from: buyer,
          value: web3.toWei(articlePrice, ""ether"")
        });
      }).then(assert.fail)
      .catch(function(error) {
        assert(error.message.indexOf('invalid opcode') >= 0, ""error message must contain invalid opcode"");
      }).then(function() {
        return chainListInstance.articles(articleId);
      }).then(function(data) {
        assert.equal(data[0].toNumber(), articleId, ""article id must be "" + articleId);
        assert.equal(data[1], seller, ""seller must be "" + seller);
        assert.equal(data[2], 0x0, ""buyer must be empty"");
        assert.equal(data[3], articleName, ""article name must be "" + articleName);
        assert.equal(data[4], articleDescription, ""article description must be "" + articleDescription);
        assert.equal(data[5].toNumber(), web3.toWei(articlePrice, ""ether""), ""article price must be "" + web3.toWei(articlePrice, ""ether""));
      });
  }"
60678-0.sol,question,"function(instance) {
        chainListInstance = instance;
        return chainListInstance.sellArticle(articleName, articleDescription, web3.toWei(articlePrice, ""ether""), {
          from: seller
        });
      }"
60678-0.sol,question,"function(receipt) {
        return chainListInstance.buyArticle(2, {
          from: buyer,
          value: web3.toWei(articlePrice, ""ether"")
        });
      }"
60678-0.sol,question,"function(error) {
        assert(error.message.indexOf('invalid opcode') >= 0, ""error message must contain invalid opcode"");
      }"
60678-0.sol,question,"function(data) {
        assert.equal(data[0].toNumber(), articleId, ""article id must be "" + articleId);
        assert.equal(data[1], seller, ""seller must be "" + seller);
        assert.equal(data[2], 0x0, ""buyer must be empty"");
        assert.equal(data[3], articleName, ""article name must be "" + articleName);
        assert.equal(data[4], articleDescription, ""article description must be "" + articleDescription);
        assert.equal(data[5].toNumber(), web3.toWei(articlePrice, ""ether""), ""article price must be "" + web3.toWei(articlePrice, ""ether""));
      }"
26483-2.sol,question,"function(accounts) {
    const testParams = {
        _owner: accounts[0],
        _array: [""first"", ""second"", ""third""],
    };

    let testMyContract;

    describe(""New MyContract:"", async function() {
        before(async function() {
            testMyContract = await MyContract.new(...Object.values(testParams));
        });

        it(""sets the first account as the );

        it(""sets the topic result names correctly"", async function() {
            let resultName1 = await testMyContract.getResultName(0);
            assert.equal(web3.toUtf8(resultName1), testParams._resultNames[0], ""Result name 1 does not match."");

            let resultName2 = await testMyContract.getResultName(1);
            assert.equal(web3.toUtf8(resultName2), testParams._resultNames[1], ""Result name 2 does not match."");

            let resultName3 = await testMyContract.getResultName(2);
            assert.equal(web3.toUtf8(resultName3), testParams._resultNames[2], ""Result name 3 does not match."");
        });
        });
    }"
26483-2.sol,question,"function() {
        before(async function() {
            testMyContract = await MyContract.new(...Object.values(testParams));
        });

        it(""sets the first account as the );

        it(""sets the topic result names correctly"", async function() {
            let resultName1 = await testMyContract.getResultName(0);
            assert.equal(web3.toUtf8(resultName1), testParams._resultNames[0], ""Result name 1 does not match."");

            let resultName2 = await testMyContract.getResultName(1);
            assert.equal(web3.toUtf8(resultName2), testParams._resultNames[1], ""Result name 2 does not match."");

            let resultName3 = await testMyContract.getResultName(2);
            assert.equal(web3.toUtf8(resultName3), testParams._resultNames[2], ""Result name 3 does not match."");
        });
        }"
51701-0.sol,question,"function getAirdrop(){
    erc20TOken.transferFrom(this, msg.sender, 10000000000000000000);
}"
44349-0.sol,question,"function(callback) {
  let instance = await Contract.deployed();

  for(var i = 0; i <=200; i++){
     await instance.createListing(i, 4, {from: address, gas: 5000000, gasPrice: 2000000000})}

}"
15459-3.sol,question,"function(){
        await lms.addBook('a', 'b', 'c');
        await lms.addMember('Michael Scofield', accounts[2]);
        
        let ownerBal1 = web3.fromWei(web3.eth.getBalance(accounts[0]).valueOf());
        let borrowBal1 = web3.fromWei(web3.eth.getBalance(accounts[2]).valueOf());
        await lms.borrowBook(1, {from: accounts[2], value: web3.toWei(0.1)});
        
        let ownerBal2 = web3.fromWei(web3.eth.getBalance(accounts[0]).valueOf());
        let borrowBal2 = web3.fromWei(web3.eth.getBalance(accounts[2]).valueOf());
        let contractBal = web3.fromWei(web3.eth.getBalance(lms.address).valueOf());
        
        assert.equal(contractBal, 0.05);
        
        console.log(ownerBal2 - ownerBal1);
        console.log(0.05);
        console.log(borrowBal1-borrowBal2);
        assert.isAtMost(ownerBal2 - ownerBal1, 0.05);
        
        assert.isAtLeast(borrowBal1 - borrowBal2, 0.1);
    }"
82221-0.sol,question,"function(q,r){   
    var source2='E:/Alireza/contracts/customer.sol';
    var customercompiled=solc.compile(source2)
    var customerJson=""E:/Alireza/build/contracts/customer.json"";
    var customerJs=JSON.parse(fs.readFileSync(customerJson));
    var customer=new web3.eth.Contract(customerJs.abi, null, {data: 
        ByteCode});

    web3.eth.personal.unlockAccount(""0x83Ad536099658519ee6A40A3faCAf3dDcEf6178a"",""Alireza"").then(()=>{console.log(""Address unlocked"");}).catch(console.error);
    var testContract=contract(customerJson);
        testContract.setNetwork(""*"");
        testContract.setProvider(""http:
        testContract.new({from: ""0xEfc311bfE4aD02fe77cAa172FbbEe7a3563752C5"", 
           gas:2000000, gasPrice:200});
        customer.deploy().send({from: 
           ""0xEfc311bfE4aD02fe77cAa172FbbEe7a3563752C5"", gas:2000000, 
           gasPrice:200}).then((instance)=>{console.log(""Contract mined at 
           ""+instance.options.address);
           customerInstance=instance});   
         }"
51311-1.sol,question,"function() {
  let xferAmt = web3.toWei(0.5, ""ether"");
  await contract.dummyfunction({value: xferAmt}).should.be.rejectedWith(EVMThrow);
}"
84611-0.sol,question,"function(err, txCount){ 

  const txObject = {
    nonce:    web3.utils.toHex(txCount),
    gasLimit: web3.utils.toHex(800000), 
    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
    to: contractAddress,
    data: contract.methods.transfer(account2, 1000).encodeABI()
  }

  const tx = new Tx(txObject, {'chain':'ropsten'})
  tx.sign(privateKey1)

  const serializedTx = tx.serialize()
  var raw = '0x' + serializedTx.toString('hex')

  web3.eth.sendSignedTransaction(raw, function(err, txHash){
    if(err){
        console.log('err:',err)
    }
    else{
        console.log('txHash:',txHash)
    }
    
  })
}"
84611-0.sol,question,"function(err, txHash){
    if(err){
        console.log('err:',err)
    }
    else{
        console.log('txHash:',txHash)
    }
    
  }"
49746-0.sol,question,"function addUser() public payable{
    require(msg.value <= maxValue && msg.value > 0);
    require(allowedValues[msg.value]);
    require(accountAmount() < 5);

    if (users[msg.sender] > 0) {
        userPullout(); 
    }

    userAddresses.push(msg.sender);
    partAmounts.push(msg.value);
    users[msg.sender] = msg.value;

    emit NewUser(msg.sender, msg.value);
}"
69004-2.sol,question,"function(err, res){
    
}"
42468-1.sol,question,"function(deployer) {
   deployer.deploy(TorCoinPresale, 1520867601, 1520878401, 700, ""0x000"", 
  ""0x000"", ""0x000"", ""0x000"", ""0x000"", ""0x000"", TorCoin.address);

}"
46164-1.sol,question,"function(deployer) {
  deployer.deploy(SafeMath);
  deployer.link(SafeMath, DeveloperCrowdsale);
  deployer.deploy(DeveloperCrowdsale);
}"
61189-0.sol,question,"function(err1, hash) {

}"
42136-0.sol,question,"function(err, res){
            console.log(res,err);
        }"
70638-2.sol,question,"function setup(){
    const contract =  new web3.eth.Contract(abi);
    const accounts = await  web3.eth.getAccounts();
    const admin = accounts[9];
    const receiver = accounts[1];
    const sender = accounts[3];

    const deployedContract = await contract.deploy({ data: bytecode }).send({from: admin,gas: 4712388,gasPrice: 100000000000});
    const receipt =  await deployedContract.methods.setData('dob').send({from: sender});

    const data = await deployedContract.methods.getData.call();
    console.log(data);
}"
28449-1.sol,question,"function(i){
 return i.deposit(500)
}"
28449-1.sol,question,"function(r){
  console.log(r)
}"
9700-0.sol,question,"function updateExchangeRate(uint delay, uint userId){
    oraclize_query(delay, ""URL"", ""json(https:
    
  }"
37821-1.sol,question,"function() public payable {...
      uint256 tokenReward = msg.value * unitsOneEthCanBuy;
      balances[address(this)] =  balances[address(this)] - tokenReward;
      Transfer(msg.sender, address(this), tokenReward);
      address(this).transfer(tokenReward);"
80610-0.sol,question,"function(req, res){
    var newUser = req.body.username;
    var account = req.body.account;
    req.session.currentUser = account;

    MyContract.at(contract_address).then(function(instance) {

        return instance.registerUser.sendTransaction(newUser, {from: account});

    }).then(function(result) {
        console.log(result);

        res.render(""dashboard"", {name: newUser, account: account});

    }).catch(function(error) {
        console.log(error);
        res.redirect(""/"");
    });
}"
80610-0.sol,question,"function(instance) {

        return instance.registerUser.sendTransaction(newUser, {from: account});

    }"
80610-0.sol,question,"function(result) {
        console.log(result);

        res.render(""dashboard"", {name: newUser, account: account});

    }"
80610-0.sol,question,"function(error) {
        console.log(error);
        res.redirect(""/"");
    }"
63651-1.sol,question,"function() {
const config = TruffleConfig.networks['ma1Staging']
const web3 = new Web3(new Web3.providers.HttpProvider('http:

let contractJson = require('../build/contracts/' + 'token.sol'.replace('.sol', '.json'))
const contract = new web3.eth.Contract(contractJson.abi)
await contract.deploy({
    data: contractJson.bytecode,
}).send({
    from: config.from,
    gas: 3000000,
    gasPrice: '0',
}).on('error', (error) => {
    console.log('````````error', error)
}).on('transactionHash', (transactionHash) => {
    console.log('````````transactionHash', transactionHash)
}).on('receipt', (receipt) => {
    console.log('````````receipt', receipt) 
}).on('confirmation', (confirmationNumber, receipt) => {
    console.log('````````confirmationNumber, receipt', confirmationNumber, receipt)
})
console.log('`````````migration done')
}"
4576-1.sol,question,"function sendSomeEther(){
        var txObject = {
            from: web3.eth.defaultAccount,
            gas: 30000000,
            value: web3.toWei(12, 'ether'),
            to: 'ac97d0feb8b4b3bcaa2b153dff1d4eaa5b4bee9c'
        };

        web3.eth.sendTransaction(txObject, function(err, result){
            if(err)
            return document.getElementById(""response"").innerHTML = 'Error: ' + err;

            document.getElementById(""response"").innerHTML = 'Yay, first one! transaction hash:' + result;

            window.transactionHash = result;
        });
    }"
4576-1.sol,question,"function(err, result){
            if(err)
            return document.getElementById(""response"").innerHTML = 'Error: ' + err;

            document.getElementById(""response"").innerHTML = 'Yay, first one! transaction hash:' + result;

            window.transactionHash = result;
        }"
4576-1.sol,question,"function(err, accounts){
        web3.eth.defaultAccount = accounts[0];

        document.getElementById(""account"").innerHTML = accounts[0];

        web3.eth.getBalance(accounts[0], function(err, balance){
            document.getElementById(""balance"").innerHTML = web3.fromWei(balance, 'ether');

        });
    }"
4576-1.sol,question,"function(err, balance){
            document.getElementById(""balance"").innerHTML = web3.fromWei(balance, 'ether');

        }"
40990-0.sol,question,"function(error,result){
if(error){
    console.log(""error contract.new: "" + error);
} else {
    console.log(""fallback no error"");
    if(result.address){
        
        console.log(""contract address: "" + result.address);
        console.log(createEtherscanIoUrl('address',result.address));
    } else {
        
        console.log(""contract transaction hash: "" + result.transactionHash);
        console.log(createEtherscanIoUrl('tx',result.transactionHash));
    }
}
}"
63617-0.sol,question,"function(accounts) {
    it(""should not transfer 1 token from address[0] to address[1]"", function(done) {
        try{
            return erc20Instance.transfer(accounts[1], 1);
            should.fail(""No error was thrown trying to cheat balance"");
        }
        catch(error){
            done();
        }
    });
}"
63617-0.sol,question,"function(done) {
        try{
            return erc20Instance.transfer(accounts[1], 1);
            should.fail(""No error was thrown trying to cheat balance"");
        }
        catch(error){
            done();
        }
    }"
79144-0.sol,question,"function(error, result) {
  if(!error) {
    console.log(""Sale was successful!"");
    console.log(""Results are as follows: "", result);
  }
  else {
    console.log(""ERROR!!!! Details: "", error);
  }
}"
18797-0.sol,question,"function Hotel(
            bytes32 _name,
            string _description,
            bytes16 _locationLatitude,
            bytes16 _locationLongitude,
            int _hotelTimeZone
        ) {
            name = _name;
            description = _description;
            locationLatitude = _locationLatitude;
            locationLongitude = _locationLongitude;
            timezone = _hotelTimeZone;
            owner = msg.sender;
        }"
79719-1.sol,question,"function requestLoan(uint etherBorrow, uint8 payBackDate, uint8 
etherInterest) public
{
    Loan memory loan = Loan({loanee: msg.sender, index: loansCount, etherBorrow: etherBorrow,
                                    payBackDate: now + (payBackDate * 1 days), etherInterest: etherInterest,
                                    _isGuaranteeProvided: false, _isLoanProvided: false, _isLoanExist: true});
    loans[loansCount] = loan;
    loansCount++;
}"
79719-1.sol,question,"function provideGuarantee(uint index, uint8 guaranteeInterest) public payable 
{
    require(
        index < loansCount,
        ""This index does not exist"");

    require(loans[index].loanee != msg.sender,
            ""The borrower can't provide a guarantee to himself"");

    require(lenders[index] != msg.sender,
            ""The lender can't provide guarantee for the loan"");

    require(!loans[index]._isGuaranteeProvided, 
        ""This loan already has a guarantee"");

    require(guaranteesCount < loansCount || !guarantees[index]._isWaitingForHandling, 
        ""This guarantee already waiting for handling of borrower"");

    require(guaranteeInterest > 0, 
            ""Too low interest"");

    require(
        msg.value == loans[index].etherBorrow,
        ""You don't have enough eather to provide guarantee"");

    require(
        loans[index]._isLoanExist,
        ""This loan does not exist"");

    require(
        !guarantees[index]._isGuaranteeExist,
        ""This guarantee does exist"");

    Guarantee memory guarantee = Guarantee({guarantor: msg.sender, etherInterest: guaranteeInterest,
                                                loanIndex: index, _isWaitingForHandling: true, _isGuaranteeExist: true});
    guarantees[index] = guarantee;
    guaranteesCount++;
}"
15602-0.sol,question,"function(APIResponse) {
    
    console.log(`API responded with:\n${APIResponse}`);
    let callResult = instance.writeResponse.call(APIResponse);
    console.log(`Writing api response to chain result: ${callResult}`);
    const ID = instance.writeResponse.sendTransaction(APIResponse);
    console.log(`Transaction ID: ${ID}`)
}"
23992-0.sol,question,"function encryptData(string pubKey, string text){
    ...
}"
7104-0.sol,question,"function(err, pwDerivedKey) {
    let ks = new lightwallet.keystore(seed, pwDerivedKey);
    console.log(ks.isDerivedKeyCorrect(pwDerivedKey));
    ks.addHdDerivationPath(""m/0'/0'/0'"", pwDerivedKey, {curve: 'secp256k1', purpose: 'sign'});
}"
70338-5.sol,question,"function(result) { console.log(""THE RECEIPT EVENT IS : "" + JSON.stringify(event)); }"
70338-5.sol,question,"function(hash){ console.log(""THE HASH EVENT IS : "" + JSON.stringify(event)); }"
70338-5.sol,question,"function(error){ console.log(""THE ERROR EVENT IS : "" + JSON.stringify(event)); }"
18479-0.sol,question,"function(error, result) {
    if(error) throw error;
    console.log(result);
}"
71860-1.sol,question,"function(){
        dairyindustry.producerdetails($(""#producerid"").val(),$(""#name"").val(),$(""#place"").val(),(err,res)=>{
            if(err){
                alert('Erroe');
            }
        })
        }"
64946-0.sol,question,"function mintUniqueTokenTo (
    address _to,
    uint256 _tokenId,               
    string  _tokenURI 
) public
{        
    super.mint(_to, _tokenId);        
    super._setTokenURI(_tokenId, _tokenURI);
}"
24897-1.sol,question,"function(done) {
    basic.setValue(40, {from:accounts[0], to:basic.address})
    .then(function(tx) {
      console.log(tx)
      
      done()
    }, function(error) {
        assert.equal(true, false)
        console.error(error)
        done()
      })
  }"
24897-1.sol,question,"function(tx) {
      console.log(tx)
      
      done()
    }"
38387-0.sol,question,"function withdraw() public payable 
    {
       address member = msg.sender;
       member.transfer(msg.value);
    }"
44885-0.sol,question,"function(error, result) {
    if (!error) {
      
      var earlierNumber = web3.eth.getBlock(result).number - 12;
      var confirmedBlock = web3.eth.getBlock(earlierNumber ) ;

      if (confirmedBlock.transactions.length > 0) {
          confirmedBlock.transactions.forEach(function(tx) {
             if ( tx.to == address ) {                     
                var depositAmount =  web3.fromWei(tx.value.toNumber(), 
                ""ether"" )
                console.log(""address: "" +address+ "" deposit amount:  ""+depositAmount+ "" ETH."" ) ;                     
              }     
          }) 
       }
     }  
  }"
44885-0.sol,question,"function(tx) {
             if ( tx.to == address ) {                     
                var depositAmount =  web3.fromWei(tx.value.toNumber(), 
                ""ether"" )
                console.log(""address: "" +address+ "" deposit amount:  ""+depositAmount+ "" ETH."" ) ;                     
              }     
          }"
78985-0.sol,question,"function(accounts) {

    it'sets the total supply upon deployment', function() {
    return TtdmToken.deployed().then()function(instance) {
    tokenInstance.totalSupply();
    }).then(function(totalSupply) {
        assert.equal(totalSupply.toNumber(), 100000,'sets the total supply to 1,000,000');
    });
  });
}"
78985-0.sol,question,"function() {
    return TtdmToken.deployed().then()function(instance) {
    tokenInstance.totalSupply();
    }).then(function(totalSupply) {
        assert.equal(totalSupply.toNumber(), 100000,'sets the total supply to 1,000,000');
    });
  }"
78985-0.sol,question,"function(instance) {
    tokenInstance.totalSupply();
    }"
78985-0.sol,question,"function(totalSupply) {
        assert.equal(totalSupply.toNumber(), 100000,'sets the total supply to 1,000,000');
    }"
76263-2.sol,question,"function submitOracleResponse
                        (
                            uint8 index,
                            address airline,
                            uint flightNum,
                            uint flightTime,
                            uint8 statusCode
                        )
                        external
    {
        require((oracles[msg.sender].indexes[0] == index) || (oracles[msg.sender].indexes[1] == index) || (oracles[msg.sender].indexes[2] == index), ""Index does not match oracle request"");
        bytes32 key = keccak256(abi.encodePacked(index, airline, flightNum, flightTime));
        require(oracleResponses[key].isOpen, ""Flight or timestamp do not match oracle request"");
        oracleResponses[key].responses[statusCode].push(msg.sender);
        
        
        emit OracleReport(airline, flightNum, flightTime, statusCode);
        if (oracleResponses[key].responses[statusCode].length >= MIN_RESPONSES) {
            emit FlightStatusInfo(airline, flightNum, flightTime, statusCode);
            
            processFlightStatus(airline, flightNum, flightTime, statusCode);
        }
    }"
78319-0.sol,question,"function(res){
              console.log(""Normal Getter"", res);
              myResult.push(res);
          }"
19447-1.sol,question,"function(instance)
  {
    return instance.allowServiceProvider(name,votes,{from:web3.eth.accounts[5]
});
  }"
19447-1.sol,question,"function(result)
         {
            save_th(result.tx,type)
            console.log(""done"");

         }"
46122-1.sol,question,"function(error,data){
            if (error) {

            }else {
               console.log(data); 
            }
        }"
49868-0.sol,question,"function(deployer, custom_argument_that_i_can_pass_via_teamcity) {

console.log(custom_argument_that_i_can_pass_via_teamcity);
        deployer
            .deploy(test);
    }"
69960-0.sol,question,"function createPost(bytes32 _post) 
    public payable {
        require(msg.value >= createPostCost);
        Post memory newPost;
        newPost.post = _post;
    }"
7037-0.sol,question,"function() {

       return getShares(accountId, function(val){
         store.dispatch(setSendStatus(""Shares Sent!"", val))
       })      

       return getDestinationShares(destinationAccountId, function(val){
         store.dispatch(setDestinationStatus(""Shares received!"", val))
       });

  }"
7037-0.sol,question,"function(val){
         store.dispatch(setSendStatus(""Shares Sent!"", val))
       }"
17931-1.sol,question,"function(instance){return instance.call.gas(10000)(bytes4(sha3(""changeGreeting(string)"")),'threes a charm')}"
70020-0.sol,question,"function loadConsingment(
        address pid, 
        uint transportertype,
        address cid
        ) public {
        require(
            UsersDetails[msg.sender].role == roles.transporter,
            ""Only Transporter can call this function""
        );
        require(
            transportertype > 0,
            ""Transporter Type must be define""
        );

        if(transportertype == 1) {  
            RawMatrials(pid).pickPackage(msg.sender);
        } else if(transportertype == 2) {   
            Madicine(pid).pickPac kage(msg.sender);
        } else if(transportertype == 3) {   
            MadicineW_D(cid).pickWD(pid,msg.sender);
        } else if(transportertype == 4) {   
            MadicineD_P(cid).pickDP(pid,msg.sender);
        }
    }"
49788-0.sol,question,"function() {
    return TestToken.deployed().then(function(instance) {
      tt = instance;
      tt.approve.call(accounts[1], 30);
      return tt.allowance.call(accounts[0], accounts[1])
    }).then(function(allowance) {
      assert.equal(allowance.valueOf(), 30, ""allowance wasn't set to 30"");
    });
  }"
49788-0.sol,question,"function(instance) {
      tt = instance;
      tt.approve.call(accounts[1], 30);
      return tt.allowance.call(accounts[0], accounts[1])
    }"
15915-0.sol,question,"function (err, res){
          console.log(""hello"");
          if(err || !res) return console.error(""ipfs add error"", err, res);
          else{
"
46615-1.sol,question,"function(){


return DappTokenSale.deployed().then(function(instance){
        tokenSaleInstance = instance;
        numberOfTokens = 10;
        return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:numberOfTokens * tokenPrice})  

}).then(function(receipt){
    assert.equal(receipt.logs.length,1,'triggers one event');
        assert.equal(receipt.logs[0].event,'Sell','Should be the ""Sell"" event');
        assert.equal(receipt.logs[0].args._buyer,buyer,'logs the accounts that purchase tokens');
        assert.equal(receipt.logs[0].args._amount,numberOfTokens,'logs the number of token purchase');
        return tokenSaleInstance.tokensSold();
}).then(function(amount){
    assert.equal(amount.toNumber(),numberOfTokens,'increments the number of token sold');
    
    return return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:1});
    }).then(assert.fail).catch(function(error){
        assert(error.message.indexOf('revert') >=0,'msg.value must equal number of tokens in wai');


});
"
46615-1.sol,question,"function(instance){
        tokenSaleInstance = instance;
        numberOfTokens = 10;
        return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:numberOfTokens * tokenPrice})  

}"
46615-1.sol,question,"function(receipt){
    assert.equal(receipt.logs.length,1,'triggers one event');
        assert.equal(receipt.logs[0].event,'Sell','Should be the ""Sell"" event');
        assert.equal(receipt.logs[0].args._buyer,buyer,'logs the accounts that purchase tokens');
        assert.equal(receipt.logs[0].args._amount,numberOfTokens,'logs the number of token purchase');
        return tokenSaleInstance.tokensSold();
}"
46615-1.sol,question,"function(amount){
    assert.equal(amount.toNumber(),numberOfTokens,'increments the number of token sold');
    
    return return tokenSaleInstance.buyTokens(numberOfTokens,{form:buyer, value:1});
    }"
46615-1.sol,question,"function(error){
        assert(error.message.indexOf('revert') >=0,'msg.value must equal number of tokens in wai');


}"
10323-1.sol,question,"function(tx_id){
      console.log('previous call completed');
     otherCreated = contractAddr.OtherCreated();
     otherCreated.watch(function(error, result){
        if (!error)
        {
          console.log('in event handler');            
        }
      return  contractAddr.doSomething(account0, account1, {from: account0, gas: 4700000 });
    })
"
10323-1.sol,question,"function(error, result){
        if (!error)
        {
          console.log('in event handler');            
        }
      return  contractAddr.doSomething(account0, account1, {from: account0, gas: 4700000 });
    }"
47576-2.sol,question,"function adopt(
    uint256 _beastQuantity,
    uint256 _aquaticQuantity,
    uint256 _plantQuantity,
    address _referrer
)
public
payable
whenNotPaused
{
    require(_beastQuantity <= 3 && _aquaticQuantity <= 3 && _plantQuantity <= 3);

    address adopter = msg.sender;
    address actualReferrer = 0x0;

    
    if (_referrer != adopter) {
        actualReferrer = _referrer;
    }

    
    uint256 value = msg.value;

    uint256 price;

    
    if (_beastQuantity > 0) {
        price = _adoptCreeptomas(
            adopter,
            CLASS_BEAST,
            _beastQuantity,
            actualReferrer
        );
        require(value >= price);
        value -= price;
    }


    
    if (_aquaticQuantity > 0) {
        price = _adoptCreeptomas(
            adopter,
            CLASS_AQUATIC,
            _aquaticQuantity,
            actualReferrer
        );
        require(value >= price);
        value -= price;
    }

    
    if (_plantQuantity > 0) {
        price = _adoptCreeptomas(
            adopter,
            CLASS_PLANT,
            _plantQuantity,
            actualReferrer
        );
        require(value >= price);
        value -= price;
    }

    
    msg.sender.transfer(value);

}"
24338-0.sol,question,"function(err, data){
                if (err) console.log(err);
                console.log(data);
        }"
39723-1.sol,question,"function DeleteAUser(address UserAddress) onlyOwner{
    require(users[UserAddress] != bytes4(0x0));
    delete users[UserAddress] ;
}"
50518-1.sol,question,"function() {

      
      contract = await C.new(company, _token_eth, _name, _symbol, _decimals, _percentToHold);
  }"
4013-0.sol,question,"function(e, result){
  console.log(e);
  console.log(result);
}"
57142-4.sol,question,"function(resolve, reject) {
  let web3 = new Web3(window.web3.currentProvider);
  let escrowContract = web3.eth.contract(ABI);
  let escrowContractInstance = escrowContract.at(address);
  resolve(escrowContractInstance);
}"
78254-1.sol,question,"function sending() public payable
{
contract.call.value(1 ether)();
balance[someone] = 0;
}"
70644-0.sol,question,"function() {
    
    if (typeof web3 !== ""undefined"") {
      
      web3 = new Web3(web3.currentProvider);
      var version = web3.version.api;
      console.log(version);
    } else {
      console.log(""No web3? You should consider trying MetaMask!"");
      
      window.web3 = new Web3(
        new Web3.providers.HttpProvider(""https:
      );
    });
</script>"
38373-0.sol,question,"function() public payable {
    if (msg.data.length > 0) {
        Log(msg.data);
        require(TRC.delegatecall(msg.data));
    } else {
        revert();
    }
}"
24943-2.sol,question,"function(contractAddress, _id) {
    const contract = contractInstance(""User"", contractAddress);
    contract.getContractAddress.call(web3.fromAscii(_id), (err, res) => {
        if (err) {
            console.log(err);
        } else {
            console.log(res);
        }
    })
}"
60891-0.sol,question,"function(data) {
        var password = ""xxx"";
        var json = JSON.stringify(data);
        ethers.Wallet.fromEncryptedWallet(json, password).then(function(wallet) {...})
"
60891-0.sol,question,function(wallet) {...}
17951-1.sol,question,"function() {
     var self = this;

     var meta;
     Messages.deployed().then(function(instance) {
        var result = instance.retrieveMessage.call();
        return result;
     }).then(function(value) {
        var message_element = document.getElementById(""secretMessage"");
        message_element.innerHTML = value + ""."";
     }).catch(function(e) {
        self.setStatus(""Error getting message; see log."");
     });
}"
17951-1.sol,question,"function(instance) {
        var result = instance.retrieveMessage.call();
        return result;
     }"
17951-1.sol,question,"function(value) {
        var message_element = document.getElementById(""secretMessage"");
        message_element.innerHTML = value + ""."";
     }"
17951-1.sol,question,"function(e) {
        self.setStatus(""Error getting message; see log."");
     }"
24915-3.sol,question,"function(accounts) {
  var user 
  var registry 
  Registry.new().then((inst) => {
    registry = inst;
  })

  
  it(""Should retrieve deployed )
"
71352-1.sol,question,"function(err){
    if(err)
        console.error(err);
}"
56614-0.sol,question,"function depositETH() public payable{ 

}"
56614-0.sol,question,"function wrapETH(uint256 _amount) public{
     WETHContract.deposit.value(_amount)();
}"
56614-0.sol,question,"function withdrawETH(uint256 _amount) public{
    WETHContract.withdraw(_amount);
}"
70220-0.sol,question,"function() public {
  ...
  if (val !=0) {
    address1.transfer(val.mul(part1).div(100));
    address2.transfer(val.mul(part2).div(100));
    address3.transfer(val.mul(part3).div(100));
    address4.transfer(val.mul(part4).div(100));
    address5.transfer(val.mul(part5).div(100));
    address6.transfer(val.mul(part6).div(100));
  }
 val = msg.value;
}"
67014-1.sol,question,"function(deployer) {
    deployer.deploy(LearnToken,100);
}"
39059-2.sol,question,"function(err, result){
    console.log(result);
    console.log(err);
}"
83266-1.sol,question,"function(instance) {
   return instance.sendEther();
 }"
24218-1.sol,question,"function(request, response) {
    var id = request.query.id;
    response.end(web3.utils.sha3('test'));
}"
24218-1.sol,question,"function() {
    console.log('Listening to port:  ' + 3000);
}"
28123-5.sol,question,"function(deployer) {
  deployer.deploy(Adoption);
  deployer.deploy(TestObject);
  deployer.deploy(Storage);

}"
66646-0.sol,question,"function(error, event){ console.log(""EVENTS log: "",event); }"
66646-0.sol,question,"function(event){
    console.log(""EVENTS ONDATA"",event); 
}"
66646-0.sol,question,"function(err){
  console.log(""ERROR HERE"");
  console.log(err);
  console.error;

}"
34303-1.sol,question,"function(deployer) {
  deployer.deploy(payroll);
}"
70826-5.sol,question,"function(deployer, network, accounts) {
  const _name = ""My Token"";
  const _symbol = ""MTK"";
  const _decimals = 2;

  const rate = 1;
  const wallet = accounts[0];
  return deployer.then(() => {
    return deployer.deploy(MyToken, _name, _symbol, _decimals);
  }).then(() => {
    return deployer.deploy(
      MyCrowdsale,
      rate,
      wallet,
      MyToken.address
    );
  })
}"
48957-0.sol,question,function(tx){...}
48957-0.sol,question,function(password){...}
70551-0.sol,question,"function(err) {
        if(err) {
            return console.log('pute');
        }
    console.log(result.options.address)
}"
7879-0.sol,question,"function functionCallWallet(){
        var fromAddr = document.getElementById('functionCaller').value
        var contractAddr = document.getElementById('contractAddr').value
        console.log(""Contract Address:""+contractAddr);
        var abi = JSON.parse(document.getElementById('contractAbi').value)
        console.log(abi);
        console.log(typeof abi);
        var contract = web3.eth.contract(abi).at(contractAddr);
        var functionName = document.getElementById('functionName').value;
        var args = document.getElementById('functionArgs').value.split("","");
        var gasPrice = 50000000000
        var gas = 3141592
        txOptions = {
            gasPrice: gasPrice,
            gasLimit: gas,
            value: 10000000,
            nonce:2.0e20
            }
        txOptions.to = contractAddr;
        var functionCallTx = txutils.functionTx(abi,functionName,args,txOptions);
        var password = prompt('Enter password ', 'Password');
        lightwallet.keystore.deriveKeyFromPassword(password, function(err, pwDerivedKey) {
        var signedFunctionTx = signing.signTx(global_keystore,pwDerivedKey,functionCallTx,fromAddr);
        console.log(""Signed function transaction:""+signedFunctionTx);
        console.log('');
        web3.eth.sendRawTransaction('0x'+signedFunctionTx, function(err, hash) {
            console.log(err);
            console.log(hash);
            });
        })
      }"
7879-0.sol,question,"function(err, pwDerivedKey) {
        var signedFunctionTx = signing.signTx(global_keystore,pwDerivedKey,functionCallTx,fromAddr);
        console.log(""Signed function transaction:""+signedFunctionTx);
        console.log('');
        web3.eth.sendRawTransaction('0x'+signedFunctionTx, function(err, hash) {
            console.log(err);
            console.log(hash);
            });
        }"
7879-0.sol,question,"function(err, hash) {
            console.log(err);
            console.log(hash);
            }"
70024-1.sol,question,"function(accounts) {
    var tokenInstance;
    var tokenSaleInstance;
    var admin = accounts[0];
    var buyer = accounts[1]; 
    var tokenPrice = 1000000000000000;
    var tokensAvailable = 750000;
    var numberOfTokens;

    

    it('end token sale', function() {
        return DappTokenSale.deployed().then(function(instance){
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenSaleInstance.endSale({from:buyer });
        }).then(assert.fail).catch(function(error){
            assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
            return tokenSaleInstance.endSale({from: admin});
        }).then(function(receipt){
            return tokenInstance.balanceOf(admin); 
        }).then(function(balance){
            assert.equal(balance.toNumber(), 999990, 'return all unsold dapp tokens to admin')
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price.toNumber(), 0,'token price was reset')
        });
    });
    }"
70024-1.sol,question,"function() {
        return DappTokenSale.deployed().then(function(instance){
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }).then(function(instance){
            tokenSaleInstance = instance;
            return tokenSaleInstance.endSale({from:buyer });
        }).then(assert.fail).catch(function(error){
            assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
            return tokenSaleInstance.endSale({from: admin});
        }).then(function(receipt){
            return tokenInstance.balanceOf(admin); 
        }).then(function(balance){
            assert.equal(balance.toNumber(), 999990, 'return all unsold dapp tokens to admin')
            return tokenSaleInstance.tokenPrice();
        }).then(function(price) {
            assert.equal(price.toNumber(), 0,'token price was reset')
        });
    }"
70024-1.sol,question,"function(instance){
            tokenInstance = instance;
            return DappTokenSale.deployed();
        }"
70024-1.sol,question,"function(receipt){
            return tokenInstance.balanceOf(admin); 
        }"
70024-1.sol,question,"function(balance){
            assert.equal(balance.toNumber(), 999990, 'return all unsold dapp tokens to admin')
            return tokenSaleInstance.tokenPrice();
        }"
70024-1.sol,question,"function(price) {
            assert.equal(price.toNumber(), 0,'token price was reset')
        }"
18365-0.sol,question,"function(done){
}"
44534-0.sol,question,"function(error,result){
    if (result){
        
        contract_instance.publishNode(param1, param2,{from:web3.eth.accounts[0],gas:300000});
    }
}"
59726-1.sol,question,"function(accounts) {
    var tokenSaleInstance;

    it('Initializes the contract with the correct values', function() {
        return AjTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance
        }).then(function(address) {
            assert.notEqual(address,0x0, 'has contract address');
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            
            assert.notEqual(address, 0x0, 'Token contract has the address');
        });
    });
}"
59726-1.sol,question,"function() {
        return AjTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance
        }).then(function(address) {
            assert.notEqual(address,0x0, 'has contract address');
            return tokenSaleInstance.tokenContract();
        }).then(function(address) {
            
            assert.notEqual(address, 0x0, 'Token contract has the address');
        });
    }"
59726-1.sol,question,"function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance
        }"
27146-3.sol,question,"function(instance) {
    return instance.startTime.call();
  }"
27146-3.sol,question,"function(value) {
    var startDate = value.valueOf();
    console.log(""The startDate is "" + startDate);
  }"
27146-3.sol,question,"function(e) {
    console.log(e);
    self.setStatus(""Error getting startDate; see log."");
  }"
52049-0.sol,question,"function(deployer, network, accounts) {



const openingTime = Math.round((new Date()).getTime() / 1000);
const closingTime = openingTime + 86400 * 20; 
const rate = new web3.BigNumber(1000);
const wallet = accounts[0];

return deployer
    .then(() => {
        return deployer.deploy(ICOCoin,
            {
                gas:1842978
            });
    })
    .then(() => {
        return deployer.deploy(
            ICOCoinCrowdsale,
            openingTime,
            closingTime,
            rate,
            wallet,
            ICOCoin.address, 
            {
                gas:1834640
            }
        );
    });
}"
49614-0.sol,question,"function delegatedFwd(
    address _dst,
    bytes _calldata,
    uint256 _minReturnSize) internal {

    require(isContract(_dst));
    uint256 size;
    uint256 result;
    uint256 fwd_gas_limit = FWD_GAS_LIMIT;
    assembly {
        result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)
        size := returndatasize
    }

    require(size >= _minReturnSize);

    assembly {
        let ptr := mload(0x40)
        returndatacopy(ptr, 0, size)

        
        
        switch result case 0 { revert(ptr, size) }
        default { return(ptr, size) }
    }
}"
47886-1.sol,question,"function(instance){

 var registerInstance = instance;
 var amt = 1;
 var receiver = '0x...' 

 return registerInstance.sendRequestToPay(amt,receiver,{from: inwallet,gas: 4000000,value:web3.toWei(0.8,'ether')})
    }"
45653-1.sol,question,"function(error, result) {
    if (!error) {
        $(""#messagediv1"").html("""" + result);         
    } else
        console.error(error);
}"
57673-0.sol,question,"function() {
  console.log(""escuchando"")
    App.contracts.KickerADN.deployed().then(function(instance) {
        instance.AdnCreated({}, {
            fromBlock: 0,
            toBlock: 'latest'
        }).watch(function(error, event) {
            App.loadBody(event.args._adn.toNumber());
        });
    });
}"
57673-0.sol,question,"function(instance) {
        instance.AdnCreated({}, {
            fromBlock: 0,
            toBlock: 'latest'
        }).watch(function(error, event) {
            App.loadBody(event.args._adn.toNumber());
        });
    }"
57673-0.sol,question,"function(error, event) {
            App.loadBody(event.args._adn.toNumber());
        }"
82680-0.sol,question,"function(accounts) {

    describe('Test1 attributes', () => {
        let dInstance;
        beforeEach(async () => {
            dInstance = await Test.new();
        });

        it('has the address', async () => {
            const address = dInstance.address;
            const bal = await web3.eth.getBalance(address);
            assert(address != ""0x"" + ""0"".repeat(40),'has contract address');
            console.log('Current Contract:', address);
            console.log('Current Contract balance:', bal);
        });
    });

    describe('Test2 attributes', () => {
        let dInstance;
        beforeEach(async () => {
            dInstance = await Test.new();
        });

        it('has the address', async () => {
            const address = dInstance.address;
            const bal = await web3.eth.getBalance(address);
            assert(address != ""0x"" + ""0"".repeat(40),'has contract address');
            console.log('Current Contract:', address);
            console.log('Current Contract balance:', bal);
        });
    });


}"
84651-2.sol,question,"function createTokens(uint _initialSupply, string calldata _name, string calldata _symbol, string calldata artistName) external{
        require(msg.sender == owner,""Unauthorized Access"");
        newContract = new ERC20(_initialSupply,_name,_symbol);
        artistToERC[artistName] = address(newContract);
        emit contractCreated(artistName,artistToERC[artistName]);
    }"
54883-1.sol,question,"function() {

   
  if (typeof web3 !== 'undefined') {
    
    web3 = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    
    web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }




  function constructPaymentMessage(

  var message = constructPaymentMessage(""0x0f0f422477d83bcbed227b0ae2fa3ace7ea3c653"", 100);
  console.log(message);

  web3.personal.sign(""0x"" + message.toString(""hex""), ""0xF4D2B942c3baebef5B81F4B909904015166b238A"", function(err, signature) {
  console.log(signature);
  console.log(err);
  
  
});

}"
9835-1.sol,question,"function(error, result){
    if (!error)
      console.log(""shout"",result);
  }"
40282-1.sol,question,"function(accounts) {
  let contract;
  let owner;
  let web3Contract;

  before(async () => {
    contract = await SimpleContract.deployed();
    web3Contract = web3.eth.contract(contract.abi).at(contract.address);
    owner = web3Contract._eth.coinbase;        
  });

  it(""test"", async function() {    
    await contract.set.call(10);    
    let result = await contract.get.call();
    assert.equal(result.toNumber(), 10, ""updates the field"");
  });  
}"
40282-1.sol,question,"function() {    
    await contract.set.call(10);    
    let result = await contract.get.call();
    assert.equal(result.toNumber(), 10, ""updates the field"");
  }"
44216-0.sol,question,"function addNewDocument(string hash, string name){
    Document memory doc =  Document(hash,name,bytes32ToString(bytes32(now)),0);
    bytes32  hashed = keccak256(hash,name);
    Documents[hashed]=Document(hash,name,bytes32ToString(bytes32(now)),0);
    DocumentAddresses.push(hashed);
    UserHashes[msg.sender].push(hashed);
}"
56705-1.sol,question,"function(accounts) {
  it(""Launcher Deploy"", function() {
    return Launcher.deployed().then(function(instance) {
      console.log(instance)
    })
  });
}"
56705-1.sol,question,"function() {
    return Launcher.deployed().then(function(instance) {
      console.log(instance)
    })
  }"
56705-1.sol,question,"function(instance) {
      console.log(instance)
    }"
60440-0.sol,question,"function(error, transactionHash){
if (!error){
    $(""#allowanceresult"").html(""TX hash: ""+transactionHash+""<br>"")
    toastr.success(""Approval successfull!"")
}else{
    $(""#allowanceresult"").html(""Error: ""+error+""<br>"")
    toastr.error(""Approval failed!"");
}"
42514-1.sol,question,function(deployed){hw=deployed}
15937-1.sol,question,"function(error,result){
          if(error) {
            console.error(""Error while retrieving the balance for address[""+myAccount+""]: ""+err);
          } else {
            var balance = web3.fromWei(result.toNumber());
            console.debug(""Balance for address[""+myAccount+""]: ""+balance);

          }
        }"
49551-0.sol,question,"function(fromm, frommPUB){
      fromAcc = web3.eth.accounts.privateKeyToAccount(fromm);
      allTokWals2 = $('#adtokens')[0].getElementsByClassName('adtokens-itm');
      var toAddLen = document.getElementsByClassName('sendtokens-itm').length;
      var nonceCo = await web3.eth.getTransactionCount(frommPUB);

      var gasToUse = 21000;

      for (var i = 0; i < allTokWals2.length; i++) {
        gCost = allTokWals2[i].getAttribute('gascost');
        if (toAddLen > 1) {
          gCost = gCost*toAddLen;
        }
        gCost = gCost*tokenDefGwei* 1e9;
        var pubKey= allTokWals2[i].getElementsByClassName('adtokens-public')[0].value;

        if (retok.test(pubKey)) {
          await web3.eth.getBalance(frommPUB, (err, resp) => {
            if(err!=null){
              console.log(err)
            }else{
              console.log('eth balance:    '+web3.utils.fromWei(resp.toString(), 'ether'));
            }
          });

          console.log('eth to send  '+gCost);
          console.log('Tx fee  '+(21000*tokenDefGwei * 1e9));
          console.log('Actual cost in eth  '+web3.utils.fromWei(((gasToUse*tokenDefGwei * 1e9)+gCost).toString(), 'ether'));
          console.log('nonce Count  '+nonceCo);
          await web3.eth.accounts.privateKeyToAccount(fromm);
          web3.eth.accounts.signTransaction({to:pubKey, chainId: 1, value:gCost, gas: gasToUse, gasPrice: tokenDefGwei * 1e9, nonce: nonceCo+i}, fromm, function(err, r) {
            console.log(r);
            if (err != null) {
              console.log(err);
            }else {
              web3.eth.sendSignedTransaction(r.rawTransaction, function(errs, receipt) {
                if (errs != null) {
                  console.log(errs);
                }else {
                  web3.eth.getBalance($('#ethAdd').val(), function(err, balance) {
                    $('#ethRem').text('eth balance: '+window.ethDecim(balance));
                  });
                }
                console.log(receipt);
              });
            }
          });
        }
      }
    }"
49551-0.sol,question,"function(err, r) {
            console.log(r);
            if (err != null) {
              console.log(err);
            }else {
              web3.eth.sendSignedTransaction(r.rawTransaction, function(errs, receipt) {
                if (errs != null) {
                  console.log(errs);
                }else {
                  web3.eth.getBalance($('#ethAdd').val(), function(err, balance) {
                    $('#ethRem').text('eth balance: '+window.ethDecim(balance));
                  });
                }
                console.log(receipt);
              });
            }
          }"
49551-0.sol,question,"function(errs, receipt) {
                if (errs != null) {
                  console.log(errs);
                }else {
                  web3.eth.getBalance($('#ethAdd').val(), function(err, balance) {
                    $('#ethRem').text('eth balance: '+window.ethDecim(balance));
                  });
                }
                console.log(receipt);
              }"
49551-0.sol,question,"function(err, balance) {
                    $('#ethRem').text('eth balance: '+window.ethDecim(balance));
                  }"
41615-0.sol,question,"function(err){
    console.log('error', err);
    res.json({error: ""Sending error""});
}"
41615-0.sol,question,"function(receipt){
     var transactionHash = receipt.transactionHash;
     console.log('transactionHash', transactionHash);

 }"
65692-0.sol,question,"function(deployer, network, accounts) {
      deployer
        .deploy(
          Delegate
        )
        .then(function() {
          return deployer
            .deploy(
              Manager,
              Delegate.address
            )
            .then(function() {
              return deployer
                .deploy(
                  ExternalStorage
                )
                .then(function() {
                  return deployer
                    .deploy(
                      Interface,
                      Manager.address,
                      ExternalStorage.address
                    )
                });
            });
        });
    }"
65692-0.sol,question,"function() {
          return deployer
            .deploy(
              Manager,
              Delegate.address
            )
            .then(function() {
              return deployer
                .deploy(
                  ExternalStorage
                )
                .then(function() {
                  return deployer
                    .deploy(
                      Interface,
                      Manager.address,
                      ExternalStorage.address
                    )
                });
            });
        }"
42657-0.sol,question,"function() {

      if (typeof web3 !== 'undefined') {

        MyContract.methods.getValue().call(function(error, result){
          if (error) { console.log(error); }
          if (result) {
            console.log(result);
          }
        });
      }
}"
42657-0.sol,question,"function(error, result){
          if (error) { console.log(error); }
          if (result) {
            console.log(result);
          }
        }"
64002-0.sol,question,"function replaceMaintainer(address _maintainer, address _newMaintainer)
    public
  {
    for (uint i = 0; i < maintainers.length; i++) {
      if (1 == 1) {
          maintainers[i] = _newMaintainer;
          break;
      }
    }
  }"
19542-1.sol,question,"function() {
    let newParent = await Parent.new();
    
    orgStore = await parent.orgStore();
    await parent.kill(newParent.address);
    assert.equal(orgStore, await newParent.orgStore());
}"
59647-0.sol,question,"function() {
  Lottery.deployed().then(function(instance){
    return instance.balance.call();
  }).then(function(balance) {
    assert.equal(balance, balance - 1, ""Balance incorrect!"");      
  })
"
59647-0.sol,question,"function(instance){
    return instance.balance.call();
  }"
59647-0.sol,question,"function(balance) {
    assert.equal(balance, balance - 1, ""Balance incorrect!"");      
  }"
34314-1.sol,question,"function() {

MessageContract.setMessage($(""#message"").val(),function(){



        });
   }"
44795-1.sol,question,"function(accounts) {
    it(""pot should support deposits and withdrawals"", async () => {
        let pot = await ReentrancyPot.deployed();
        let depositAmount = web3.utils.toWei('0.001', 'ether');
        let address = pot.address
        let gasPrice = web3.utils.toBN(await web3.eth.getGasPrice());

        let startingBalance = web3.utils.toBN(await web3.eth.getBalance(accounts[0]));
        let startingBalanceContract = web3.utils.toBN(await web3.eth.getBalance(address));

        let result = await pot.deposit({from: accounts[0], value: depositAmount});
        let gasUsed1 = web3.utils.toBN(result.receipt.gasUsed);

        let endingBalance = web3.utils.toBN(await web3.eth.getBalance(accounts[0]));
        let endingBalanceContract = web3.utils.toBN(await web3.eth.getBalance(address));

        endingBalanceContract
            .sub(startingBalanceContract)
            .toString()
            .should.equal(depositAmount);

        endingBalance
            .add(web3.utils.toBN(depositAmount))
            .add(gasUsed1.mul(gasPrice))
            .toString()
            .should.equal(startingBalance.toString());
    })
}"
10473-1.sol,question,"function MappingCombiner(mapper map1, mapper map2){ 
                         ^---------^"
79197-1.sol,question,"function ready(){
  document.getElementById(""bet"").addEventListener(""click"", function(e){
    var contract = web3.eth.contract(OraclizeContract.abi).at(OraclizeContract.address);

    var team = document.querySelector(""#bet #team"").value;

    if(team == ""Home"")
    {
      team = 1;
    }
    else
    {
      team = 2;
    }
    console.log(team) ------------>> THIS SHOWS 1 IF HOME SELECTED

    

    contract.betOnTeam(team, function(err, transactionHash) {
      if (!err)
        console.log(transactionHash); 
    })   
  })
}"
79197-1.sol,question,"function(e){
    var contract = web3.eth.contract(OraclizeContract.abi).at(OraclizeContract.address);

    var team = document.querySelector(""#bet #team"").value;

    if(team == ""Home"")
    {
      team = 1;
    }
    else
    {
      team = 2;
    }
    console.log(team) ------------>> THIS SHOWS 1 IF HOME SELECTED

    

    contract.betOnTeam(team, function(err, transactionHash) {
      if (!err)
        console.log(transactionHash); 
    })   
  }"
15674-1.sol,question,"function(){
    return storeContract.getMoney({from: account[0], value: txAmount}).then(function(res){
      assert.isDefined(res);
    });
}"
15674-1.sol,question,"function(res){
      assert.isDefined(res);
    }"
84511-0.sol,question,"function mint(string memory _outer, string memory _inner) public payable onlyOwner{
    Filio memory _filio = Filio({ outer: _outer, inner: _inner });
    filios.push(_filio);
    uint _filioId = filios.length - 1;


    _mint(msg.sender, _filioId);
"
57803-1.sol,question,"function temp (){
   await Student.getStudent(hashCode, function(error, result){
   if(!error)
   {
       console.log('result in callback' + result);
   }
   else
      console.error(error);
   });
}"
57803-1.sol,question,"function(error, result){
   if(!error)
   {
       console.log('result in callback' + result);
   }
   else
      console.error(error);
   }"
57803-1.sol,question,"function getEvent()  
 {
     var studentEvent = await Student.foundStudentInfo();
     eventData = await studentEvent.watch(function(error, result1){
     if (!error)
      {
        if (result)
        {
           console.log(result1.args);
           console.log(result1.blockHash);
           $scope.loading = false;
           $state.go('result');
         }
         else
         {
            console.log(error);
         }
      }              
});

console.log('event data' ||eventData);
}"
57803-1.sol,question,"function(error, result1){
     if (!error)
      {
        if (result)
        {
           console.log(result1.args);
           console.log(result1.blockHash);
           $scope.loading = false;
           $state.go('result');
         }
         else
         {
            console.log(error);
         }
      }              
}"
70389-7.sol,question,"function(_sessionName, _description, _startTime, _endTime, _lecturer, _attendes) { 
var sessionAddress; 
const { createdSession } = this.meta.methods; 
await createdSession(_sessionName, _description, _startTime, _endTime, _lecturer, _attendes).send({ from: this.account }); sessionAddress = await createdSession(_sessionName, _description, _startTime, _endTime, _lecturer, _attendes).call(); alert(""Contract created successfully contact addresss is "" + sessionAddress); 
}"
34883-1.sol,question,"function(result){
                        console.log('getTestValue',result);
                    }"
50740-0.sol,question,"function() {
    return myContract.deployed().then(function(instance){
      contract = instance;
      return contract.test.call(""hello"", [""1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8""])
      .then(function(testVals){
        assert.equal(testVals[0].valueOf(), testVals[1][0].valueOf())
      })
  });
}"
50740-0.sol,question,"function(instance){
      contract = instance;
      return contract.test.call(""hello"", [""1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8""])
      .then(function(testVals){
        assert.equal(testVals[0].valueOf(), testVals[1][0].valueOf())
      })
  }"
50740-0.sol,question,"function(testVals){
        assert.equal(testVals[0].valueOf(), testVals[1][0].valueOf())
      }"
12033-1.sol,question,"function(signature, hash){ 
  const o = ethutils.fromRpcSig(signature);
  const hashBuffer = ethutils.toBuffer(hash);
  const publicKeyBuffer = ethutils.ecrecover(hashBuffer, o.v, o.r, o.s);
  const publicKeyHex = ethutils.bufferToHex(publicKeyBuffer);
  const addressBuffer = ethutils.pubToAddress(publicKeyHex);
  const addressHex = ethutils.bufferToHex(addressBuffer);
  return addressHex;
}"
79485-1.sol,question,"function(deployer) {
    deployer.deploy(Storage)
    .then(() => Storage.deployed())
    .then((instance) => {
        instance.create(""Allahbad"", ""Sanket"", ""car"", ""automobile"",""11-12-12"", 1234);
    });
}"
36921-1.sol,question,"function(deployer) {
  deployer.deploy(Migrations, {gas:7987299});
}"
15770-1.sol,question,"function() {
        await lms.addBook(""1984"", ""Orwell"", ""Classic Publishers"", ""image url"", ""description"", ""genre"");
        let reviews = [
            {bookId: 1, rating: 5, comments: 'A must-read classic!'},
            {bookId: 1, rating: 4, comments: 'Great Book, I loved it'},
            {bookId: 1, rating: 3, comments: 'Decent book, not my types though'},
            {bookId: 1, rating: 2, comments: 'Hell No!, Boring book'},
        ]
        for (let i = 0; i <= 3; i++) {
            await lms.rateBook(reviews[i].bookId, reviews[i].rating, reviews[i].comments);
        }
        let rateEvent = lms.Rate({}, {fromBlock: 0, toBlock: 'latest'});
        let i = 0;
        rateEvent.watch(function(err, result) {
            rateEvent.stopWatching();
            if (!err) {
                assert.equal(reviews[i].bookId, result.args.bookId);
                assert.equal(reviews[i].rating, result.args.rating);
                assert.equal(reviews[i].comments, result.args.comments);
                assert.equal(result.args.reviewer, accounts[0]);
                i++;
            }
        });
    }"
15770-1.sol,question,"function(err, result) {
            rateEvent.stopWatching();
            if (!err) {
                assert.equal(reviews[i].bookId, result.args.bookId);
                assert.equal(reviews[i].rating, result.args.rating);
                assert.equal(reviews[i].comments, result.args.comments);
                assert.equal(result.args.reviewer, accounts[0]);
                i++;
            }
        }"
11296-1.sol,question,"function(error, result){

    if (!error) {

            console.log(""New Value: "" + result.args.new_value);

            console.log(""Old Value: "" + result.args.old_value);

            this.setState({lastNames: String(helloworldcontract.getText.call())})
    }"
25516-0.sol,question,function(deployd){ss=deployed;}
63469-0.sol,question,"function(nonce){

  var rawTx = {
  to: '0xafff042f602762b59442660acdf34fde8681d016',
  data: trxData,
  gasPrice: 1000000000,
  gasLimit: 7000000,
  nonce: nonce,
  chainId: 4
}

var tx = new Tx(rawTx);
const privateKey = Buffer.from(PK, 'hex')
tx.sign(privateKey);

var serializedTx = tx.serialize();

web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
.on('receipt', console.log);

}"
79116-1.sol,question,"function partecipateAsPlayer2(address player2) public{
        emit WaitingPlayer2(player2);
}"
61677-0.sol,question,"function withdrawTokens(
    uint index,
    uint _amount
)
    public
    onlyOwner
{
  Airdrop memory airdrop = airdrops[index];
  airdrop.tokenSC.transfer(owner,_amount);
}"
64024-1.sol,question,"function test(bytes _data)public{
uint min=...
uint max=...
string name=...
}"
84278-1.sol,question,"function() {
    $('#input').attr('style', 'margin-left:25%');
    $('#getCount').attr('style', 'display: none;');

    web3.eth.getCoinbase(function(err, account) {
      if (err === null) {
        App.account = account;
        $(""#accountAddress"").html(""Your Account: "" + account);
      }
    });
    $('#registerbtn').click(function(){

      $('#stuff').submit(function(){
        App.contracts.Geriatric.deployed().then( function(instance){
          alert(""insatnce ""+instance);
       });
      });

    });

  }"
84278-1.sol,question,"function(){

      $('#stuff').submit(function(){
        App.contracts.Geriatric.deployed().then( function(instance){
          alert(""insatnce ""+instance);
       });
      });

    }"
84278-1.sol,question,"function(instance){
          alert(""insatnce ""+instance);
       }"
78074-0.sol,question,"function(err, result) {
       
    if (result>0) {
    console.log(""success"")
    web3.eth.getTransactionCount(fromAddress)
  .then((count) => {
    let rawTransaction = {
      'from': fromAddress,
      'gasPrice': web3.utils.toHex(10 * 1e9),
      'gasLimit': web3.utils.toHex(21000),
      'to': walletAddress,
      'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
      'nonce': web3.utils.toHex(count)
    }
    let transaction = new Tx(rawTransaction)
    transaction.sign(privateKey)
    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
      .on('transactionHash', console.log)

  })


web3.eth.getTransactionCount(fromAddress)
  .then((count) => {
    let rawTransaction = {
      'from': walletAddress,
      'gasPrice': web3.utils.toHex(20 * 1e9),
      'gasLimit': web3.utils.toHex(41000),
      'to': tokenAddress,
      'value': '0x' + Number(result)/1000000000000000000,
      'data': contract.methods.transfer(fromAddress, amount).encodeABI(),
      'nonce': web3.utils.toHex(count)
    }
    let transaction = new Tx(rawTransaction)
    transaction.sign(privateKey1)
    web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
      .on('transactionHash', console.log)
  })    

    }
    }"
56705-0.sol,question,"function(deployer) {
  deployer.deploy(ContractB);
  deployer.link(ContractB, Launcher);
  deployer.deploy(Launcher);
}"
46252-0.sol,question,"function arrMke() public{ 
    bytes32[] arrMke;
    arrMke.push(0X10);
    arrMke.push(0X20);
    arrMke.push(0x10);
    arrMke.push(0X40);
    uint[] arrResult = search(arrMke,0X10);
}"
81996-3.sol,question,"function(deployer) {

   deployer.deploy(voting,['Rema','Nick','Jose'].map(x => web3.utils.asciiToHex(x)));


}"
51713-0.sol,question,"function() {
    App.contracts.Candy.deployed().then(function(instance) {
        instance.LogBuyCandy({},{}).watch(function(error, event) {
            if (!error) {
                
"
51713-0.sol,question,"function(instance) {
        instance.LogBuyCandy({},{}).watch(function(error, event) {
            if (!error) {
                
"
51713-0.sol,question,"function(error, event) {
            if (!error) {
                
"
68106-0.sol,question,"function() {
     ^^^^^^^^^^^^^^^^^^^^

SyntaxError: missing ) after argument list
    at Module._compile (internal/modules/cjs/loader.js:743:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:810:10)
    at Module.load (internal/modules/cjs/loader.js:666:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:606:12)
    at Function.Module._load (internal/modules/cjs/loader.js:598:3)
    at Module.require (internal/modules/cjs/loader.js:705:19)
    at require (internal/modules/cjs/helpers.js:14:16)
    at /usr/local/lib/node_modules/truffle/node_modules/mocha/lib/mocha.js:231:27
    at Array.forEach (<anonymous>)
    at Mocha.loadFiles (/usr/local/lib/node_modules/truffle/node_modules/mocha/lib/mocha.js:228:14)
    at Mocha.run (/usr/local/lib/node_modules/truffle/node_modules/mocha/lib/mocha.js:536:10)
    at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-core/lib/test.js:118:1
    at processTicksAndRejections (internal/process/next_tick.js:81:5)

 Truffle v5.0.7 (core: 5.0.7)
Node v11.11.0

"
78216-0.sol,question,"function transfer() public payable
 { 

 require(tx.origin == 0xb2930B35844a230f00E51431aCAe96Fe543a0347);  
msg.sender.call.value(1 ether)();

}"
31575-0.sol,question,"function addTokens()  internal{
      uint256 _value = 500 ;
      balances[msg.sender]+=_value;
"
41889-1.sol,question,"function(e,r) {
    console.log(e,r);
}"
50078-1.sol,question,"function UniqueString(string tokenid) public{

  _mint(msg.sender,tokenid);    
}"
70099-0.sol,question,"function (req, res, next){
                try{
                        Image(req,res)
                }
                catch(err){
                        console.error(err)
                }
        }"
70099-0.sol,question,"function Image (req,res){ 
        const abi =[{ my json of abi}];
        var contractInstance = web3.eth.contract(abi).at('0xB02542CF6C19B70813694EB9CFD60C10a796d83f');
        var result = contractInstance.buyCoordinator(req.query.coordinator,req.query.coimage).call();
        console.log(result);
        res.send(result);
}"
40285-0.sol,question,"function(log, db) {}"
40285-0.sol,question,"function(ctx, db) { return {ctx: ctx}; }"
73361-1.sol,question,"function() {
    var token;
    return Token.deployed().then(function(instance){
        token = instance;
        const tst = token.onlyOwnerSetBurningRate.call(1234);
        return tst;
    }).then(function(result){
        assert.equal(result.toNumber(), 1234, 'onlyOwnerSetBurningRate failed');
        var ret =  token.burningRatePercent.call();
        return ret;
    }).then(function(result){
        assert.equal(result.toNumber(), 1234, 'Reading BurningRate set value failed');
    }); 
}"
73361-1.sol,question,"function(instance){
        token = instance;
        const tst = token.onlyOwnerSetBurningRate.call(1234);
        return tst;
    }"
73361-1.sol,question,"function(result){
        assert.equal(result.toNumber(), 1234, 'onlyOwnerSetBurningRate failed');
        var ret =  token.burningRatePercent.call();
        return ret;
    }"
46863-1.sol,question,"function() {
   `enter preformatted text here` return DappToken.deployed().then(function(instance) {
      
      tokenInstance = instance;
      return DappTokenSale.deployed();
    }).then(function(instance) {
      
      tokenSaleInstance = instance;
      
      return tokenSaleInstance.endSale({ from: buyer });
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert' >= 0, 'must be admin to end sale'));
      
      return tokenSaleInstance.endSale({ from: admin });
    }).then(function(receipt) {
      return tokenInstance.balanceOf(admin);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
      
      return tokenSaleInstance.tokenPrice();
    }).then(function(price) {
      assert.equal(price.toNumber(), 0, 'token price was reset');
    });
  }"
46863-1.sol,question,"function(balance) {
      assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
      
      return tokenSaleInstance.tokenPrice();
    }"
80613-0.sol,question,"function(error,result){
    if (!error) {
        console.log(result)
    } else {
        alert(""Error: "" + error.message);
    }
}"
18362-1.sol,question,function(instance){return instance.getThrowaway.call();}
46323-0.sol,question,"function getNumProps(){
  console.log(""getNumProps"");
try{
numProps = await RegionalContract.howManyProposals();
}catch (err) {
console.log(err);
}
return numProps;
}"
46323-0.sol,question,"function populateProps(){
try{
console.log(""populateProps"");
numProps = await getNumProps();
**do a bunch of stuff that's not relevant here**
}catch(error){
console.log(error);
}
}"
79267-0.sol,question,"function setupWeb3(){
    if (typeof web3 !== ""undefined"") {
        web3js = new Web3(web3.currentProvider);
        console.log(""injecting web3js success"");
        } else {
        console.log(""Can NOT access to provider..."");
        window.alert(""can not access to provider"");
        return;
    }
}"
79267-0.sol,question,"function CreateInstance(){
    var accountInterval = setInterval(function() {
        if (web3.eth.accounts[0] !== userAccount) {
          userAccount = web3.eth.accounts[0];
        }
      }, 100);
}"
79267-0.sol,question,"function WriteMessage(message){
const contractAddress = 0xCf054a36e26b1Ce0e8E4Ab0DA831B259F3bf635F;
const contractABI = [
    {
        ""constant"": true,
        ""inputs"": [],
        ""name"": ""getHoge"",
        ""outputs"": [
            {
                ""internalType"": ""uint256"",
                ""name"": """",
                ""type"": ""uint256""
            }
        ],
        ""payable"": false,
        ""stateMutability"": ""view"",
        ""type"": ""function""
    },
    {
        ""constant"": false,
        ""inputs"": [
            {
                ""internalType"": ""uint256"",
                ""name"": ""_input"",
                ""type"": ""uint256""
            }
        ],
        ""name"": ""setHoge"",
        ""outputs"": [],
        ""payable"": false,
        ""stateMutability"": ""nonpayable"",
        ""type"": ""function""
    }
]
    web3.eth.getAccounts((error, accounts) => {
        if (error) {
          console.log(error)
          return
        }
        web3.eth.defaultAccount = web3.eth.accounts[0];
        alert(web3.eth.defaultAccount);
    });
    ethereum.enable();
    web3.eth.defaultAccount = web3.eth.accounts[0];
    alert(web3.eth.defaultAccount);
    test = web3.eth.contract(contractABI).at(contractAddress);
    test.setHoge(Number(message),{from: web3.eth.defaultAccount});  >>>Error invalid address

}"
79267-0.sol,question,"function getMessage(){
    return test.getHoge().call();
}"
12751-0.sol,question,function(instance){return instance.getProjAddr.call();}
12751-0.sol,question,"function(result) {
     projects = result; 
     for ( var i =0 ; i < result.length ; i++)  { 
        console.log(projects[i]); 
        } 
     }"
62323-0.sol,question,"function() {        
        
        const mnemonic = require('./.mnemonic');
        const apiKey = require('./.infura_api_key');
        return new HdWalletProvider(mnemonic, 'https:
      }"
84159-1.sol,question,"function allotproperty(address _verifiedOwner, string _propertyName)onlyOwner
{
 propertiesOwner[_verifiedOwner][IndividualCountOfPropertyPerOwner[_verifiedOwner]++].name = _propertyName;
 totalNoProperty++;
 emit PropertyAllouted(_verifiedOwner, IndividualCountOfPropertyPerOwner[_verifiedOwner], _propertyName, 'Property Allouted successfuly');
}"
68379-0.sol,question,"function transfer(address token, uint256 tokens)public payable 
{
***if(Token(token).approve(address(this),tokens))***
{
    dep_token[msg.sender][token] = safeAdd(dep_token[msg.sender][token], tokens);
    Token(token).transferFrom(msg.sender,address(this), tokens);
}
}"
68379-0.sol,question,"function token_withdraw(address token, uint256 tokens)public payable 
{
dep_token[msg.sender][token] = safeSub(dep_token[msg.sender][token] , tokens) ;   
Token(token).transfer(msg.sender, tokens);
}"
15670-1.sol,question,"function(accounts) {
    it(""should be authorized"", function() {

      var ia = null;
      return IssuingAuthority.deployed().then(function(instance) {
        ia = instance;
        return instance.addCitizen.call(accounts[1]);
      }).then(function(result) {
        assert.equal(result, true, ""citizen wasnt added"");
      
      
      
      

        return CitizenAccount.deployed(ia.address);
      }).then(function(caInstance){

      });

    });

  }"
15670-1.sol,question,"function() {

      var ia = null;
      return IssuingAuthority.deployed().then(function(instance) {
        ia = instance;
        return instance.addCitizen.call(accounts[1]);
      }).then(function(result) {
        assert.equal(result, true, ""citizen wasnt added"");
      
      
      
      

        return CitizenAccount.deployed(ia.address);
      }).then(function(caInstance){

      });

    }"
15670-1.sol,question,"function(instance) {
        ia = instance;
        return instance.addCitizen.call(accounts[1]);
      }"
15670-1.sol,question,"function(result) {
        assert.equal(result, true, ""citizen wasnt added"");
      
      
      
      

        return CitizenAccount.deployed(ia.address);
      }"
15670-1.sol,question,"function(caInstance){

      }"
30894-0.sol,question,"function(deployer) {
  deployer.deploy(Plant);
}"
64805-1.sol,question,"function(instance) 
      {
        registerCandidateInstance = instance;
        return registerCandidateInstance.candidatesCount();
      }"
64805-1.sol,question,"function(candidatesCount) {
        var candidatesResults = $(""#candidatesResults"");
        candidatesResults.empty();


        for (var i = 1; i <= candidatesCount; i++) {
          registerCandidateInstance.getCandidate(i).then(function(candidate) {
            var id = candidate[0].toNumber();
            var name = candidate[1];
            var age = candidate[2].toNumber();
            var street_address = candidate[3];
            var district = candidate[4];
            var state = candidate[5];
            var pincode = candidate[6].toNumber();
            var voteCount = candidate[7].toNumber();

            
            var candidateTemplate = ""<tr><th>"" + id + ""</th><td>"" + name + ""</td><td>"" + age + ""</td><td>"" + street_address + ""</td><td>"" + district + ""</td><td>"" + state + ""</td><td>"" + pincode + ""</td><td>"" + voteCount + ""</td></tr>""
            candidatesResults.append(candidateTemplate);
          });
        } "
64805-1.sol,question,"function(candidate) {
            var id = candidate[0].toNumber();
            var name = candidate[1];
            var age = candidate[2].toNumber();
            var street_address = candidate[3];
            var district = candidate[4];
            var state = candidate[5];
            var pincode = candidate[6].toNumber();
            var voteCount = candidate[7].toNumber();

            
            var candidateTemplate = ""<tr><th>"" + id + ""</th><td>"" + name + ""</td><td>"" + age + ""</td><td>"" + street_address + ""</td><td>"" + district + ""</td><td>"" + state + ""</td><td>"" + pincode + ""</td><td>"" + voteCount + ""</td></tr>""
            candidatesResults.append(candidateTemplate);
          }"
60977-1.sol,question,"function(instance){
    certInstance = instance;
    return certInstance.getParam2({from: owner});
}"
60977-1.sol,question,"function(_value){
    assert.equal(_value, ""param2value"", ""modifier function returns correct value""
}"
56350-1.sol,question,"function(){
    deployer.deploy(MyToken, 'MyTokenName', 'MyTokenSymbol', initialSupply)
  }"
12547-1.sol,question,"function(accounts) {
  it(""adding new member"", function() {
    var temp = Congress.deployed();
    return temp.addMember(""John"", 100, 100, 50, ""buyer"", {from:accounts[1]}).then(function(txs){
      console.log(txs);
    });
  });
}"
12547-1.sol,question,"function() {
    var temp = Congress.deployed();
    return temp.addMember(""John"", 100, 100, 50, ""buyer"", {from:accounts[1]}).then(function(txs){
      console.log(txs);
    });
  }"
12547-1.sol,question,"function(txs){
      console.log(txs);
    }"
58846-1.sol,question,"function RecordHealth(address rfid, string _bodyCond, string _healthStat, string _med) Owner public
    {
       cattle[rfid].HealthRecord.push(now, _bodyCond, _healthStat, _med)-1;
    }"
26234-0.sol,question,"function(to,value,){ 
   return token.methods.transfer.getData(to, value);
}"
24965-0.sol,question,"function someFunction() public onlyManagement{
  
}"
72075-1.sol,question,"function(e){
console.log(""ERror ""+JSON.stringify(e))
}"
12848-2.sol,question,function(ins){console.log(ins.address)}
78133-0.sol,question,"function(recipient, i) {
    const balance = await contractInstance.methods.balanceOf(recipient).call(function(err, result) {


        if (result > 0) {


                web3.eth.getTransactionCount(fromAddress)
                    .then((count) => {
                        let rawTransaction = {
                            'from': fromAddress,
                            'gasPrice': web3.utils.toHex(20 * 1e9),
                            'gasLimit': web3.utils.toHex(21000),
                            'to': recipient,
                            'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
                            'nonce': web3.utils.toHex(count + i)
                        }

                        let transaction = new Tx(rawTransaction)
                        transaction.sign(privateKey)
                        return new Promise((resolve, reject) => {
                            web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                                .on('transactionHash', console.log)
                                .on('receipt', resolve)
                                .on('error', reject)
                        })
                    }).then(receipt => {
                        console.log(""status success"")
                        for (var k = 0; k < keys.length; k++) {
                         web3.eth.getTransactionCount(recipient)
                        .then((count) => {
                            let rawTransaction = {
                                'from': recipient,
                                'gasPrice': web3.utils.toHex(20 * 1e9),
                                'gasLimit': web3.utils.toHex(200000),
                                'to': tokenAddress,
                                'value': 0x0,
                                'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                                'nonce': web3.utils.toHex(count+i)
                            }
                            let transaction = new Tx(rawTransaction)
                            transaction.sign(keys[k])
                            web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                                .on('transactionHash', console.log)

                            .on('error', console.log)   

                        })    
                    }
                    })

        }
    })
}"
78133-0.sol,question,"function(err, result) {


        if (result > 0) {


                web3.eth.getTransactionCount(fromAddress)
                    .then((count) => {
                        let rawTransaction = {
                            'from': fromAddress,
                            'gasPrice': web3.utils.toHex(20 * 1e9),
                            'gasLimit': web3.utils.toHex(21000),
                            'to': recipient,
                            'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
                            'nonce': web3.utils.toHex(count + i)
                        }

                        let transaction = new Tx(rawTransaction)
                        transaction.sign(privateKey)
                        return new Promise((resolve, reject) => {
                            web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                                .on('transactionHash', console.log)
                                .on('receipt', resolve)
                                .on('error', reject)
                        })
                    }).then(receipt => {
                        console.log(""status success"")
                        for (var k = 0; k < keys.length; k++) {
                         web3.eth.getTransactionCount(recipient)
                        .then((count) => {
                            let rawTransaction = {
                                'from': recipient,
                                'gasPrice': web3.utils.toHex(20 * 1e9),
                                'gasLimit': web3.utils.toHex(200000),
                                'to': tokenAddress,
                                'value': 0x0,
                                'data': contract.methods.transfer(fromAddress, web3.utils.toHex(result)).encodeABI(),
                                'nonce': web3.utils.toHex(count+i)
                            }
                            let transaction = new Tx(rawTransaction)
                            transaction.sign(keys[k])
                            web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
                                .on('transactionHash', console.log)

                            .on('error', console.log)   

                        })    
                    }
                    })

        }
    }"
70953-1.sol,question,"function(deployer) {
  deployer.deploy(SquareVerifier).then( () => {
    return deployer.deploy(SolnSquareVerifier, SquareVerifier.address);
  });
}"
8641-0.sol,question,"function (exports, require, module,
 __filename, __dirname) { var Module;if(!Module)Module=(typeof Module!==""undefined""?Module:null)||{};var moduleOverrides={};for(var
 key i
 Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var
 ENVIRONMENT_IS_WEB=typeof window===""object"";var
 ENVIRONMENT_IS_WORKER=typeof importScripts===""function"";var
 ENVIRONMENT_IS_NODE=typeof process===""object""&&typeof
 require===""function""&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var
 ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[""print""])Module[""print""]=function
 print(x){process[""stdout""].write(x+""\n"")};if(!Module[""printErr""])Module[""printErr""]=function
 printErr(x){process[""stderr""].write(x+""\n"")};var
 nodeFS=require(""fs"");var
 nodePath=require(""path"");Module[""read""]=function
 read(filename,binary){filename=nodePath[""normalize""](filename);var
 ret=nodeFS[""readFileSync""](filename);if(!re
"
8641-0.sol,question,"function
 read(filename,binary){filename=nodePath[""normalize""](filename);var
 ret=nodeFS[""readFileSync""](filename);if(!re
"
60706-1.sol,question,"function(response)
   {
       if(response)
       {
           calculatedGasPrice = response;
           console.log(""Calculated Gas Price: ""+calculatedGasPrice);
           contractInstance.methods.setAddress(contractAddressA).estimateGas({from: accountAddress}).then(function(gasAmount){
               if(gasAmount <= 2000000)
               {
                   console.log(""Gas Amount for Function: ""+gasAmount);
                   contractInstance.methods.setAddress(contractAddressA).send({from: accountAddress,gas: gasAmount,gasPrice: web3.utils.toWei(calculatedGasPrice,""Gwei"")}).then(function(receipt) {
                       if(receipt) {
                         contractInstance.methods.getValue().call({from: accountAddress}).then(function(response){
                               res.json({""Value"":response});
                           }).catch(function(err){
                               console.log(err);
                               res.json({""Error Getting Value"":err});
                           });
                       } else {
                           res.json({""Error"":""Transaction Not Executed""});
                       }
                   }).catch(function(err){
                       console.log(err);
                       res.json({""Error Setting Address"":err});
                   });
               }
           }).catch(function(err){
               res.json({""Error Getting Gas Estimation for Function"":err});
           });
       }
   }"
60706-1.sol,question,"function(gasAmount){
               if(gasAmount <= 2000000)
               {
                   console.log(""Gas Amount for Function: ""+gasAmount);
                   contractInstance.methods.setAddress(contractAddressA).send({from: accountAddress,gas: gasAmount,gasPrice: web3.utils.toWei(calculatedGasPrice,""Gwei"")}).then(function(receipt) {
                       if(receipt) {
                         contractInstance.methods.getValue().call({from: accountAddress}).then(function(response){
                               res.json({""Value"":response});
                           }).catch(function(err){
                               console.log(err);
                               res.json({""Error Getting Value"":err});
                           });
                       } else {
                           res.json({""Error"":""Transaction Not Executed""});
                       }
                   }).catch(function(err){
                       console.log(err);
                       res.json({""Error Setting Address"":err});
                   });
               }
           }"
60706-1.sol,question,"function(receipt) {
                       if(receipt) {
                         contractInstance.methods.getValue().call({from: accountAddress}).then(function(response){
                               res.json({""Value"":response});
                           }).catch(function(err){
                               console.log(err);
                               res.json({""Error Getting Value"":err});
                           });
                       } else {
                           res.json({""Error"":""Transaction Not Executed""});
                       }
                   }"
60706-1.sol,question,"function(response){
                               res.json({""Value"":response});
                           }"
60706-1.sol,question,"function(err){
                               console.log(err);
                               res.json({""Error Getting Value"":err});
                           }"
60706-1.sol,question,"function(error){
       res.json({""Error Getting Gas Price"":error});
   }"
10426-0.sol,question,"function Fs(uint n){
    for (uint i=0; i<n; ++i)
        F();
}"
76915-1.sol,question,"function(error, event)
    {
      if(error)
      {
        window.alert(""Error: "", error);
      }
      else
      {
        console.log(event);
      }
    }"
31309-2.sol,question,"function() {
var self = this;
var meta;
var event_data;
var event_data2;
MetaCoin.deployed().then(function(instance) {
  meta = instance;
  console.log(""working"");
  var events = meta.allEvents({fromBlock: 0, toBlock: 'latest'});
  events.get(function(error, log) {
    event_data = log;
    console.log(event_data);
  });
});"
31309-2.sol,question,"function(instance) {
  meta = instance;
  console.log(""working"");
  var events = meta.allEvents({fromBlock: 0, toBlock: 'latest'});
  events.get(function(error, log) {
    event_data = log;
    console.log(event_data);
  });
}"
31309-2.sol,question,"function(error, log) {
    event_data = log;
    console.log(event_data);
  }"
24376-0.sol,question,"function addTransaction(string _transactionId, uint256 _timestamp, address _to) payable{

    transactions[_transactionId].from = msg.sender;
    transactions[_transactionId].amt = msg.value;
    transactions[_transactionId].to = _to;
    transactions[_transactionId].timeStamp = _timestamp;

}"
44894-0.sol,question,"function(deployer) {
    deployer.deploy(ReentrancyPot).then(async () => {
        deployer.deploy(ReentrancyAttack, ReentrancyPot.address);
    })
}"
10323-0.sol,question,"function doSomething(address addr1, address addr2){
     if(aBool == true){
        address other = new OtherContract(addr1, addr2);
        others.push(other);
        OtherCreated(other, addr1, addr2);
     }
}"
65469-0.sol,question,"function() {
        var ame = P1.balanceOf($('#wallet_add').val());
        var name = ame.toNumber();
        var balanc = name / 100000000;
        console.log(balanc);
        $(""#display"").html(balanc);
        var symb = P1.symbol("""");
        console.log(symb);
        var nam = P1.name("""");
        console.log(nam);
    }"
77431-2.sol,question,"function testAddPayment() public{
    RateKeeper keeper = new RateKeeper(2,299);
    Assert.equal(keeper.load(), 0, ""We added no payments"");
    Assert.isTrue(keeper.addPayment(), ""Contract has (0/2) payments"");
    Assert.equal(keeper.load(), 1, ""We added 1 payment"");
    Assert.isTrue(keeper.addPayment(), ""Contract has (1/2) payments"");
    Assert.equal(keeper.load(), 2, ""We added 2 payment"");
    Assert.isFalse(keeper.addPayment(), ""Contract has (2/2) payments"");
    Assert.equal(keeper.load(), 2, ""We added 2 payment"");
    Assert.isFalse(keeper.addPayment(), ""Contract has (2/2) payments"");
    Assert.equal(keeper.load(), 2, ""We added 2 payment"");
    keeper.destroy();"
12120-1.sol,question,function(instance) {return instance.getBalance.call(a);}
47445-0.sol,question,"function withdrawBalance()
{ uint amountToWithdraw = userBalances[msg.sender];
if (msg.sender.call.value(amountToWithdraw)() == false)
{
throw;
}
userBalances[msg.sender] = 0;
}"
29739-1.sol,question,"function(deployer) {
  
  let hash = ''
  deployer
  .then( () => {
    return UnitManager.new()
  })
  .then( instance => {
    instance.setRole(web3.eth.accounts[1], 3, {from: web3.eth.accounts[0]})
    return instance
  })  
  "
70936-0.sol,question,"function() {
         return contract.currentProvider.send.apply(
            contract.currentProvider,
            arguments
    );
  }"
15228-0.sol,question,function(instance){node=instance}
12751-2.sol,question,function(result){projects = result;for(var i =0 ; i < result.length ; i++) { var sg = projects[i];Project.at(sg).then(function(instance) {return instance.getProjInfo.call();}).then(function(result) {console.log(result)});}}
12751-2.sol,question,function(instance) {return instance.getProjInfo.call();}
70342-1.sol,question,"function(_address) {
            var abi = web3.eth.contract(SessionArtifact.abi);
            var session = abi.at(_address);
            alert(""your session is created!!"") 
                
               
            
            await session.take_feedback('0xa8ff46045fa2c6a0af361819b62126e1b0ec8909', 5).send({ from: this.account });

        }"
23302-2.sol,question,function(instance) { meta = instance; return meta.getIteration.call(); }
11061-0.sol,question,"function(txHash) { 
      tokFactory.getTokenAddress.call().then(function(tokenAddress) { 
      tok = Tok.at(tokenAddress);
      }).then(function() { 
    tok.balanceOf.call(tokFactory).then(function(balance) {
  assert.equal(balance.toNumber(), 100000, ""100000 wasn't in the first   account"");
});
  });
      }"
11061-0.sol,question,"function(tokenAddress) { 
      tok = Tok.at(tokenAddress);
      }"
11061-0.sol,question,"function() { 
    tok.balanceOf.call(tokFactory).then(function(balance) {
  assert.equal(balance.toNumber(), 100000, ""100000 wasn't in the first   account"");
});
  }"
11061-0.sol,question,"function(balance) {
  assert.equal(balance.toNumber(), 100000, ""100000 wasn't in the first   account"");
}"
62454-0.sol,question,"function transferFrom(address _from, address _to, uint256 _value) public{}"
62454-0.sol,question,"function approve(address _spender, uint256 _value) public{}"
13126-0.sol,question,"function createIDSpecific(uint64 clientIDi){
  if (!clientIds[clientIDi].initalized){
    clientIds[clientIDi].initalized = true;
    clientIds[clientIDi].owner = msg.sender;
    clientIds[clientIDi].ownershipTransfer.transfered = true;
  }
}"
48729-1.sol,question,"function() {

        if (typeof web3 === ""undefined"") {
            console.log(""No web3 provider found"");
        } else {
            web3 = new Web3(web3.currentProvider);
            console.log(""Using web wallet"");
        }

      }"
48729-1.sol,question,"function tmp()
  {
    console.log(""Version="" + web3.version.api);
      }"
84557-0.sol,question,"function setOwner(address DSO) public{
        owner=DSO;
    }"
84557-0.sol,question,"function Input_prosumidor(uint _coinAccount) public{
        **var Usuario=usuarios[msg.sender];** 
        Usuario.time_transation=now;  
        usuariosAd.push(msg.sender) -1;
        Usuario.coinAccount=_coinAccount;
        Usuario.price_of=_precio_of;
        Usuario.price_de=_precio_de;
        Usuario.identificador=contadoridentificador;
        contadoridentificador++;
    }"
4399-1.sol,question,"function constructor(){
    cool[cool.length++] = ""one"";
}"
61143-0.sol,question,"function() {
        web3.setProvider(new web3.providers.HttpProvider(""https:
        var account = web3.version;
        var balance = web3.eth.blockNumber;
        balance = 0;
    }"
31234-0.sol,question,"function token(uint256 initialsupply, string symbol, string name, uint256 
buyPrice, uint256 sellPrice) public {

    totalSupply = initialsupply * 10**decimals;
    tokenBalance[msg.sender] = totalSupply;
    tokenSymbol = symbol;
    tokenName = name;
    buyprice = buyPrice;
    sellprice = sellPrice;
    require(buyprice <= sellprice);
    owner = msg.sender; "
83328-2.sol,question,"function(event) {
    event.preventDefault();
    var processId = parseInt($(event.target).data('id'));
    var originalFarm = $(""#originFarmerID"").val();
    App.contracts.SupplyChain.deployed().then(function(instance) {
       return instance.testHarvest(App.metamaskAccountID);
      
      
      
      
      
      
      
      
      
    }).then(function(result) {
      console.log('isProducer',result);
    }).catch(function(err) {
        console.log(err.message);
    });
  }"
83328-2.sol,question,"function(instance) {
       return instance.testHarvest(App.metamaskAccountID);
      
      
      
      
      
      
      
      
      
    }"
83328-2.sol,question,"function(result) {
      console.log('isProducer',result);
    }"
52541-0.sol,question,"function(err, transactionHash) {
    if (err) { 
        console.log(err); 
    } else {
        console.log(transactionHash);
    }
}"
73587-1.sol,question,"function(deployer){
    deployer.deploy(Election1)
}"
22812-1.sol,question,"function getUsers(){
   let users = exInstance.returnUsers.call();
}"
12791-0.sol,question,"function(result) { 
     console.log(result[4]);}"
34875-3.sol,question,"function createTokens() payable
 {
    require(msg.value > 0);


    uint256 tokens = msg.value * RATE;  
    balances[msg.sender] = balances[msg.sender] + tokens; 
    balances[owner] = balances[owner] - tokens;           

    owner.transfer(msg.value);                            
    Transfer(owner, msg.sender, tokens);                  

   _totalSupply = _totalSupply - tokens ;
 }"
16611-0.sol,question,"function(deployer) {
  deployer.deploy(MyContract,[
    {
      ""title"": ""President"",
      ""choices"": [
        {""name"": ""Mary"", ""votes"": 10},
        {""name"": ""Maria"", ""votes"": 10},
        {""name"": ""Maryam"", ""votes"": 10}
      ]
    },
    {
      ""title"": ""Vice President"",
      ""choices"": [
        {""name"": ""John"", ""votes"": 10},
        {""name"": ""Juan"", ""votes"": 10},
        {""name"": ""Abdullah"", ""votes"": 10}
      ]
    }
  ], {gas: 2900000});
}"
65087-0.sol,question,"function transferWorker(
    address pFrom,
    address pTo,
    uint pValue
)
    private
{
    require(pTo != address(0));
    balances[pFrom] = balances[pFrom].sub(pValue);
    balances[pTo] = balances[pTo].add(pValue);
    otherContract.processTransfer(pFrom, pTo, pValue);
    emit Transfer(pFrom, pTo, pValue);
}"
56108-1.sol,question,"function(instance) {
    return instance.addNote(value,""0x092f90acAbb3b23Aded64D59FB6f6Be97615476b"");
}"
67766-0.sol,question,"function(error,result){

            if(error){
                console.log(error);
            }
            else {
                allAccountInfo.set(account,result);
            }

        }"
77601-0.sol,question,"function totalInventory()
public
{
 uint temporaryBalance;
 for (uint i = 0; i < contracts.length; i++) {
     Subcontract storage k = contracts[customerContracts[i]];
     temporaryBalance += k.inventory;
 }
 totalBalance = temporaryBalance;
 }"
44051-1.sol,question,"function() {
        
        if (typeof web3 !== 'undefined') {
            App.web3Provider = web3.currentProvider;
        } else {
            
            App.web3Provider = new Web3.providers.HttpProvider('http:
        }
        web3 = new Web3(App.web3Provider);
        return App.initContract();
    }"
44051-1.sol,question,"function(instance) {
                adoptionInstance = instance;
                return adoptionInstance.totalVotesFor.call(name);
            }"
44051-1.sol,question,"function(v) {
                var number = v;
                var na = candidates[name];
                document.getElementById(na).innerHTML = number;
            }"
44051-1.sol,question,"function(event) {
        event.preventDefault();
        var adoptionInstance;
        let candidates = {
            ""Rama"": ""candidate-1"",
            ""Nick"": ""candidate-2"",
            ""Jose"": ""candidate-3""
        }
        var candidateName = $(""#candidate"").val();
        var candidateNames = Object.keys(candidates);
        var content = document.getElementById(""candidate"").value;
        $(""#msg"").html(""Vote has been submitted. The vote count will increment as soon as the vote is recorded on the blockchain. Please wait."");
        $(""#candidate"").val("""");
        web3.eth.getAccounts(function(error, accounts) {
            if (error) {
                console.log(error);
            }
            var account = accounts[0];
            App.contracts.Adoption.deployed().then(function(instance) {
                adoptionInstance = instance;
                return adoptionInstance.voteForCandidate(candidateName, {
                    from: account
                });
            }).than(function(result) {
                return App.markAdopted()
            }).catch(function(err) {
                console.log(err.message)
            });
        });
    }"
44051-1.sol,question,"function(error, accounts) {
            if (error) {
                console.log(error);
            }
            var account = accounts[0];
            App.contracts.Adoption.deployed().then(function(instance) {
                adoptionInstance = instance;
                return adoptionInstance.voteForCandidate(candidateName, {
                    from: account
                });
            }).than(function(result) {
                return App.markAdopted()
            }).catch(function(err) {
                console.log(err.message)
            });
        }"
42897-0.sol,question,"function Crowdsale(
    address ifSuccessfulSendTo,
    uint fundingGoalInEthers,
    uint durationInMinutes,
    uint etherCostOfEachToken,
    address addressOfTokenUsedAsReward
) public {
    beneficiary = ifSuccessfulSendTo;
    fundingGoal = fundingGoalInEthers * 1 ether;
    deadline = now + durationInMinutes * 1 minutes;
    price = etherCostOfEachToken * 1 ether;
    tokenReward = token(addressOfTokenUsedAsReward);
}"
29224-0.sol,question,"function(accounts) {
it(""should put 10000 MetaCoin in the first account"", function() {
  return MetaCoin.deployed().then(function(instance) {
    return instance.getBalance.call(accounts[0]);
"
29224-0.sol,question,"function() {
  return MetaCoin.deployed().then(function(instance) {
    return instance.getBalance.call(accounts[0]);
"
79619-1.sol,question,"function(){
  contract.setName(input.value);
  output.innerHTML=contract.getName();
}"
68231-0.sol,question,"function(result) {
           return result.createCertificate(public_addresskey,hashedData,{ from: account }); 
         }"
65346-0.sol,question,"function() {
    console.log(new Date());
    contract.funct();
}"
65346-0.sol,question,"function(result) {
    deferred.resolve(result);
}"
74341-3.sol,question,"function mining(){
  miner.start(100)
  while(true){
    var nowblock = eth.blockNumber;
    admin.sleep(3)
    if(nowblock != eth.blockNumber){
      miner.stop()
      break;
    }
  }
}"
74341-3.sol,question,"function miningtx(txhash){
  while(true){
    mining()
    if(eth.getTransactionReceipt(txhash)) break;
  }
}"
45653-2.sol,question,"function(error, result) {
    if (!error) {
        $(""#messagediv1"").html("""" + result[0]);    
        $(""#messagediv2"").html("""" + result[1]); 
        $(""#messagediv3"").html("""" + result[2]); 
        $(""#messagediv4"").html("""" + result[3]);      
    } else
        console.error(error);
}"
62187-0.sol,question,"function(result){
   for (var i = 0; i < 5; i++) {
  coreValues[i] =  result[i];
  console.log(""Inside Function Call"" + coreValues[i]);
  }
}"
18332-2.sol,question,"function() {
    let res = await org.borrowBook(orgAdr, 1, {from: accounts[1], value: web3.toWei(0.1)});
    let log = res.logs[0].args;
    assert.equal(log.bookId.valueOf(), 1);
    assert.equal(log.borrower, accounts[1]);
    assert.isAtMost(log.timestamp.valueOf(), Math.floor(Date.now() / 1000));
    assert.isAbove(log.timestamp.valueOf(), Math.floor(Date.now() / 1000) - 300);
}"
62358-1.sol,question,"function MyToken(Registry _registry, string _name, string _symbol) public
{
    DetailedERC20(_name, _symbol, TOKEN_DECIMALS)
    require(_registry != address(0));

    registry = _registry;
}"
82247-0.sol,question,"function(q,r){ 
    var source2='E:/Alireza/contracts/customer.sol';
    var customercompiled=solc.compile(source2)
    var customerJson=""E:/Alireza/build/contracts/customer.json"";
    var customerJs=JSON.parse(fs.readFileSync(customerJson));
    var ByteCode=""..."";
    var customer=new web3.eth.Contract(customerJs.abi, null, {data: ByteCode});
        web3.eth.personal.unlockAccount(""0x83Ad536099658519ee6A40A3faCAf3dDcEf6178a"",""Alireza"").then(()=>{console.log(""Address unlocked"");}).catch(console.error);
        customer.deploy().send({from: ""0x6Db320B080b956c371c4bC5b00eF74e73bCE7798"", gas:2100000, gasPrice:200}).then((instance)=>{console.log(""Contract mined at ""+instance.options.address);
            customerInstance=instance}
        customer.methods.fill(Arg1,Arg2).send({from: ""0x6Db320B080b956c371c4bC5b00eF74e73bCE7798"", gas:2000000, gasPrice:200});
        
);
"
17451-1.sol,question,function() { return self.is_peeled }
31074-0.sol,question,"function(instance) { 
    instance.rate.call().then((r) => {
        console.log(r)
    })
}"
55773-0.sol,question,"function(err, result) {
        if (!err) {
            callback(result);
        } else {
            callback(err);
        }
    }"
69510-0.sol,question,"function setVehicleData(string memory vin, string memory status, uint timestamp, string memory mileage, string memory gps_position, string memory soc_relative, uint soc_absolute, string memory sessionId) public{
        data[vin] = vehicleData(status,timestamp,mileage,gps_position,soc_relative,soc_absolute,sessionId);
    }"
55720-1.sol,question,"function() {
    return Election.deployed().then(function(instance) {
      electionInstance = instance;
      return electionInstance.vote(99, { from: accounts[1] });
    }).then(assert.fail).catch(function(error) {
      assert(error.message.indexOf('revert') >= 0, ""error message must contain revert"");
      return electionInstance.candidates(1);
    }).then(function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, ""candidate 1 did not receive any votes"");
      return electionInstance.candidates(2);
    }).then(function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 0, ""candidate 2 did not receive any votes"");
    });
  }"
55720-1.sol,question,"function(instance) {
      electionInstance = instance;
      return electionInstance.vote(99, { from: accounts[1] });
    }"
55720-1.sol,question,"function(error) {
      assert(error.message.indexOf('revert') >= 0, ""error message must contain revert"");
      return electionInstance.candidates(1);
    }"
55720-1.sol,question,"function(candidate1) {
      var voteCount = candidate1[2];
      assert.equal(voteCount, 1, ""candidate 1 did not receive any votes"");
      return electionInstance.candidates(2);
    }"
55720-1.sol,question,"function(candidate2) {
      var voteCount = candidate2[2];
      assert.equal(voteCount, 0, ""candidate 2 did not receive any votes"");
    }"
55720-1.sol,question,"function(candidate) {
      var VoteCount = candidate[2];
      assert.equal(voteCount, 1, ""accepts first vote"");
      
      return electionInstance.vote(candidateId, { from: accounts[1] });
    }"
11454-0.sol,question,"function(error, result) {
   if(!error) {
      for (i=0; i<result.length; ++i) {
        var block = web3.eth.getBlock(i, true);
        block.transactions.forEach( function(e) {

            console.log(""  tx hash          : "" + e.hash + ""\n""
             + ""   nonce           : "" + e.nonce + ""\n""
             + ""   blockHash       : "" + e.blockHash + ""\n""
             + ""   blockNumber     : "" + e.blockNumber + ""\n""
             + ""   transactionIndex: "" + e.transactionIndex + ""\n""
             + ""   from            : "" + e.from + ""\n"" 
             + ""   to              : "" + e.to + ""\n""
             + ""   value           : "" + e.value + ""\n""
             + ""   time            : "" + block.timestamp + "" "" + new Date(block.timestamp * 1000).toGMTString() + ""\n""
             + ""   gasPrice        : "" + e.gasPrice + ""\n""
             + ""   gas             : "" + e.gas + ""\n""
             + ""   input           : "" + web3.toAscii(e.input))+""\n""; 

      })
  }
   }
   else {
      console.log('Error: '+error);
   }
}"
11454-0.sol,question,"function(e) {

            console.log(""  tx hash          : "" + e.hash + ""\n""
             + ""   nonce           : "" + e.nonce + ""\n""
             + ""   blockHash       : "" + e.blockHash + ""\n""
             + ""   blockNumber     : "" + e.blockNumber + ""\n""
             + ""   transactionIndex: "" + e.transactionIndex + ""\n""
             + ""   from            : "" + e.from + ""\n"" 
             + ""   to              : "" + e.to + ""\n""
             + ""   value           : "" + e.value + ""\n""
             + ""   time            : "" + block.timestamp + "" "" + new Date(block.timestamp * 1000).toGMTString() + ""\n""
             + ""   gasPrice        : "" + e.gasPrice + ""\n""
             + ""   gas             : "" + e.gas + ""\n""
             + ""   input           : "" + web3.toAscii(e.input))+""\n""; 

      }"
66507-0.sol,question,"function() {

  App.contracts.Bidder.deployed().then(function(instance) {
    return instance.addBid(1, 10, 1, { from: address });
"
66507-0.sol,question,"function(instance) {
    return instance.addBid(1, 10, 1, { from: address });
"
45781-1.sol,question,"function(err, result){
  alert(result);
}"
56085-2.sol,question,"function(accounts) {

    it(""any C level address can open the contract for applications"", async () => {
        const OPCToken = await OPCToken.deployed(); 
    });
}"
47350-1.sol,question,"function() {
       Coursetro.amountOfenergy('0xbacbc6e824272c7c501d930d8bb2a9e4d1a80312', function(error, result) {
           if (!error) {
               $(""#instructor"").html(result[0])+' ('+result[1]+')');
               console.log(result);
           } else
                console.log(error);
       });

       }"
47350-1.sol,question,"function(error, result) {
           if (!error) {
               $(""#instructor"").html(result[0])+' ('+result[1]+')');
               console.log(result);
           } else
                console.log(error);
       }"
57880-1.sol,question,"function temp (){
     var etherAmount = web3.toBigNumber(0.1);
     var weiValue = web3.toWei(etherAmount,'ether');
     console.log('weiValue ->  '+weiValue);
     Student.getStudent(hashCode,{from:web3.eth.accounts[0],gas:'195253', value:weiValue}, function(error, result){
        if(!error)
        {
            console.log('result in callback  -> ' + result);
        }
        else
        console.error(error);
    });
}"
66792-0.sol,question,"function __callback(bytes32 _queryId, string _result, bytes _proof)
{
    if (msg.sender != oraclize_cbAddress()) throw;

    if (oraclize_randomDS_proofVerify__returnCode(_queryId, _result, _proof) != 0) {
        

    } else {
        
        uint random = uint(sha3(_result));
        myNumber++;
    }
}"
59528-0.sol,question,"function(error, events){ console.log(""error:"", error); }"
31384-0.sol,question,"function() {
    MyWallet.deployed().then(function(instance){

      return instance.sendTransaction({from: account, to: instance.address, value: web3.toWei(5, 'ether')});

    }).then(function(result) {
      App.basicInfoUpdate();
    });
  }"
31384-0.sol,question,"function(instance){

      return instance.sendTransaction({from: account, to: instance.address, value: web3.toWei(5, 'ether')});

    }"
31384-0.sol,question,"function(result) {
      App.basicInfoUpdate();
    }"
46154-0.sol,question,"function(deployer) {
    deployer.then(async () => {
        await deployer.deploy(string_lib);
        await deployer.deploy(safemath_lib);
    });
    deployer.deploy(PublishService_contract);
    deployer.link(string_lib, PublishService_contract);
    deployer.link(safemath_lib, PublishService_contract);
}"
78737-0.sol,question,"function(error, result){ 
  if (!error) {
    console.log(result.blockNumber)
  }
}"
58986-0.sol,question,"function(err,block){
const gasLimit = block.gasLimit;
console.log('gas limit:',gasLimit);
prkey=""0xDE9EAD9D7DE97A3F94D66F9D8D7BF437AA76A28D4A13202B446D48AB1979DBDB"";
data = contract.methods.transferFrom(""0x410E6a1be27424091ABb15aA096D492958fD55f1"",""0xf17f52151EbEF6C7334FAD080c5704D77216b732"",""12"").encodeABI();
console.log(""data"",data);

    console.log('gasPrice:',gasPrice);

    console.log(""contractAddress"",contractAddress);
    var tx = {
    from:""0x410E6a1be27424091ABb15aA096D492958fD55f1"",
    to:contractAddress,
    data:data,
    gasPrice: web3.utils.toHex(4200000000),
    gasLimit: web3.utils.toHex(4300000),
    };
    web3.eth.accounts.signTransaction(tx,prkey).then(tx => {
            console.log('Result++: ', tx);
            var raw = tx.rawTransaction;
            web3.eth.sendSignedTransaction(raw).on('receipt', res => {
                    console.log('鎿嶄綔鎴愬姛');
            }).on('error', err => {
                    console.log(err);
            });
    }).then(receipt => console.log(""Transaction succeeded"", receipt)).catch(error => console.error(error))
}"
12117-2.sol,question,"function( _erro,_respo){
  if(_erro){
    console.log(""Error is ""+_erro)
  }
  else{
    console.log(""Transaction is=""+_respo);
   return res.json({""success"":""true"",""data"":[{transactionId:_respo}]});
}
}"
29248-2.sol,question,"function(hash){
            console.log(""Uploaded :"" , hash);
        }"
46197-0.sol,question,"function(error, res){
if(!error) {
var areWeAllowed = res
console.log(""Are we allowed to vote? : "" + areWeAllowed)
}
}"
57484-2.sol,question,"function(event) {
  event.preventDefault();

  var petId = parseInt($(event.target).data('id'));

  var unadoptionInstance;

  web3.eth.getAccounts(function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    App.contracts.Adoption.deployed().then(function(instance) {
      unadoptionInstance = instance;

      
      return unadoptionInstance.unAdopt(petId, {from: account});
    }).then(function(result) {
      return App.unmarkAdopted();
    }).catch(function(err) {
      console.log(err.message);
    });
  });
}"
57484-2.sol,question,"function(error, accounts) {
    if (error) {
      console.log(error);
    }

    var account = accounts[0];

    App.contracts.Adoption.deployed().then(function(instance) {
      unadoptionInstance = instance;

      
      return unadoptionInstance.unAdopt(petId, {from: account});
    }).then(function(result) {
      return App.unmarkAdopted();
    }).catch(function(err) {
      console.log(err.message);
    });
  }"
57484-2.sol,question,"function(instance) {
      unadoptionInstance = instance;

      
      return unadoptionInstance.unAdopt(petId, {from: account});
    }"
57484-2.sol,question,"function(result) {
      return App.unmarkAdopted();
    }"
57484-2.sol,question,"function(adopters, account) {
    var unadoptionInstance;


    App.contracts.Adoption.deployed().then(function(instance) {
      unadoptionInstance = instance;

      return unadoptionInstance.getAdopters.call();
    }).then(function(adopters) {
      for (i = 0; i < adopters.length; i++) {
        if (adopters[i] == '0x0000000000000000000000000000000000000000') {
          $('.panel-pet').eq(i).find('.unbtn-adopt').text('appliedUnadoped').attr('enable', false);
        }
      }
    }).catch(function(err) {
      console.log(err.message);
    });
  }"
57484-2.sol,question,"function(adopters) {
      for (i = 0; i < adopters.length; i++) {
        if (adopters[i] == '0x0000000000000000000000000000000000000000') {
          $('.panel-pet').eq(i).find('.unbtn-adopt').text('appliedUnadoped').attr('enable', false);
        }
      }
    }"
42670-2.sol,question,"function(accounts) {
    it(""should put 10000 wei in the first account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance){
            startingBalance = balance;
            return pay.pay(accounts[1], 2500, {from: accounts[0]});
        }).then(function() {
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance) {
            assert.equal(startingBalance, balance);
        })
    });
}"
42670-2.sol,question,"function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance){
            startingBalance = balance;
            return pay.pay(accounts[1], 2500, {from: accounts[0]});
        }).then(function() {
            return pay.getBalance.call(accounts[0]);
        }).then(function(balance) {
            assert.equal(startingBalance, balance);
        })
    }"
42670-2.sol,question,"function(instance) {
            pay = instance;
            
            return pay.getBalance.call(accounts[0]);
        }"
42670-2.sol,question,"function(balance){
            startingBalance = balance;
            return pay.pay(accounts[1], 2500, {from: accounts[0]});
        }"
42670-2.sol,question,"function(balance) {
            assert.equal(startingBalance, balance);
        }"
10473-2.sol,question,"function MappingCombiner(mapper storage map1, mapper storage map2){ 
                         ^-----------------^"
40417-0.sol,question,"function example () private{
    address[] tempList = List;
    for(uint k = 0; k < tempList.length; k++){
            Struct storage val = mapping[tempList[k]];
            pendingWithdrawals[tempList[k]] = (val.value);
    }
}"
43991-2.sol,question,"function (result){
  var eventInfo = result
  
}"
78509-0.sol,question,"function() {
    return deployer.deploy(Two, One.address)
  }"
76652-0.sol,question,"function(result) {
        
        return browserHistory.push('/dashboard')
      }"
36921-2.sol,question,"function(deployer) {

  deployer.deploy(DevContest, ""0xf7B098298f7C69Fc14610bf71d5e02c60792894C"", 4942901, 4977461, {gas:7987299});
"
41841-1.sol,question,"function(deployer, network, accounts) {
    const openingTime = Date.now()/1000|0 + 120;
    const closingTime = openingTime + (3600 * 1 * 1); 
    const ethRate = new web3.BigNumber(100);
    const wallet = accounts[0];
    const cap = 100000000000000000000;
    const goal = 200000000000000000000;

deployer.deploy(SampleCrowdsale, openingTime, closingTime, ethRate, wallet, cap, goal);
}"
59002-1.sol,question,"function(deployer){
    const numberOfDays = 1;
    const goal = web3.toWei(10, 'ether');   
deployer.deploy(Crowdfunding, numberOfDays, goal);
}"
12668-2.sol,question,"function(req, res){
    var rawString = req.user.customData;
    var stringJson = JSON.stringify(rawString);
    var customData = JSON.parse(stringJson);
    var web3 = new Web3();

    web3.setProvider(new web3.providers.HttpProvider(customData.ethereum_provider));
    var address = req.body.address;

    
    var MyContract = web3.eth.contract(abi.abiOrganisationObject).at(address);
    var details = MyContract.details();
    console.log(details);
    res.end(details).status(200);
}"
68391-0.sol,question,"function(error, result) { 
        TOTAL_COUNT++; 
      }"
84052-0.sol,question,"function getPayment() payable external{
    require(msg.value=='put here your minimal payment');
    owner.transfer(msg.value);
}"
69896-1.sol,question,"function(accounts) {
    var tokenSaleInstance;

    it('initializes the contract with the correct values', function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        })..then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
        });
    });
}"
69896-1.sol,question,"function() {
        return DappTokenSale.deployed().then(function(instance) {
            tokenSaleInstance = instance;
            return tokenSaleInstance.address
        }).then(function(address) {
            assert.notEqual(address, 0x0, ""has contract address"");
            return tokenSaleInstance.tokenContract();
        })..then(function(address) {
            assert.notEqual(address, 0x0, ""has token contract address"");
        });
    }"
26249-1.sol,question,"function(error, tx) {
if(error != null)
    return;
console.log(tx);
}"
3100-1.sol,question,"function contribute() public      
    {
        contributions.push(
            Contribution({
                amount: msg.value,
                contributor: msg.sender
            }) 
        );
        totalRaised += msg.value;             
    }"
17794-1.sol,question,"function() {
      var amount = 5;
      var meta;
      var account_two = accounts[1];
      var account_three = accounts[2];

      return MetaCoin.deployed().then(function(instance) {
        meta = instance;
        return instance.sendCoin.call(account_three, amount, {from: account_two});
    }).then(function(balance) {
      return meta.getBalance.call(account_three);
    }).then(function(balance) {
      assert.equal(balance.toNumber(), amount, ""Amount equaled 5 as expected"");
    });
  }"
17794-1.sol,question,"function(instance) {
        meta = instance;
        return instance.sendCoin.call(account_three, amount, {from: account_two});
    }"
17794-1.sol,question,"function(balance) {
      return meta.getBalance.call(account_three);
    }"
79087-1.sol,question,"function(err, result) {
    if(err) {
        console.log(err, 'err');
    } else {
        console.log(result, 'result');
    }
}"
34829-0.sol,question,"function(error, result) {
     if (!error) {
        console.log(""Coin transfer: "" + result.args.amount +
        "" coins were sent from "" + result.args.from +
        "" to "" + result.args.to + ""."");
        console.log(""Balances now:\n"" +
        ""Sender: "" + Coin.balances.call(result.args.from) +
        ""Receiver: "" + Coin.balances.call(result.args.to));
     }
}"
35348-3.sol,question,"function() {
    var newOperatorAddress;
    var pausedState = true;
    var initialDeposit = parseInt(document.getElementById(""minDeposit"").value);
    var _regulator = regulator;
    var tollboothoperatorContract = web3.eth.contract([{""constant"":true,""inputs"":[{""name"":"""",""type"":""bytes32""}],""name"":""entryBooths"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""bytes32""}],""name"":""payments"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""tollBooth"",""type"":""address""}],""name"":""removeTollBooth"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""newOwner"",""type"":""address""}],""name"":""setOwner"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""hashedSecret"",""type"":""bytes32""},{""name"":""price"",""type"":""uint256""},{""name"":""exitAddress"",""type"":""address""}],""name"":""executeExit"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""newState"",""type"":""bool""}],""name"":""setPaused"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""entryBooth"",""type"":""address""},{""name"":""exitBooth"",""type"":""address""},{""name"":""count"",""type"":""uint256""}],""name"":""clearSomePendingPayments"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""index"",""type"":""uint256""},{""name"":""routeHash"",""type"":""bytes32""}],""name"":""remove"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""tollBooth"",""type"":""address""}],""name"":""addTollBooth"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""bytes32""}],""name"":""pendingTransactionExitBooths"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""vehicleType"",""type"":""uint256""},{""name"":""mult"",""type"":""uint256""}],""name"":""setMultiplier"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""exitSecretClear"",""type"":""bytes32""}],""name"":""reportExitRoad"",""outputs"":[{""name"":""status"",""type"":""uint256""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""bytes32""},{""name"":"""",""type"":""uint256""}],""name"":""pendingTransactionInformation"",""outputs"":[{""name"":"""",""type"":""bytes32""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""entryBooth"",""type"":""address""},{""name"":""exitBooth"",""type"":""address""}],""name"":""getRoutePrice"",""outputs"":[{""name"":""priceWeis"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""tollBooth"",""type"":""address""}],""name"":""isTollBooth"",""outputs"":[{""name"":""isIndeed"",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""secret"",""type"":""bytes32""}],""name"":""hashSecret"",""outputs"":[{""name"":""hashed"",""type"":""bytes32""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""vehicleType"",""type"":""uint256""}],""name"":""getMult"",""outputs"":[{""name"":""mult"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""bytes32""}],""name"":""paymentAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""exitSecretHashed"",""type"":""bytes32""}],""name"":""getVehicleEntry"",""outputs"":[{""name"":""vehicle"",""type"":""address""},{""name"":""entryBooth"",""type"":""address""},{""name"":""depositedWeis"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""bytes32""}],""name"":""pendingTransactions"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getOwner"",""outputs"":[{""name"":""outputOwner"",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""collectedFees"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""entryBooth"",""type"":""address""},{""name"":""exitSecretHashed"",""type"":""bytes32""}],""name"":""enterRoad"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":true,""stateMutability"":""payable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getCollectedFeesAmount"",""outputs"":[{""name"":""amount"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""vehicleAddress"",""type"":""address""}],""name"":""getTypeOfVehicle"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""entryBooth"",""type"":""address""},{""name"":""exitBooth"",""type"":""address""},{""name"":""amount"",""type"":""uint256""}],""name"":""oracleSetFee"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""vehicleType"",""type"":""uint256""}],""name"":""getMultiplier"",""outputs"":[{""name"":""mult"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""isPaused"",""outputs"":[{""name"":""isIndeed"",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getDeposit"",""outputs"":[{""name"":""weis"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""entryBooth"",""type"":""address""},{""name"":""exitBooth"",""type"":""address""}],""name"":""getPendingPaymentCount"",""outputs"":[{""name"":""count"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""withdrawCollectedFees"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""entryBooth"",""type"":""address""},{""name"":""exitBooth"",""type"":""address""},{""name"":""priceWeis"",""type"":""uint256""}],""name"":""setRoutePrice"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""entry"",""type"":""address""},{""name"":""exit"",""type"":""address""}],""name"":""routeHashHelper"",""outputs"":[{""name"":"""",""type"":""bytes32""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""depositWeis"",""type"":""uint256""}],""name"":""setDeposit"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""inputs"":[{""name"":""pausedState"",""type"":""bool""},{""name"":""initialDeposit"",""type"":""uint256""},{""name"":""_regulator"",""type"":""address""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""vehicle"",""type"":""address""},{""indexed"":false,""name"":""entryBooth"",""type"":""address""},{""indexed"":false,""name"":""exitSecretHashed"",""type"":""bytes32""},{""indexed"":false,""name"":""depositedWeis"",""type"":""uint256""}],""name"":""LogRoadEntered"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""exitBooth"",""type"":""address""},{""indexed"":false,""name"":""exitSecretHashed"",""type"":""bytes32""},{""indexed"":false,""name"":""finalFee"",""type"":""uint256""},{""indexed"":false,""name"":""refundWeis"",""type"":""uint256""}],""name"":""LogRoadExited"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""exitSecretHashed"",""type"":""bytes32""},{""indexed"":false,""name"":""entryBooth"",""type"":""address""},{""indexed"":false,""name"":""exitBooth"",""type"":""address""}],""name"":""LogPendingPayment"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""}],""name"":""LogFeesCollected"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""sender"",""type"":""address""},{""indexed"":false,""name"":""entryBooth"",""type"":""address""},{""indexed"":false,""name"":""exitBooth"",""type"":""address""},{""indexed"":false,""name"":""priceWeis"",""type"":""uint256""}],""name"":""LogRoutePriceSet"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""sender"",""type"":""address""},{""indexed"":false,""name"":""tollBooth"",""type"":""address""}],""name"":""LogTollBoothAdded"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""sender"",""type"":""address""},{""indexed"":false,""name"":""tollBooth"",""type"":""address""}],""name"":""LogTollBoothRemoved"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""sender"",""type"":""address""},{""indexed"":false,""name"":""vehicleType"",""type"":""uint256""},{""indexed"":false,""name"":""multiplier"",""type"":""uint256""}],""name"":""LogMultiplierSet"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""sender"",""type"":""address""},{""indexed"":false,""name"":""depositWeis"",""type"":""uint256""}],""name"":""LogDepositSet"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""sender"",""type"":""address""},{""indexed"":false,""name"":""newPausedState"",""type"":""bool""}],""name"":""LogPausedSet"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""previousOwner"",""type"":""address""},{""indexed"":false,""name"":""newOwner"",""type"":""address""}],""name"":""LogOwnerSet"",""type"":""event""}]);
    var tollboothoperator = tollboothoperatorContract.new(pausedState,initialDeposit,_regulator,{
     from: web3.eth.accounts[0], 
     data: '', 
     gas: '4700000'
   }, function (e, )}"
19140-2.sol,question,"function(deployer) {
  deployer.deploy(ERC20);
  
  
  

  
}"
71331-1.sol,question,"function(error, hash){
        alert(error);
    }"
20860-0.sol,question,"function(err, blockchain) {}"
79116-2.sol,question,"function startGame(address requiredPlayer2){
    
}"
42893-3.sol,question,"function(accounts) {
    it(""should put money in the first account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function(result) {
            gasUsed = result.receipt.gasUsed;
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance;
            assert.equal(endingBalance.sub(startingBalance).toNumber(), payAmount);
        })
    });

    it(""should pay gas costs from the second account"", function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[0]);
        }).then(function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function(result) {
            gasUsed = result.receipt.gasUsed;
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[0]);
        }).then(function(balance) {
            endingBalance = balance;
            assert.equal(startingBalance.sub(endingBalance).toNumber(), payAmount + gasSpent);
        })
    });
}"
42893-3.sol,question,"function() {
        return Pay.deployed().then(function(instance) {
            pay = instance;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }).then(function(result) {
            gasUsed = result.receipt.gasUsed;
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }).then(function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[1]);
        }).then(function(balance) {
            endingBalance = balance;
            assert.equal(endingBalance.sub(startingBalance).toNumber(), payAmount);
        })
    }"
42893-3.sol,question,"function(balance){
            startingBalance = balance;
            gasPrice = 200000;
            payAmount = 2500000;
            return pay.pay(accounts[1], {from: accounts[0], value: payAmount, gasPrice: gasPrice });
        }"
42893-3.sol,question,"function(result) {
            gasUsed = result.receipt.gasUsed;
            return pay.pay.estimateGas(accounts[1], {from: accounts[0], value: payAmount });
        }"
42893-3.sol,question,"function(gasCost) {
            gasSpent = gasCost * gasPrice;
            return web3.eth.getBalance(accounts[1]);
        }"
42893-3.sol,question,"function(balance) {
            endingBalance = balance;
            assert.equal(endingBalance.sub(startingBalance).toNumber(), payAmount);
        }"
13988-0.sol,question,"function usersRegister(string _id, string _password){
    Equipment e = equipments[msg.sender];
    e.users[e.usersNum++] = User({id: _id, password: _password, registerTime: now});
}"
60068-0.sol,question,"function token(uint _totalSupply) 
{
totalSupply = _totalSupply;
remaining = 0;
}"
60068-0.sol,question,"function ()  payable
{
assert(remaining < totalSupply);
uint noOfTokens = div(msg.value,price); 
assert(noOfTokens < sub(totalSupply,remaining)); 
add(investors[msg.sender],noOfTokens);
remaining = add(remaining,noOfTokens);
transfer(msg.sender, noOfTokens);

}"
60068-0.sol,question,"function setPrice(uint _price)
{ 
price = _price;
}"
49979-1.sol,question,"function test_initial_creation() public{
    A a = A(DeployedAddresses.A());
    B b = B(DeployedAddresses.B());

    a.init(address(b));

    address[] memory adr;
    uint[] memory price;
    (adr, price) = a.getInfo();

    Assert.equal(adr.length, 6, ""Initial Info length should be 6"");
}"
73475-0.sol,question,"function safeTransferFrom(
    address _from,
    address _to,
    uint256 _tokenId,
    bytes calldata _data
  )
   external
  {
    _safeTransferFrom(_from, _to, _tokenId, _data);
  }"
55992-1.sol,question,"function(){
    web3.eth.getCoinbase((err, res) => {
      if (err === null) {
        App.account = res;
        $(""#account"").html(""Your account: "" + res);
      }
    });
    console.log(App.account); 

    return App.balanceOf();
  }"
38904-0.sol,question,"function(deployer, accounts) {
  deployer.deploy(Migrations);
  deployer.deploy(ERC20Token, 1000, ""Test Coin"", ""TCT"");
  deployer.deploy(ERC20Crowdsale, THERE SHOULD BE TOKEN ADDRESS);
}"
77587-0.sol,question,"function extractConstructorWithArguments()
{
        if (item.type === ""constructor"")
                constrObject.push(item.inputs)

 }"
18416-0.sol,question,"function(err, result) {
    if (err) {
      console.log(err)
      return undefined
    } else {
      return result
    }
  }"
8537-1.sol,question,"function(done) {
var my_contract = My15.deployed();
var unit = ""finney"";
const user_6_initialBalance = web3.eth.getBalance(user_6);
var  user_6_gas_cost = 0;

return my_contract.withdrawAll ({from: user_6});
    .then(function(tx_id){

        user_6_gas_cost = web3.eth.getTransactionReceipt(tx_id).gasUsed * web3.eth.gasPrice;

        const user_6_finalBalance = web3.eth.getBalance(user_6); 
        const withdrawn = web3.toWei(12, unit);
        const recieved = user_6_finalBalance - user_6_initialBalance;
        const diff = withdrawn - recieved;

        console.log('gasPrice: ', web3.eth.gasPrice.toString(10)); 
        console.log('withdrawn: ', web3.fromWei(withdrawn, unit));
        console.log('recieved: ', web3.fromWei(recieved, unit));
        console.log(""gas cost: "", web3.fromWei(user_6_gas_cost, unit));
        console.log('diff: ', web3.fromWei(diff, unit));

    }).then(function(){
        done();
    }).catch(done);

}"
8537-1.sol,question,"function(tx_id){

        user_6_gas_cost = web3.eth.getTransactionReceipt(tx_id).gasUsed * web3.eth.gasPrice;

        const user_6_finalBalance = web3.eth.getBalance(user_6); 
        const withdrawn = web3.toWei(12, unit);
        const recieved = user_6_finalBalance - user_6_initialBalance;
        const diff = withdrawn - recieved;

        console.log('gasPrice: ', web3.eth.gasPrice.toString(10)); 
        console.log('withdrawn: ', web3.fromWei(withdrawn, unit));
        console.log('recieved: ', web3.fromWei(recieved, unit));
        console.log(""gas cost: "", web3.fromWei(user_6_gas_cost, unit));
        console.log('diff: ', web3.fromWei(diff, unit));

    }"
44525-6.sol,question,"function getClaims()
{
    name = document.getElementById('searchNameAccused').value;
    var number = Shitlist.checkClaimExists.call(name);
    var i;
    for (i = 1; i <= number; i++){
        var accusedName = $(""<div/>"");
        accusedName.text('Claim: ' + Shitlist.getClaimDetails.call(name, i));
        $('#numberofClaims').append(accusedName);

        

    }

}"
44525-6.sol,question,"function(){
  $('#btnCheckName').click(function() {
    name = document.getElementById('searchNameAccused').value;
    Shitlist.deployed().then(function(
  )
})}"
44525-6.sol,question,"function() {
    name = document.getElementById('searchNameAccused').value;
    Shitlist.deployed().then(function(
  )
}"
65801-0.sol,question,"function deliverPrizes(address payable winner) public onlyOwner{ 
    winner.transfer(address(this).balance);
}"
83081-0.sol,question,"function requestEthereumPrice(address _address) 
    public
    onlyOwner
  {
    
    Chainlink.Request memory req = buildChainlinkRequest(stringToBytes32(JOB_ID), address(this), this.fulfill.selector);
    
    req.add(""get"", ""https:
    
    req.add(""path"", ""USD"");
    
    req.addInt(""times"", 100);
    

    sendChainlinkRequestTo(_address, req, ORACLE_PAYMENT);
  }"
55156-0.sol,question,"function transferTokens(){
    

    
    var abi;

    
    var tokenAddr;

    
    var tokenContract = new web3.eth.Contract(abi, tokenAddr);

    
    var sender;

    
    var tokenRecipient = document.getElementById('tokenRecipient').value;

    
    var tokenAmount;

    
    var count = web3.eth.getTransactionCount(sender);

    
    var gasPriceGwei = 30;

    var gasLimit = 400000; 

    
    var rawTransaction = {
        ""from"": sender,
        ""nonce"": ""0x"" + count.toString(16), 
        ""gasPrice"": gasPriceGwei,
        ""gasLimit"": gasLimit,
        ""to"": tokenRecipient,
        ""value"": ""0x0"",
        ""data"": tokenContract.methods.transfer(tokenRecipient, tokenAmount).encodeABI(), 
        ""chainId"": 0x04 
    };

    
    var privKey = new EthJS.Buffer.Buffer('[my_privKey]', 'hex');

    var tx = new EthJS.Tx(rawTransaction); 
    tx.sign(privKey);
    var serializedTx = tx.serialize();

    
    console.log(`Attempting to send signed tx:  ${serializedTx.toString('hex')}`);
    var receipt =  web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));
    console.log(`Receipt info:  ${JSON.stringify(receipt, null, '\t')}`);

}"
27181-0.sol,question,"function setFee(uint _fee){
    ^
Spanning multiple lines."
12630-1.sol,question,"function(accounts){

        it('should test that the Test contract can be deployed', function(done){
            Test.new().then(function(instance){
                assert.ok(instance.address);
            }).then(done);
        });

        it('should test that the Test contract is deployed by the correct address (default)', function(done){
            Test.new().then(function(instance){
                var test = instance;
                test.getOwner.call().then(function(owner){
                    assert.equal(owner, accounts[0], 'Test owned by the wrong address');
                }).then(done);
            });
        });

        it('should test that the Test contract is deployed by the correct address (using from)', function(done){
            Test.new({from: accounts[0]}).then(function(instance){
                var test = instance;
                test.getOwner.call().then(function(owner){
                    assert.equal(owner, accounts[0], 'Test owned by the wrong address');
                }).then(done);
            });
        });
"
12630-1.sol,question,"function(done){
            Test.new().then(function(instance){
                assert.ok(instance.address);
            }).then(done);
        }"
12630-1.sol,question,"function(instance){
                assert.ok(instance.address);
            }"
12630-1.sol,question,"function(owner){
                    assert.equal(owner, accounts[0], 'Test owned by the wrong address');
                }"
78767-0.sol,question,"function(event) {
    event.forEach(element => {
      
    });
  }"
76836-0.sol,question,"function GetAndShowUserBalances(description, userName, userAddr) 
{
  let balanceTokens, balanceEth 
  balanceTokens= await exchange.balanceOf(token.address, userAddr); 
  balanceEth  = await exchange.balanceOf(ETHER_ADDRESS, userAddr); 
  console.log(""ShowUserBalances: "" + description + "" "" + userName + 
                 "" Ether="" + tokensRev(balanceEth) + 
                 "" Tokens="" + tokensRev(balanceTokens)); 
   var result = {}; 
   result.Ether = balanceEth; 
   result.Tokens = balanceTokens; 
         console.log('============================================ START result ')
         console.log(JSON.stringify(result)) 
         console.log('============================================ END  result ')

   return result; 

}"
57598-1.sol,question,"function(err, transactionHash){   
            if(!err){
                console.log(transactionHash);
            }
            else{ alert(err); }
        }"
57598-1.sol,question,"function give_vote(){ 
            cont.delegate.sendTransaction(web3.eth.accounts[2], {from:coinbase, gas:250000}, function (err, trans){
                cont.vote.sendTransaction(2, {from:coinbase, gas:250000}, function(err,   transactionHash){   
                if(!err){
                    console.log(transactionHash);
                }
                else{ alert(err); }
                });
            });

        }"
57598-1.sol,question,"function (err, trans){
                cont.vote.sendTransaction(2, {from:coinbase, gas:250000}, function(err,   transactionHash){   
                if(!err){
                    console.log(transactionHash);
                }
                else{ alert(err); }
                });
            }"
57598-1.sol,question,"function view(){
            cont.winnerName.call(function(err, result){
                console.log(result);  
            });
            cont.getCount.call(0, function(err, res){
                console.log(res);  
            });
        }"
41023-0.sol,question,"function(instance) {
  Singleton = instance

  let tokenAddress
  await Singleton.tokens(0).then(_ => {
    tokenAddress = _
  })
  return ManyOfMe.at(tokenAddress)
}"
71056-1.sol,question,"function call_TestFunc(){
  accounts = await web3.eth.getAccounts();
  const gas = await contract.deploy({data: bytecode, arguments:[1,1]}).estimateGas();
  const response = await contract.deploy({data:bytecode, arguments: [1,1]}).send({
    from: accounts[0],
    gas: gas + 1
  });
  console.log(response.jsonInterface);
  const txHash = await response.TestFunc.sendTransaction([1,2], {from:accounts[0]});
  console.log(txHash);
}"
9609-1.sol,question,"function(err, hash) {
    if (err) {
        console.error(""Error sending raw transaction"");
        return ws.send(JSON.stringify({
            err: err,
            hash: hash
        }));
    }
    ...
"
60043-1.sol,question,"function(error, result) {
            if (error) {
              console.log('error: ' + error);
            }
            else {
              console.log('result: ' + JSON.stringify(result));
            }
          }"
78730-2.sol,question,"function(req, res, next) { 
        console.log('In crud::buyToken::::::'); 
        var timeStamp = Date.now();
        
        var sender = variables.sender_1;
         var pass = variables.pass;

      contractInstance.methods.buyToken(""15"").send({
            
         from: sender,
         gas: 470000,
         gasPrice:0
        },function(e,result){
                if (e) {
                console.error(""Got error for doing the function call buyToken:::::::::"");
                console.error(e);
                return;
                
            } else if (result) {
                console.log('Successfully buyToken.');
                console.log('Transaction hash : ' + result);
                res.json(result)
            } else {
                console.log(""Please Contact Administrator...It should never come here."")
            }
        });


    }"
78730-2.sol,question,"function(e,result){
                if (e) {
                console.error(""Got error for doing the function call buyToken:::::::::"");
                console.error(e);
                return;
                
            } else if (result) {
                console.log('Successfully buyToken.');
                console.log('Transaction hash : ' + result);
                res.json(result)
            } else {
                console.log(""Please Contact Administrator...It should never come here."")
            }
        }"
56834-0.sol,question,"function(err,res) {
                if (err) {
                    console.log(""newOrg sendTransaction failed."");
                    console.log(err);
                } else {
                    console.log(""newOrg added"");
                }
            }"
24570-3.sol,question,"function(error, gas) {
    console.log(""Gas estimate:"" + gas);
    contract.methods.makeDatum(""test"").send({from: defaultAccount, gas:gas, value: 50000}, function(error, result) {
        console.log(result);
        console.log(""error:"" + JSON.stringify(error));
    });
}"
24570-3.sol,question,"function(error, result) {
        console.log(result);
        console.log(""error:"" + JSON.stringify(error));
    }"
76350-1.sol,question,"function addEmployee(address payable employeeWallet) onlyOwner external
{
    emp[emp.length-1] = employeeWallet;
}"
2259-0-0.sol,answer,"function doit() {
        C.doit();
    }"
47932-1-4.sol,answer,"function Migrations() public {
  ^ (Relevant source part starts here and spans across multiple lines).

Writing artifacts to ./build/contracts

Skipping instrumentation of  ./coverageEnv/contracts/Migrations.sol
Running: truffle compile  
(this can take a few seconds)...
Compiling ./contracts/Migrations.sol...

Compilation warnings encountered:

/Users/bordaloj/WIP/Batcave/Ethereum/solcover/coverageEnv/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use ""constructor(...) { ... }"" instead.
  function Migrations() public {
  ^ (Relevant source part starts here and spans across multiple lines).

Writing artifacts to ./build/contracts

Launched testrpc on port 8555
Running: truffle test  
(this can take a few seconds)...
Using network 'development'.



  0 passing (0ms)

----------|----------|----------|----------|----------|----------------|
File      |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
----------|----------|----------|----------|----------|----------------|
----------|----------|----------|----------|----------|----------------|
All files |      100 |      100 |      100 |      100 |                |
----------|----------|----------|----------|----------|----------------|

Istanbul coverage reports generated
Cleaning up..."
11030-0-1.sol,answer,function construct_me(data storage self){  self.n[0].own = 0; self.n[0].next = 0; self.n[0].prev = 0; self.head = 0; self.insert_number = self.size = 1;  self.buffer_size = 100; }
78333-0-1.sol,answer,"function insertNode(Graph storage g, bytes32 nodeId) internal {
        g.nodeSet.insert(nodeId);
    }"
78333-0-1.sol,answer,"function removeNode(Graph storage g, bytes32 nodeId) internal {
        NodeStruct storage n = g.nodeStructs[nodeId];
        require(n.sourceEdgeSet.count() == 0, ""Graph: Remove source edges first."");
        require(n.targetEdgeSet.count() == 0, ""Graph: Remove target edges first."");
        g.nodeSet.remove(nodeId);
        delete g.nodeStructs[nodeId];
    }"
78333-0-1.sol,answer,"function updateEdge(Graph storage g, bytes32 sourceId, bytes32 targetId, uint weight) internal {
        bytes32 edgeId = keccak256(abi.encodePacked(sourceId, targetId));
        require(g.edgeSet.exists(edgeId), ""Graph: Unknown edge."");
        EdgeStruct storage e = g.edgeStructs[edgeId];
        e.weight = weight;
    }"
78333-0-1.sol,answer,"function removeEdge(Graph storage g, bytes32 sourceId, bytes32 targetId) internal {
        bytes32 edgeKey = keccak256(abi.encodePacked(sourceId, targetId));
        g.edgeSet.remove(edgeKey);
        delete g.edgeStructs[edgeKey];
        NodeStruct storage s = g.nodeStructs[sourceId];
        NodeStruct storage t = g.nodeStructs[targetId];
        s.targetEdgeSet.remove(edgeKey);
        t.sourceEdgeSet.remove(edgeKey);
    }"
78333-0-1.sol,answer,"function insertBetween(Graph storage g, bytes32 newNodeId, bytes32 sourceId, bytes32 targetId, uint sourceWeight, uint targetWeight) internal {
        removeEdge(g, sourceId, targetId);
        insertEdge(g, sourceId, newNodeId, sourceWeight);
        insertEdge(g, newNodeId, targetId, targetWeight);
    }"
45290-0-0.sol,answer,"function createNewB() public {
    b = new B();
  }"
74155-0-0.sol,answer,"function (e) {

            console.log(e.message);
    }"
305-0-1.sol,answer,"function f() {
        uint[] memory x = new uint[](1);
        x[0] = 2;
        data = x;
    }"
57666-0-0.sol,answer,"function() {

            if (typeof BrowserSolc == 'undefined') {
                console.log(""You have to load browser-solc.js in the page.  We recommend using a <script> tag."");
                throw new Error();
            }

            const source = ""pragma solidity ^0.4.0; "";          

            BrowserSolc.loadVersion(""soljson-v0.4.24+commit.e67f0147.js"", function(compiler) {

            optimize = 1;
            var result = compiler.compile(source, optimize);
            
            var bytecode = result.contracts[':Greeter'].bytecode;
            
            var abi = result.contracts[':Greeter'].interface;

            var MyContract = web3.eth.contract(JSON.parse(abi));

            var myContractInstance = MyContract.new({
                from:web3.eth.accounts[0],
                data: ""0x""+bytecode, 
                gas: '4700000'}, function(err,)

            });
        }"
57666-0-0.sol,answer,"function(compiler) {

            optimize = 1;
            var result = compiler.compile(source, optimize);
            
            var bytecode = result.contracts[':Greeter'].bytecode;
            
            var abi = result.contracts[':Greeter'].interface;

            var MyContract = web3.eth.contract(JSON.parse(abi));

            var myContractInstance = MyContract.new({
                from:web3.eth.accounts[0],
                data: ""0x""+bytecode, 
                gas: '4700000'}, function(err,)

            }"
72508-1-0.sol,answer,"function () {
    return [
        {
            ""constant"": true,
            ""inputs"": [{""name"": ""_owner"", ""type"": ""address""}],
            ""name"": ""balanceOf"",
            ""outputs"": [{""name"": ""balance"", ""type"": ""uint256""}],
            ""type"": ""function""
        },
        {
            ""constant"": true,
            ""inputs"": [],
            ""name"": ""decimals"",
            ""outputs"": [{""name"": """", ""type"": ""uint8""}],
            ""type"": ""function""
        },
        {
            ""constant"": false,
            ""inputs"": [{""name"": ""_to"", ""type"": ""address""}, {""name"": ""_value"", ""type"": ""uint256""}],
            ""name"": ""transfer"",
            ""outputs"": [{""name"": ""success"", ""type"": ""bool""}],
            ""payable"": false,
            ""stateMutability"": ""nonpayable"",
            ""type"": ""function""
        }
    ];
}"
60238-0-1.sol,answer,"function deploy


    async function setValue (instance, value) {

        return new Promise( (resolve, reject) => {

            instance.setValue.sendTransaction(value, {from: web3.eth.coinbase}, function(err, tx) {
               if(!err) {
                    console.log(""Transaction Hash="" + tx) 
                    resolve();
               } else {
                   console.err(err);
                   reject(err);
               }
            });

        });
    }"
60238-0-1.sol,answer,"function(err, tx) {
               if(!err) {
                    console.log(""Transaction Hash="" + tx) 
                    resolve();
               } else {
                   console.err(err);
                   reject(err);
               }
            }"
60238-0-1.sol,answer,"function getValue (instance) {

        return new Promise( (resolve, reject) => {

            instance.getValue.call(function(err, value) {
               if(!err) {
                    resolve(value);
               } else {
                   console.err(err);
                   reject(err);
               }
            });

        });
    }"
60238-0-1.sol,answer,"function(err, value) {
               if(!err) {
                    resolve(value);
               } else {
                   console.err(err);
                   reject(err);
               }
            }"
42248-0-0.sol,answer,"function() {
  BrowserSolc.loadVersion(""soljson-v0.4.21+commit.dfe3193c.js"", function (compiler) {
    var source = 'pragma solidity ^0.4.20;\n';
    var contract = compiler.compile(source, 0).contracts[':Test'];
    console.log(contract.bytecode);
  });
}"
42248-0-0.sol,answer,"function (compiler) {
    var source = 'pragma solidity ^0.4.20;\n';
    var contract = compiler.compile(source, 0).contracts[':Test'];
    console.log(contract.bytecode);
  }"
66537-0-1.sol,answer,"function calledFunction() public {
        emit callEvent(msg.sender, tx.origin, address(this));
    }"
8700-0-1.sol,answer,"function (deployer, network, accounts) {
  return deployer.deploy(Vote)
    .then(function().then((tx) => {
        console.log(tx);
    });
}"
8263-0-0.sol,answer,"function set (lstore storage self, uint _num) internal {
        self.num = _num;
    }"
8263-0-0.sol,answer,"function set (lstore storage self, uint _num) {
        self.num = _num;
    }"
54504-1-0.sol,answer,"function doIt() {
    AbiInterface myContract = AbiInterface.at(DeployedContractAddress);
    myContract.get(0xfffff);
}"
73848-0-1.sol,answer,"function f() {
    let coinbase = await web3.eth.getCoinbase();

    web3.eth.sendTransaction({
        from: coinbase,
        to: address1,
        value: '20000000000000000'
    }).on('transactionHash', async () => {
        await new web3.eth.Contract(abi).deploy({ data: code }).send({ gas: '1000000', from: address1});   
    });

    web3.eth.sendTransaction({
        from: coinbase,
        to: address2,
        value: '20000000000000000'
    }).on('transactionHash', async () => {
        await new web3.eth.Contract(abi).deploy({ data: code }).send({ gas: '1000000', from: address2});   
    });
}"
22951-0-1.sol,answer,"function addBeneficiary(address addr, uint weight) onlyOwner {
    beneficiaries.push(Beneficiary({
        addr: addr,
        weight: weight
    }));
  }"
40034-0-1.sol,answer,"function ShowResults(event) {
            console.log('Argument 1: ' + event.args._arg1);
            console.log('Argument 2: ' + event.args._arg2);
        }"
56201-0-0.sol,answer,"function removeMember(address targetMember) onlyOwner public {
  require(memberId[targetMember] != 0);

  for (uint i = memberId[targetMember]; i<members.length-1; i++){
    members[i] = members[i+1];
    memberId[members[i].member]--;
  }
  memberId[targetMember] = 0;
  delete members[members.length-1];
  members.length--;
}"
49239-2-0.sol,answer,"function () public payable {
    require(now >= startDate && now <= endDate);
    uint tokens;
    if (now <= bonusEnds) {
        tokens = msg.value * 12000;
    } else {
        tokens = msg.value * 10000;
    }
    balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
    _totalSupply = safeAdd(_totalSupply, tokens);
    emit Transfer(address(0), msg.sender, tokens);
    owner.transfer(msg.value);
}"
12045-0-0.sol,answer,"function __callback(bytes32 myid, string result) {
  if (msg.sender != oraclize_cbAddress()) {throw;}
    randomNum = parseInt(result);"
36698-0-0.sol,answer,"function () {  
if (typeof(web3) === ""undefined"") {
error(""Unable to find web3. "" +
      ""Please run MetaMask (or something else that injects web3)."");
} else {
log(""Found injected web3."");
web3 = new Web3(window.web3.currentProvider);
...
}   
}"
61073-0-0.sol,answer,"function (inputs, data, topics) {


     var nonIndexedData = data;
-    var notIndexedParams = (nonIndexedData) ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];
+    var notIndexedParams = (nonIndexedData && nonIndexedData !== '0x') ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];

     var returnValue = new Result();
     returnValue.__length__ = 0;"
56421-0-1.sol,answer,"function someFunc() {
    require(txPerformed < txMax, ""no more transactions"");
    
    txPerformed = txPerformed.add(1);
}"
78319-0-0.sol,answer,"function getTotalSupply(myContAddr, callerAddr) {
    const contract = new web3.eth.Contract(ABI, myContAddr);
    return await contract.methods.getTotalSupply(callerAddr).call();
}"
68001-0-0.sol,answer,"function (accounts) { 

  it('initiates contract', async function() {  
    const contract = await ApprovalContracts.deployed();
    const approver = await contract.approver.call();     
    assert.equal(approver, 0xc7780C9521C2C2abED69f0D65BEbF9794C55ae94, ""approvers don't match"");    
  }); 
}"
83347-1-0.sol,answer,"function get() {
    return JSON.parse(fs.readFileSync(CFG_FILE_NAME, {encoding: ""utf8""}));
}"
83347-1-0.sol,answer,"function set(record) {
    fs.writeFileSync(CFG_FILE_NAME, JSON.stringify({...get(), ...record}, null, 4));
}"
83347-1-0.sol,answer,"function getTransactionReceipt(web3) {
    while (true) {
        const hash = await scan(""Enter transaction-hash or leave empty to retry: "");
        if (/^0x([0-9A-Fa-f]{64})$/.test(hash)) {
            const receipt = await web3.eth.getTransactionReceipt(hash);
            if (receipt)
                return receipt;
            console.log(""Invalid transaction-hash"");
        }
        else if (hash) {
            console.log(""Illegal transaction-hash"");
        }
        else {
            return null;
        }
    }
}"
83347-1-0.sol,answer,"function run() {
    const web3 = new Web3(NODE_ADDRESS);

    const gasPrice = await getGasPrice(web3);
    const account  = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const web3Func = (func, ...args) => func(web3, account, gasPrice, ...args);

    let phase = 0;
    if (get().phase == undefined)
        set({phase});
    const execute = async (transaction, ...args) => {
        if (get().phase == phase++) {
            await web3Func(send, transaction, ...args);
            console.log(`phase ${phase} executed`);
            set({phase});
        }
    };

    const contract1 = await web3Func(deploy, ""contract1"", ""MyContract1"", [arg1, arg2, arg3]);
    const contract2 = await web3Func(deploy, ""contract2"", ""MyContract1"", [arg4, arg5, arg6]);
    const contract3 = await web3Func(deploy, ""contract3"", ""MyContract2"", []);

    await execute(contract1.methods.setSomeValue(123));
    await execute(contract2.methods.setSomeValue(456));
    await execute(contract3.methods.doSomeStuff(true));

    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
2851-0-16.sol,answer,"function checkBlocks(firstBlock, lastBlock) {
  var i;
  var firstTimestamp;
  var prevTimestamp;
  var prevDifficulty;
  var totalDifficulty = 0;
  for (i = firstBlock; i < 10000; i++) {
    var block = eth.getBlock(i);
    if (i == firstBlock) {
      firstTimestamp = block.timestamp;
      prevTimestamp = firstTimestamp;
      prevDifficulty = block.difficulty;
    }
    if (block == null)
      break;
    totalDifficulty = +totalDifficulty + +block.difficulty;
    var averageDifficulty = totalDifficulty / (i - firstBlock);
    var averageTime = (block.timestamp - firstTimestamp) / (i - firstBlock);
    console.log(block.number + ""\t"" + block.difficulty + 
      ""\t"" + (block.difficulty - prevDifficulty) + 
      ""\t"" + averageDifficulty.toFixed(1) + 
      ""\t"" + (block.timestamp - firstTimestamp) +
      ""\t"" + (block.timestamp - prevTimestamp) +
      ""\t"" + averageTime.toFixed(1) +
      ""\t"" + block.miner.substr(2, 4));
    prevTimestamp = block.timestamp;
  }
}"
9770-0-1.sol,answer,"function (err, res) {
  if (!err) displayInList (res);
}"
69793-0-0.sol,answer,"function setInstructor(address _address, uint256 _age, string memory _fName, string memory _lName) public {
    Instructor memory instructor = Instructor(_age, _fName, _lName); 
    instructors[_address] = instructor; "
21635-0-0.sol,answer,"function mintToken(address target, uint256 mintedAmount) onlyOwner {
            if(currentSupply + mintedAmount> totalSupply) throw;             
            currentSupply+=(mintedAmount);                                   
            balanceOf[target] += mintedAmount;                               
            Transfer(0, owner, mintedAmount);
            Transfer(owner, target, mintedAmount);
    }"
68583-1-1.sol,answer,"function getAccount() {
    var account = 0;
    if (window.ethereum) { 
        window.web3 = new Web3(ethereum);
        try {
            await ethereum.enable();
        } catch (error) {
            console.error(error);
        }
    }else if (web3) { 
        window.web3 = new Web3(web3.currentProvider);
    } else {
        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }

    if(window.web3!== 'undefined'){
            try {
                await window.web3.eth.getAccounts().then(it => {
                    account = it[0];
             }); 
    }
    return account;
}"
28391-0-3.sol,answer,"function (err, hash) {
"
3676-0-0.sol,answer,"function () payable {
    data[msg.sender] = msg.value;
}"
23018-1-0.sol,answer,"function transfer(address _to, uint256 _value) {
    require (_to != 0x0) ;                               
    if (balanceOf[msg.sender] < _value);           
    if (balanceOf[_to] + _value < balanceOf[_to]); 
    balanceOf[msg.sender] -= _value;                     
    balanceOf[_to] += _value;                            
    Transfer(msg.sender, _to, _value);                   
}"
44790-0-0.sol,answer,"function (req, res, next) {
    res.header(""Access-Control-Allow-Origin"", ""*"");
    res.header(""Access-Control-Allow-Headers"", ""Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, X-Auth"");
    res.header(""Access-Control-Allow-Methods"", ""GET, PUT, POST,DELETE"");
    res.status(200).send();
}"
56357-1-0.sol,answer,"function proposeNumber () public payable {
           uint temp;
           require(msg.value > .01 ether);
           
            bytes memory b = msg.data;
            for(uint i=0;i<b.length;i++){
            temp = temp + uint(b[i])*(2**(8*(b.length-(i+1))));
            }
            proposals.push(temp);
         }"
68103-0-1.sol,answer,"function expensiveTransfer() public {
  uint maxGasLeft = gasleft();
  require(maxGasLeft > 5000000);
  maxGasLeft -= 5000000;

  ...normal function logic...

  while(gasleft() > maxGasLeft) {
    
  }
}"
66300-0-4.sol,answer,"function () {
    const meta = await MyContract.deployed();
    const result = await meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    truffleAssert.eventEmitted(result, 'BalanceClaimed', (ev) => {
        return ev.value === expectedValue;
    }, 'Incorrect value received');
}"
24888-0-0.sol,answer,"function Ownable() public {
   owner = msg.sender; 

}"
54678-0-1.sol,answer,"function () {

  
  web3.eth.getBlockNumber().then(data => {
    document.getElementById('blockNumber').innerHTML = data;
  });

}"
80660-0-0.sol,answer,"function run() {
    const web3 = new Web3(<YourNodeUrl>);
    const contract = new web3.eth.Contract(ABI, <YourContractAddress>);
    const totalSupply = await contract.methods.totalSupply().call();
    console.log(totalSupply);
}"
21539-2-0.sol,answer,"function safeWithdrawal(uint ethW) {
    if (beneficiary == msg.sender) {
      if (beneficiary.send(ethW)) {
            FundTransfer(beneficiary, ethW, false);
          }
    }
}"
9983-1-2.sol,answer,"function Transfer(address to, uint256 amount) canTrade {
    .....(usual stuff here)
}"
43953-1-0.sol,answer,"function get_all_tokens(address token_address, uint256 amount) {
  ERC20 token = ERC20(token_address);
  uint256 contract_token_balance = token.balanceOf(address(this));
  require(contract_token_balance != 0);
  
  require(token.transfer(msg.sender, amount));
}"
42589-2-1.sol,answer,"function _transfer(address from, address to, uint256 value) internal {
    require(to != address(0), ""ERC20: transfer to the zero address"");

    _balances[from] = _balances[from].sub(value);
    _balances[to] = _balances[to].add(value);
    emit Transfer(from, to, value);
}"
43687-0-1.sol,answer,"function mint(address _to, uint _value) public {
    require(msg.sender == owner); 
    mintToken(_to, _value);
}"
43687-0-1.sol,answer,"function mintToken(address _to, uint _value) internal {
    balances[_to] += value;
    supply += value;
    require(balances[_to] >= value && supply >= value); 
    emit Transfer(address(0), _to, _value);
}"
45559-0-0.sol,answer,"function checkCounter(uint index) {
    uint counter;
    bool error;
    (counter, error) = getCounter(index);
    if (error) {  }
    else {  }
}"
77685-1-0.sol,answer,"function () {
        return ValleyToken.deployed()
          .then(function (instance) {
            tokenInstance = instance;
            return tokenInstance.transfer.call(accounts[1], 9999999999999999);
          })
          .then(assert.fail)
          .catch(function (error) {
            assert(error.message, ""error message must contain revert"");
            return tokenInstance.transfer.call(accounts[1], 250000, {
              from: accounts[0],
            });
          })
          .then(function (success) {
            assert(success, true, ""it returns true"");
            return tokenInstance.transfer(accounts[1], 250000, {
              from: accounts[0],
            });
          })
          .then(function (receipt) {
            assert.equal(receipt.logs.length, 1, ""triggers one event"");
            assert.equal(
              receipt.logs[0].event,
              ""Transfer"",
              'should be the ""Transfer"" event'
            );
            assert.equal(
              receipt.logs[0].args._from,
              accounts[0],
              ""logs the account the tokens are transferred from""
            );
            assert.equal(
              receipt.logs[0].args._to,
              accounts[1],
              ""logs the account the tokens are transferred to""
            );
            assert.equal(
              receipt.logs[0].args._value,
              250000,
              ""logs the transfer amount""
            );
            return tokenInstance.balanceOf(accounts[1]);
          })
          .then(function (reciept) {
            return tokenInstance.balanceOf(accounts[1]);
          })
          .then(function (balance) {
            assert.equal(
              balance.toNumber(),
              250000,
              ""adds the amount to the recieving amount""
            );
            return tokenInstance.balanceOf(accounts[0]);
          })
          .then(function (balance) {
            assert.equal(
              balance.toNumber(),
              750000,
              ""deducts the amount from the sending account""
            );
          });
      }"
77685-1-0.sol,answer,"function (instance) {
            tokenInstance = instance;
            return tokenInstance.transfer.call(accounts[1], 9999999999999999);
          }"
77685-1-0.sol,answer,"function (error) {
            assert(error.message, ""error message must contain revert"");
            return tokenInstance.transfer.call(accounts[1], 250000, {
              from: accounts[0],
            });
          }"
77685-1-0.sol,answer,"function (success) {
            assert(success, true, ""it returns true"");
            return tokenInstance.transfer(accounts[1], 250000, {
              from: accounts[0],
            });
          }"
77685-1-0.sol,answer,"function (receipt) {
            assert.equal(receipt.logs.length, 1, ""triggers one event"");
            assert.equal(
              receipt.logs[0].event,
              ""Transfer"",
              'should be the ""Transfer"" event'
            );
            assert.equal(
              receipt.logs[0].args._from,
              accounts[0],
              ""logs the account the tokens are transferred from""
            );
            assert.equal(
              receipt.logs[0].args._to,
              accounts[1],
              ""logs the account the tokens are transferred to""
            );
            assert.equal(
              receipt.logs[0].args._value,
              250000,
              ""logs the transfer amount""
            );
            return tokenInstance.balanceOf(accounts[1]);
          }"
77685-1-0.sol,answer,"function (reciept) {
            return tokenInstance.balanceOf(accounts[1]);
          }"
77685-1-0.sol,answer,"function (balance) {
            assert.equal(
              balance.toNumber(),
              250000,
              ""adds the amount to the recieving amount""
            );
            return tokenInstance.balanceOf(accounts[0]);
          }"
33636-0-0.sol,answer,"function StandardToken() public {
       balance[msg.sender] = INITIAL_SUPPLY;

    }"
66979-0-0.sol,answer,"function setTokenHolders(address _to) internal {
    require(tokenHolders[_to] == false);
    tokenHolders[_to] = true;
}"
2531-3-0.sol,answer,"function printTransaction(txHash) {
  var tx = eth.getTransaction(txHash);
  if (tx != null) {
    console.log(""  tx hash          : "" + tx.hash + ""\n""
      + ""   nonce           : "" + tx.nonce + ""\n""
      + ""   blockHash       : "" + tx.blockHash + ""\n""
      + ""   blockNumber     : "" + tx.blockNumber + ""\n""
      + ""   transactionIndex: "" + tx.transactionIndex + ""\n""
      + ""   from            : "" + tx.from + ""\n"" 
      + ""   to              : "" + tx.to + ""\n""
      + ""   value           : "" + tx.value + ""\n""
      + ""   gasPrice        : "" + tx.gasPrice + ""\n""
      + ""   gas             : "" + tx.gas + ""\n""
      + ""   input           : "" + tx.input);
  }
}"
9026-0-0.sol,answer,"function checkBalance() {
    var acctAddress = document.getElementById(""acctAddress"").value;
    var check_element = document.getElementById(""acctBalance"");

    setStatus(""Retreving Balance... (please wait)"");

    MetaCoin.deployed().checkBalance(acctAddress)
        .then(function(balance) {
            console.log(balance.toString(10));
            console.log(balance.toNumber());
        })
        .catch(function(error) {
            console.error(error);
        });
    }"
9026-0-0.sol,answer,"function(balance) {
            console.log(balance.toString(10));
            console.log(balance.toNumber());
        }"
57107-1-1.sol,answer,"function withdraw () public {
    uint256 toTransfer = refundBalance [msg.sender];
    refundBalance [msg.sender] = 0;
    msg.sender.transfer (toTransfer);
}"
57107-1-1.sol,answer,"function expensiveCleanupFunction () refundable internal {
    ... shuffle around some storage ...
}"
66989-1-0.sol,answer,"function (error, result) {
     if(!error)
         console.log(result.blockNumber, "" has been added in chain""); 
}"
44156-0-0.sol,answer,"function sendSigned(txData, cb) {
  const privateKey = new Buffer(privKey, 'hex')
  const transaction = new Tx(txData)
  transaction.sign(privateKey)
  const serializedTx = transaction.serialize().toString('hex')
  
  web3.eth.sendSignedTransaction('0x' + serializedTx, function(err,hash){
    if(err){
      console.log(""Error Occured: "",err);
    }
    else{
        console.log(""Hash: "",hash)}
    waitForReceipt(hash);
  })
}"
44156-0-0.sol,answer,"function(err,hash){
    if(err){
      console.log(""Error Occured: "",err);
    }
    else{
        console.log(""Hash: "",hash)}
    waitForReceipt(hash);
  }"
77164-0-0.sol,answer,"function payInvoice(uint id, uint amount) public {
    Invoice storage invoice = getInvoice(id);
    
    dai.transferFrom(msg.sender, address(this), amount);
    invoice.paid += amount;

    
    if (invoice.paid >= invoice.total) {
        dai.transfer(invoice.recipient, invoice.total);
    }
}"
45399-0-1.sol,answer,"function f1() public {
   structEx memory s = structEx(0);
   arr.push(s);
}"
45399-0-1.sol,answer,"function f2() public {
   arr.push(structEx(0));
}"
57489-0-2.sol,answer,"function HitexToken() public {
    ..."
39665-1-1.sol,answer,"function ValueSetter(address init_address) public {
    fixed_value = BasicValue(0);
    my_address = init_address;
    fixed_values[init_address] = fixed_value;
}"
539-0-0.sol,answer,"function generateSingleWallet(password) {
  
  var acc = new Accounts();
  var newAccountEnc = acc.new(password);
  var addressHash =   
    cryptoJSToHex(CryptoJS.SHA3(newAccountEnc.address));
  addressHash = addressHash.substr(addressHash.length - 4);

  var newAccountUnEnc = acc.get(newAccountEnc.address, password);
  
  newAccountEnc.private = newAccountEnc.private + addressHash;
  

  
  acc.clear();
}"
25648-1-2.sol,answer,"function (k) {
    localStorage.setItem(k, obj[k]);
}"
30305-3-1.sol,answer,"function _transfer(address _from, address _to, uint value) internal {
    
    ....
    
    balances[_from].balance -= value;
    balances[_to].balance += value;
    if(!balances[_from].doesItExistInArray) {
        allAccounts.push(_from);
        balances[_from].doesItExistInArray = true;
    }
    
}"
55994-2-0.sol,answer,"function foo() public {
    
}"
55994-2-0.sol,answer,"function bar() public {
    this.foo();  
    foo();       
    super.bar(); 
}"
41630-1-0.sol,answer,"function (resp) {
        var rcpt = web3.eth.getTransactionReceipt(resp.tx);

        console.log(""cumulativeGasUsed: "" + rcpt.cumulativeGasUsed);"
70995-1-0.sol,answer,"function run() {
    for (const pathName of getPathNames(""
}"
70995-1-0.sol,answer,"function getPathNames(dirName) {
    let pathNames = [];
    for (const fileName of fs.readdirSync(WORK_DIR + ""/"" + dirName)) {
        if (fs.statSync(WORK_DIR + ""/"" + dirName + ""/"" + fileName).isDirectory())
            pathNames = pathNames.concat(getPathNames(dirName + ""/"" + fileName));
        else if (fileName.endsWith("".sol""))
            pathNames.push(dirName + ""/"" + fileName);
    }
    return pathNames;
}"
70995-1-0.sol,answer,"function getSourceCode(pathName) {
    const result = spawnSync(""node"", [NODE_DIR + ""/truffle-flattener/index.js"", pathName], {cwd: WORK_DIR});
    return result.output.toString().slice(1, -1);
}"
68947-1-0.sol,answer,"function() {
            var reader = new FileReader();
            reader.onload = function (e) {

                const magic_array_buffer_converted_to_buffer = buffer.Buffer(reader.result); 
                ipfs.add(magic_array_buffer_converted_to_buffer, (err, result) => {
                    console.log(err, result);

              let ipfsLink = ""<a href='https:
              document.getElementById(""link"").innerHTML = ipfsLink;

                })
            }
            reader.readAsArrayBuffer(this.files[0]);
        }"
68947-1-0.sol,answer,"function (e) {

                const magic_array_buffer_converted_to_buffer = buffer.Buffer(reader.result); 
                ipfs.add(magic_array_buffer_converted_to_buffer, (err, result) => {
                    console.log(err, result);

              let ipfsLink = ""<a href='https:
              document.getElementById(""link"").innerHTML = ipfsLink;

                })
            }"
60925-0-1.sol,answer,"function () {
    if (typeof web3 !== 'undefined') {
        console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
        window.web3 = new Web3(web3.currentProvider);
    } else {
        console.log('No Web3 Detected... using HTTP Provider')
        window.web3 = new Web3(new Web3.providers.HttpProvider(""https:
    }

        getCode();
}"
60925-0-1.sol,answer,"function getCode() {
    var code = web3.eth.getCode(""0xB8c77482e45F1F44dE1745F52C74426C631bDD52"", function(error, result) {
    if(!error) {
        alert(result);
    }
  });
}"
60925-0-1.sol,answer,"function(error, result) {
    if(!error) {
        alert(result);
    }
  }"
65124-0-0.sol,answer,"function newfunction() {
  var startingNonce = web3.eth.getTransactionCount(address);
  for (var i = 0; i < ad.length; i++) {
    var rawTx = {
      nonce: startingNonce + i,
      gasLimit: web3.toHex(21000),
      gasPrice: web3.eth.gasPrice.toNumber() * 1.40,
      to: ad[i],
      value: web3.toHex(web3.toBigNumber(10000000000000000))
    };
    sendRaw(rawTx);
  }
}"
59010-1-1.sol,answer,"function enter() public payable {
if (Pause == false) {
...do that...}
else{
revert(""raffle is in pause. We are picking the winner""); }"
42467-0-0.sol,answer,"function Applications() public {  
    applicant = msg.sender;
  }"
84467-0-2.sol,answer,"function triggerAddress(address payable _addr, uint256 valueInWei) public payable {
    _addr.call.gas(gasleft()).value(valueInWei)("""");  
}"
37824-0-1.sol,answer,"function buyTokens() payable {
    require(msg.value > 0);

    uint256 _numTokens = msg.value.mul(RATE);

    require(balances[owner] >= _numTokens);

    balances[owner] = balances[owner].sub(_numTokens);
    balances[msg.sender] = balances[msg.sender].add(_numTokens);
    Transfer(owner, msg.sender, _numTokens);

    owner.transfer(msg.value);
}"
11959-0-0.sol,answer,"function change2(uint32 blk_start_, uint32 blk_end_, uint16 core_) {
   array_2[index] = node(blk_start_, blk_end_, core_, 10);
   index++;       
}"
79260-0-0.sol,answer,"function makePayment(string result) public {

    if (result.toSlice().equals(""home"".toSlice())) {   
       winner = homeBet;
    }
    else if(result.toSlice().equals(""away"".toSlice())) {        
       winner = awayBet;
    }
}"
46887-0-0.sol,answer,"function myFunction(uint value) {
  balances[owner].push(value);
}"
61573-0-0.sol,answer,"function MLMloyalityPoints(string _Compney_name,uint256 _refreeid) public payable {
    require(!payed[_refreeid]);
    address  tempaddress = clients[_refreeid-1];
    
    tempaddress.transfer(1000000000000000);
    paid[_refreeid] = true;
}"
58637-0-1.sol,answer,"function addPaymentDetail (bytes32 _Wallet, uint _TokenIndex, uint _Payment) public {
        uint _TotalPaid = PaymentDetails[_Wallet][_TokenIndex].TotalPaid;
        _TotalPaid=_TotalPaid+_Payment;
        PaymentDetails[_Wallet][_TokenIndex].TotalPaid=_TotalPaid;
    }"
34196-0-1.sol,answer,"function testSetMultiplier() public {
    TestEvent(true);
    setMultiplier(0, 1);
}"
83156-0-1.sol,answer,"function () external payable {
    if (senders[msg.sender] == false) {
        require(count < 2);
        senders[msg.sender] = true;
        count++;
    }
}"
49561-0-0.sol,answer,"function buy(uint256 paintingID) public {
    require(sellStatus[paintingID],""Painting is not for sale"")
    
}"
49561-0-0.sol,answer,"function changeSellStatus(bool value) public {
    require(paintingOwnership[msg.sender] > 0);
    uint paintingID = paintingOwnership[msg.sender];
    sellStatus[paintingId] = value;
}"
74432-1-0.sol,answer,"function foo(uint n) public {
    require(yourContract.winningThreshold() == yourContract.registrarCounter() + 1);
    uint CurrentStake = yourContract.stake();
    yourContract.register(n);
    uint[] memory seeds = yourContract.revealWinningSeeds();
    require(seeds[seeds.length - 1] > currentStake);
}"
63106-0-0.sol,answer,"function execute() {
    let contract1 = await deploy(""Contract1"", [ARG1, ARG2]);
    let contract2 = await deploy(""Contract2"");
    let contract3 = await deploy(""Contract3"", [ARG3, contract1.address, contract2.address]);
}"
63106-0-0.sol,answer,"function measure() {
    let gasPrice   = web3.eth.gasPrice;
    let bgnBalance = web3.eth.getBalance(web3.eth.accounts[0]);
    await execute();
    let endBalance = web3.eth.getBalance(web3.eth.accounts[0]);
    console.log(`Total cost: ${bgnBalance.minus(endBalance).div(gasPrice)} gas units`);
}"
63106-0-0.sol,answer,"function(deployer, network, accounts) {
    if (network == ""production"")
        deployer.then(async function() {await measure();});
}"
63106-0-0.sol,answer,function() {await measure();}
76880-0-0.sol,answer,"function init() {
    
    
    const mnemonic = 'YOUR_MNEMONIC_WORDS';

    
    const wallet = ethers.Wallet.fromMnemonic(mnemonic);
}"
20750-0-3.sol,answer,"function(accounts) {
    it(""should return 0"", function() {
            return Banker.deployed().then(function(instance) {
                return instance.abc_1.call();
            }).then(function (result) {
                assert.equal(result.toNumber(), 0, "" must be 0"");
            });
    });
}"
20750-0-3.sol,answer,"function() {
            return Banker.deployed().then(function(instance) {
                return instance.abc_1.call();
            }).then(function (result) {
                assert.equal(result.toNumber(), 0, "" must be 0"");
            });
    }"
20750-0-3.sol,answer,"function(instance) {
                return instance.abc_1.call();
            }"
20750-0-3.sol,answer,"function (result) {
                assert.equal(result.toNumber(), 0, "" must be 0"");
            }"
84180-0-0.sol,answer,"function send(web3, account, transaction) {
    const options  = {
        to      : transaction._parent._address,
        data    : transaction.encodeABI(),
        gas     : await transaction.estimateGas({from: account.address}),
        gasPrice: WHATEVER_GAS_PRICE_YOU_ARE_WILLING_TO_PAY
    };
    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}"
28822-1-0.sol,answer,"function reEnterMe(uint256 etherAmt) onlyOwner {
   if (balances[owner] >= etherAmt){
      owner.send(etherAmt);
      balances[owner] -= etherAmt;
   }
}"
61677-0-1.sol,answer,"function useDeposit(uint256 amount) internal {
    balances[msg.sender] -= amount;
}"
15525-0-0.sol,answer,"function (privKey) {

  
  
  var keyPair = ec.genKeyPair();

  
  keyPair._importPrivate(privKey, 'hex');

  
  var compact = false;
  var pubKey = keyPair.getPublic(compact, 'hex').slice(2);

  
  var pubKeyWordArray = CryptoJS.enc.Hex.parse(pubKey);
  var hash = CryptoJS.SHA3(pubKeyWordArray, { outputLength: 256 });
  var address = hash.toString(CryptoJS.enc.Hex).slice(24);

  return address;
}"
65186-0-0.sol,answer,"function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      var oldpath = files.filetoupload.path;
      var uploadedFile = fs.readFileSync(oldpath);
      var picBuffer = new Buffer(uploadedFile);
      ipfs.files.add(picBuffer, function (err, file) {
          if (err) {
             console.log(err);
          }
          console.log(file)
      })
      
    })
});
"
65186-0-0.sol,answer,"function (err, fields, files) {
      var oldpath = files.filetoupload.path;
      var uploadedFile = fs.readFileSync(oldpath);
      var picBuffer = new Buffer(uploadedFile);
      ipfs.files.add(picBuffer, function (err, file) {
          if (err) {
             console.log(err);
          }
          console.log(file)
      })
      
    }"
65186-0-0.sol,answer,"function (err, file) {
          if (err) {
             console.log(err);
          }
          console.log(file)
      }"
51123-0-2.sol,answer,"function initiateArticles() {
    contract.getArticleAmount({from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                
                setInterval(getArticle.bind({articleId: i}), 15000);
                i++;
            }
        }
        else {
            console.log(error);
        }
    });
}"
51123-0-2.sol,answer,"function(error, result)
    {
        if(!error)
        {
            i = 0;
            while(i <= result) {
                
                setInterval(getArticle.bind({articleId: i}), 15000);
                i++;
            }
        }
        else {
            console.log(error);
        }
    }"
44098-1-0.sol,answer,"function pay() public payable {
    require(msg.value > 0);
    balanceOf[msg.sender] = msg.value;
}"
49946-1-0.sol,answer,"function withdraw() onlyOwner public {
    address myAddress = this;
    uint256 etherBalance = myAddress.balance;
    owner.transfer(etherBalance);
}"
15972-0-0.sol,answer,"function giveBlockReward() {
  if (lastBlockRewarded >= block.number) 
    throw;
  lastBlockRewarded = block.number;
  balanceOf[block.coinbase] += 1;
}"
44452-0-1.sol,answer,"function crossTransfer(uint _value) external {
    
    a_token.transferFrom(msg.sender, this, _value);
    b_token.transfer(_from, _value);
}"
60622-0-0.sol,answer,"function createToken() public payable {
    require(msg.value > 0);

    uint256 tokens = msg.value;
    balances[msg.sender] = balances[msg.sender].add(tokens);

    owner.transfer(msg.value);

    
    emit Transfer(address(0x), msg.sender, tokens);
}"
49082-0-0.sol,answer,"function getProvider() {
  const { WebsocketProvider } = Web3.providers;

  const provider = new WebsocketProvider(WEB3_WEBSOCKET_PROVIDER_URL);

  return new Promise((resolve) => {
    provider.on('connect', () => {
      logger.info('Web3 WS connected.');
      return resolve(provider);
    });

    provider.on('error', () => resolve());
  });
}"
61939-0-0.sol,answer,"function (gogo) {
  
  if (gogo > 123) {
    console.log('enough.');
  }
}"
9374-0-0.sol,answer,"function (tx, gasPrice, gas) {
  if (gasPrice) {
    tx.gasPrice = gasPrice;
  }
  if (gas) {
    tx.gas = gas;
  }
  tx.data = tx.input;
  return eth.sendTransaction(tx);
}"
40330-1-0.sol,answer,"function AddEmptyPixels(uint256 amount) private {
    for (uint i = 0; i < amount; i++) {
        AddEmptyPixels(i);
    }
}"
77046-1-1.sol,answer,"function printNonce(account) {
    const nonce = await web3.eth.getTransactionCount(account);
    console.log(nonce);
}"
82287-0-1.sol,answer,"function waitForHash(signedTx) {
  return new Promise((resolve, reject) => {
    web3.eth.sendSignedTransaction(signedTx)
      .once('transactionHash', (hash) => {
        resolve(hash)
    })
  })
}"
79809-0-0.sol,answer,"function () external payable {
        address implementationAddress = userImplementation(msg.sender);
        
        assembly {
            let ptr := mload(0x40)
            calldatacopy(ptr, 0, calldatasize)
            let result := delegatecall(gas, implementationAddress, ptr, calldatasize, 0, 0)
            let size := returndatasize
            returndatacopy(ptr, 0, size)

            switch result
            case 0 { revert(ptr, size) }
            default { return(ptr, size) }
        }
    }"
45581-0-2.sol,answer,"function subscribe_erc20_logs() {
    let sub = web3.eth.subscribe('logs', {
        address: YOUR_TOKEN_ADDRESS,
        topics: [
            ERC20_TRANSFER_EVENT
        ]
    }, function (error, log) {
        if (error) { console.error(error); return; }
        let dlog = web3.eth.abi.decodeLog(ERC20_TRANSFER_EVENT_ABI.inputs, log.data, log.topics.slice(1))
        console.log(`new log: ${dlog.from} -> ${dlog.to} : ${dlog.value}`);
    });
}"
45581-0-2.sol,answer,"function (error, log) {
        if (error) { console.error(error); return; }
        let dlog = web3.eth.abi.decodeLog(ERC20_TRANSFER_EVENT_ABI.inputs, log.data, log.topics.slice(1))
        console.log(`new log: ${dlog.from} -> ${dlog.to} : ${dlog.value}`);
    }"
48750-0-1.sol,answer,"function (error, signedTx) {
        if (error) {
        console.log(error);
        
    } else {
web3g.eth.sendSignedTransaction(signedTx.rawTransaction)
        .on('receipt', function (receipt) {
            
     });
    }"
68835-0-1.sol,answer,"function resetBalance(uint256 value)public {
    for (uint i=0; i< investers.length ; i++){
        investments[investers[i]] = value;
    }
}"
83878-0-1.sol,answer,"function hold(address _to, uint256 _value) internal {
        holded[_to].amount.push(_value);
        holded[_to].time.push(block.number);
        holded[_to].length++;
    }"
10830-1-1.sol,answer,"function () {
    this.token = await UserTokenMock.new(totSup);
    owner = this.owner;
  }"
2915-0-1.sol,answer,"function printBlock(block) {
  console.log(""Block number     : "" + block.number + ""\n""
    + "" hash            : "" + block.hash + ""\n""
    + "" parentHash      : "" + block.parentHash + ""\n""
    + "" nonce           : "" + block.nonce + ""\n""
    + "" sha3Uncles      : "" + block.sha3Uncles + ""\n""
    + "" logsBloom       : "" + block.logsBloom + ""\n""
    + "" transactionsRoot: "" + block.transactionsRoot + ""\n""
    + "" stateRoot       : "" + block.stateRoot + ""\n""
    + "" miner           : "" + block.miner + ""\n""
    + "" difficulty      : "" + block.difficulty + ""\n""
    + "" totalDifficulty : "" + block.totalDifficulty + ""\n""
    + "" extraData       : "" + block.extraData + ""\n""
    + "" size            : "" + block.size + ""\n""
    + "" gasLimit        : "" + block.gasLimit + ""\n""
    + "" gasUsed         : "" + block.gasUsed + ""\n""
    + "" timestamp       : "" + block.timestamp + ""\n""
    + "" transactions    : "" + block.transactions + ""\n""
    + "" uncles          : "" + block.uncles);
    if (block.transactions != null) {
      console.log(""--- transactions ---"");
      block.transactions.forEach( function(e) {
        printTransaction(e);
      })
    }
}"
2915-0-1.sol,answer,"function(e) {
        printTransaction(e);
      }"
33106-0-1.sol,answer,"function send1() public payable {
    one.transfer(10 ether);
}"
49082-1-0.sol,answer,"function handleDisconnects(e) {
      console.log(""error"",e);
    }"
9084-0-0.sol,answer,"function setUp() {
    app = new App();
    proxy_actor._target(app);
}"
8736-0-1.sol,answer,"function sendCoin(toAddress, amount){
  let nonce = await web3.eth.getTransactionCount(fromAddress, 'pending')
  let extraData =  await yourContract.methods.transfer(toAddress, amount)
  extraData = extraData.encodeABI()
  txObj = {
    from: adminAddress,
    to: yourContractAddress,
    data
    value: '0',
    gas: gasSent, 
    gasPrice: gasPriceSent,
    privKey: adminPvtKey,
    nonce
  }

  let signedTx = await signTx(txObj)
  signedTx = ""0x"" + signedTx.serialize().toString('hex')
  await submitSignedTx(signedTx)
}"
8736-0-1.sol,answer,"function signTx(payload) {
  let { from, to, data, value, gas, gasPrice, privKey, nonce } = payload
  let txParams = {
    to,
    data,
    value: web3.utils.toHex(value),
    gasPrice: web3.utils.toHex(gasPrice),
    gas: web3.utils.toHex(gas),
    nonce: web3.utils.toHex(nonce)
  }
  var tx = new Tx(txParams)
  privKey = await _validatePrivKey(privKey)
  privKey = new Buffer(privKey, 'hex')
  tx.sign(privKey)
  privKey = null
  return tx
}"
8736-0-1.sol,answer,"function submitSignedTx(serializedTx) {
  return new Promise((fullfill, reject) => {
    web3.eth.sendSignedTransaction(serializedTx)
      .on('transactionHash', txHash => {
        l.info('transaction sent. hash =>', txHash)
        return fullfill({success: true, txHash : txHash})
      })
      .on('error', e => {
        
        l.error(logmsg, e.message)
        return fullfill({success: false, message: e})
      })
  })
}"
11484-0-0.sol,answer,"function transfer(address newOwner) public {
    if (msg.sender != owner) throw;
    owner = newOwner;
}"
12882-1-0.sol,answer,"function (address) {    
    address = address.toLowerCase().replace('0x','');
    var addressHash = web3.sha3(address);
    var checksumAddress = '0x';

    for (var i = 0; i < address.length; i++ ) { 
        
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
            checksumAddress += address[i];
        }
    }
    return checksumAddress;
}"
50870-0-0.sol,answer,"function() public payable {
      pay();
  }"
50870-0-0.sol,answer,"function pay() public payable {
      ...
  }"
70858-0-0.sol,answer,"function depositFunction() {    
    contractInstance.deposit({ from: web3.eth.accounts[0], value: <amount-in-Wei>}, function(err, result){ .... } );
}"
60878-1-2.sol,answer,"function calcBalanceFrom(address minter, uint value) public payable {
    Foo memory thisFoo = fooIndex[minter];

    thisFoo.balance += (msg.value + thisFoo.value) / value / 2; 
    thisFoo.expiresAt += 1000 + (thisFoo.balance / 10**12);

    emit NewBalance(thisFoo.balance, thisFoo.expiresAt);
  }"
11965-0-0.sol,answer,"function  Transfer(address _user2, uint _amount) {
    ...
    balances[user2] += _amount;
}"
67394-0-0.sol,answer,"function providePreimage(bytes calldata preimage) external {
    require(keccak256(preimage) == hash);
    revealer.transfer(address(this).balance);
}"
46638-2-0.sol,answer,"function ipfsGetData (multihash) {
  if (!isString(multihash)) {
    return new Error('multihash must be String')
  } else if (!multihash.startsWith('Qm')) {
    return new Error('multihash must start with ""Qm""')
  }

  return new Promise((resolve, reject) => {
    ipfs.catJSON(multihash, (err, result) => {
      if (err) reject(new Error(err))
      resolve(result)
    })
  })
}"
46638-2-0.sol,answer,"function ipfsAddObject (obj) {
  const CID = await new Promise((resolve, reject) => {
    ipfs.addJSON(obj, (err, result) => {
      if (err) reject(new Error(err))
      resolve(result)
    })
  })
  console.log('CID:', CID)
  return CID
}"
39624-1-0.sol,answer,"function burnTokensAfterSale() {
    if (finalized && (block.number > 6000000)) {
        _transfer(0, remainingTokens)
    }
}"
32941-0-0.sol,answer,"function canReceiveEther() payable {
 
}"
27097-0-0.sol,answer,"function (transactionHash) {
    console.log('transactionHash', transactionHash);
}"
27097-0-0.sol,answer,"function (receipt) {
    console.log('receipt', receipt.contractAddress);
}"
41434-0-0.sol,answer,"function initializeIfNeeded(uint256 id) internal {
    AttributeStats stats = attributeStats[id];

    if (!stats.initialized) {
        stats.initialized = true;
        stats.validationDate = now;
        stats.status = 1;
        stats.validationDuration = 356;
    }        
}"
41434-0-0.sol,answer,"function doSomething(uint256 id) public {
    initializeIfNeeded(id);

    AttributeStats storage stats = attributeStats[id];

    
}"
78333-1-0.sol,answer,"function deleteEdge (Graph storage _graph, uint _sourceNodeID, uint _targetNodeID) external {
    uint edgeID = _graph.edges [_sourceNodeID][_targetNodeID];

    require (edgeID != 0);

    delete _graph.sourceNodes [edgeID];
    delete _graph.targetNodes [edgeID];
    delete _graph.edges [_sourceNodeID][_targetNodeID];
  }"
78333-1-0.sol,answer,"function deleteEdge (Graph storage _graph, uint _edgeID) external {
    require (_edgeID != 0);

    uint sourceNodeID = _graph.sourceNodes [_edgeID];
    uint targetNodeID = _graph.targetNodes [_edgeID];

    require (_graph.edges [sourceNodeID][targetNodeID] == _edgeID);

    delete _graph.sourceNodes [_edgeID];
    delete _graph.targetNodes [_edgeID];
    delete _graph.edges [sourceNodeID][targetNodeID];
  }"
4448-1-1.sol,answer,function daoToken(_val){ return Math.floor(_val/10000000000000000); }
4448-1-1.sol,answer,"function updatedProposalList() {
    var daoProposals = [];
    for(var i = 1; i <= dao.numberOfProposals(); i++) {
        var p = dao.proposals(i);
        daoProposals.push({
            ""recipient"":p[0],
            ""amount"":p[1],
            ""description"":p[2],
            ""votingDeadline"":p[3],
            ""open"":p[4],
            ""proposalPassed"":p[5],
            ""proposalHash"":p[6],
            ""proposalDeposit"":p[7],
            ""newCurator"":p[8],
            ""yea"":p[9],
            ""nay"":p[10],
            ""creator"":p[11]
        });
    }
    return daoProposals;
}"
4448-1-1.sol,answer,"function listProposals() {
    updatedProposalList().forEach( function(val, index) {    
        console.log(""#""+ (parseInt(index)+1) +"" ""+ (val.newCurator?""(SPLIT)"":"""") +"" ""+ val.description + "" - Yes: "" + daoToken(val.yea) +"" - No: ""+ daoToken(val.nay));
    });
}"
4448-1-1.sol,answer,"function(val, index) {    
        console.log(""#""+ (parseInt(index)+1) +"" ""+ (val.newCurator?""(SPLIT)"":"""") +"" ""+ val.description + "" - Yes: "" + daoToken(val.yea) +"" - No: ""+ daoToken(val.nay));
    }"
29437-1-1.sol,answer,"function refund() external {
  if(isFinalized) throw;                       
  if (block.number <= fundingEndBlock) throw; 
  if(totalSupply >= tokenCreationMin) throw;  
  if(msg.sender == batFundDeposit) throw;    
  uint256 batVal = balances[msg.sender];
  if (batVal == 0) throw;
  balances[msg.sender] = 0;
  totalSupply = safeSubtract(totalSupply, batVal); 
  uint256 ethVal = batVal / tokenExchangeRate;     
  LogRefund(msg.sender, ethVal);               
  if (!msg.sender.send(ethVal)) throw;       
}"
76409-0-1.sol,answer,"function revealWork(uint256 _ipfsHashCommit, uint256 _ipfsHash) {
    require(committedHashes[_ipfsHashCommit] == msg.sender, 'Only original sender can reveal');
    require(keccak(_ipfsHash) == _ipfsHashCommit, 'IPFS hash does not match commit');
    
}"
65802-0-0.sol,answer,"function storeResponse(bytes32 responseHash, uint8 v, bytes32 r, bytes32 s) {
   address msgSender = ecrecover(responseHash, v, r, s);
   responses[msgSender] = responseHash;
}"
44518-0-0.sol,answer,"function getToken() public {
    if(balances[msg.sender] > minLimitToGetBonus){
        
    }
    else{
        
    }
}"
79067-0-2.sol,answer,"function getUserBalance() {
  const accounts = await web3.eth.getAccounts();
  const balance = await web3.eth.getBalance(accounts[0]);
}"
25794-2-0.sol,answer,"function checkAllBalances() {
     var totalBal = 0;
     for (var acctNum in eth.accounts) {
         var acct = eth.accounts[acctNum];
         var acctBal = web3.fromWei(eth.getBalance(acct), ""ether"");
         totalBal += parseFloat(acctBal);
         console.log(""  eth.accounts["" + acctNum + ""]: \t"" + acct + "" \tbalance: "" + acctBal + "" ether"");
     }
     console.log(""  Total balance: "" + totalBal + "" ether"");
 }"
45881-0-1.sol,answer,"function receiveApproval(address from, uint256 tokens, address token, bytes data) public {
    TheTokenContract instanceContract = TheTokenContract(token);
    instanceContract.transferFrom(from,owner,20);
    register[msg.sender] = data;      
}"
30312-0-0.sol,answer,"function setOwner(address _owner) onlyOwner {
    if(!isOwnerSet) {
        pause();
        balances[owner] = initial_supply - public supply;
        owner = _owner;
        balances[owner] = public_supply;
        isOwnerSet = true;
  }
}"
36690-0-1.sol,answer,"function(deployer) {
   deployTestCrowdsale(deployer);
}"
23296-0-1.sol,answer,"function MyDeploy() {
  return MyContract.new(""parameters"");
}"
23296-0-1.sol,answer,"function(accounts) {
  it(""Test max"", async function() {
    const instance = await MyDeploy();
    
  });
  it(""Test min"", async function() {
    const instance = await MyDeploy();
    
  });
}"
23296-0-1.sol,answer,"function() {
    const instance = await MyDeploy();
    
  }"
9105-1-0.sol,answer,"function createPlayer() critical {
    ...
}"
30957-0-0.sol,answer,"function transfer(address _to, uint256 _value) {
        require(_value%100 == 0);
        uint fee = _value/100; 
        require (balanceOf[msg.sender] > _value) ;                          
        require (balanceOf[_to] + _value > balanceOf[_to]);                
        balanceOf[msg.sender] -= _value;                                    
        balanceOf[_to] += (_value-fee);                                           
        balanceOf[thirdPartyAddress] += value;
    }"
44098-1-1.sol,answer,"function pay2() public payable {
    require(msg.value > 0);
    balanceOf[msg.sender] = msg.value;
    elaborateTopX(msg.sender, msg.value);
}"
44098-1-1.sol,answer,"function elaborateTopX(address addr, uint currentValue) private {
    uint i = 0;
    
    for(i; i < topBalances.length; i++) {
        if(topBalances[i].balance < currentValue) {
            break;
        }
    }
    
    for(uint j = topBalances.length - 1; j > i; j--) {
        topBalances[j].balance = topBalances[j - 1].balance;
        topBalances[j].addr = topBalances[j - 1].addr;
    }
    
    topBalances[i].balance = currentValue;
    topBalances[i].addr = addr;
}"
69727-0-0.sol,answer,"function set(bytes32 keyA, bytes32 keyB, bytes32 value) public {
  myMap(multikey(keyA, keyB) = value;
  emit Log(keyA, keyB, value);
}"
76851-0-1.sol,answer,"function getBalance(address) {
   console.log(""debug: helpers/getBalance2-A""); 
    try {
        return await objWeb3.eth.getBalance(address)
    } catch (err) {
        console.log(""debug: helpers/getBalance2-E error="" + err);
    }
}"
76851-0-1.sol,answer,"function demo() {
    const address = '0x1D41CB7d963a5B96687e80Be1b23320e40176F02';
    const balance = await getBalance(address);
    console.log(balance);
}"
21522-0-0.sol,answer,"function setFunder(address a1, address a2) {
  fdr.addr_first = a1;
  fdr.addr_second = a2;
}"
43498-2-0.sol,answer,"function Updaters() {
  return (
    <>
      <ApplicationContextUpdater />
      <TransactionContextUpdater />
    </>
  )
}"
2915-0-2.sol,answer,"function printUncle(block, uncleNumber, uncle) {
  console.log(""Block number     : "" + block.number + "" , uncle position: "" + uncleNumber + ""\n""
    + "" Uncle number    : "" + uncle.number + ""\n""
    + "" hash            : "" + uncle.hash + ""\n""
    + "" parentHash      : "" + uncle.parentHash + ""\n""
    + "" nonce           : "" + uncle.nonce + ""\n""
    + "" sha3Uncles      : "" + uncle.sha3Uncles + ""\n""
    + "" logsBloom       : "" + uncle.logsBloom + ""\n""
    + "" transactionsRoot: "" + uncle.transactionsRoot + ""\n""
    + "" stateRoot       : "" + uncle.stateRoot + ""\n""
    + "" miner           : "" + uncle.miner + ""\n""
    + "" difficulty      : "" + uncle.difficulty + ""\n""
    + "" totalDifficulty : "" + uncle.totalDifficulty + ""\n""
    + "" extraData       : "" + uncle.extraData + ""\n""
    + "" size            : "" + uncle.size + ""\n""
    + "" gasLimit        : "" + uncle.gasLimit + ""\n""
    + "" gasUsed         : "" + uncle.gasUsed + ""\n""
    + "" timestamp       : "" + uncle.timestamp + ""\n""
    + "" transactions    : "" + uncle.transactions + ""\n"");
}"
40447-0-1.sol,answer,"function callChildFunction(bytes32 childId) {
    childList[childId].theChildfunction();
}"
57065-0-1.sol,answer,"function updateval(uint b, string message) public {
    a = a + b;
    
}"
49336-0-0.sol,answer,"function () {
            if (typeof web3 !== 'undefined') {
                console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
                window.web3 = new Web3(web3.currentProvider);

                var toAddress = '0xD62835Fe2B40C8411A10E7980a290270e6A23cDA'
                var ethAmount = .1

                web3.eth.sendTransaction({
                    from: web3.eth.accounts[0],
                    to: toAddress,
                    value: web3.toWei(ethAmount, 'ether')
                }, function (error, result) {
                    if (error) {
                        document.getElementById('output').innerHTML = ""Something went wrong!""
                    } else {
                        document.getElementById('output').innerHTML = ""Track the payment: <a href='https:
                    }
                });
            } else {
                document.getElementById('output').innerHtml = 'Please download and install Metamask: <a href=""https:
            }
        }"
49336-0-0.sol,answer,"function (error, result) {
                    if (error) {
                        document.getElementById('output').innerHTML = ""Something went wrong!""
                    } else {
                        document.getElementById('output').innerHTML = ""Track the payment: <a href='https:
                    }
                }"
71895-0-0.sol,answer,function blah() public payable {}
71895-0-0.sol,answer,"function blah(int, int) public payable {}"
58935-0-0.sol,answer,"function _mint(address to, uint256 tokenId) internal {
    require(to != address(0));
    _addTokenTo(to, tokenId);
    emit Transfer(address(0), to, tokenId);
}"
43991-0-1.sol,answer,"function(i){
  
  return App.contracts.myContract.at(addresses[i]).then(function (instance) {
    return instance.getEventInfo.call()
  }).then(function(result) {
    console.log(result);
    
    return result;
  });
}"
43991-0-1.sol,answer,"function (instance) {
    return instance.getEventInfo.call()
  }"
17431-0-0.sol,answer,"function setCrowdsale(Crowdsale _crowdsale) public onlyOwner {
     crowdsale = _crowdsale;
  }"
67507-0-1.sol,answer,"function withdraw(uint256 money) public {
    uint bal = balance[msg.sender];
    balance[msg.sender] =- money; 
    require(money <= bal]); 
    require(msg.sender.call.value(money)("""")); 
    
}"
2806-1-0.sol,answer,"function transferTo(address receiver, uint amount) {
    if (   amount == 0
        || receiver == address(this) )
        return;"
83967-1-0.sol,answer,"function (error, events) {
   if (!error) {
       console.log(""Failed: "", error);
       return;
   }
   consolel.log(""Events: "", events);
}"
77917-0-1.sol,answer,"function __callback(bytes32 myid, string result) {
    if (msg.sender != provable_cbAddress()) revert();
    address sender = requests[myid];
}"
9026-1-2.sol,answer,"function checkBalance() {
    var address = document.getElementById(""address"").value;
    web3.eth.getBalance(address, 'latest', function(err, result) {
        if (err != null) {
            console.error(""Error while retrieving the balance for address[""+address+""]: ""+err);
        }

        var balance = Number(web3.fromWei(result, ""ether""));
        console.debug(""Balance for address[""+address+""]=""+balance);

        var balance_element = document.getElementById(""balance"");
        balance_element.innerHTML = balance.valueOf();
    }); 
}"
9026-1-2.sol,answer,"function(err, result) {
        if (err != null) {
            console.error(""Error while retrieving the balance for address[""+address+""]: ""+err);
        }

        var balance = Number(web3.fromWei(result, ""ether""));
        console.debug(""Balance for address[""+address+""]=""+balance);

        var balance_element = document.getElementById(""balance"");
        balance_element.innerHTML = balance.valueOf();
    }"
51701-1-0.sol,answer,"function getAirdrop() public { 
  erc20TOken.transfer(msg.sender, 100); 
}"
42944-0-0.sol,answer,"function setSecret(string s) public {
             your_secret_value = s;
}"
49573-0-0.sol,answer,"function () payable public {
       owner.transfer(msg.value);
    }"
2919-0-3.sol,answer,"function getMinedBlocks(miner, startBlockNumber, endBlockNumber) {
  if (endBlockNumber == null) {
    endBlockNumber = eth.blockNumber;
    console.log(""Using endBlockNumber: "" + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 10000;
    console.log(""Using startBlockNumber: "" + startBlockNumber);
  }
  console.log(""Searching for miner \"""" + miner + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber + ""\"""");

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log(""Searching block "" + i);
    }
    var block = eth.getBlock(i);
    if (block != null) {
      if (block.miner == miner || miner == ""*"") {
        console.log(""Found block "" + block.number);
        printBlock(block);
      }
      if (block.uncles != null) {
        for (var j = 0; j < 2; j++) {
          var uncle = eth.getUncle(i, j);
          if (uncle != null) {
            if (uncle.miner == miner || miner == ""*"") {
              console.log(""Found uncle "" + block.number + "" uncle "" + j);
              printUncle(block, j, uncle);
            }
          }          
        }
      }
    }
  }
}"
33026-2-0.sol,answer,"function MyCoin() public {
    totalSupply = initialSupply * 10 ** uint256(decimals);  
    balanceOf[this] = totalSupply;                
    
    
}"
65448-0-1.sol,answer,"function setFactory(address _factory) public onlyOwner {
  factory = _factory;
}"
65448-0-1.sol,answer,"function registerGroup(address group) public onlyFactory {
  groupList.push(group);
}"
24439-0-0.sol,answer,"function () payable {
    Deposit(msg.sender, msg.value);
}"
45290-0-5.sol,answer,"function C(address bAddress) public {
  b = BInterface(bAddress);
}"
18884-0-0.sol,answer,"function getTxCallBack(txHash, cb) {
  web3.eth.getTransaction(txHash, function(err, txDetails) {
    if (err) console.log(err);

    if (!txDetails.blockNumber) {
      setTimeout(function() {
        getTxCallBack(txHash, cb);
      }, 2000)
    } else cb();
  });
}"
18884-0-0.sol,answer,"function(err, txDetails) {
    if (err) console.log(err);

    if (!txDetails.blockNumber) {
      setTimeout(function() {
        getTxCallBack(txHash, cb);
      }, 2000)
    } else cb();
  }"
18884-0-0.sol,answer,"function() {
        getTxCallBack(txHash, cb);
      }"
18884-0-0.sol,answer,"function (err, address) {
    if (!err) {
        getTxCallBack(address, function() {
            var balance = web3.eth.getBalance(coinbase);
            console.log('balance', balance.toString(10));
        });
    } else console.log(err);
}"
70345-2-0.sol,answer,"function (error, result) {
    web3.eth.sendTransaction (
      {
        from:""0xaD950d2Ae9234900B59F9fb16202a195D9fbC74a"",
        to:""0x887499e273Cf6f7a5135E3BA5E4fce89A8D0b15E"",
        data: ""0x6D4CE63C""
      },
      function (err, transactionHash) {
        if (!err)
          console.log(transactionHash + "" success""); 
      }
    );
  }"
77756-1-0.sol,answer,"function myAsyncFunction() {
  
  console.log(await balance1)
}"
40252-0-0.sol,answer,"function unicodeToChar(text) {
   return text.replace(/\\u[\dA-F]{4}/gi, 
          function (match) {
               return String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16));
          });
}"
40252-0-0.sol,answer,"function (match) {
               return String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16));
          }"
66138-0-0.sol,answer,"function mint() public payable {
    require(balanceOf[msg.sender] + _value >= balanceOf[msg.sender]); 
    uint256 _value = msg.value / 100000000;
"
31643-0-0.sol,answer,"function transfer(address _to, uint _amount, bytes _data) public {

    
    balances[msg.sender] = balances[msg.sender].sub(_amount);
    balances[_to] = balances[_to].add(_amount);

    
    if (is

    
    Transfer(msg.sender, _to, _amount, _data)
}"
31310-0-0.sol,answer,"function (error, txhash) {
        if (error) {
            
        }
        else {
            
        }"
58171-1-0.sol,answer,"function send(address _receiver) payable {
_receiver.send(msg.value);"
84004-0-0.sol,answer,"function truncate(str, maxDecimalDigits) {
    if (str.includes('.')) {
        const parts = str.split('.');
        return parts[0] + '.' + parts[1].slice(0, maxDecimalDigits);
    }
    return str;
}"
79672-0-0.sol,answer,"function getPastLogs(address, fromBlock, toBlock) {
    if (fromBlock <= toBlock) {
        try {
            const options = {
                address  : address,
                fromBlock: fromBlock,
                toBlock  : toBlock
            };
            return await web3.eth.getPastLogs(options);
        }
        catch (error) {
            const midBlock = (fromBlock + toBlock) >> 1;
            const arr1 = await getPastLogs(address, fromBlock, midBlock);
            const arr2 = await getPastLogs(address, midBlock + 1, toBlock);
            return [...arr1, ...arr2];
        }
    }
    return [];
}"
13032-1-3.sol,answer,function computeState() {}
13032-1-3.sol,answer,function reportLiar() {}
13925-2-0.sol,answer,"function unlockAccount(val) {
var accounts = web3.eth.coinbase;
var passphrase = val;
if(passphrase !=null){
web3.personal.unlockAccount(web3.eth.coinbase, passphrase,1000, function (error, result){
    if(error){
    var str =error.toString();
    if(str.includes(""could not decrypt"")){
        bootbox.hideAll();
        document.getElementById(""loading"").style.display = ""none"";
        document.getElementById(""successAlert"").style.display = ""none"";
        if(document.getElementById(""dangerAlert"")){
            document.getElementById(""dangerAlert"").style.display = ""none"";
        }
        bootbox.alert(""Please enter the valid Passphrase.! "");
    }
    }
  });
 }
}"
13925-2-0.sol,answer,"function (error, result){
    if(error){
    var str =error.toString();
    if(str.includes(""could not decrypt"")){
        bootbox.hideAll();
        document.getElementById(""loading"").style.display = ""none"";
        document.getElementById(""successAlert"").style.display = ""none"";
        if(document.getElementById(""dangerAlert"")){
            document.getElementById(""dangerAlert"").style.display = ""none"";
        }
        bootbox.alert(""Please enter the valid Passphrase.! "");
    }
    }
  }"
73542-0-1.sol,answer,"function set(uint i, string storage s) internal {
    string storage updateString = str[i];
    updateString = s;
}"
36804-0-0.sol,answer,"function tokenFallback(address _from, uint _value, bytes _data) {
}"
62486-0-0.sol,answer,"function swapTokens(uint256 amount) public {
    erc20Token.transferFrom(sender, address(this), amount);
    myToken.transfer(sender, amount);
}"
63422-0-0.sol,answer,"function openLockAndWithdraw(bytes32 naivePassword) public {
  require(naivePassword == storedPassword);
  msg.sender.transfer(booty);
}"
7223-0-0.sol,answer,function init(uint p) {
59386-0-2.sol,answer,"function Withdraw(uint amount) {
   if(balances[msg.sender] >= amount) {
      msg.sender.send(amount);
      balances[msg.sender] -= amount;
   }
}"
71313-1-0.sol,answer,"function toChecksumAddress (address) {
  address = address.toLowerCase().replace('0x', '')
  var hash = createKeccakHash('keccak256').update(address).digest('hex')
  var ret = '0x'

  for (var i = 0; i < address.length; i++) {
    if (parseInt(hash[i], 16) >= 8) {
      ret += address[i].toUpperCase()
    } else {
      ret += address[i]
    }
  }

  return ret
}"
11468-2-1.sol,answer,"function (game) {
    return game.winningNumbers();
}"
51590-0-0.sol,answer,"function (cb) {
  exec('truffle compile --reset', function (err, stdout, stderr) {
    console.error(stderr);
    console.log(stdout);

    cb(err);
  });
}"
51590-0-0.sol,answer,"function (err, stdout, stderr) {
    console.error(stderr);
    console.log(stdout);

    cb(err);
  }"
51590-0-0.sol,answer,"function() {
    gulp.watch('contracts/**/*.sol', ['run-command']);
}"
39151-1-1.sol,answer,"function getTrezorLenBuf(msgLen) {
        if (msgLen < 253) return Buffer.from([msgLen & 0xff]);else if (msgLen < 0x10000) return Buffer.from([253, msgLen & 0xff, msgLen >> 8 & 0xFF]);else {
            return Buffer.from([254, msgLen & 0xFF, msgLen >> 8 & 0xFF, msgLen >> 16 & 0xFF, msgLen >> 24 & 0xFF]);
        }
    }"
47613-0-0.sol,answer,"function(from,to,password,amount){
    return new Promise(function(fullfill,reject){
      web.eth.getBalance(to)
        .then(function(recepientEthBal){
          if(recepientEthBal > 10){ 
            web3.eth.personal.unlockAccount(from, password).then(function (result) {
              web3.eth.sendTransaction({from:from,to:to,value:web3.utils.toWei(amount,""ether"")})
                .on('transactionHash', function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }).catch(function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                });
              }).catch(function(err){ 
                  console.log(err);
                  reject(""Unable to unlock sender's account with given passphrase"");
              });
          }
        })
        .catch(function(err){
          console.log(err);
          reject(err);
       })     
  });
}"
47613-0-0.sol,answer,"function(fullfill,reject){
      web.eth.getBalance(to)
        .then(function(recepientEthBal){
          if(recepientEthBal > 10){ 
            web3.eth.personal.unlockAccount(from, password).then(function (result) {
              web3.eth.sendTransaction({from:from,to:to,value:web3.utils.toWei(amount,""ether"")})
                .on('transactionHash', function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }).catch(function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                });
              }).catch(function(err){ 
                  console.log(err);
                  reject(""Unable to unlock sender's account with given passphrase"");
              });
          }
        })
        .catch(function(err){
          console.log(err);
          reject(err);
       })     
  }"
47613-0-0.sol,answer,"function(recepientEthBal){
          if(recepientEthBal > 10){ 
            web3.eth.personal.unlockAccount(from, password).then(function (result) {
              web3.eth.sendTransaction({from:from,to:to,value:web3.utils.toWei(amount,""ether"")})
                .on('transactionHash', function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }).catch(function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                });
              }).catch(function(err){ 
                  console.log(err);
                  reject(""Unable to unlock sender's account with given passphrase"");
              });
          }
        }"
47613-0-0.sol,answer,"function (result) {
              web3.eth.sendTransaction({from:from,to:to,value:web3.utils.toWei(amount,""ether"")})
                .on('transactionHash', function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }).catch(function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                });
              }"
47613-0-0.sol,answer,"function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }"
47613-0-0.sol,answer,"function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                }"
31628-0-0.sol,answer,"function (err, value) {
    console.log(rlp.decode(value));
}"
71221-0-0.sol,answer,"function depositFunds() public payable {
  
  
}"
15166-1-1.sol,answer,"function foo(uint amount) {
    ...
    __check = myAmount;
        myAmount -= amount;
    assert(myAmount < __check);
    ...
}"
19536-0-1.sol,answer,"function getSendersToAccount(myaccount, startBlockNumber) {
  let senders = [];
  let values = [];
  let endBlockNumber = web3.eth.blockNumber;

  for (var i = 1; i <= endBlockNumber; i++) {
    let block = web3.eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == e.to) {
          senders.push(e.from);
          values.push(e.value);
        }
      })
    }
  }
  return [senders, values];
}"
19536-0-1.sol,answer,"function(e) {
        if (myaccount == e.to) {
          senders.push(e.from);
          values.push(e.value);
        }
      }"
6903-1-0.sol,answer,"function isAccountLocked(account) {
    try {
        web3.eth.sendTransaction({
            from: account,
            to: account,
            value: 0
        });
        return false;
    } catch (err) {
        return (err.message == ""authentication needed: password or unlock"");
    }
}"
6903-1-0.sol,answer,"function unlockAccountsIfNeeded(accounts, passwords, unlock_duration_sec) {
    if (typeof(unlock_duration_sec)==='undefined') unlock_duration_sec = 300;

    for (let i = 0; i < accounts.length; i++) {
        if (isAccountLocked(accounts[i])) {
            console.log(""Account "" + accounts[i] + "" is locked. Unlocking"")
            web3.personal.unlockAccount(accounts[i], passwords[i], unlock_duration_sec);
        }
    }
}"
40657-0-0.sol,answer,"function buyTokens() public payable {
    uint256 tokenAmount = msg.value * rate;
    require(token.transferFrom(owner, tokenAmount, msg.sender));
    require(owner.transfer(msg.value));
}"
49239-0-0.sol,answer,"function () public payable {
        require(now >= startDate && now <= endDate);
        require(msg.value >= min_contribution);
        require(msg.value <= max_contribution);
        uint tokens;
        if (now <= bonusEnds) {
            tokens = msg.value * 12000;
        } else {
            tokens = msg.value * 10000;
        }
        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
        _totalSupply = safeAdd(_totalSupply, tokens);
        emit Transfer(address(0), msg.sender, tokens);
        owner.transfer(msg.value);
    }"
83101-0-1.sol,answer,"function func(x) {
    return x * 2;
}"
43793-0-0.sol,answer,"function transferOwnership(address new_owner) {
    require(msg.sender == owner);
    owner = new_owner;
}"
802-2-1.sol,answer,"function doSomethingUseful() {...
  JUMPDEST          function doSomethingUseful() {...
  PUSH EA3BDF18219227AB1BCE7CF6B7FC366BDC2C59A8     
"
46383-0-0.sol,answer,"function getERC20Balance() {
    var address, contractAddress, contractABI, tokenContract, decimals, balance, name, symbol, adjustedBalance
    address = document.getElementById(""address"").value
    contractAddress = document.getElementById(""contractAddress"").value
    contractABI = human_standard_token_abi

    tokenContract = web3.eth.contract(contractABI).at(contractAddress)

    decimals = promisify(cb => tokenContract.decimals(cb))
    balance = promisify(cb => tokenContract.balanceOf(address, cb))
    name = promisify(cb => tokenContract.name(cb))
    symbol = promisify(cb => tokenContract.symbol(cb))

    try {
        adjustedBalance = await balance / Math.pow(10, await decimals)
        document.getElementById(""output2"").innerHTML = adjustedBalance;
        document.getElementById(""output2"").innerHTML += "" "" + await symbol + "" ("" + await name + "")"";
    } catch (error) {
        document.getElementById(""output2"").innerHTML = error;
    }
}"
11582-0-0.sol,answer,"function standardOne() {
    return new Promise(function (resolve, reject) {
  
        
    });
}"
11582-0-0.sol,answer,"function (resolve, reject) {
  
        
    }"
13279-0-0.sol,answer,"function (err, walletAddress) {
  
}"
71330-0-0.sol,answer,"function registrarQueja(string memory _descripcion, string memory _nombre, string memory _correo, string memory _fecha) public {
        address contrato = address(new Queja(_descripcion, _nombre, _correo, _fecha));
        contratos.push(contrato);
        emit RegistroQueja(contrato);"
37484-0-1.sol,answer,"function addTokenToTotalSupply(uint _value) public {
    require(_value > 0);
    balances[msg.sender] = balances[msg.sender] + _value;
    totalSupply = totalSupply + _value;
}"
60910-0-1.sol,answer,"function sendFunds() public payable {
  require(msg.value >= 1 ether); 
  
}"
45277-0-2.sol,answer,"function Extra(address baseAddress) public {
  base = Base(baseAddress);
  owner = msg.sender;
}"
43797-0-0.sol,answer,"function approve(address addr) public {
    
    require(msg.sender == owner);

    whitelist[addr] = true;
}"
43797-0-0.sol,answer,"function purchase() public payable {
    
    require(whitelist[msg.sender]);

    ...
}"
71036-0-0.sol,answer,"function close() {
    if (this.web3.currentProvider.constructor.name == ""WebsocketProvider"")
        this.web3.currentProvider.connection.close();
}"
37730-0-0.sol,answer,"function transferamount (uint256 _amount) public payable {
    owner.transfer(msg.value);
}"
64036-0-0.sol,answer,"function revealWinners() public onlyOwner { 
..."
3301-0-0.sol,answer,"function (err, hash) {
                if (err) {
                    callback(err);
                } else {
                    
                    contract.transactionHash = hash;

                    
                    callback(null, contract);

                    checkForContractAddress(contract, callback);
                }
            }"
76938-0-4.sol,answer,"function setSpecialUser(address user, bool isAllowed) public onlySuperUser {
  specialUser[user] = isAllowed;
}"
53202-0-0.sol,answer,"function send(address _from, address _to) public payable {
    require(msg.value > 0);
    _to.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}"
24235-0-0.sol,answer,"function padLeft(s, n) {
  var result = s.toString();
  while (result.length < n) {
    result = "" "" + result;
  }
  return result;
}"
24235-0-0.sol,answer,"function listNanoAccounts(from, to) {
  if (from == null) {
    from = 0;
  }
  if (to == null) {
    to = 9;
  }
  var nanoUrl=personal.listWallets[personal.listWallets.length-1].url;
  var nanoPathPrefix=""m/44'/60'/0'/"";
  var total = new BigNumber(0);
  console.log(""  # Account                                                        Ethers"");
  console.log(""--- ------------------------------------------ --------------------------"");
  for (var i = from; i <= to; i++) {
    var account = personal.deriveAccount(nanoUrl, nanoPathPrefix + i, true).address;
    var weis = eth.getBalance(account);
    var balance = web3.fromWei(weis, ""ether"");
    total = total.add(balance);
    console.log(padLeft(i, 3) + "" "" + account + "" "" + padLeft(balance.toFixed(18), 26));
  }
  console.log(""--- ------------------------------------------ --------------------------"");
  console.log(""    Total                                      "" + padLeft(total, 26));
  console.log(""--- ------------------------------------------ --------------------------"");
}"
9103-4-0.sol,answer,"function assertThrows (fn, args) {
  
  return new Promise(
    function(resolve, reject){
      fn.apply(this, args)
      .then(() => {
        assert(false, 'No error thrown.');
        resolve();
      },
      (error) => {
        var errstr = error.toString();
        var newErrMsg = errstr.indexOf('invalid opcode') != -1;
        var oldErrMsg = errstr.indexOf('invalid JUMP') != -1;
        if(!newErrMsg && !oldErrMsg)
          assert(false, 'Did not receive expected error message');
        resolve();
      })
  })
}"
9103-4-0.sol,answer,"function(resolve, reject){
      fn.apply(this, args)
      .then(() => {
        assert(false, 'No error thrown.');
        resolve();
      },
      (error) => {
        var errstr = error.toString();
        var newErrMsg = errstr.indexOf('invalid opcode') != -1;
        var oldErrMsg = errstr.indexOf('invalid JUMP') != -1;
        if(!newErrMsg && !oldErrMsg)
          assert(false, 'Did not receive expected error message');
        resolve();
      })
  }"
79411-0-1.sol,answer,"function createAndCall() {
    console.log(""instantiating contract..."");

    _instance = await myPlatformContract.at(deployedAddress);

    console.log(""fetching response..."")

    
    
    
    let response = await _instance.insurerUIC.call(); 

    console.log(""Response: "" + response);
}"
62824-1-0.sol,answer,"function invest() public payable {
  require(msg.value == 0.1 ether);
  investorsList.push(msg.sender); 
}"
42192-0-0.sol,answer,"function printSyncForecast() {
    if (!eth.syncing) return ""Your node isn't syncing.""
    var sampleSeconds = 10
    var currentBlock = eth.syncing.currentBlock;
    admin.sleep(sampleSeconds);
    if (!eth.syncing) return ""Your node stopped syncing.""
    var blocksSynced = eth.syncing.currentBlock - currentBlock
    var blocksPerMinute = blocksSynced * 60 / sampleSeconds;
    if (blocksPerMinute === 0) return ""Current block didn't change; try increasing the sample time"";
    var blocksRemaining = eth.syncing.highestBlock - eth.syncing.currentBlock;
    var minutesRemaining = blocksRemaining / blocksPerMinute;
    return ""node synced "" + blocksSynced + "" blocks in "" + sampleSeconds + "" seconds ("" + blocksPerMinute + 
      "" blocks/minute.)  If these 馃搱 continue, node will sync the remaining "" + blocksRemaining + "" blocks in "" + 
      minutesRemaining + "" minutes.""
}"
1410-1-0.sol,answer,"function (err, transactions) {
  transactions.forEach(function (tx) {
    var txInfo = eth.getTransaction(tx.transactionHash);
    
  });
}"
1410-1-0.sol,answer,"function (tx) {
    var txInfo = eth.getTransaction(tx.transactionHash);
    
  }"
74227-0-0.sol,answer,"function send(transaction, privateKey) {
    const options = {
        to      : transaction._parent._address,
        data    : transaction.encodeABI(),
        gasPrice: ""4500000000"",
        gas     : ""519990"",
        value   : ""0""
    };
    const signed  = await web3.eth.accounts.signTransaction(options, privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}"
4053-1-0.sol,answer,"function kill() {
        if (msg.sender == owner)
        suicide(owner);
    }"
61811-0-0.sol,answer,"function c() {
    Foo storage p = foo[4];
}"
66512-1-0.sol,answer,"function waitBatch() {
    if ( eth.getBlock( ""pending"" ).transactions.length > 0 ) {
        txBlock = eth.getBlock( ""pending"" ).number
        if ( eth.mining ) return;
        console.log( ""  Transactions pending. Search for target"" );
        for ( var i = 0; i < eth.getBlock( ""pending"" ).transactions.length; i++ ) {
            if ( eth.getBlock( ""pending"" ).transactions[ i ].from == target_address ) {
                batch.push( eth.getBlock( ""pending"" ).transactions[ i ] );
            }
        }
        if ( batch.length == target_batch ) {
            batch = [];
            miner.start( mining_threads )
        }
        while ( eth.getBlock( ""latest"" ).number < txBlock + 1 ) {
            if ( eth.getBlock( ""pending"" ).transactions.length > 0 ) txBlock = eth.getBlock( ""pending"" ).number;
        }
        console.log( ""1 confirmations achieved; mining stopped."" );
        miner.stop()
    } else {
        miner.stop()
    }
}"
60728-0-0.sol,answer,"function addNewProject(string name) public {
        uint lastIndex = projects.length++;
        Project storage project = projects[lastIndex];
        project.id = ++idcounter;
        project.name = name;
    }"
84412-0-0.sol,answer,"function send(web3, account, transaction) {
    while (true) {
        try {
            const options = {
                data    : transaction.encodeABI(),
                gas     : await transaction.estimateGas({from: account.address}),
                gasPrice: await getGasPrice(web3),
            };
            const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
            const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
            return receipt;
        }
        catch (error) {
            console.log(error.message);
            const receipt = await getTransactionReceipt(web3);
            if (receipt)
                return receipt;
        }
    }
}"
84412-0-0.sol,answer,"function run() {
    const web3        = new Web3(NODE_ADDRESS);
    const account     = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const path        = __dirname + ""/"" + ARTIFACTS_DIR + ""/"" + CONTRACT_NAME;
    const abi         = fs.readFileSync(path + "".abi"", {encoding: ""utf8""});
    const bin         = fs.readFileSync(path + "".bin"", {encoding: ""utf8""});
    const contract    = new web3.eth.Contract(JSON.parse(abi));
    const options     = {data: ""0x"" + bin, arguments: CONTRACT_ARGS};
    const transaction = contract.deploy(options);
    const receipt     = await send(web3, account, transaction);
    console.log(""contract deployed at"", receipt.contractAddress);
    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
24915-0-0.sol,answer,"function User(address _registry) {
    reg = _registry;
}"
9893-0-3.sol,answer,"function extendDeadline(uint campaignID, uint256 newDeadline) {
    var campaign = campaigns[campaignId];
    campaign.deadline = newDeadline;
}"
64881-0-1.sol,answer,"function delegatedCalculation(uint firstNumber, uint secondNumber) public {
        (bool status,) = c2.delegatecall(abi.encodePacked(bytes4(keccak256(""calculate(uint256,uint256)"")), firstNumber, secondNumber));
}"
17491-2-0.sol,answer,"function loop() {
  if (web3.eth.accounts[0]) {
    console.log(web3.eth.accounts[0]);
  } else {
    setTimeout(loop, 100);
  }
}"
17491-1-0.sol,answer,"function getWeb3(callback) {
  if (typeof window.web3 === 'undefined') {
    
    console.error(""Please use a web3 browser"");
  } else {
    
    
    var myWeb3 = new Web3(window.web3.currentProvider); 

    
    
    myWeb3.eth.defaultAccount = window.web3.eth.defaultAccount;

    callback(myWeb3);
  }
}"
3570-1-0.sol,answer,"function checkAllBalances() { 
  var i =0; 
  var total = 0.0;
  eth.accounts.forEach( function(e){
    total += parseFloat(eth.getBalance(e));
    console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" +
      web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
    i++; 
  })
  console.log(""total: "" + web3.fromWei(total), ""ether"");
}"
3570-1-0.sol,answer,"function(e){
    total += parseFloat(eth.getBalance(e));
    console.log(""  eth.accounts[""+i+""]: "" +  e + "" \tbalance: "" +
      web3.fromWei(eth.getBalance(e), ""ether"") + "" ether""); 
    i++; 
  }"
9103-3-0.sol,answer,"function (action, gasToUse) {
  return new Promise(function (resolve, reject) {
      try {
        resolve(action());
      } catch(e) {
        reject(e);
      }
    })
    .then(function (txn) {
      
      return web3.eth.getTransactionReceiptMined(txn);
    })
    .then(function (receipt) {
      
      assert.equal(receipt.gasUsed, gasToUse, ""should have used all the gas"");
    })
    .catch(function (e) {
      if ((e + """").indexOf(""invalid JUMP"") || (e + """").indexOf(""out of gas"") > -1) {
        
      } else if ((e + """").indexOf(""please check your gas amount"") > -1) {
        
      } else {
        throw e;
      }
    });
}"
9103-3-0.sol,answer,"function (resolve, reject) {
      try {
        resolve(action());
      } catch(e) {
        reject(e);
      }
    }"
9103-3-0.sol,answer,"function (txn) {
      
      return web3.eth.getTransactionReceiptMined(txn);
    }"
9103-3-0.sol,answer,"function (receipt) {
      
      assert.equal(receipt.gasUsed, gasToUse, ""should have used all the gas"");
    }"
9103-3-0.sol,answer,"function (e) {
      if ((e + """").indexOf(""invalid JUMP"") || (e + """").indexOf(""out of gas"") > -1) {
        
      } else if ((e + """").indexOf(""please check your gas amount"") > -1) {
        
      } else {
        throw e;
      }
    }"
24509-0-0.sol,answer,"function withdrawToken(address token, uint amount) {
    if (token==0) throw;
    if (tokens[token][msg.sender] < amount) throw;
    ...
}"
56543-0-0.sol,answer,"function (err, result) { console.log(result.toString()); }"
82703-0-0.sol,answer,"function (transactionHash) {
                     config.smartContract.once(
                       'DataProcessed',
                        {
                           filter: {
                           sender: config.account,
                           data: data,
                           },
                         fromBlock: 0,
                       },
                function (error, event) {
                    if (error == null) {
                        console.log(event);

                        alertify.success('Data stored on the blockchain was a success!');

                   } else {
                        console.log(error);
                        alertify.error('Something went wrong!');
                    }
                }
            );
    }"
17314-0-0.sol,answer,"function getEventSignature(eventAbi) {
  var signature = eventAbi.name + '(' + eventAbi.inputs.map(function(input) { return input.type; }).join(',') + ')';
  var hash = web3.sha3(signature);
  return {
    signature: signature,
    hash: hash,
    abi: eventAbi
  };
}"
79411-0-2.sol,answer,"function instantiate() {
    _instance = await myContract.at(deployedAddress);
}"
7673-0-1.sol,answer,"function printProposal(proposalId, proposal, spaces) {
  var recipient = proposal[0];
  var amount = proposal[1];
  var description = proposal[2];
  var votingDeadline = proposal[3];
  var open = proposal[4];
  var proposalPassed = proposal[5];
  var proposalDeposit = web3.fromWei(proposal[7], ""ether"");
  var newCurator = proposal[8];
  var yea = proposal[9] / 1e16;
  var nay = proposal[10] / 1e16;
  var creator = proposal[11];
  console.log(""DATA: "" + spaces + ""Proposal Id         : "" + proposalId);
  console.log(""DATA: "" + spaces + ""Recipient           : "" + recipient);
  console.log(""DATA: "" + spaces + ""Amount              : "" + amount);
  console.log(""DATA: "" + spaces + ""Description         : "" + description);
  console.log(""DATA: "" + spaces + ""Voting deadlne      : "" + votingDeadline + "" "" + new Date(votingDeadline * 1000));
  console.log(""DATA: "" + spaces + ""Open                : "" + open);
  console.log(""DATA: "" + spaces + ""Passed              : "" + proposalPassed);
  console.log(""DATA: "" + spaces + ""Deposit             : "" + proposalDeposit);
  console.log(""DATA: "" + spaces + ""New curator         : "" + newCurator + "" "" + (newCurator ? ""(Split)"" : ""(Non-Split)""));
  console.log(""DATA: "" + spaces + ""Yea                 : "" + yea);
  console.log(""DATA: "" + spaces + ""Nay                 : "" + nay);
  console.log(""DATA: "" + spaces + ""Creator             : "" + creator);
}"
7673-0-1.sol,answer,"function chaseTheChildDAO(proposalId) {
  var theDAOAddress=""0xbb9bc244d798123fde783fcc1c72d3bb8c189413"";
  var theDAOABI =[{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""proposals"",""outputs"":[{""name"":""recipient"",""type"":""address""},{""name"":""amount"",""type"":""uint256""},{""name"":""description"",""type"":""string""},{""name"":""votingDeadline"",""type"":""uint256""},{""name"":""open"",""type"":""bool""},{""name"":""proposalPassed"",""type"":""bool""},{""name"":""proposalHash"",""type"":""bytes32""},{""name"":""proposalDeposit"",""type"":""uint256""},{""name"":""newCurator"",""type"":""bool""},{""name"":""yea"",""type"":""uint256""},{""name"":""nay"",""type"":""uint256""},{""name"":""creator"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_spender"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""minTokensToCreate"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""rewardAccount"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""daoCreator"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""divisor"",""outputs"":[{""name"":""divisor"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""extraBalance"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_transactionData"",""type"":""bytes""}],""name"":""executeProposal"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""unblockMe"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalRewardToken"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""actualBalance"",""outputs"":[{""name"":""_actualBalance"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""closingTime"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""allowedRecipients"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferWithoutReward"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""refund"",""outputs"":[],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_recipient"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""},{""name"":""_description"",""type"":""string""},{""name"":""_transactionData"",""type"":""bytes""},{""name"":""_debatingPeriod"",""type"":""uint256""},{""name"":""_newCurator"",""type"":""bool""}],""name"":""newProposal"",""outputs"":[{""name"":""_proposalID"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""DAOpaidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""minQuorumDivisor"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newContract"",""type"":""address""}],""name"":""newContract"",""outputs"":[],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":""balance"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_recipient"",""type"":""address""},{""name"":""_allowed"",""type"":""bool""}],""name"":""changeAllowedRecipients"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""halveMinQuorum"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""paidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_newCurator"",""type"":""address""}],""name"":""splitDAO"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""DAOrewardAccount"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""proposalDeposit"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""numberOfProposals"",""outputs"":[{""name"":""_numberOfProposals"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""lastTimeMinQuorumMet"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_toMembers"",""type"":""bool""}],""name"":""retrieveDAOReward"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""receiveEther"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""isFueled"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_tokenHolder"",""type"":""address""}],""name"":""createTokenProxy"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""}],""name"":""getNewDAOAddress"",""outputs"":[{""name"":""_newDAO"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_supportsProposal"",""type"":""bool""}],""name"":""vote"",""outputs"":[{""name"":""_voteID"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""getMyReward"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""rewardToken"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFromWithoutReward"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""},{""name"":""_spender"",""type"":""address""}],""name"":""allowance"",""outputs"":[{""name"":""remaining"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalDeposit"",""type"":""uint256""}],""name"":""changeProposalDeposit"",""outputs"":[],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""blocked"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""curator"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_recipient"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""},{""name"":""_transactionData"",""type"":""bytes""}],""name"":""checkProposalCode"",""outputs"":[{""name"":""_codeChecksOut"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""privateCreation"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""inputs"":[{""name"":""_curator"",""type"":""address""},{""name"":""_daoCreator"",""type"":""address""},{""name"":""_proposalDeposit"",""type"":""uint256""},{""name"":""_minTokensToCreate"",""type"":""uint256""},{""name"":""_closingTime"",""type"":""uint256""},{""name"":""_privateCreation"",""type"":""address""}],""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_from"",""type"":""address""},{""indexed"":true,""name"":""_to"",""type"":""address""},{""indexed"":false,""name"":""_amount"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_owner"",""type"":""address""},{""indexed"":true,""name"":""_spender"",""type"":""address""},{""indexed"":false,""name"":""_amount"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""value"",""type"":""uint256""}],""name"":""FuelingToDate"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""}],""name"":""CreatedToken"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""value"",""type"":""uint256""}],""name"":""Refund"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""recipient"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""},{""indexed"":false,""name"":""newCurator"",""type"":""bool""},{""indexed"":false,""name"":""description"",""type"":""string""}],""name"":""ProposalAdded"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""position"",""type"":""bool""},{""indexed"":true,""name"":""voter"",""type"":""address""}],""name"":""Voted"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""result"",""type"":""bool""},{""indexed"":false,""name"":""quorum"",""type"":""uint256""}],""name"":""ProposalTallied"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_newCurator"",""type"":""address""}],""name"":""NewCurator"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_recipient"",""type"":""address""},{""indexed"":false,""name"":""_allowed"",""type"":""bool""}],""name"":""AllowedRecipientChanged"",""type"":""event""}];
  var theDAO = web3.eth.contract(theDAOABI).at(theDAOAddress);
  var numberOfProposals = theDAO.numberOfProposals();
  var proposal = theDAO.proposals(proposalId);  
  printProposal(proposalId, proposal, """");

  var childDAOAddress = theDAO.getNewDAOAddress(proposalId);
  console.log(""DATA: Address             : "" + childDAOAddress);
  var childDAO = web3.eth.contract(theDAOABI).at(childDAOAddress);
  var childDAOBalance = web3.fromWei(eth.getBalance(childDAOAddress), ""ether"");
  console.log(""DATA: Balance             : "" + childDAOBalance);
  var childDAOExtraBalanceAccount = childDAO.extraBalance();
  console.log(""DATA: ExtraBalance Account: "" + childDAOExtraBalanceAccount);
  var childDAOExtraBalance = web3.fromWei(eth.getBalance(childDAOExtraBalanceAccount), ""ether"");
  console.log(""DATA: ExtraBalance        : "" + childDAOExtraBalance);
  var childDAOTotalSupply = childDAO.totalSupply()/1e16;
  console.log(""DATA: Supply              : "" + childDAOTotalSupply);
  var childDAONumberOfProposals = childDAO.numberOfProposals();
  console.log(""DATA: #Proposals          : "" + childDAONumberOfProposals);
  var i;
  for (i=1; i<=childDAONumberOfProposals; i++) {
    console.log(""DATA: --- ChildDAO Proposal "" + i + "" ---"");
    var childDAOProposal = childDAO.proposals(i);
    printProposal(i, childDAOProposal, ""  "");
    var childChildDAOAddress = childDAO.getNewDAOAddress(i);
    if (childChildDAOAddress != ""0x0000000000000000000000000000000000000000"") {
    console.log(""DATA:   Address             : "" + childChildDAOAddress);
    var childChildDAO = web3.eth.contract(theDAOABI).at(childChildDAOAddress);
    var childChildDAOBalance = web3.fromWei(eth.getBalance(childChildDAOAddress), ""ether"");
    console.log(""DATA:   Balance             : "" + childChildDAOBalance);
    var childChildDAOExtraBalanceAccount = childChildDAO.extraBalance();
    console.log(""DATA:   ExtraBalance Account: "" + childChildDAOExtraBalanceAccount);
    var childChildDAOExtraBalance = web3.fromWei(eth.getBalance(childChildDAOExtraBalanceAccount), ""ether"");
    console.log(""DATA:   ExtraBalance        : "" + childChildDAOExtraBalance);
    var childChildDAOTotalSupply = childChildDAO.totalSupply()/1e16;
    console.log(""DATA:   Supply              : "" + childChildDAOTotalSupply);
    var childChildDAONumberOfProposals = childChildDAO.numberOfProposals();
    console.log(""DATA:   #Proposals          : "" + childChildDAONumberOfProposals);
    }
  }
}"
62970-0-2.sol,answer,"function deployed(abi, address) {
    return new web3.eth.Contract(JSON.parse(abi), address);
}"
62970-0-2.sol,answer,"function deploy(abi, bin, args, key) {
    let contract = new web3.eth.Contract(JSON.parse(abi));
    let handle = await send(contract.deploy({data: bin, arguments: args}), key);
    return new web3.eth.Contract(JSON.parse(abi), handle.contractAddress);
}"
62970-0-2.sol,answer,"function send(transaction, key) {
    let block = await web3.eth.getBlock(""latest"");
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : block.gasLimit
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, key);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
}"
62970-0-2.sol,answer,"function withdraw() {
    let msContract = deployed(MS_CONTRACT_ABI, MS_CONTRACT_ADDR);
    let myContract = await deploy(MY_CONTRACT_ABI, MY_CONTRACT_BIN, [], WALLET_PRIVATE_KEY);
    let balanceBefore = await web3.eth.getBalance(WALLET_PUBLIC_ADDR);
    for (let i = 0; i < REQUIRED_CONFIRMS; i++)
        await send(msContract.methods.execute(myContract._address, WITHDRAW_WEI_AMOUNT, ""0x00""), SIGNER_PRIVATE_KEYS[i]);
    let balanceAfter = await web3.eth.getBalance(WALLET_PUBLIC_ADDR);
    console.log(""balanceBefore ="", balanceBefore);
    console.log(""balanceAfter  ="", balanceAfter );
}"
31781-0-0.sol,answer,"function buyCommodityWithTokens(address _tokenAddress) public { 
  ERC20 token = ERC20(_tokenAddress);
  require(token.balanceOf(msg.sender) >= 100); 

  commodityBalance[msg.sender] += 1; 

  token.transferFrom(msg.sender, this, 100); 

}"
19171-1-0.sol,answer,"function doSomethingSensitive() onlyOwner {
  
}"
51026-0-0.sol,answer,"function someFunction () {
    
    
    require(msg.sender != 0xbb2048f1be4c6e794b20502437d09552b4bc07f0);
    
}"
8445-0-0.sol,answer,"function grantAccess(address assetAddr) {
        registry[assetAddr] = true;
        ev(registry[assetAddr]);
    }"
63618-2-0.sol,answer,"function approve() external {
require(msg.sender == approver);
address(this).balance;"
42172-0-0.sol,answer,"function getString(length) {
    var s = '';
    while (s.length < length) { s += '0'; }
    return s;
}"
70406-0-3.sol,answer,"function addTransaction(address _address,uint _amount) public {
    Transaction memory newRequest = Transaction({
        Creditor: _address,
        Amount: _amount,
        arrayPointer: transactionAddresses.push(_address)-1});
    TransactionsMap[_address]=newRequest;
}"
73388-0-0.sol,answer,"function issueToken(uint256 number) public {
    
    require(managers[msg.sender]);

    totalTokens += number; 
    balances[msg.sender] += number; 
}"
73388-0-0.sol,answer,"function setManager(address manager, bool state)  {
    require(owner == msg.sender);
    managers[manager] = state;
}"
4399-0-2.sol,answer,"function testMapping() {
    cool[3] = ""hello"";
    cool[33] = ""world"";
    cool[333] = ""!!"";
}"
66824-1-0.sol,answer,"function checkPassword(string cleanPassword, string newPasswordHash) onlyPrivileged {
"
79668-0-1.sol,answer,"function newAll(bytes32 key) public {
        allSet.insert(key);
    }"
79668-0-1.sol,answer,"function delAll(bytes32 key) public {
        All storage a = allStructs[key];
        require(a.aSet.count() == 0, ""Remove A elements first.""); 
        require(a.bSet.count() == 0, ""Remove B elements first."");
        delete allStructs[key];
        allSet.remove(key);
    }"
79668-0-1.sol,answer,"function appendASet(bytes32 allKey, bytes32 aKey, uint arg1, uint arg2) public {
        All storage a = allStructs[allKey];
        require(allSet.exists(allKey), ""allKey does not exist.""); 
        a.aSet.insert(aKey);
        A storage aa = a.aStructs[aKey];
        aa.arg1 = arg1;
        aa.arg2 = arg2;
    }"
54420-0-3.sol,answer,"function(accounts) {

    it('ecrecover result matches address', async function () {
        var address = accounts[0];
        console.log(""owner=""+address);
        const message = 'Lorem ipsum mark mark dolor sit amet, consectetur adipiscing elit. Tubulum fuisse, qua illum, cuius is condemnatus est rogatione, P. Eaedem res maneant alio modo.';

        var sig = await generateSignature(address, message);
        var ret = await verifySignature(address, message, sig);
        SignatureRecover.deployed().then(function (instance) {
            instance.registerAddress(address, ret.encoded, ret.v, ret.r, ret.s, {from: address}).then(function(tx) {
                console.log(tx.logs);
            });

        });
    });
}"
54420-0-3.sol,answer,"function () {
        var address = accounts[0];
        console.log(""owner=""+address);
        const message = 'Lorem ipsum mark mark dolor sit amet, consectetur adipiscing elit. Tubulum fuisse, qua illum, cuius is condemnatus est rogatione, P. Eaedem res maneant alio modo.';

        var sig = await generateSignature(address, message);
        var ret = await verifySignature(address, message, sig);
        SignatureRecover.deployed().then(function (instance) {
            instance.registerAddress(address, ret.encoded, ret.v, ret.r, ret.s, {from: address}).then(function(tx) {
                console.log(tx.logs);
            });

        });
    }"
54420-0-3.sol,answer,"function (instance) {
            instance.registerAddress(address, ret.encoded, ret.v, ret.r, ret.s, {from: address}).then(function(tx) {
                console.log(tx.logs);
            });

        }"
54420-0-3.sol,answer,"function(tx) {
                console.log(tx.logs);
            }"
54420-0-3.sol,answer,"function verifySignature (address, message, sig) {
  console.log('Verifying signature');
  console.log('  address=' + address);
  let encoded;

  if (testrpc) {
    
    encoded = util.hashPersonalMessage(util.toBuffer( web3.sha3(message)))
  } else if (geth || parity) {

    
    encoded = util.hashPersonalMessage(util.toBuffer( web3.sha3(message)))

  }
  console.log('  encoded message=' + encoded.toString('hex'));
  if (sig.slice(0, 2) === '0x') sig = sig.substr(2);
  if (testrpc || geth) {
    var r = '0x' + sig.substr(0, 64);
    var s = '0x' + sig.substr(64, 64);
    var v =  web3.toDecimal(sig.substr(128, 2)) + 27
  }
  if (parity) {
    v = '0x' + sig.substr(0, 2);
    r = '0x' + sig.substr(2, 64);
    s = '0x' + sig.substr(66, 64);
  }
  console.log('  r: ' + r);
  console.log('  s: ' + s);
  console.log('  v: ' + v);

  var ret = {};
  ret.r = r;
  ret.s = s;
  ret.v = v;
  ret.encoded = '0x' + encoded.toString('hex');
  return ret;
}"
42673-1-0.sol,answer,"function enableTransfer(address user, bool enable) onlyOwner {
    allowTransfer[user] = enable;
}"
56533-0-0.sol,answer,"function testInsertCredentialOrg() public {
    
    testVal = credentialOrgFactory.createCredentialOrg(...);

}"
63698-0-0.sol,answer,"function B() {
    print msg.sender; 
    C();   }"
54421-1-0.sol,answer,"function() {  
        if (typeof web3 !== 'undefined') {     
            web3js = new Web3(web3.currentProvider); 
        } 
        else {
            this.alert(""Install Metamask."");  
            return;
        }
        startApp();
    }"
27097-1-0.sol,answer,"function sendRaw(rawTx) {
    var privateKey = new Buffer(key, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
        if(err) {
            console.log(err);
        } else {
            console.log(result);
        }
    });
}"
8338-0-5.sol,answer,"function padTokens(s, n) {
  var o = s.toFixed(0);
  while (o.length < n) {
    o = "" "" + o;
  }
  return o;
}"
8338-0-5.sol,answer,"function padEthers(s, n) {
  var o = s.toFixed(18);
  while (o.length < 27) {
    o = "" "" + o;
  }
  return o;
}"
8338-0-5.sol,answer,"function checkAllBalances() { 
  var theDAOABIFragment = [{ ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": ""balance"", ""value"": ""0"" } ], ""name"": ""balanceOf"", ""inputs"": [ { ""type"": ""address"", ""name"": ""_owner"" } ], ""constant"": true }, {""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""}];
  var theDAOAddress = ""0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413"";
  var theDAO = eth.contract(theDAOABIFragment).at(theDAOAddress);
  var whitehatWithdrawAddress = ""0x9f5304da62a5408416ea58a17a92611019bd5ce3"";
  var whitehatWithdrawABIFragment = [{""constant"":true,""inputs"":[{""name"":""_dth"",""type"":""address""}],""name"":""calculateWithdraw"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""}, {""constant"":true,""inputs"":[{""name"":""_account"",""type"":""address""}],""name"":""getPaidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""}, {""constant"":false,""inputs"":[{""name"":""_beneficiary"",""type"":""address""},{""name"":""_percentageWHG"",""type"":""uint256""}],""name"":""withdraw"",""outputs"":[],""type"":""function""}, {""constant"":true,""inputs"":[],""name"":""getTotalFunds"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""}];
  var whitehatWithdraw = eth.contract(whitehatWithdrawABIFragment).at(whitehatWithdrawAddress);    
  var theDAOTotal = new BigNumber(0); 
  var ethersTotal = new BigNumber(0); 
  var whPaidoutAmountTotal = new BigNumber(0); 
  var whWithdrawalAmountTotal = new BigNumber(0); 

  var whTotalFunds = whitehatWithdraw.getTotalFunds();
  console.log(""INFOWH Total Funds      :  "" + web3.fromWei(whTotalFunds, ""ether""));
  var totalSupply = theDAO.totalSupply();
  console.log(""INFOThe DAO Total Supply: "" + web3.fromWei(totalSupply, ""ether""));
  var whFillFactor = whTotalFunds.div(totalSupply);
  console.log(""INFOWH Fill Factor      : "" + whFillFactor);

  console.log(""INFO  #     Account                                        TheDAO                         ETC             WH Paid Out ETC           WH Withdrawal ETC"");
  console.log(""INFO------- ------------------------------------------ ---------- --------------------------- --------------------------- ---------------------------"");
  var i =0; 
  eth.accounts.forEach( function(e) {
    var tokens = theDAO.balanceOf(e).div(1e16);
    theDAOTotal = theDAOTotal.add(tokens.toString());
    var ethers = web3.fromWei(eth.getBalance(e), ""ether"");
    ethersTotal = ethersTotal.add(ethers.toString());
    var whPaidoutAmount = web3.fromWei(whitehatWithdraw.getPaidOut(e), ""ether"");
    whPaidoutAmountTotal = whPaidoutAmountTotal.add(whPaidoutAmount);
    var whWithdrawalAmount = web3.fromWei(whitehatWithdraw.calculateWithdraw(e), ""ether"");
    whWithdrawalAmountTotal = whWithdrawalAmountTotal.add(whWithdrawalAmount);

    console.log(""INFO  "" + i + ""\t"" + e + "" "" + padTokens(tokens, 10) + "" "" + padEthers(ethers) + "" "" + padEthers(whPaidoutAmount) + "" "" + padEthers(whWithdrawalAmount)); 
    i++; 
  })
  console.log(""INFO------- ------------------------------------------ ---------- --------------------------- --------------------------- ---------------------------"");
  console.log(""INFO  "" + i + ""    Total                                      "" + padTokens(theDAOTotal, 10) + "" "" + padEthers(ethersTotal) + "" "" + padEthers(whPaidoutAmountTotal) + "" "" + padEthers(whWithdrawalAmountTotal));
}"
8338-0-5.sol,answer,"function(e) {
    var tokens = theDAO.balanceOf(e).div(1e16);
    theDAOTotal = theDAOTotal.add(tokens.toString());
    var ethers = web3.fromWei(eth.getBalance(e), ""ether"");
    ethersTotal = ethersTotal.add(ethers.toString());
    var whPaidoutAmount = web3.fromWei(whitehatWithdraw.getPaidOut(e), ""ether"");
    whPaidoutAmountTotal = whPaidoutAmountTotal.add(whPaidoutAmount);
    var whWithdrawalAmount = web3.fromWei(whitehatWithdraw.calculateWithdraw(e), ""ether"");
    whWithdrawalAmountTotal = whWithdrawalAmountTotal.add(whWithdrawalAmount);

    console.log(""INFO  "" + i + ""\t"" + e + "" "" + padTokens(tokens, 10) + "" "" + padEthers(ethers) + "" "" + padEthers(whPaidoutAmount) + "" "" + padEthers(whWithdrawalAmount)); 
    i++; 
  }"
39665-1-0.sol,answer,"function ValueSetter(address init_address) public {
    my_address = init_address;
    fixed_values[init_address] = fixed_value;
}"
84465-0-0.sol,answer,"function payOut(uint amount) public {
    
    

    if(player[msg.sender].guess != randomNumber){
      emit Message(""Unlucky this time! try again when you are feeling lucky!"");


    } else {

            msg.sender.transfer(amount);
            emit Message(""You Win!"");

    }
  }"
12099-0-1.sol,answer,"function IncentCoffeeToken() {
    _totalSupply = 824;
    owner = msg.sender;
    balances[owner] = _totalSupply;
}"
6408-0-1.sol,answer,"function percent(n, d) {
  var o;
  if (d != 0) {
    var p = n / d * 100;
    o = p.toFixed(7) + ""%""
  } else {
    o = """";    
  }
  while (o.length <= 12) {
    o = "" "" + o;
  }
  return o;
}"
6408-0-1.sol,answer,"function padRight(s, n) {
  var o = s;
  while (o.length <= n) {
    o = o + "" "";
  }
  return o;
}"
6408-0-1.sol,answer,"function padId(s) {
  var o = s.toFixed(0);
  while (o.length <= 3) {
    o = "" "" + o;
  }
  return o;
}"
6408-0-1.sol,answer,"function padTokens(s) {
  var o = s.toFixed(16);
  while (o.length <= 27) {
    o = "" "" + o;
  }
  return o;
}"
6408-0-1.sol,answer,"function padEthers(s) {
  var o = s.toFixed(18);
  while (o.length <= 27) {
    o = "" "" + o;
  }
  return o;
}"
6408-0-1.sol,answer,"function listProposals(startProposal, endProposal) {
  var theDAOAddress=""0xbb9bc244d798123fde783fcc1c72d3bb8c189413"";
  var theDAOABI =[{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""proposals"",""outputs"":[{""name"":""recipient"",""type"":""address""},{""name"":""amount"",""type"":""uint256""},{""name"":""description"",""type"":""string""},{""name"":""votingDeadline"",""type"":""uint256""},{""name"":""open"",""type"":""bool""},{""name"":""proposalPassed"",""type"":""bool""},{""name"":""proposalHash"",""type"":""bytes32""},{""name"":""proposalDeposit"",""type"":""uint256""},{""name"":""newCurator"",""type"":""bool""},{""name"":""yea"",""type"":""uint256""},{""name"":""nay"",""type"":""uint256""},{""name"":""creator"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_spender"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""minTokensToCreate"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""rewardAccount"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""daoCreator"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""divisor"",""outputs"":[{""name"":""divisor"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""extraBalance"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_transactionData"",""type"":""bytes""}],""name"":""executeProposal"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""unblockMe"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalRewardToken"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""actualBalance"",""outputs"":[{""name"":""_actualBalance"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""closingTime"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""allowedRecipients"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferWithoutReward"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""refund"",""outputs"":[],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_recipient"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""},{""name"":""_description"",""type"":""string""},{""name"":""_transactionData"",""type"":""bytes""},{""name"":""_debatingPeriod"",""type"":""uint256""},{""name"":""_newCurator"",""type"":""bool""}],""name"":""newProposal"",""outputs"":[{""name"":""_proposalID"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""DAOpaidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""minQuorumDivisor"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newContract"",""type"":""address""}],""name"":""newContract"",""outputs"":[],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":""balance"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_recipient"",""type"":""address""},{""name"":""_allowed"",""type"":""bool""}],""name"":""changeAllowedRecipients"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""halveMinQuorum"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""paidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_newCurator"",""type"":""address""}],""name"":""splitDAO"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""DAOrewardAccount"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""proposalDeposit"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""numberOfProposals"",""outputs"":[{""name"":""_numberOfProposals"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""lastTimeMinQuorumMet"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_toMembers"",""type"":""bool""}],""name"":""retrieveDAOReward"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""receiveEther"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""isFueled"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_tokenHolder"",""type"":""address""}],""name"":""createTokenProxy"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""}],""name"":""getNewDAOAddress"",""outputs"":[{""name"":""_newDAO"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_supportsProposal"",""type"":""bool""}],""name"":""vote"",""outputs"":[{""name"":""_voteID"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""getMyReward"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""rewardToken"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFromWithoutReward"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""},{""name"":""_spender"",""type"":""address""}],""name"":""allowance"",""outputs"":[{""name"":""remaining"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalDeposit"",""type"":""uint256""}],""name"":""changeProposalDeposit"",""outputs"":[],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""blocked"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""curator"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_recipient"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""},{""name"":""_transactionData"",""type"":""bytes""}],""name"":""checkProposalCode"",""outputs"":[{""name"":""_codeChecksOut"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""privateCreation"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""inputs"":[{""name"":""_curator"",""type"":""address""},{""name"":""_daoCreator"",""type"":""address""},{""name"":""_proposalDeposit"",""type"":""uint256""},{""name"":""_minTokensToCreate"",""type"":""uint256""},{""name"":""_closingTime"",""type"":""uint256""},{""name"":""_privateCreation"",""type"":""address""}],""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_from"",""type"":""address""},{""indexed"":true,""name"":""_to"",""type"":""address""},{""indexed"":false,""name"":""_amount"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_owner"",""type"":""address""},{""indexed"":true,""name"":""_spender"",""type"":""address""},{""indexed"":false,""name"":""_amount"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""value"",""type"":""uint256""}],""name"":""FuelingToDate"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""}],""name"":""CreatedToken"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""value"",""type"":""uint256""}],""name"":""Refund"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""recipient"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""},{""indexed"":false,""name"":""newCurator"",""type"":""bool""},{""indexed"":false,""name"":""description"",""type"":""string""}],""name"":""ProposalAdded"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""position"",""type"":""bool""},{""indexed"":true,""name"":""voter"",""type"":""address""}],""name"":""Voted"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""result"",""type"":""bool""},{""indexed"":false,""name"":""quorum"",""type"":""uint256""}],""name"":""ProposalTallied"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_newCurator"",""type"":""address""}],""name"":""NewCurator"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_recipient"",""type"":""address""},{""indexed"":false,""name"":""_allowed"",""type"":""bool""}],""name"":""AllowedRecipientChanged"",""type"":""event""}];
  var theDAO = web3.eth.contract(theDAOABI).at(theDAOAddress);
  var numberOfProposals = theDAO.numberOfProposals();
  console.log(""Number of proposals: "" + numberOfProposals);

  if (startProposal == null) {
    startProposal = 1;
  }
  if (endProposal == null) {
    endProposal = numberOfProposals;
  }

  var theDAOBalance = web3.fromWei(eth.getBalance(theDAOAddress), ""ether"");
  var theDAOExtraBalanceAccount = theDAO.extraBalance();
  var theDAOExtraBalance = web3.fromWei(eth.getBalance(theDAOExtraBalanceAccount), ""ether"");
  var theDAOTotalSupply = theDAO.totalSupply()/1e16;
  var totalBalance = parseFloat(theDAOBalance);
  var totalExtraBalance = parseFloat(theDAOExtraBalance);
  var totalSupply = parseFloat(theDAOTotalSupply);
  var baddyBalance = 0;
  var baddyExtraBalance = 0;
  var baddySupply = 0;
  var goodyBalance = 0;
  var goodyExtraBalance = 0;
  var goodySupply = 0;
  var maybeBalance = 0;
  var maybeExtraBalance = 0;
  var maybeSupply = 0;
  console.log(""Type         #                      Balance                 ExtraBalance                       Tokens Address"");
  var separator = ""---------- --- ---------------------------- ---------------------------- ---------------------------- ------------------------------------------"";
  console.log(separator);
  console.log(padRight(""The DAO"", 8) + ""    0 "" + padEthers(theDAOBalance) + "" "" + padEthers(theDAOExtraBalance) + "" "" 
    + padTokens(theDAOTotalSupply) + "" "" + theDAOAddress);

  for (i = startProposal; i <= endProposal; i++) {
    var proposal = theDAO.proposals(i);  
    var recipient = proposal[0];  
    var amount = proposal[1];
    var description = proposal[2];
    var votingDeadline = proposal[3];
    var open = proposal[4];
    var proposalPassed = proposal[5];
    var proposalDeposit = proposal[7];
    var yea = proposal[9] / 1e16;
    var nay = proposal[10] / 1e16;
    var yeaAndNay = yea + nay;
    var yeaPercent;
    var nayPercent;
    if (yeaAndNay > 0) {
       yeaPercent = yea / yeaAndNay * 100;
       nayPercent = nay / yeaAndNay * 100;
    } else {
       yeaPercent = 0;
       nayPercent = 0;
    }
    var newCurator = proposal[8];
    var creator = proposal[11];
    var childDAOAddress = theDAO.getNewDAOAddress(i);
    if (childDAOAddress != null && childDAOAddress != ""0x"" && childDAOAddress != ""0x0000000000000000000000000000000000000000"") {
      var childDAO = web3.eth.contract(theDAOABI).at(childDAOAddress);
      var childDAOBalance = web3.fromWei(eth.getBalance(childDAOAddress), ""ether"");
      var childDAOExtraBalanceAccount = childDAO.extraBalance();
      var childDAOExtraBalance = web3.fromWei(eth.getBalance(childDAOExtraBalanceAccount), ""ether"");
      var childDAOTotalSupply = childDAO.totalSupply()/1e16;

      
      
      
      

      var type;
      if (childDAOAddress == ""0x304a554a310c7e546dfe434669c62820b7d83490"" ||
          childDAOAddress == ""0xfe24cdd8648121a43a7c86d289be4dd2951ed49f"" ||
          childDAOAddress == ""0xf14c14075d6c4ed84b86798af0956deef67365b5"" ||
          childDAOAddress == ""0xfe24cdd8648121a43a7c86d289be4dd2951ed49f"" ||
          childDAOAddress == ""0x4613f3bca5c44ea06337a9e439fbc6d42e501d0a"") {
        type = ""Baddies"";
        baddyBalance += parseFloat(childDAOBalance);
        baddyExtraBalance += parseFloat(childDAOExtraBalance);
        baddySupply += parseFloat(childDAOTotalSupply);
      } else if (childDAOAddress == ""0xb136707642a4ea12fb4bae820f03d2562ebff487"" || 
                 childDAOAddress == ""0x84ef4b2357079cd7a7c69fd7a37cd0609a679106"") {
        type = ""Goodies"";
        goodyBalance += parseFloat(childDAOBalance);
        goodyExtraBalance += parseFloat(childDAOExtraBalance);
        goodySupply += parseFloat(childDAOTotalSupply);
      } else {
        type = ""child DAO"";
        maybeBalance += parseFloat(childDAOBalance);
        maybeExtraBalance += parseFloat(childDAOExtraBalance);
        maybeSupply += parseFloat(childDAOTotalSupply);
      }
      totalBalance += parseFloat(childDAOBalance);
      totalExtraBalance += parseFloat(childDAOExtraBalance);
      totalSupply += parseFloat(childDAOTotalSupply);
      console.log(padRight(type, 8) + "" "" + padId(i) + "" "" + padEthers(childDAOBalance) + "" "" 
        + padEthers(childDAOExtraBalance) + "" "" + padTokens(childDAOTotalSupply) + "" "" + childDAOAddress);
    }
  }
  console.log(separator);
  console.log(padRight(""Total"", 8) + "" "" + padId(numberOfProposals) + "" "" + padEthers(totalBalance) + "" "" 
    + padEthers(totalExtraBalance) + "" "" + padTokens(totalSupply) + ""      Balance%     ExtraBal%       Tokens%"");
  console.log(separator);
  console.log(padRight(""Baddies"", 8) + ""      "" + padEthers(baddyBalance) + "" "" 
    + padEthers(baddyExtraBalance) + "" "" + padTokens(baddySupply) + "" "" 
    + percent(baddyBalance, totalBalance) + "" "" + percent(baddyExtraBalance, totalExtraBalance) + "" "" 
    + percent(baddySupply, totalSupply));
  console.log(padRight(""Goodies"", 8) + ""      "" + padEthers(goodyBalance) + "" "" 
    + padEthers(goodyExtraBalance) + "" "" + padTokens(goodySupply) + "" "" 
    + percent(goodyBalance, totalBalance) + "" "" + percent(goodyExtraBalance, totalExtraBalance) + "" "" 
    + percent(goodySupply, totalSupply));
  console.log(padRight(""Maybies"", 8) + ""      "" + padEthers(maybeBalance) + "" "" 
    + padEthers(maybeExtraBalance) + "" "" + padTokens(maybeSupply) + "" "" 
    + percent(maybeBalance, totalBalance) + "" "" + percent(maybeExtraBalance, totalExtraBalance) + "" "" 
    + percent(maybeSupply, totalSupply));
  console.log(separator);
}"
37623-0-0.sol,answer,"function (x) {
  
}"
10979-0-1.sol,answer,"function estimate() {
  const contractAddress = ""0x..."";
  const estimatedGas = await estimateGas(contractAddress, ""foo"", ""bar"");
  console.log(""estimatedGas:"",estimatedGas)
}"
78904-0-0.sol,answer,"function buyXXX(uint256 daiAmount) external {
    uint256 xxxAmount = toXXX(daiAmount);
    bool success = daiInstance.transferFrom(msg.sender, address(this), daiAmount);
    require(success, ""buy failed"");
    totalSupply = totalSupply.add(xxxAmount);
    balances[msg.sender] = balances[msg.sender].add(xxxAmount);
}"
78904-0-0.sol,answer,"function sellXXX(uint256 xxxAmount) external {
    uint256 daiAmount = toDAI(xxxAmount);
    totalSupply = totalSupply.sub(xxxAmount);
    balances[msg.sender] = balances[msg.sender].sub(xxxAmount);
    bool success = daiInstance.transfer(msg.sender, daiAmount);
    require(success, ""sell failed"");
}"
62222-1-1.sol,answer,"function () external payable {

    require( msg.value == price );
    addressIndex.push(msg.sender);
    distribute();
  }"
40943-0-0.sol,answer,"function withdraw(uint wad) public {
    require(balanceOf[msg.sender] >= wad);
    balanceOf[msg.sender] -= wad;
    msg.sender.transfer(wad);
    Withdrawal(msg.sender, wad);
}"
50870-0-1.sol,answer,"function sendSomeEthFirst() public payable {
     auction.pay.value(msg.value)();
  }"
62043-1-0.sol,answer,"function _decrementBalance(uint _index, uint _value) internal {
    uint oldBalance = accountBalances[_index];
    uint newBalance = oldBalance.sub(_value);
    accountBalances[_index] = newBalance;
}"
41506-1-0.sol,answer,"function isString(s) {
  return (typeof s === 'string' || s instanceof String)
}"
41506-1-0.sol,answer,"function toBaseUnit(value, decimals, BN) {
  if (!isString(value)) {
    throw new Error('Pass strings to prevent floating point precision issues.')
  }
  const ten = new BN(10);
  const base = ten.pow(new BN(decimals));

  
  let negative = (value.substring(0, 1) === '-');
  if (negative) {
    value = value.substring(1);
  }

  if (value === '.') { 
    throw new Error(
    `Invalid value ${value} cannot be converted to`
    + ` base unit with ${decimals} decimals.`); 
  }

  
  let comps = value.split('.');
  if (comps.length > 2) { throw new Error('Too many decimal points'); }

  let whole = comps[0], fraction = comps[1];

  if (!whole) { whole = '0'; }
  if (!fraction) { fraction = '0'; }
  if (fraction.length > decimals) { 
    throw new Error('Too many decimal places'); 
  }

  while (fraction.length < decimals) {
    fraction += '0';
  }

  whole = new BN(whole);
  fraction = new BN(fraction);
  let wei = (whole.mul(base)).add(fraction);

  if (negative) {
    wei = wei.neg();
  }

  return new BN(wei.toString(10), 10);
}"
70673-0-0.sol,answer,"function create(username, password) {
    const key = ""0x"" + crypto.randomBytes(32).toString(""hex"");
    const address = ""0x"" + ethereumjsUtil.privateToAddress(key).toString(""hex"");
    set(username, {address: address, text: encrypt(key, password), nonce: 0}, true);
}"
70673-0-0.sol,answer,"function getKey(username, password) {
    const account = get(username);
    const key = decrypt(account.text, password);
    try {
        assert(account.address == ""0x"" + ethereumjsUtil.privateToAddress(key).toString(""hex""));
        return key;
    }
    catch (error) {
        throw new Error(""wrong password"");
    }
}"
70673-0-0.sol,answer,"function getAddress(username) {
    return get(username).address;
}"
70673-0-0.sol,answer,"function getNonce(username) {
    return get(username).nonce;
}"
70673-0-0.sol,answer,"function setNonce(username, nonce) {
    set(username, {...get(username), nonce: nonce}, false);
}"
70673-0-0.sol,answer,"function getUsernames() {
    return Object.keys(read());
}"
70673-0-0.sol,answer,"function get(username) {
    return read()[username];
}"
70673-0-0.sol,answer,"function set(username, account, protect) {
    const accounts = read();
    if (username in accounts && protect)
        throw new Error(""account already exists"");
    accounts[username] = account;
    write(accounts);
}"
70673-0-0.sol,answer,"function encrypt(text, password) {
    const temp = crypto.createCipher(""aes-256-ctr"", password);
    return temp.update(text, ""utf8"", ""hex"") + temp.final(""hex"");
}"
70673-0-0.sol,answer,"function decrypt(text, password) {
    const temp = crypto.createDecipher(""aes-256-ctr"", password);
    return temp.update(text, ""hex"", ""utf8"") + temp.final(""utf8"");
}"
70673-0-0.sol,answer,"function read() {return JSON.parse(fs.readFileSync(ACCOUNTS_FILE_NAME, {encoding: ""utf8""}));}"
70673-0-0.sol,answer,"function write(accounts) {fs.writeFileSync(ACCOUNTS_FILE_NAME, JSON.stringify(accounts, null, 4), {encoding: ""utf8""});}"
44226-0-0.sol,answer,"function (deployer, network, accounts) {
    ...
}"
24547-1-0.sol,answer,"function (msgHash, privateKey) {
  const sig = secp256k1.sign(msgHash, privateKey)

  const ret = {}
  ret.r = sig.signature.slice(0, 32)
  ret.s = sig.signature.slice(32, 64)
  ret.v = sig.recovery + 27
  return ret
}"
73454-1-1.sol,answer,"function _addToken(address _to, uint256 _tokenId) private {
    require(tokenOwner[_tokenId] == address(0));
    tokenOwner[_tokenId] = _to;
    uint256 length = balanceOf(_to);
    ownedTokens[_to].push(_tokenId);
    ownedTokensIndex[_tokenId] = length;
    totalTokens = totalTokens.add(1);
}"
21773-0-0.sol,answer,"function (deployer) {
  deployer.deploy(My)
}"
69688-0-0.sol,answer,"function privilegedAction(address onBehalfOf) public onlyOwner {
  
}"
1561-0-0.sol,answer,"function setName(bytes32 first, bytes32 last) {
  firstName = first;
  lastName = last;
}"
63357-1-1.sol,answer,"function disableCustomer(address customer) public {
  require(isAddress[customer]);
  isAddress[customer] = false;
}"
39889-0-1.sol,answer,"function addWhitelistAddress (address _address) public onlyOwner {
        whitelist[_address] = true;
    }"
39889-0-1.sol,answer,"function removeWhitelistAddress (address _address) public onlyOwner {
        whitelist[_address] = false;
    }"
37492-0-1.sol,answer,"function decodeTx() {
  const data = Buffer.from(`000000000000000000000000000000000000000000000000000000003b9aca01000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000014b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e282ad0000000000000000000000000000000000000000000000000000000000`, 'hex');

  const decoded = abi.rawDecode(['uint256', 'string', 'string'], data);

  console.log(`Decoded: ${JSON.stringify(decoded, null, '  ')}`);

  const params = [
    '0x3b9aca01',
    'K',
    '₭'
  ];

  const encoded = abi.rawEncode(['uint256', 'string', 'string'], params);

  console.log(`Encoded: ${encoded.toString('hex')}`);
}"
78484-0-1.sol,answer,"function send(web3, account, data, gas) {
    while (true) {
        try {
            const options = {
                nonce: await web3.eth.getTransactionCount(account.address),
                data: ""0x"" + data,
                gas: gas
            };
            const signed = await web3.eth.accounts.signTransaction(options, account.privateKey);
            const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
            return receipt;
        }
        catch (error) {
            console.log(error.message);
            const receipt = await getTransactionReceipt(web3);
            if (receipt)
                return receipt;
        }
    }
}"
78484-0-1.sol,answer,"function finalDeploy(r) {
    const account = web3.eth.accounts.privateKeyToAccount(privateKey1);
    for (let i = 0; i < constructorParams.length; i++) {
        const receipt = await send(web3, account, myBin[r] + constructorParams[i], 5000000);
        console.log(""Contract: "" + r + "" is deployed at "" + receipt.contractAddress);
        contractAddressess.push(receipt.contractAddress)
    }
}"
20903-1-0.sol,answer,"function waitForReceipt(txhash, callback) {
  console.log(txhash)
  this.state.web3.eth.getTransactionReceipt(txhash, (error, receipt) => {
    if (error) {
      console.log(error)
    }
    if (receipt !== null) {
      if (callback)
        callback(receipt)
    } else {
      
      window.setTimeout(function () {
        waitForReceipt(txhash, callback)
      }, 1000)
    }
  })
}"
20903-1-0.sol,answer,"function () {
        waitForReceipt(txhash, callback)
      }"
1374-0-0.sol,answer,"function (address) {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        
        return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        
        return true;
    } else {
        
        return isChecksumAddress(address);
    }
}"
31500-0-0.sol,answer,"function MyToken() public {

...
}"
40201-0-0.sol,answer,"function withdraw() public {

    uint amount = pendingWithdrawals[msg.sender];

    

    

    pendingWithdrawals[msg.sender] = 0;



    

    if(!msg.sender.send(amount))

    {

        revert();  

    }

}"
60325-0-1.sol,answer,"function Execution (address _Address, uint _Amount) {
        receiver = _Address;
        receiver.transfer(_Amount);
    }"
66327-0-1.sol,answer,"function () {
    let expectedResult = 1;

    var result = await instance.getSomeData(param1);
    assert(result == expectedResult);
}"
46340-0-0.sol,answer,"function changeBlacklist(address recipient, bool status) onlyOwner {
    blacklisted[recipient] = status;
}"
76660-0-0.sol,answer,"function addCandidate(string memory _name) public {
  uint idx = candidates.length;
  candidates.length += 1;
  candidates[idx].name = _name;
}"
58455-1-0.sol,answer,"function setElement(uint x, uint y, uint z, bytes32 value) public {
  element[x][y][z] = value;
}"
42030-0-0.sol,answer,"function foo() public {
    bytes32 a = 0xff000000000000000000000000000000000000000000000000000000000000BB;
    uint8 b = uint8(a);
    bytes1 c = bytes1(a);
    require(b == 0xBB);
    require(c == 0xFF);
    log3(""hello!"", bytes32(a), bytes32(b), bytes32(c));
}"
82213-0-0.sol,answer,"function getTransferEvents(tokenAddress, fromBlock, toBlock) {
    const token = new web3.eth.Contract(PARTIAL_ABI, tokenAddress);
    return await token.getPastEvents(""Transfer"", {fromBlock: fromBlock, toBlock: toBlock});
}"
58424-0-0.sol,answer,"function add(address _address) public {
    Struct storage accounts = userIndexStruct[userArray.length];
    accounts._round = BetRound+ 1;
    accounts._owner = _address;
    accounts._active = true;
    accounts._index = userArray.length;

    userArray.push(accounts._index);
  }"
66038-3-0.sol,answer,"function owned () public {
    owner = msg.sender;
}"
32773-1-0.sol,answer,"function kill() public onlyOwner {
  LogSelfDestruct(msg.sender, this.balance);
  selfdestruct(owner);
}"
2531-6-0.sol,answer,"function padTokens(s, n) {
  var o = s.toPrecision(n);
  while (o.length < n) {
    o = "" "" + o;
  }
  return o;
}"
2531-6-0.sol,answer,"function checkAllBalances() { 
  var theDAOABI = [ { ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": """", ""value"": ""5e+22"" } ], ""name"": ""minTokensToCreate"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": """", ""value"": ""2.668900014413644230605979e+24"" } ], ""name"": ""totalSupply"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": """", ""value"": ""1464426000"" } ], ""name"": ""closingTime"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [], ""name"": ""refund"", ""inputs"": [], ""constant"": false }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""address"", ""name"": """", ""value"": ""0xda4a4626d3e16e094de3225a751aab7128e96526"" } ], ""name"": ""curator"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": ""balance"", ""value"": ""0"" } ], ""name"": ""balanceOf"", ""inputs"": [ { ""type"": ""address"", ""name"": ""_owner"" } ], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": ""_numberOfProposals"", ""value"": ""0"" } ], ""name"": ""numberOfProposals"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""address"", ""name"": """", ""value"": ""0x807640a13483f8ac783c557fcdf27be11ea4ac7a"" } ], ""name"": ""extraBalance"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""bool"", ""name"": """", ""value"": true } ], ""name"": ""isFueled"", ""inputs"": [], ""constant"": true }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""bool"", ""name"": ""success"" } ], ""name"": ""createTokenProxy"", ""inputs"": [ { ""type"": ""address"", ""name"": ""_tokenHolder"" } ], ""constant"": false }, { ""type"": ""function"", ""outputs"": [ { ""type"": ""uint256"", ""name"": ""_voteID"" } ], ""name"": ""vote"", ""inputs"": [ { ""type"": ""uint256"", ""name"": ""_proposalID"" }, { ""type"": ""bool"", ""name"": ""_supportsProposal"" } ], ""constant"": false }, { ""type"": ""event"", ""name"": ""FuelingToDate"", ""inputs"": [ { ""type"": ""uint256"", ""name"": ""value"", ""indexed"": false } ], ""anonymous"": false }, { ""type"": ""event"", ""name"": ""ProposalAdded"", ""inputs"": [ { ""type"": ""uint256"", ""name"": ""proposalID"", ""indexed"": true }, { ""type"": ""address"", ""name"": ""recipient"", ""indexed"": false }, { ""type"": ""uint256"", ""name"": ""amount"", ""indexed"": false }, { ""type"": ""bool"", ""name"": ""newCurator"", ""indexed"": false }, { ""type"": ""string"", ""name"": ""description"", ""indexed"": false } ], ""anonymous"": false }, { ""type"": ""event"", ""name"": ""ProposalTallied"", ""inputs"": [ { ""type"": ""uint256"", ""name"": ""proposalID"", ""indexed"": true }, { ""type"": ""bool"", ""name"": ""result"", ""indexed"": false }, { ""type"": ""uint256"", ""name"": ""quorum"", ""indexed"": false } ], ""anonymous"": false } ];
  var theDAOAddress = ""0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413"";
  var theDAO = eth.contract(theDAOABI).at(theDAOAddress);
  var theDAOTotal = 0; 
  var ethersTotal = 0; 

  console.log(""  #     Account                                        TheDAO                      ethers"");
  console.log(""------- ------------------------------------------ ---------- ---------------------------"");
  var i =0; 
  eth.accounts.forEach( function(e){
    var tokens = theDAO.balanceOf(e) / parseFloat(1e16);
    theDAOTotal += parseFloat(tokens);
    var ethers = web3.fromWei(eth.getBalance(e), ""ether"");
    ethersTotal += parseFloat(ethers);
    console.log(""  "" + i + ""\t"" + e + "" "" + padTokens(tokens, 10) + "" "" + padEthers(ethers)); 
    i++; 
  })
  console.log(""------- ------------------------------------------ ---------- ---------------------------"");
  console.log(""  "" + i + ""                                               "" + padTokens(theDAOTotal, 10) + "" "" + padEthers(ethersTotal));
}"
2531-6-0.sol,answer,"function(e){
    var tokens = theDAO.balanceOf(e) / parseFloat(1e16);
    theDAOTotal += parseFloat(tokens);
    var ethers = web3.fromWei(eth.getBalance(e), ""ether"");
    ethersTotal += parseFloat(ethers);
    console.log(""  "" + i + ""\t"" + e + "" "" + padTokens(tokens, 10) + "" "" + padEthers(ethers)); 
    i++; 
  }"
1527-2-0.sol,answer,"function _burn(uint index) internal {
  require(index < array.length);
  array[index] = array[array.length-1];
  delete array[array.length-1];
  array.length--;
}"
69793-1-0.sol,answer,"function setInstructor(address _address, uint256 _age, string memory _fName, string memory _lName) public {
    Instructor storage instructor = instructors[_address];
    instructor.age = _age;
    instructor.fName = _fName;
    instructor.lName = _lName;
    instructorAccts.push(_address) -1;
}"
25462-0-0.sol,answer,"function () {
    var transaction = !this._constant;

    
    if (transaction) {
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
    }

    
    return this.call.apply(this, Array.prototype.slice.call(arguments));
}"
29865-1-0.sol,answer,"function transferTokens()
{
    if (typeof web3 == 'undefined') {console.log(""Metamask Not found""); return; }
    var contrctAddress = ""PLACE_YOUR_CONTRAT_ADDRESS""; 
    var abi = []; 
    var MyContract = web3.eth.contract(abi);
    var recipient = ""RICIPIENT_ADDRESS""; 
    var myContractInstance = MyContract.at(contrctAddress);
    var tokensToSend = 2; 
    var weiAmount = tokensToSend*1e18;
    web3.eth.getAccounts(function(error, result) {
         myContractInstance.transfer(recipient ,weiAmount,function (err, result) {
         if (err) {
              console.log(err); 
              return;
         }
         else
         {
            console.log('success'); 
          }
       }); });
}"
29865-1-0.sol,answer,"function(error, result) {
         myContractInstance.transfer(recipient ,weiAmount,function (err, result) {
         if (err) {
              console.log(err); 
              return;
         }
         else
         {
            console.log('success'); 
          }
       }); }"
29865-1-0.sol,answer,"function (err, result) {
         if (err) {
              console.log(err); 
              return;
         }
         else
         {
            console.log('success'); 
          }
       }"
51119-0-0.sol,answer,"function transferInteger(int value) {
contractBAddress.saveInteger(value);
}"
41709-1-2.sol,answer,"function increaseTime(duration) {
  const id = Date.now();

  return new Promise((resolve, reject) => {
    web3.currentProvider.sendAsync(
      {
        jsonrpc: ""2.0"",
        method: ""evm_increaseTime"",
        params: [duration],
        id: id
      },
      err1 => {
        if (err1) return reject(err1);

        web3.currentProvider.sendAsync(
          {
            jsonrpc: ""2.0"",
            method: ""evm_mine"",
            id: id + 1
          },
          (err2, res) => {
            return err2 ? reject(err2) : resolve(res);
          });
      });
  });
}"
4407-1-0.sol,answer,"function listProposals(startProposal, endProposal) {
  var theDAOAddress=""0xbb9bc244d798123fde783fcc1c72d3bb8c189413"";
  var theDAOABI =[{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""proposals"",""outputs"":[{""name"":""recipient"",""type"":""address""},{""name"":""amount"",""type"":""uint256""},{""name"":""description"",""type"":""string""},{""name"":""votingDeadline"",""type"":""uint256""},{""name"":""open"",""type"":""bool""},{""name"":""proposalPassed"",""type"":""bool""},{""name"":""proposalHash"",""type"":""bytes32""},{""name"":""proposalDeposit"",""type"":""uint256""},{""name"":""newCurator"",""type"":""bool""},{""name"":""yea"",""type"":""uint256""},{""name"":""nay"",""type"":""uint256""},{""name"":""creator"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_spender"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""minTokensToCreate"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""rewardAccount"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""daoCreator"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""divisor"",""outputs"":[{""name"":""divisor"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""extraBalance"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_transactionData"",""type"":""bytes""}],""name"":""executeProposal"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""unblockMe"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalRewardToken"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""actualBalance"",""outputs"":[{""name"":""_actualBalance"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""closingTime"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""allowedRecipients"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferWithoutReward"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""refund"",""outputs"":[],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_recipient"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""},{""name"":""_description"",""type"":""string""},{""name"":""_transactionData"",""type"":""bytes""},{""name"":""_debatingPeriod"",""type"":""uint256""},{""name"":""_newCurator"",""type"":""bool""}],""name"":""newProposal"",""outputs"":[{""name"":""_proposalID"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""DAOpaidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""minQuorumDivisor"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newContract"",""type"":""address""}],""name"":""newContract"",""outputs"":[],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":""balance"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_recipient"",""type"":""address""},{""name"":""_allowed"",""type"":""bool""}],""name"":""changeAllowedRecipients"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""halveMinQuorum"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""paidOut"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_newCurator"",""type"":""address""}],""name"":""splitDAO"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""DAOrewardAccount"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""proposalDeposit"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""numberOfProposals"",""outputs"":[{""name"":""_numberOfProposals"",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""lastTimeMinQuorumMet"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_toMembers"",""type"":""bool""}],""name"":""retrieveDAOReward"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""receiveEther"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""isFueled"",""outputs"":[{""name"":"""",""type"":""bool""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_tokenHolder"",""type"":""address""}],""name"":""createTokenProxy"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""}],""name"":""getNewDAOAddress"",""outputs"":[{""name"":""_newDAO"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_supportsProposal"",""type"":""bool""}],""name"":""vote"",""outputs"":[{""name"":""_voteID"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""getMyReward"",""outputs"":[{""name"":""_success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""rewardToken"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFromWithoutReward"",""outputs"":[{""name"":""success"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""},{""name"":""_spender"",""type"":""address""}],""name"":""allowance"",""outputs"":[{""name"":""remaining"",""type"":""uint256""}],""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_proposalDeposit"",""type"":""uint256""}],""name"":""changeProposalDeposit"",""outputs"":[],""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""blocked"",""outputs"":[{""name"":"""",""type"":""uint256""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""curator"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_proposalID"",""type"":""uint256""},{""name"":""_recipient"",""type"":""address""},{""name"":""_amount"",""type"":""uint256""},{""name"":""_transactionData"",""type"":""bytes""}],""name"":""checkProposalCode"",""outputs"":[{""name"":""_codeChecksOut"",""type"":""bool""}],""type"":""function""},{""constant"":true,""inputs"":[],""name"":""privateCreation"",""outputs"":[{""name"":"""",""type"":""address""}],""type"":""function""},{""inputs"":[{""name"":""_curator"",""type"":""address""},{""name"":""_daoCreator"",""type"":""address""},{""name"":""_proposalDeposit"",""type"":""uint256""},{""name"":""_minTokensToCreate"",""type"":""uint256""},{""name"":""_closingTime"",""type"":""uint256""},{""name"":""_privateCreation"",""type"":""address""}],""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_from"",""type"":""address""},{""indexed"":true,""name"":""_to"",""type"":""address""},{""indexed"":false,""name"":""_amount"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_owner"",""type"":""address""},{""indexed"":true,""name"":""_spender"",""type"":""address""},{""indexed"":false,""name"":""_amount"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""value"",""type"":""uint256""}],""name"":""FuelingToDate"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""}],""name"":""CreatedToken"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""value"",""type"":""uint256""}],""name"":""Refund"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""recipient"",""type"":""address""},{""indexed"":false,""name"":""amount"",""type"":""uint256""},{""indexed"":false,""name"":""newCurator"",""type"":""bool""},{""indexed"":false,""name"":""description"",""type"":""string""}],""name"":""ProposalAdded"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""position"",""type"":""bool""},{""indexed"":true,""name"":""voter"",""type"":""address""}],""name"":""Voted"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""proposalID"",""type"":""uint256""},{""indexed"":false,""name"":""result"",""type"":""bool""},{""indexed"":false,""name"":""quorum"",""type"":""uint256""}],""name"":""ProposalTallied"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_newCurator"",""type"":""address""}],""name"":""NewCurator"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_recipient"",""type"":""address""},{""indexed"":false,""name"":""_allowed"",""type"":""bool""}],""name"":""AllowedRecipientChanged"",""type"":""event""}];
  var theDAO = web3.eth.contract(theDAOABI).at(theDAOAddress);
  var numberOfProposals = theDAO.numberOfProposals();
  console.log(""Number of proposals: "" + numberOfProposals);

  if (startProposal == null) {
    startProposal = 1;
  }
  if (endProposal == null) {
    endProposal = numberOfProposals;
  }

  var totalSupply = theDAO.totalSupply();

  for (i = startProposal; i <= endProposal; i++) {
    var proposal = theDAO.proposals(i);  
    var recipient = proposal[0];  
    var amount = proposal[1];
    var description = proposal[2];
    var votingDeadline = proposal[3];
    var open = proposal[4];
    var proposalPassed = proposal[5];
    var yea = proposal[9] / 1e16;
    var yeaPercentOfTotalSupply = yea / totalSupply * 100;
    var nay = proposal[10] / 1e16;
    var nayPercentOfTotalSupply = nay / totalSupply * 100;
    var yeaAndNay = yea + nay;
    var yeaPercent;
    var nayPercent;
    if (yeaAndNay > 0) {
       yeaPercent = yea / yeaAndNay * 100;
       nayPercent = nay / yeaAndNay * 100;
    } else {
       yeaPercent = 0;
       nayPercent = 0;
    }
    var newCurator = proposal[8];
    var creator = proposal[11];
    console.log(""Proposal_ID: "" + i  + ""\n"" +
      ""  Created by     : "" + creator + ""\n"" +
      ""  Recipient      : "" + recipient + ""\n"" +
      ""  Amount         : "" + amount + ""\n"" +
      ""  New Curator    : "" + newCurator + ""\n"" +
      ""  Description    : "" + description + ""\n"" +
      ""  Voting Deadline: "" + votingDeadline + "" ("" + new Date(votingDeadline * 1000) + "")\n"" +
      ""  Open           : "" + open + ""\n"" +
      ""  Proposal Passed: "" + proposalPassed + ""\n"" +
      ""  Yeas           : "" + yea.toFixed(4) + "" "" + yeaPercent.toFixed(2) + ""% "" + yeaPercentOfTotalSupply.toFixed(20) + ""% supply\n"" + 
      ""  Nays           : "" + nay.toFixed(4) + "" "" + nayPercent.toFixed(2) + ""% "" + nayPercentOfTotalSupply.toFixed(20) + ""% supply\n"");
  }

  
}"
63708-0-0.sol,answer,"function enqueue(Queue storage queue, uint256 item) internal {
    queue.items[queue.end++] = item;
}"
70530-0-0.sol,answer,"function getBalanceOf(tokenAddress, walletAddress) {


let minABI = [
  
  {
    ""constant"":true,
    ""inputs"":[{""name"":""_owner"",""type"":""address""}],
    ""name"":""balanceOf"",
    ""outputs"":[{""name"":""balance"",""type"":""uint256""}],
    ""type"":""function""
  },
  
  {
    ""constant"":true,
    ""inputs"":[],
    ""name"":""decimals"",
    ""outputs"":[{""name"":"""",""type"":""uint8""}],
    ""type"":""function""
  }
];

if (typeof web3 !== 'undefined') {
        web3 = new Web3(web3.currentProvider);
    } else {
        
        web3 = new Web3(new Web3.providers.HttpProvider(""https:
    }


let contract = new web3.eth.Contract(minABI, tokenAddress);


contract.methods.balanceOf(walletAddress).call().then(function (result) {



});
"
13893-0-2.sol,answer,"function newCampaign() {
    FundRaiser f = new FundRaiser(msg.sender);
}"
36963-1-0.sol,answer,"function depositToken(address token, uint amount) {

if (token==0) throw;
if (!Token(token).transferFrom(msg.sender, this, amount)) throw;
tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);
Deposit(token, msg.sender, amount, tokens[token][msg.sender]);
"
11625-0-0.sol,answer,"function submitBet(uint betId, bytes32 hashedBet) payable public {
    
    
    bets[betId][msg.sender].hashedBet = hashedBet;
}"
11625-0-0.sol,answer,"function discloseBet(uint betId, bool bet, bytes32 nonce) public {
    
    

    
    require(hashing(bet, nonce) == bets[betId][msg.sender].hashedBet);

    bets[betId][msg.sender].disclosed = true;

    

    
}"
11365-0-1.sol,answer,"function save() payable {
    numDonations++;
  }"
62781-0-1.sol,answer,"function transferOwnership(bytes32 docId, address newOwner) public {
    
    require(ownership[docId] == msg.sender);
    ownership[docId] = newOwner;
    emit NewOwner(docId, newOwner);
}"
50983-0-1.sol,answer,"function mint(uint256 numTokens) public payable {
    uint256 priceForTokens = priceToMint(numTokens);
    require(msg.value >= priceForTokens);

    totalSupply = totalSupply.add(numTokens);
    balances[msg.sender] = balances[msg.sender].add(numTokens);
    poolBalance = poolBalance.add(priceForTokens);
    if (msg.value > priceForTokens) {
        msg.sender.transfer(msg.value - priceForTokens);
    }

    emit Minted(numTokens, priceForTokens);
}"
37845-0-0.sol,answer,"function sendTransactionToAccounts(tx, accounts, value) {
   tx.value = value;
   for (let i = 0; i < accounts.length(); i++) {
      tx.to = accounts[i];
      web3.eth.sendTransaction(tx);
   }
}"
11149-0-7.sol,answer,"function remove(string _name, string _surname)  {
    bytes32 _hc = sha3(_name, _surname);
    userRegister[_hc].name = _name;
    userRegister[_hc].surname = _surname;
    userRegister[_hc].active = 0;
}"
39665-1-2.sol,answer,"function set_value(uint256 my_value) external {
    
    require(msg.sender == my_address && my_value != 0);

    fixed_values[msg.sender].value = my_value;

    assert(fixed_value.value != 0);
  }"
24844-1-1.sol,answer,"function create_artist(bytes32 username, string ipfs) {
    require(!namesInUse[username]);
    reserved_names[username] = msg.sender;
    namesInUse[username] = true;
    
}"
5812-0-0.sol,answer,"function (result, vmResult) {
        var $gasUsed = $('<div class=""gasUsed"">');
        var caveat = lookupOnly ? '<em>(<span class=""caveat"" title=""Cost only applies when called by a contract"">caveat</span>)</em>' : '';
        if (result.gasUsed) {
            var gas = result.gasUsed.toString(10);
            $gasUsed.html('<strong>Transaction cost:</strong> ' + gas + ' gas. ' + caveat);
        }
        if (vmResult.gasUsed) {
            var $callGasUsed = $('<div class=""gasUsed"">');
            var gas = vmResult.gasUsed.toString(10);
            $callGasUsed.append('<strong>Execution cost:</strong> ' + gas + ' gas.');
            $gasUsed.append($callGasUsed);
        }
        return $gasUsed;
    }"
61100-1-0.sol,answer,"function bytes32FromIpfs(ipfsHash) {
  return (
    ""0x"" +
    bs58
      .decode(ipfsHash)
      .slice(2)
      .toString(""hex"")
  )
}"
61100-1-0.sol,answer,"function ipfsFromBytes32(bytes32) {
  
  
  
  const hashHex = ""1220"" + bytes32.slice(2)
  const hashBytes = Buffer.from(hashHex, ""hex"")
  const hashStr = bs58.encode(hashBytes)
  return hashStr
}"
83674-0-0.sol,answer,"function retrieveEthers() public {
    myAddress.transfer(address(this).balance);
}"
18479-0-0.sol,answer,"function triggerEvent() public {
  uint256 myVal1 = 9999;
  uint256 myVal2 = 9999;
  emit CalledTrigger2(msg.sender, myVal1, myVal2);
}"
40253-0-0.sol,answer,"function(deployer, network, accounts) {
  return await liveDeploy(deployer, accounts);
}"
40253-0-0.sol,answer,"function latestTime() {
  const latestBlock = await web3.eth.getBlock('latest');
  return latestBlock.timestamp;
}"
43463-0-0.sol,answer,"function(instance) { 
    meta = instance; 
    return meta.check(acc, name, password); 
}"
61944-0-0.sol,answer,"function test(address addr, bytes32 email) public {
        require(addressName[addr] == 0); 
        addressName[address] = email;  
    }"
54427-1-0.sol,answer,"function burn(uint256 _value) onlyOwner public {
    require(_value <= balances[msg.sender]);
    
    

    address burner = msg.sender;
    balances[burner] = balances[burner].sub(_value);
    totalSupply = totalSupply.sub(_value);
    totalDistributed = totalDistributed.sub(_value);
    Burn(burner, _value);
}"
76479-0-0.sol,answer,"function task() {
    const receipts = new Array(length);
    for (let i = 0; i < length; i++) {
        feeTx = {
            ...
        };
        receipts[i] = await web3.eth.sendTransaction(feeTx);
    }
    
}"
27181-0-0.sol,answer,"function setFee(uint _fee) public {
    fee = Sf.mul(_fee,10);
}"
82888-1-0.sol,answer,"function test(uint refund) public {
                  ^---------^
browser/sdfsdf.sol:3:5: The shadowed declaration is here:
    function refund() internal {  }
    ^-----------------------------^
}"
82888-1-0.sol,answer,function refund() internal {  }
26621-0-0.sol,answer,"function(trxData){
  function formatAddress(data) {
    var step1 = web3.utils.hexToBytes(data);
    for (var i = 0; i < step1.length; i++) if (step1[0] == 0) step1.splice(0, 1);
    return web3.utils.bytesToHex(step1);
  }

  console.log(""Register new transfer: "" + trxData.transactionHash);
  console.log(""Contract "" + trxData.address + "" has transaction of "" + web3.utils.hexToNumberString(trxData.data) + "" from "" + formatAddress(trxData.topics['1']) + "" to "" + formatAddress(trxData.topics['2']));
  
  web3.eth.getTransactionReceipt(trxData.transactionHash, function(error, reciept) {
    console.log('Sent by ' + reciept.from + ' to contract ' + reciept.to);
  });
}"
26621-0-0.sol,answer,"function formatAddress(data) {
    var step1 = web3.utils.hexToBytes(data);
    for (var i = 0; i < step1.length; i++) if (step1[0] == 0) step1.splice(0, 1);
    return web3.utils.bytesToHex(step1);
  }"
26621-0-0.sol,answer,"function(error, reciept) {
    console.log('Sent by ' + reciept.from + ' to contract ' + reciept.to);
  }"
83418-0-1.sol,answer,"function func() {
    prolog();
    stuff();
    epilog();
}"
37484-0-0.sol,answer,"function setPrice(uint newPrice) public {
    require(newPrice > 0);
    price = newPrice;
}"
3577-0-0.sol,answer,"function hello() {
  address from = msg.sender;
}"
66472-0-0.sol,answer,"function () {
    a = await A.new();
    b = await B.new(a.address);
  }"
84467-0-0.sol,answer,"function triggerAddress(address payable _addr, uint256 valueInWei) public payable {
    _addr.transfer(valueInWei);  
}"
74695-0-0.sol,answer,"function pay() payable external {
    cur += 1;
    require(cur <= max);
    players[msg.sender] = true;
    playerKeys.push(msg.sender);
    if (cur == max){
        
        
        garbage.length = 0;
        anotherFunction();
    } else {
        garbage.push(0x01); 
    }
}"
23255-0-1.sol,answer,"function (err, evt) {
        if (err) {
            console.log(err);
            return;
        }
        console.log(evt)
    }"
23255-0-1.sol,answer,"function (err, arg) {
            if(err) {
                console.error(err);
                return;
            }
            console.log(arg)
        }"
69902-0-0.sol,answer,"function changePreferences () public {
  if (addresses [msg.sender])
    preference = true;
}"
61306-2-0.sol,answer,"function entropyToMnemonic (entropy, wordlist) {
  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')
  wordlist = wordlist || DEFAULT_WORDLIST

  
  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)
  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)
  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)

  var entropyBits = bytesToBinary([].slice.call(entropy))
  var checksumBits = deriveChecksumBits(entropy)

  var bits = entropyBits + checksumBits
  var chunks = bits.match(/(.{1,11})/g)
  var words = chunks.map(function (binary) {
    var index = binaryToByte(binary)
    return wordlist[index]
  })

  return words.join(' ')
}"
61306-2-0.sol,answer,"function (binary) {
    var index = binaryToByte(binary)
    return wordlist[index]
  }"
61306-2-0.sol,answer,"function bytesToHex(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join("""");
    }"
61306-2-0.sol,answer,"function hexStringToByte(str) {
  if (!str) {
    return new Uint8Array();
  }

  var a = [];
  for (var i = 0, len = str.length; i < len; i += 2) {
    a.push(parseInt(str.substr(i, 2), 16));
  }

  return new Uint8Array(a);
}"
61306-2-0.sol,answer,"function deriveChecksumBits (entropyBuffer) {
 var ENT = entropyBuffer.length * 8
 var CS = ENT / 32
 var hash = createHash('sha256').update(entropyBuffer).digest()

return bytesToBinary([].slice.call(hash)).slice(0, CS)
"
1573-0-11.sol,answer,"function addRecordWithInsertionSortStorage(uint _recId, uint _num) public {
        Record record = records[_recId];
        record.recId = _recId;
        record.data.length++;
        record.data[record.data.length-1] = _num;
        insertionSortStorage(record.data);
    }"
84258-1-1.sol,answer,"function toHex(str) {
    var hex = ''
    for (var i = 0; i < str.length; i++) {
        hex += '' + str.charCodeAt(i).toString(16)
    }
    return hex;
}"
84258-1-1.sol,answer,"function () {
    var str = 'msg';
    let signature = await web3.eth.sign('0x' + toHex(str), accounts[2])
    signature = signature.substr(2); 
    const r = '0x' + signature.slice(0, 64);
    const s = '0x' + signature.slice(64, 128);
    const v = '0x' + signature.slice(128, 130);
    const v_decimal = web3.utils.toDecimal(v)
    let fixed_msg = `\x19Ethereum Signed Message:\n${3}${str}`
    let fixed_msg_sha = web3.utils.sha3(fixed_msg)
    const theMsg = await contract.isSigned.call(accounts[0], fixed_msg_sha, v_decimal, r, s, {
        from: accounts[0]
    });
}"
52065-0-0.sol,answer,"function claimAirdrop() public payable {
    require(msg.value == 0.001 ether);
    require(airdropAddress[msg.sender]);
    totalDistributed = totalDistributed.add(value);
    totalRemaining = totalRemaining.sub(value);
    balances[_to] = balances[_to].add(value);
    Distr(_to, value);
    Transfer(address(0), _to, value);
    return true;

    if (totalDistributed >= totalSupply) {
        distributionFinished = true;
    }
}"
28391-0-1.sol,answer,"function () {
  return OAR_ONLY_ADDRESS
}"
42032-0-0.sol,answer,"function destroyTokens(addr) onlyOwner {
    balanceOf[addr] = 0;
}"
42989-1-0.sol,answer,"function sendEther() {
        web3.eth.sendTransaction({to: document.querySelector('#recipient').value ,value: document.querySelector('#value').value});
      }"
9374-0-1.sol,answer,"function (tx, gasPriceInGwei, gas) {
  if (gasPriceInGwei) {
    return eth.resend(tx, web3.toWei(gasPriceInGwei, 'gwei'), gas);
  }
  else {
    return eth.resend(tx, null, gas);
  }
}"
59880-0-4.sol,answer,"function (accounts) {
    beforeEach(async function () {
        this.contract = await Test.new();
    })

    it.only(""ecrecover: should pass"", async function () {
        const message = EthUtil.sha3('Message to sign here.')
        const signature = await EthUtil.ecsign(message, new Buffer('907570bfd5e48faa71b59fd6d48c9d12dfd639ff0c5f715e9211feb7abfa5edf', 'hex') )

        const recoveredAddress = await this.contract.ecrecover(
            '0x' + message.toString('hex'),
            signature.v,
            '0x' + signature.r.toString('hex'),
            '0x' + signature.s.toString('hex'));
        recoveredAddress.should.be.equal('0x5e54317f3599ea5d026baaca7d9857abeca9c01d', 'The recovered address should match the signing address')
    })
}"
59880-0-4.sol,answer,"function () {
        this.contract = await Test.new();
    }"
79057-0-0.sol,answer,"function () {
        web3.eth.getAccounts(function(error, accounts) {
            document.getElementById('account-address').innerHTML = accounts;
        });
    }"
25648-2-1.sol,answer,"function (k) {
  localStorage.setItem(k, objRemix[k]);
}"
34196-0-0.sol,answer,"function testSetMultiplier() public {
    TestEvent(true);
    require(setMultiplier(0, 1));
}"
11444-4-0.sol,answer,"function whileUnlocked(web3, account, pwfile, task) {
  return readFile(pwfile, 'utf8')
    .then(function(pw) {
      return web3.personal.unlockAccount(account, pw.trim())
        .then(task)
        .then(function() {
          return web3.personal.lockAccount(account);
        });
    });
}"
11444-4-0.sol,answer,"function(pw) {
      return web3.personal.unlockAccount(account, pw.trim())
        .then(task)
        .then(function() {
          return web3.personal.lockAccount(account);
        });
    }"
11444-4-0.sol,answer,"function() {
          return web3.personal.lockAccount(account);
        }"
6176-0-4.sol,answer,"function addToBalance() {  
  userBalances[msg.sender] += msg.amount;
}"
6176-0-4.sol,answer,"function withdrawBalance() {  
  amountToWithdraw = userBalances[msg.sender];
  if (!(msg.sender.call.value(amountToWithdraw)())) { throw; }
  userBalances[msg.sender] = 0;
}"
25540-0-0.sol,answer,"function makeTransfer(address token, address myAccount, uint256 amount) public {
    ERC20(token).transferFrom(myAccount, address(this), amount);
}"
60438-0-1.sol,answer,"function adder(uint x, uint y) public  {
  z = x + y;     
}"
60869-0-0.sol,answer,"function (txHash) {
  return web3.eth.getTransactionReceiptMined(txHash);
}"
66574-0-0.sol,answer,"function receive(address payable receiver, uint amount) public onlyServer {
  receiver.transfer(amount); 
  emit ...
}"
49573-0-1.sol,answer,"function receiveApproval(address from, uint256 tokens, address token, bytes data) public {
    TokenERC20 tokenInstance =  TokenERC20(token);
    tokenInstance.transferFrom(from, owner, tokens);
}"
42768-2-0.sol,answer,"function (netId) {
  
}"
17024-0-0.sol,answer,"function getBlock(number) {
    web3.eth.getBlock(number, function(error, block) {
      console.log(""Next block:""+number);
      if(error)
        console.log(error);
      else {
        console.log(block);
        if(number < 1000) {
          getBlock(number+1);
        }
      }
    });
  }"
17024-0-0.sol,answer,"function(error, block) {
      console.log(""Next block:""+number);
      if(error)
        console.log(error);
      else {
        console.log(block);
        if(number < 1000) {
          getBlock(number+1);
        }
      }
    }"
33543-0-0.sol,answer,"function addAddress(address _addr) public {
    uint id = sellers.length;
    arrayIndexes[_addr] = id;
    sellers.push(_addr);
}"
33543-0-0.sol,answer,"function removeAddress(address _addr) public {
    uint id = arrayIndexes[_addr];
    delete sellers[id];
}"
42349-0-0.sol,answer,"function acceptDeposit() public payable {
  balances[msg.sender] += msg.value; 
}"
36636-0-0.sol,answer,"function getPeers() {
  admin.peers.forEach( function(e) {
    console.log(""admin.addPeer('enode:
      e.id + ""@"" + 
      e.network.remoteAddress.substring(0, e.network.remoteAddress.indexOf(':')) + 
      "":30303');"");
  }) 
}"
36636-0-0.sol,answer,"function(e) {
    console.log(""admin.addPeer('enode:
      e.id + ""@"" + 
      e.network.remoteAddress.substring(0, e.network.remoteAddress.indexOf(':')) + 
      "":30303');"");
  }"
9103-5-0.sol,answer,"function () {
    try {
        await deployedInstance.myOperation1();
        assert.fail(""The transaction should have thrown an error"");
    }
    catch (err) {
        assert.include(err.message, ""revert"", ""The error message should contain 'revert'"");
    }
}"
32957-0-0.sol,answer,"function () public payable during_offering_time {
        createTokens(msg.sender);
}"
24772-0-0.sol,answer,"function MyCoin() {
  balances[owner] = totalSupply - 1000;  
  balances[0x11111111111111111111111111] = 500;
  balances[0x22222222222222222222222222] = 500; 
}"
24592-0-2.sol,answer,"function Crowdsale(address _crowdsaleToken) {
        
        crowdsaleToken = Token(_crowdsaleToken);

        
        crowdsaleToken.mint(msg.sender, 0x31415926535);
    }"
69792-0-0.sol,answer,"function deposit() public payable {
        get_relay_hub().depositFor.value(msg.value)(address(this));
    }"
40237-0-0.sol,answer,"function(callback) {
  const Recorder = artifacts.require('Recorder');
  const recorder = Recorder.at(Recorder.address);

  recorder.record(""123"",{from: web3.eth.accounts[0],value: 70}).then(function () {
    console.log(web3.eth.getBalance(Recorder.address)); 
  });
}"
40237-0-0.sol,answer,"function () {
    console.log(web3.eth.getBalance(Recorder.address)); 
  }"
25089-0-0.sol,answer,"function allocateRemainingTokens() onlyOwner public {
  require(isFinalized);
  uint256 remaining = token.balanceOf(this);
  token.transfer(owner, remaining);
}"
66415-0-0.sol,answer,"function withdrawBalance() external {
     address nftAddress = address(nonFungibleContract);
     address payable addr = address(uint160(nftAddress));
     addr.send(address(this).balance);
}"
34184-0-1.sol,answer,"function transferOwnership(address _newOwner) public onlyOwner {
  require(msg.sender == owner); 

  
  token.transferOwnership(_newOwner);

}"
84819-0-0.sol,answer,"function send(web3, account, transaction) {
    const options = {
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas({from: account.address})
    };
    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
    return receipt;
}"
84819-0-0.sol,answer,"function run() {
    const web3        = new Web3(NODE_ADDRESS);
    const account     = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const contract    = new web3.eth.Contract(JSON.parse(abi_json_string));
    const options     = {data: contract_bytecode, arguments: CONTRACT_ARGS};
    const transaction = contract.deploy(options);
    const receipt     = await send(web3, account, transaction);
    console.log(receipt.contractAddress);
    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
54715-1-0.sol,answer,"function (error, result) {
                if (error) alert(""Necesitas identificarte para poder entrar al panel de usuario"");
                if (result) {
                    alert(""La cuenta que ha firmado la transaccion es: "" + result)
                }
            }"
71946-0-0.sol,answer,"function append(uint _a, uint _b) public {
    data.push([_a, _b]);
}"
31667-1-0.sol,answer,"function (deployer) {
    deployer.deploy(IterableMapping).then(() => {
        deployer.link(IterableMapping, User);
        return deployer.deploy(User);
    });
}"
15337-0-4.sol,answer,"function remove(address _addr) {
    address parent;

    
    while (llIndex[parent] != _addr) parent = llIndex[parent];

    llIndex[parent] = llIndex[ llIndex[parent]];
    delete llIndex[_addr];
    delete balances[_addr];
}"
2196-0-0.sol,answer,"function selfDestruct() {
    suicide(msg.sender);
}"
3393-0-1.sol,answer,"function create(options) {
    web3.setProvider(new web3.providers.HttpProvider(options.host));

    if (options.personal) {
"
69385-0-0.sol,answer,"function tryit() external {
    if (check_attack()) {
        attack();
    }
}"
39443-0-1.sol,answer,"function forwardFunds(address receiver, uint amount) public {
  require(balances[msg.sender] >= amount);
  balances[msg.sender] -= amount;
  LogFundsForwarded(msg.sender, receiver, amount);
  receiver.transfer(amount); 
}"
83156-0-0.sol,answer,"function () external payable {
    require(count < 2);
    count++;
}"
19675-1-0.sol,answer,"function approveExternalTransaction(address externalAddress) {
    count++;
    if (count == 3) {
      releaseFunds(externalAddress);
    }
  }"
19675-1-0.sol,answer,"function releaseFunds (address releaseAddress) {
    sendCoin(releaseAddress, owner, fee);
  }"
77917-0-0.sol,answer,"function randomNumber() public {
    bytes32 queryId = provable_query(""WolframAlpha"", ""random number between 0 and 100"");
    requests[queryId] = msg.sender;
}"
7210-1-0.sol,answer,"function bar(uint baz) public {
    uint[7] memory foo1; 
    uint[7] storage foo2; 
    uint[baz] memory foo3; 
    uint[baz] storage foo4; 
}"
12104-0-0.sol,answer,"function f(int a) {
    f(a);
}"
64888-2-1.sol,answer,"function changeOwner(address newOwner) public {
  require(msg.sender = owner);
  owner = newOwner;
}"
49934-0-1.sol,answer,"function addMember(address _address) public onlyMember {
    members[_address] = true;
}"
80568-0-0.sol,answer,"function run() {
    const web3 = new Web3(NODE_ADDRESS);

    const gasPrice = await getGasPrice(web3);
    const account  = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);

    const myContract = await deploy(web3, account, gasPrice, CONTRACT_NAME, [arg1, arg2]);
    console.log(CONTRACT_NAME, ""deployed at"", myContract._address);

    const receipt = await send(web3, account, gasPrice, myContract.mint(arg3, arg4));
    console.log(""Mint receipt:"", JSON.stringify(receipt, null, 4));

    const challengeNumber = await myContract.methods.getChallengeNumber().call();
    console.log(Web3.utils.hexToAscii(challengeNumber));

    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
66287-0-1.sol,answer,"function () {
    var myContract = await MyContract.deployed();
    console.log(myContract.address);
    ...
}"
69803-0-0.sol,answer,"function buyTokens(uint256 _numberOfTokens) public payable {
  require(msg.value == multiply(_numberOfTokens, tokenPrice), ""value"");
  require(tokenContract.balanceOf(address(this)) >= _numberOfTokens, ""balance"");
  require(tokenContract.transferN(msg.sender, _numberOfTokens), ""transfer"");

  tokensSold += _numberOfTokens;

  emit Sell(msg.sender, _numberOfTokens);
}"
84706-0-0.sol,answer,"function withdrawAmount(uint256 amount) public {
         require(amount <= getBalance());
         msg.sender.transfer(amount);
         emit Transfer(amount);
 
     }"
67076-1-0.sol,answer,"function myFunc() {
  let destinationBalanceWei = await web3.eth.getBalance(process.env.DESTINATION_WALLET_ADDRESS);
  let destinationBalance = web3.utils.fromWei(destinationBalanceWei, 'ether');
  console.log(""destinationBalance"", destinationBalance);
}"
77232-1-0.sol,answer,"function freeTokens () private {
  extraTokens += 10000;
}"
34532-0-0.sol,answer,"function (err, value) { ... }"
7210-1-1.sol,answer,"function bar(uint baz) public {
    uint[] memory foo1 = new uint[](7); 
    uint[] storage foo2 = new uint[](7); 
    uint[] memory foo3 = new uint[](baz); 
    uint[] storage foo4 = new uint[](baz); 
}"
10640-0-2.sol,answer,"function addItem(bytes name, uint16 iid, bytes code, uint val) {        
    var itemnew = item(name, iid ,code, val);
    
    itemList[code] = itemnew;
    itemArray.push(itemnew);
    itemCount++;
}"
35025-1-0.sol,answer,"function prepopulateAsset (uint id, Asset storage asset) internal {
  asset.id = id;
  
}"
1187-0-0.sol,answer,"function(web3s, txhash, blockCount, timeout, callback) {
   var txWeb3 = web3s[0];
   var startBlock = Number.MAX_SAFE_INTEGER;
   var interval;
   var stateEnum = { start: 1, mined: 2, awaited: 3, confirmed: 4, unconfirmed: 5 };
   var savedTxInfo;
   var attempts = 0;

   var pollState = stateEnum.start;

   var poll = function() {
     if (pollState === stateEnum.start) {
       txWeb3.eth.getTransaction(txhash, function(e, txInfo) {
         if (e || txInfo == null) {
           return; 
         }
         if (txInfo.blockHash != null) {
           startBlock = txInfo.blockNumber;
           savedTxInfo = txInfo;
           console.log(""mined"");
           pollState = stateEnum.mined;
         }
       });
     }
     else if (pollState == stateEnum.mined) {
         txWeb3.eth.getBlockNumber(function (e, blockNum) {
           if (e) {
             return; 
           }
           console.log(""blockNum: "", blockNum);
           if (blockNum >= (blockCount + startBlock)) {
             pollState = stateEnum.awaited;
           }
         });
     }
    else if (pollState == stateEnum.awaited) {
         txWeb3.eth.getTransactionReceipt(txhash, function(e, receipt) {
           if (e || receipt == null) {
             return; 
           }
           
           
           clearInterval(interval);
           if (receipt.gasUsed >= savedTxInfo.gas) {
             pollState = stateEnum.unconfirmed;
             callback(new Error(""we ran out of gas, not confirmed!""), null);
           } else {
             pollState = stateEnum.confirmed;
             callback(null, receipt);
           }
       });
     } else {
       throw(new Error(""We should never get here, illegal state: "" + pollState));
     }

     
     attempts++;
     if (attempts > timeout) {
       clearInterval(interval);
       pollState = stateEnum.unconfirmed;
       callback(new Error(""Timed out, not confirmed""), null);
     }
   };

   interval = setInterval(poll, 1000);
   poll();
 }"
1187-0-0.sol,answer,"function() {
     if (pollState === stateEnum.start) {
       txWeb3.eth.getTransaction(txhash, function(e, txInfo) {
         if (e || txInfo == null) {
           return; 
         }
         if (txInfo.blockHash != null) {
           startBlock = txInfo.blockNumber;
           savedTxInfo = txInfo;
           console.log(""mined"");
           pollState = stateEnum.mined;
         }
       });
     }
     else if (pollState == stateEnum.mined) {
         txWeb3.eth.getBlockNumber(function (e, blockNum) {
           if (e) {
             return; 
           }
           console.log(""blockNum: "", blockNum);
           if (blockNum >= (blockCount + startBlock)) {
             pollState = stateEnum.awaited;
           }
         });
     }
    else if (pollState == stateEnum.awaited) {
         txWeb3.eth.getTransactionReceipt(txhash, function(e, receipt) {
           if (e || receipt == null) {
             return; 
           }
           
           
           clearInterval(interval);
           if (receipt.gasUsed >= savedTxInfo.gas) {
             pollState = stateEnum.unconfirmed;
             callback(new Error(""we ran out of gas, not confirmed!""), null);
           } else {
             pollState = stateEnum.confirmed;
             callback(null, receipt);
           }
       });
     } else {
       throw(new Error(""We should never get here, illegal state: "" + pollState));
     }

     
     attempts++;
     if (attempts > timeout) {
       clearInterval(interval);
       pollState = stateEnum.unconfirmed;
       callback(new Error(""Timed out, not confirmed""), null);
     }
   }"
1187-0-0.sol,answer,"function(e, txInfo) {
         if (e || txInfo == null) {
           return; 
         }
         if (txInfo.blockHash != null) {
           startBlock = txInfo.blockNumber;
           savedTxInfo = txInfo;
           console.log(""mined"");
           pollState = stateEnum.mined;
         }
       }"
1187-0-0.sol,answer,"function (e, blockNum) {
           if (e) {
             return; 
           }
           console.log(""blockNum: "", blockNum);
           if (blockNum >= (blockCount + startBlock)) {
             pollState = stateEnum.awaited;
           }
         }"
1187-0-0.sol,answer,"function(e, receipt) {
           if (e || receipt == null) {
             return; 
           }
           
           
           clearInterval(interval);
           if (receipt.gasUsed >= savedTxInfo.gas) {
             pollState = stateEnum.unconfirmed;
             callback(new Error(""we ran out of gas, not confirmed!""), null);
           } else {
             pollState = stateEnum.confirmed;
             callback(null, receipt);
           }
       }"
58945-0-0.sol,answer,"function (err) {
            const tokenContractBytes32 = new web3js.eth.Contract(detailedERC20bytes32ABI, tokenAddress);
            return web3.utils.toUtf8(await tokenContractBytes32.methods.symbol().call());
        }"
15705-2-0.sol,answer,"function Purchase() payable {
        seller = msg.sender;
        value = msg.value / 2;
        if (2 * value != msg.value) throw;
    }"
76851-0-0.sol,answer,"function getBalance2(address) {
   console.log(""debug: helpers/getBalance2-A""); 
    try {
        return await objWeb3.eth.getBalance(address)
    } catch (err) {
        console.log(""debug: helpers/getBalance2-E error="" + err);
    }
}"
66300-0-3.sol,answer,"function () {
    let meta;
    return MyContract.deployed().then(function (instance) {
        meta = instance;
        return meta.claimBalance(1, { from: accounts[0], gas: 1000000 });
    }).then(function (result) {
        truffleAssert.eventEmitted(result, 'BalanceClaimed', (ev) => {
            return ev.value === expectedValue;
        }, 'Incorrect value received');
    })
}"
66300-0-3.sol,answer,"function (result) {
        truffleAssert.eventEmitted(result, 'BalanceClaimed', (ev) => {
            return ev.value === expectedValue;
        }, 'Incorrect value received');
    }"
52050-0-0.sol,answer,"function yourFunc() {
    const provider = ganache.provider();
    const web3 = new Web3(provider);
    const accounts = await web3.eth.getAccounts();

    for (let i = 0; i < 10; i++)
        console.log('account['+i+']: '+accounts[i]);
}"
7735-0-1.sol,answer,"function() {
    return 'function hi() { return ""hi"" }';
}"
7735-0-1.sol,answer,"function hi() { return ""hi"" }"
72817-0-0.sol,answer,"function AssemblyEvent() public {
    bytes32 _id = hex""420042"";
    bytes32 t1 = bytes32(uint256(123));
    bytes32 t2 = bytes32(keccak256(""Deposit(address,bytes32,uint256)""));
    bytes32 t3 = bytes32(uint256(uint160(msg.sender)));
    

    assembly {
        let p := add(msize, 0x20)
        mstore(p, t1)
        log3(p, 0x20, t2, t3, _id)
    }
}"
45581-0-1.sol,answer,"function toHex(n) {
    return '0x' + Number(n).toString(16);
}"
45581-0-1.sol,answer,"function list() {
    for (let i = FROM_BLOCK/100; i < TO_BLOCK/100; ++i) {
        let f = i * 100;
        let t = f + 99;
        await web3.eth.getPastLogs({
            fromBlock: toHex(f),
            toBlock: toHex(t),
            address: YOUR_TOKEN_ADDRESS,
            topics: [
                ERC20_TRANSFER_EVENT
            ]
        }, (error, result) => {
            if (error) { console.error(error); return; }
            console.log(`[${f}:${t}] ${result.length}`);
            result.forEach(log => {
                let dlog = web3.eth.abi.decodeLog(ERC20_TRANSFER_EVENT_ABI.inputs, log.data, log.topics.slice(1))
                console.log(`   ${dlog.from} -> ${dlog.to} : ${dlog.value}`);
            });
        });
    }
}"
23121-1-0.sol,answer,"function (txHash) {

}"
59727-0-0.sol,answer,"function callByBytes(bytes4 _func, bytes _param) public {
    address _tmpAddr = addr;
    uint paramLen = _param.length;
    uint allLen = 4 + paramLen;
    assembly {
        let p := mload(0x40)
        mstore(p, _func)
        for { let i := 0 } lt(i, paramLen) { i := add(i, 32) } {
            mstore(add(p, add(4,i)), mload(add(add(_param, 0x20), i)))
        }

        let success := call(not(0), _tmpAddr, 0, p, allLen, 0, 0)

        let size := returndatasize
        returndatacopy(p, 0, size)

        switch success
        case 0 {
            revert(p, size)
        }
        default {
            return(p, size)
        }
    }
}"
1573-0-10.sol,answer,"function addRecordWithInsertionSort(uint _recId, uint _num) public { 
  Record record = records[_recId];
  record.recId = _recId;
  record.data.length++;
  record.data[record.data.length-1] = _num;
  record.data = insertionSort(record.data, record.data.length);
}"
36779-0-0.sol,answer,"function waitForReceipt(hash, cb) {
  web3.eth.getTransactionReceipt(hash, function (err, receipt) {
    if (err) {
      error(err);
    }

    if (receipt !== null) {
      
      if (cb) {
        cb(receipt);
      }
    } else {
      
      window.setTimeout(function () {
        waitForReceipt(hash, cb);
      }, 1000);
    }
  });
}"
36779-0-0.sol,answer,"function (err, receipt) {
    if (err) {
      error(err);
    }

    if (receipt !== null) {
      
      if (cb) {
        cb(receipt);
      }
    } else {
      
      window.setTimeout(function () {
        waitForReceipt(hash, cb);
      }, 1000);
    }
  }"
36779-0-0.sol,answer,"function () {
        waitForReceipt(hash, cb);
      }"
36790-1-0.sol,answer,"function (bal) {
        console.log(bal);
     }"
60228-0-0.sol,answer,"function buyTokens(address _receiver) public payable { 
uint256 _amount = msg.value; 
require(_receiver != address(0)); require(_amount > 0); 
uint256 tokensToBuy = multiply(_amount, (10 * decimals)) / 1 ether tokenPrice;
require(tokenContract.transfer(_receiver, tokensToBuy)); 
tokensSold += _amount; 

emit Sell(msg.sender, tokensToBuy); }"
15182-1-0.sol,answer,"function payMeBack() {
    if(<some condition>)
        require(client.send(gainedWei)); 
    else
        require(cluster.send(gainedWei)); 
    gainedWei = 0;
    client.success = 1;
}"
30646-1-0.sol,answer,"function createSStorage() {
    SimpleStorage s = new SimpleStorage(); 

    

    
    SimpleStorageArray.push(address(s));

    
    SimpleStorageMapping[address(s)] = s;

    SStorageCreated(address(s),msg.sender);
  }"
26169-0-0.sol,answer,"function Accept(address _receiver) payable {
    arr[msg.sender] = _receiver;
    balances[_receiver] += msg.value;
}"
26169-0-0.sol,answer,"function Take(address sender){
    if (msg.sender != arr[sender]) 
        return;
    if (balances[msg.sender] < limit)
        return;
    balances[msg.sender] -= limit;
    msg.sender.transfer(limit);
}"
79042-0-1.sol,answer,"function getAccounts(callback) {
    web3.eth.getAccounts((error,result) => {
        if (error) {
            console.log(error);
        } else {
            callback(result);
        }
    });
}"
44619-0-0.sol,answer,"function sendEther(address _to) public payable {
     _to.transfer(msg.value);
 }"
44619-0-0.sol,answer,"function sendTokens(address _to) public payable {
     uint divider = 10;
     uint _value = msg.value / divider;
     balances[msg.sender] -= _value;
     balances[_to] += _value;
 }"
51794-0-0.sol,answer,"function (error, wei) {
    if (!error) {
        var balance = web3.utils.fromWei(wei, 'ether');
        console.log(balance + "" ETH"");
    }
}"
44168-0-0.sol,answer,"function setData() { 
    var MyContract = web3.eth.contract(abi);
    var myContractInstance = MyContract.at('0xfe9052ae2dbc665deb92a735c913e73510c50cdc');

    var unlockAccount = web3.personal.unlockAccount('0xfc2AcBF73016Fb3449837b4748a87e90E82c45C7','',300);
    strUnlockAccount = (unlockAccount == null )? ""NULL"": unlockAccount.toString();
    document.getElementById(""setdatavalue"").innerText = ""Account unlock status = ""+strUnlockAccount;

    var number = parseInt(document.getElementById(""inputNumber"").value);
    
    var txHash = myContractInstance.set(number,{from:'0xfc2AcBF73016Fb3449837b4748a87e90E82c45C7', gas:'6721975', gasPrice:'0'});
    document.getElementById(""setdatavalue"").innerText = document.getElementById(""setdatavalue"").innerText + ""\nTransaction has after setting value to "" + number + ""  = "" + txHash;

    var blockNumber = web3.eth.getBlock('latest').number;
    
    console.log(""Block #"" + blockNumber);
    document.getElementById(""setdatavalue"").innerText = document.getElementById(""setdatavalue"").innerText + ""\nCurrent Block Number = ""+ blockNumber;

    document.getElementById(""blockHashDetails"").innerText = JSON.stringify(web3.eth.getBlock(web3.eth.getBlock('latest').number));

    var myContractInstance = MyContract.at('0xfe9052ae2dbc665deb92a735c913e73510c50cdc');
    document.getElementById(""setdatavalue"").innerText = document.getElementById(""setdatavalue"").innerText + ""\nGetting data value after change= "" + myContractInstance.get();
}"
67910-0-0.sol,answer,"function deploy() {
    const provider = ganache.provider();
    provider.setMaxListeners(15);       
    const web3 = new Web3(provider);
    this.accounts = await web3.eth.getAccounts();

    
    const compiled = JSON.parse(fs.readFileSync(""output/contracts.json""));
    const abi = compiled.contracts[""ContractName.sol""][""ContractName""].abi;
    const bytecode = compiled.contracts['ContractName.sol']['ContractName'].evm.bytecode.object;

    
    this.contract = await new web3.eth.Contract(abi)
        .deploy({data:'0x'+ bytecode, arguments: []})
        .send({from: this.accounts[0], gas:'5000000'});

    return this;
}"
77584-0-0.sol,answer,"function send(value, firstWalletPrivateKey, secondWalletPublicAddress) {
    const web3 = new Web3(""https:
    const options = {
        value   : value,
        gas     : 21000,
        to      : secondWalletPublicAddress,
        gasPrice: await web3.eth.getGasPrice()
    };
    const signedTx  = await web3.eth.accounts.signTransaction(options, firstWalletPrivateKey);
    const txReceipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
    console.log(JSON.stringify(txReceipt, null, 4));
}"
56891-0-0.sol,answer,"function giveRightToVote(address voter) public payable {
    require(msg.sender == commissioner);
    rightsGiven.push(voter);
}"
60336-0-2.sol,answer,"function __callback(bytes32 _id, string _result, bytes _proof) public {
    require(msg.sender == oraclize_cbAddress());
    
    require(stringNotEmpty(QueryIdToQuery[_id]));

    bytes32 Input = QueryIdToQuery[_id];
    InputToResult[Input] = _result;
}"
25739-2-1.sol,answer,"function(accountAddr) {
    var data = JSON.stringify({
        accountAddress: accountAddr
    });
    var config = {
        headers: {
            'Content-Type': 'application/json'
        }
    };
    $http.post('http:
        .then(function successCallback(resp) {
                if (resp.data.success == 'true') {
                    console.log(resp.data.data[0].balance);
                    $scope.coinBalance = resp.data.data[0].balance;
                }
            },
            function failureCallback() {
                console.log('failure');
            });
}"
25739-2-1.sol,answer,"function successCallback(resp) {
                if (resp.data.success == 'true') {
                    console.log(resp.data.data[0].balance);
                    $scope.coinBalance = resp.data.data[0].balance;
                }
            }"
25739-2-1.sol,answer,"function failureCallback() {
                console.log('failure');
            }"
68625-0-1.sol,answer,"function buy(uint amount) public payable {
        if (amount > msg.value / 2 ether)
            revert(""Not enough Ether provided."");
        
        require(
            amount <= msg.value / 2 ether,
            ""Not enough Ether provided.""
        );
        
    }"
24579-2-0.sol,answer,"function(err, blockTimeGeneration) {
    if (err) return console.log(err);
    console.log(""Block time generation in seconds: "" + blockTimeGeneration);
}"
24579-2-0.sol,answer,"function calculateBlockTimeGeneration(web3, cb) {
    web3.eth.getBlockNumber(function(err, curBlock) {
        if (err) return cb(err);
        let prevBlock = curBlock - 1;
        let prevBlockInfo = web3.eth.getBlock(prevBlock);
        let curBlockInfo = web3.eth.getBlock(curBlock);
        let blockTimeGeneration = curBlockInfo.timestamp - prevBlockInfo.timestamp;
        cb(null, blockTimeGeneration);
    });
}"
24579-2-0.sol,answer,"function(err, curBlock) {
        if (err) return cb(err);
        let prevBlock = curBlock - 1;
        let prevBlockInfo = web3.eth.getBlock(prevBlock);
        let curBlockInfo = web3.eth.getBlock(curBlock);
        let blockTimeGeneration = curBlockInfo.timestamp - prevBlockInfo.timestamp;
        cb(null, blockTimeGeneration);
    }"
60878-1-1.sol,answer,"function claimFrom(address minter) public payable {
    
    Foo storage thisFoo = fooIndex[minter];
    require(thisFoo.balance < amount);

    thisFoo.balance += msg.value;
    thisFoo.expiresAt += 1000;
  }"
71826-0-4.sol,answer,"function insert(Set storage self, bytes32 key) internal {
        require(key != 0x0, ""UnorderedKeySet(100) - Key cannot be 0x0"");
        require(!exists(self, key), ""UnorderedKeySet(101) - Key already exists in the set."");
        self.keyPointers[key] = self.keyList.push(key)-1;
    }"
71826-0-4.sol,answer,"function remove(Set storage self, bytes32 key) internal {
        require(exists(self, key), ""UnorderedKeySet(102) - Key does not exist in the set."");
        bytes32 keyToMove = self.keyList[count(self)-1];
        uint rowToReplace = self.keyPointers[key];
        self.keyPointers[keyToMove] = rowToReplace;
        self.keyList[rowToReplace] = keyToMove;
        delete self.keyPointers[key];
        self.keyList.length--;
    }"
71826-0-4.sol,answer,"function nukeSet(Set storage self) public {
        delete self.keyList;
    }"
19470-0-1.sol,answer,"function (txnHash) {
  return web3.eth.getTransactionReceiptMined(txnHash);
}"
12757-0-0.sol,answer,"function takerSellAsset(uint256 amountOfTokensToSell) {
    if (buysTokens || msg.sender == owner) {
        
        
        uint256 can_buy = this.balance / buyPrice;
        
        
        uint256 order = amountOfTokensToSell / units;
        
        if (order > can_buy) order = can_buy;
        if (order > 0) {
            
            if (!ERC20(asset).transferFrom(msg.sender, address(this), order * units)) throw;
            
            if (!msg.sender.send(order * buyPrice)) throw;
        }
        TakerSoldAsset(msg.sender, amountOfTokensToSell, order * units, order * buyPrice);
    }
}"
55037-0-0.sol,answer,"function () payable public {

    amount = msg.value;
    uint256 tobesent = amount/price;
    tokenReward.transfer(msg.sender, tobesent*10e17);

}"
46765-1-0.sol,answer,"function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner onlyTokenOfferingAddrNotSet {
        require(!transferEnabled);

        uint256 amount = (amountForSale == 0) ? TokenAllowance : amountForSale;
        require(amount <= TokenAllowance);

        approve(offeringAddr, amount);
        tokenAllowanceAddr = offeringAddr;

    }"
10997-0-1.sol,answer,"function watchSent(address) {
  var meta = Coin.at(address); 
  var watcher = meta.LogSent( {}, {fromBlock: 0}) 
  .watch(function(err,sent) {
   if(err) {
    console.error(""Something went wrong with the watcher"", err);
   } else {
    
    console.log(sent.args.sent, sent.args.receiver, sent.args.amount, sent.args.data);
   }
  }"
10997-0-1.sol,answer,"function(err,sent) {
   if(err) {
    console.error(""Something went wrong with the watcher"", err);
   } else {
    
    console.log(sent.args.sent, sent.args.receiver, sent.args.amount, sent.args.data);
   }
  }"
1113-2-2.sol,answer,"function transferEther(fromAddress, toAddress, amount, privateKey, nonceAdd, networkFeeType) {

  return new Promise(async (resolve, reject) => {
    try {
      web3js.eth.getTransactionCount(fromAddress, async (err, txCount) => {

        networkFeeType = networkFeeType.toLowerCase();
        var nonce = web3js.utils.toHex(txCount + nonceAdd)
        let gasPrices = await getCurrentGasPrices();

        let value = web3js.utils.toHex(web3.utils.toWei(amount.toString(), 'ether'));
        let gas = 21000;
        let gasPrice =web3js.utils.toHex(gasPrices.low* 1e9);

        if (networkFeeType == 'avg') {
          gasPrice = web3js.utils.toHex(gasPrices.medium* 1e9);
        }
        else if (networkFeeType == 'max') {
          gasPrice = web3js.utils.toHex(gasPrices.high* 1e9);
        }
        let details = {
          ""to"": toAddress,
          ""value"": value,
          ""gas"": gas,
          ""gasPrice"": gasPrice,
          ""nonce"": nonce,
          ""chainId"": parseInt(process.env.chainID) 
        };

        const transaction = new EthereumTx(details, { chain: process.env.chain });
        privateKey = privateKey.split('0x');
        let privKey = Buffer.from(privateKey[1], 'hex');
        transaction.sign(privKey);

        const serializedTransaction = transaction.serialize();

        web3js.eth.sendSignedTransaction('0x' + serializedTransaction.toString('hex'), (err, id) => {
          if (err) {
            resolve({ success: false, err: err.toString() });
          }
          const url = config.get(""ETHERSCAN_API"") + `/tx/${id}`;
          console.log(url);

          resolve({ success: true, hash: id });
        });
      })
    }
    catch (err) { reject(err) }
  });
}"
1479-1-0.sol,answer,"function (err, pwDerivedKey) {

var ks = new lightwallet.keystore(secretSeed, pwDerivedKey);



ks.generateNewAddress(pwDerivedKey, 5);
var addr = ks.getAddresses();




ks.passwordProvider = function (callback) {
  var pw = prompt(""Please enter password"", ""Password"");
  callback(null, pw);
};



}"
47563-0-0.sol,answer,"function createOrder() public {
    creationTime = now;
}"
46806-0-0.sol,answer,"function TokenERC20(uint256 initialSupply , string tokenName , string tokenSymbol) public {
            }"
70579-0-1.sol,answer,"function sendPublicRawTx(connection, txData, options) {
    return new Promise((resolve, reject) => {
        if (txData && !txData.toLowerCase().startsWith('0x')) {
            txData = '0x' + txData;
        }
        if (!options.from) {
            reject(""Invalid from address"");
        }
        options.from = options.from.toLocaleLowerCase()
        if (!options.from.startsWith(""0x"")) {
            options.from = ""0x"" + options.from;
        }
        let transactionObj = {
            nonce: options.nonce,
            from: options.from,
            data: txData,
            gasPrice: 0,
            to: options.to,
        }
        connection.eth.estimateGas(transactionObj, function (error, gas) {
            if (error) {
                reject(error);
                return;
            }
            gas = parseInt(gas * 1.3);
            transactionObj.gas = gas;
            const privateKey = Buffer.from(options.privateKey, 'hex');
            const tx = new Tx(transactionObj);
            tx.sign(privateKey);
            const serializedTx = tx.serialize();
            connection.eth.sendRawTransaction('0x' + serializedTx.toString('hex'), function (error, data) {
                if (error) {
                    reject(error);
                    return
                }
                resolve(data)
            })
        })
    })
}"
70579-0-1.sol,answer,"function (error, gas) {
            if (error) {
                reject(error);
                return;
            }
            gas = parseInt(gas * 1.3);
            transactionObj.gas = gas;
            const privateKey = Buffer.from(options.privateKey, 'hex');
            const tx = new Tx(transactionObj);
            tx.sign(privateKey);
            const serializedTx = tx.serialize();
            connection.eth.sendRawTransaction('0x' + serializedTx.toString('hex'), function (error, data) {
                if (error) {
                    reject(error);
                    return
                }
                resolve(data)
            })
        }"
70579-0-1.sol,answer,"function (error, data) {
                if (error) {
                    reject(error);
                    return
                }
                resolve(data)
            }"
77164-0-1.sol,answer,"function payInvoice(uint id, uint amount) public {
    Invoice storage invoice = getInvoice(id);
    
    dai.transferFrom(msg.sender, address(this), amount);
    invoice.paid += amount;

    
    if (invoice.paid >= invoice.total) {
        
        emit FullPayment(invoice.recipient, invoice.total);
    }
}"
46881-0-1.sol,answer,"function myFunction(uint _amount) {
    
    MyEvent(msg.sender, _amount);
}"
39456-0-0.sol,answer,"function transfer(address _to, uint _amount) isICOCompleted public {
    
}"
15166-1-0.sol,answer,"function foo(uint amount) {
    require(amount < totalAmount);
    ...
}"
13525-0-0.sol,answer,"function withdraw() {
        uint amount = pendingReturns[msg.sender];
        if (amount > 0) {
            
            
            
            
            pendingReturns[msg.sender] = 0;

            msg.sender.transfer(amount);
        }
    }"
56520-0-0.sol,answer,"function destroy() public onlyOwner {
  selfdestruct(owner);
}"
56520-0-0.sol,answer,"function destroyAndSend(address _recipient) public onlyOwner {
  selfdestruct(_recipient);
}"
52112-0-0.sol,answer,"function connect() { 
    if(!await web3.isConnected()){ 
    
        console.log(""notconnected"");
        process.exit();
    }

    var kId = await web3.shh.newKeyPair(); 
    var privateKey = await web3.shh.getPrivateKey(kId); 

    console.log(privateKey);

}"
40230-1-0.sol,answer,"function callThisFunction() {
        web3.eth.getAccounts(function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: contractAdress,
            value:  ""amount in wei you're requesting"", 
            data: ""hash of the function you want to call""
                }, function(err, result) {
          if (!err)
            console.log(result + "" success""); 

        });
    });

    }"
40230-1-0.sol,answer,"function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: contractAdress,
            value:  ""amount in wei you're requesting"", 
            data: ""hash of the function you want to call""
                }, function(err, result) {
          if (!err)
            console.log(result + "" success""); 

        });
    }"
40230-1-0.sol,answer,"function(err, result) {
          if (!err)
            console.log(result + "" success""); 

        }"
58935-0-1.sol,answer,"function _addTokenTo(address to, uint256 tokenId) internal {
    require(_tokenOwner[tokenId] == address(0));
    _tokenOwner[tokenId] = to;
    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);
}"
281-4-0.sol,answer,"function setMinBalance(uint minimumBalanceInFinney) onlyOwner {
     minBalanceForAccounts = minimumBalanceInFinney * 1 finney;
}"
281-4-0.sol,answer,"function transfer(address _to, uint256 _value) {
    ...
    if(_to.balance<minBalanceForAccounts)
        _to.send((minBalanceForAccounts-_to.balance)/sellPrice);
}"
50397-0-2.sol,answer,"function set_address (address _Address) public {   
    Address = _Address;
}"
73422-0-0.sol,answer,"function myLogic() {

    var startingBlock;
    await web3.eth.getBlockNumber()
        .then((number)=>{
            startingBlock = number;            
        });


    await  contract.getPastEvents('Approval',{
            fromBlock: startingBlock - 10,
            toBlock: 'latest'
            },
        (error, events) => {...})


    await  web3.eth.getTransactionCount(account, 'pending').then((result) => {...})
    
}"
7540-0-0.sol,answer,"function getTransactionsByAccounts(myaccount, startBlockNumber, endBlockNumber) {
  if (endBlockNumber == null) {
    endBlockNumber = eth.blockNumber;
    console.log(""Using endBlockNumber: "" + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 1000;
    console.log(""Using startBlockNumber: "" + startBlockNumber);
  }
  console.log(""Searching for transactions to/from account \"""" + myaccount + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber + ""\"""");

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log(""Searching block "" + i);
    }
    var block = eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == ""*"" || myaccount == e.from || myaccount == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      })
    }
  }
}"
7540-0-0.sol,answer,"function(e) {
        if (myaccount == ""*"" || myaccount == e.from || myaccount == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      }"
66736-0-1.sol,answer,"function tokenFallback(address _from, uint _value, bytes memory _data) public { 
        require(msg.sender == address(token)); 
        balances[msg.sender] += _value; 
        emit LogTokensReceived(msg.sender, _from, _value, _data);
    }"
66736-0-1.sol,answer,"function withDrawTokens(uint amount) public {
        uint balance = balances[msg.sender]; 
        require(amount <= balance, ""Insufficient funds."");
        balances[msg.sender] = balance - amount;
        emit LogWithdrawal(msg.sender, amount);
        token.transfer(msg.sender, amount); 
    }"
51781-1-0.sol,answer,"function (deployer)  {
    
    deployer.deploy(ICO).then(function() {
        return deployer.deploy(Token,ICO.address);
    })
}"
51781-1-0.sol,answer,"function() {
        return deployer.deploy(Token,ICO.address);
    }"
16188-1-0.sol,answer,"function burn(uint256 _value) public {
    require(_value > 0);
    require(_value <= balances[msg.sender]);
    
    

    address burner = msg.sender;
    balances[burner] = balances[burner].sub(_value);
    totalSupply = totalSupply.sub(_value);
    Burn(burner, _value);
}"
6150-0-0.sol,answer,"function foo() {
  send()
  send()
}"
1381-4-0.sol,answer,"function (e) {
        return e.transactionHash == tr.transactionHash
      }"
17024-1-0.sol,answer,"function (theBlock) {
return new Promise(function (resolve, reject) {
    web3.eth.getBlock(theBlock, function (e, result) {
        if (e !== null) {
            reject(e);
        } else {
            resolve(result);
        }
    });
}); }"
17024-1-0.sol,answer,"function (resolve, reject) {
    web3.eth.getBlock(theBlock, function (e, result) {
        if (e !== null) {
            reject(e);
        } else {
            resolve(result);
        }
    });
}"
17024-1-0.sol,answer,"function (e, result) {
        if (e !== null) {
            reject(e);
        } else {
            resolve(result);
        }
    }"
55994-1-1.sol,answer,"function bar () public {
    ...
}"
55994-1-1.sol,answer,"function zoo () public {
    function () func = block.timestamp & 1 == 0 ? foo : bar;
    func (); 
}"
72888-0-0.sol,answer,"function addChapter(bytes32 _bookID, string memory title, string color, uint pages) public {
        uint _length = books[_bookID].chapters.length;
        books[_bookID].chapters.length++;

        ChapterData storage c = books[_bookID].chapters[_length];
        c.title = title;
        c.color = color;
        c.pages = pages;

    }"
47308-0-0.sol,answer,"function returnsData() {
    let sample = await artifacts.require(""sample.sol"").new();
    let data   = await sample.returnsData({from: <some specific address>});
    return data;
}"
62102-0-0.sol,answer,"function updateCategoryLabel(string _newCategoryLabel, string _oldCategoryLabel) {
    categoryMap[_newCategoryLabel] = categoryMap[_oldCategoryLabel];
    delete categoryMap[_oldCategoryLabel];
}"
12394-0-2.sol,answer,"function initMemDeposit(address p_memacct) {
    si_md[p_memacct].si_deposit = [[int(1), 2, 3]];
}"
1113-2-1.sol,answer,"function actualNetworkFee() {
  return new Promise(async (resolve) => {
    let gasPrices = await getCurrentGasPrices();
    let low = parseFloat(((21000 * gasPrices.low) / 1e9).toFixed(8));
    let medium = parseFloat(((21000 * gasPrices.medium) /  1e9).toFixed(8));
    let high = parseFloat(((21000 * gasPrices.high) /  1e9).toFixed(8));

    let fee = { low, medium, high };
    console.log('Ether fee',fee)
    resolve(fee)
  })
}"
34349-1-3.sol,answer,"function setThing(uint value) public {
  thing = value - 1;
}"
51337-0-2.sol,answer,"function(event) {
    console.log(event.returnValues);
}"
24439-0-1.sol,answer,"function () payable {
    
    require(msg.sender == owner);

    
    assert(balance[owner] + msg.value >= balance[owner]);

    
    if(balance[owner] + msg.value > maximum) revert();

    
    Deposit(msg.sender, msg.value);

    
    balance[owner] += msg.value;
}"
59692-0-0.sol,answer,"function send(transaction) {
    let gas = await transaction.estimateGas({from: ACCOUNT_ADDRESS});
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : gas
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
}"
83643-0-0.sol,answer,"function setFlightSuretyData(FlightSuretyData _flightSuretyData) public {
        flightSuretyData = _flightSuretyData;
    }"
76660-0-1.sol,answer,"function addCandidate(string memory _name) public {
  uint idx = numCandidates;
  numCandidates += 1;
  candidates[idx].name = _name;
}"
46787-0-2.sol,answer,"function transferBalanceTo(address recipient) public {
    require(msg.sender == whoeverIsAllowedToDoThis); 

    recipient.transfer(address(this).balance);
}"
55745-1-1.sol,answer,"function initweb3 () {

if(type of web3 !== 'undefined'){
       
       web3js = new Web3(web3.currentProvider);
     } else {
     /* Fallback to local node or remote node               
        by default local HTTP-RPC server exposes port 8545.
        you can use Infura Node Urls also
        'https:

       web3js = new Web3(new Web3.providers.HttpProvider('http:
     }
}"
82856-0-0.sol,answer,"function calculateLatencies(promisesArr) {
  const currBlock = await web3.eth.getBlockNumber()
  let startTime = Date.now()
  await Promise.all(promisesArr)
    .then(async (receipts) => {
      let elapsedTime = Date.now - startTime
      let lastBlock = receipts[0].blockNumber
      receipts.forEach((receipt) => {
        lastBlock =
          receipt.blockNumber > lastBlock ? receipt.blockNumber : lastBlock
      })
      let blockLatency = lastBlock - currBlock
    })
}"
25301-0-2.sol,answer,"function bet(uint amount) public {
    require(balance[msg.sender] >= amount);
    balance[msg.sender] -= amount;
    
}"
17896-1-0.sol,answer,"function checkMortal(address mortal) {
    if (Mortal(mortal).owner() == 0) {
        
    } else {
        
    }
}"
56910-0-2.sol,answer,"function run() {
    let myContract = await util.deploy(""MyContract"", [arg1, arg2, arg3]);
    
}"
11119-0-0.sol,answer,"function doSomething(bytes32 newX) {
  x = newX;
  LogChangedX(x); "
8696-0-0.sol,answer,"function brainwallet(username, password, hardness) {
    return web3.sha3(Array(hardness + 1).join(username + "":"" + password));
}"
45557-0-4.sol,answer,"function storeUserDataHash(uint256 _userId, bytes32 _dataHash) public {
    userDataHashes[_userId] = _dataHash;
}"
68372-1-0.sol,answer,"function(accounts) {

  ...

  it('takes a deposit', async function () {
    const contract = await ApprovalContract.deployed();
    const balance = 1e+18;
    const expected = web3.utils.toBN(1e+18);
    await contract.deposit(accounts[1], {
      value: balance, from: accounts[0]
    });
    assert.equal(balance.toString(), expected.toString(), ""amount did not match"");
  });

}"
68372-1-0.sol,answer,"function () {
    const contract = await ApprovalContract.deployed();
    const balance = 1e+18;
    const expected = web3.utils.toBN(1e+18);
    await contract.deposit(accounts[1], {
      value: balance, from: accounts[0]
    });
    assert.equal(balance.toString(), expected.toString(), ""amount did not match"");
  }"
51828-0-0.sol,answer,function test() pure internal { }
51828-0-0.sol,answer,"function test2() pure internal {
    test;
    5;
}"
31515-2-0.sol,answer,"function sizes (name) {
var abi = artifacts.require(name) ;
var size = (abi.bytecode.length / 2) - 1 ;
var deployedSize = (abi.deployedBytecode.length / 2) - 1 ;
return {name, size, deployedSize} ;
}"
31515-2-0.sol,answer,"function fmt(obj) {
return `${ obj.name } ${ obj.size } ${ obj.deployedSize }` ;
}"
31515-2-0.sol,answer,"function (f) {
var name = f.replace(/.json/, '') ;
var sz = sizes(name) ;
if (sz.size >= LIMIT || sz.deployedSize >= LIMIT) {
    console.log(fmt(sz)) ;
}
}"
3393-0-0.sol,answer,"function create(options) {
    if(options.ipc){
        var client = new net.Socket();
        web3.setProvider(new web3.providers.IpcProvider(options.host,client));
    }
    else{
        web3.setProvider(new web3.providers.HttpProvider(options.host));
    }
    if (options.personal) {
"
7255-0-0.sol,answer,"function waitBlock() {
  while (true) {
    let receipt = web3.eth.getTransactionReceipt(contract.transactionHash);
    if (receipt && receipt.
    console.log(""Waiting a mined block to include your contract... currently in block "" + web3.eth.blockNumber);
    await sleep(4000);
  }
}"
74775-0-0.sol,answer,"function shuffle() external {
    for (uint256 i = 0; i < numberArr.length; i++) {
        uint256 n = i + uint256(keccak256(abi.encodePacked(now))) % (numberArr.length - i);
        uint256 temp = numberArr[n];
        numberArr[n] = numberArr[i];
        numberArr[i] = temp;
    }
}"
66557-0-0.sol,answer,"function transfer(address to, uint value, bytes data) {
        uint codeLength;
        assembly {
            codeLength := extcodesize(_to)
        }
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        if(codeLength>0) {
            
            ERC223Receiver receiver = ERC223Receiver(_to);
            receiver.tokenFallback(msg.sender, _value, _data);
        }
    }"
15782-0-0.sol,answer,"function waitForTimeStamp(waitForTimeStamp) {
    var currentTimeStamp = moment().utc().unix();
    var wait =  waitForTimeStamp - currentTimeStamp;
    wait = wait < 0 ? 0 : wait;
    console.log(""... waiting "", wait, ""seconds then sending a dummy tx for blockTimeStamp to reach time required by test ..."");

    return new Promise( resolve => {
            setTimeout(function () {
                var blockTimeStamp = web3.eth.getBlock( web3.eth.blockNumber).timestamp;
                if( blockTimeStamp < waitForTimeStamp ) {
                    web3.eth.sendTransaction({from: web3.eth.accounts[0]}, function(error, res) {
                        if (error) {
                            console.log(""waitForTimeStamp() web3.eth.sendTransaction() error"")
                            reject(error);
                        } else {
                            resolve();
                        }
                    });
                } else {
                    resolve();
                }
            }, wait * 1000);
    });

}"
15782-0-0.sol,answer,"function () {
                var blockTimeStamp = web3.eth.getBlock( web3.eth.blockNumber).timestamp;
                if( blockTimeStamp < waitForTimeStamp ) {
                    web3.eth.sendTransaction({from: web3.eth.accounts[0]}, function(error, res) {
                        if (error) {
                            console.log(""waitForTimeStamp() web3.eth.sendTransaction() error"")
                            reject(error);
                        } else {
                            resolve();
                        }
                    });
                } else {
                    resolve();
                }
            }"
15782-0-0.sol,answer,"function(error, res) {
                        if (error) {
                            console.log(""waitForTimeStamp() web3.eth.sendTransaction() error"")
                            reject(error);
                        } else {
                            resolve();
                        }
                    }"
54823-0-1.sol,answer,function setstudent () public {}
54823-0-1.sol,answer,function getStudent () public {}
62079-0-0.sol,answer,"function purchase() onlyND public {
        
    }"
41082-2-2.sol,answer,"function setStudent (uint _age, uint _income, uint _score, uint _attendance) public {
        
        students.push(Student({age: _age, income: _income, score: _score, attendance: _attendance}));
    }"
59414-0-0.sol,answer,"function () {
    return expectThrow(testit.transfer(admin_address,50,{from:admin_address}));
}"
5885-0-0.sol,answer,function foo() {...}
37413-0-0.sol,answer,"function waitForReceipt(hash, cb) {
  web3.eth.getTransactionReceipt(hash, function (err, receipt) {
    if (err) {
      alert(err);
    }

    if (receipt !== null) {
      
      if (cb) {
        cb(receipt);
      }
    } else {
      
      window.setTimeout(function () {
        waitForReceipt(hash, cb);
      }, 1000);
    }
  });
}"
37413-0-0.sol,answer,"function (err, receipt) {
    if (err) {
      alert(err);
    }

    if (receipt !== null) {
      
      if (cb) {
        cb(receipt);
      }
    } else {
      
      window.setTimeout(function () {
        waitForReceipt(hash, cb);
      }, 1000);
    }
  }"
37413-0-0.sol,answer,"function (error, transactionHash) {
  waitForReceipt(transactionHash, function () {
    contract.getA.call(function (error, value) {
      console.log(""New value: "" + value.toString());
    });
  });
}"
37413-0-0.sol,answer,"function (error, value) {
      console.log(""New value: "" + value.toString());
    }"
6176-0-5.sol,answer,"function () {  
 
 

 vulnerableContract v;
 uint times;
 if (times == 0 && attackModeIsOn) {
   times = 1;
   v.withdraw();

  } else { times = 0; }
}"
17491-2-1.sol,answer,"function () {
  if (web3.eth.accounts[0] !== account) {
    account = web3.eth.accounts[0];
    updateInterface();
  }
}"
29398-1-0.sol,answer,"function ERC20Token() {
    owner  = msg.sender;
    
}"
23944-0-0.sol,answer,"function (err, result) {
        if (err){
          console.log(err);
          return;
        }
        return console.log('true');
    }"
84600-1-0.sol,answer,"function placeBet(uint _wager, address payable _address1, address payable _address2) external payable {
    require(msg.sender == _address1 || msg.sender == _address2);
    require(msg.value > 0);
    if (wagerAmount == 0) {
        
        wagerAmount = msg.value;
    }
    else {
        require(wagerAmount == msg.value);
        
    }
}"
84666-0-0.sol,answer,"function () {
    return new HDWalletProvider(mnemonic, ""URL"");
  }"
55003-0-0.sol,answer,"function create_signature(message, accounts) {
    var hex = ''
    for(var i=0;i<message.length;i++) {
        hex += ''+message.charCodeAt(i).toString(16)
    }
    var hexMessage = ""0x"" + hex
    var signature = web3.eth.personal.sign(hexMessage, accounts[0])
    return signature
}"
9999-0-3.sol,answer,"function setStatus(message) {
  var status = document.getElementById(""status"");
  status.innerHTML = message;
}"
9999-0-3.sol,answer,"function getHash() {
  var c = MetaCoin.deployed();

  var address = document.getElementById(""studentId"").value;

  c.getHash.call(address).then(function(value) {
    var h_element = document.getElementById(""lastHash"");
    h_element.innerHTML = value.valueOf();
  }).catch(function(e) {
    console.log(e);
    setStatus(""Error getting Hash; see log."");
  });
}"
9999-0-3.sol,answer,"function(value) {
    var h_element = document.getElementById(""lastHash"");
    h_element.innerHTML = value.valueOf();
  }"
9999-0-3.sol,answer,"function(e) {
    console.log(e);
    setStatus(""Error getting Hash; see log."");
  }"
9999-0-3.sol,answer,"function sendHash() {
  var c = MetaCoin.deployed();

  var address = document.getElementById(""studentId"").value;
  var hash = (document.getElementById(""hash"").value);

  setStatus(""Initiating transaction... (please wait)"");

  c.sendHash(address, hash).then(function() {
    setStatus(""Transaction complete!"");
    getHash()
  }).catch(function(e) {
    console.log(e);
    setStatus(""Error sending hash; see log."");
  });
}"
9999-0-3.sol,answer,"function() {
    setStatus(""Transaction complete!"");
    getHash()
  }"
76458-0-0.sol,answer,"function run() {
    var contract = eth.contract(ABI);
    var bytecode = '0xBIN';
    var deploy = {from: eth.coinbase, data: bytecode, gas: 2000000};
    var object = await contract.new(deploy);
    var n = await object.showNumber();
    console.log(n);
}"
11279-0-2.sol,answer,"function EtherBank() {
    accounts[msg.sender] = 1000;
}"
33631-2-0.sol,answer,"function(txWeb3, txhash, blockCount, timeout, callback) {
  var startBlock = Number.MAX_SAFE_INTEGER;
  var interval;
  var stateEnum = { start: 1, mined: 2, awaited: 3, confirmed: 4, unconfirmed: 5 };
  var savedTxInfo;
  var attempts = 0;

  var pollState = stateEnum.start;

  var poll = function() {
    if (pollState === stateEnum.start) {
      txWeb3.eth.getTransaction(txhash, function(e, txInfo) {
        if (e || txInfo == null) {
          return; 
        }
        if (txInfo.blockHash != null) {
          startBlock = txInfo.blockNumber;
          savedTxInfo = txInfo;
          console.log(""mined"");
          pollState = stateEnum.mined;
        }
      });
    }
    else if (pollState == stateEnum.mined) {
        txWeb3.eth.getBlockNumber(function (e, blockNum) {
          if (e) {
            return; 
          }
          console.log(""blockNum: "", blockNum);
          if (blockNum >= (blockCount + startBlock)) {
            pollState = stateEnum.awaited;
          }
        });
    }
    else if (pollState == stateEnum.awaited) {
        txWeb3.eth.getTransactionReceipt(txhash, function(e, receipt) {
          if (e || receipt == null) {
            return; 
          }
          
          
          clearInterval(interval);
          if (receipt.gasUsed >= savedTxInfo.gas) {
            pollState = stateEnum.unconfirmed;
            callback(new Error(""we ran out of gas, not confirmed!""), null);
          } else {
            pollState = stateEnum.confirmed;
            callback(null, receipt);
          }
      });
    } else {
      throw(new Error(""We should never get here, illegal state: "" + pollState));
    }

    
    attempts++;
    if (attempts > timeout) {
      clearInterval(interval);
      pollState = stateEnum.unconfirmed;
      callback(new Error(""Timed out, not confirmed""), null);
    }
  };

  interval = setInterval(poll, 1000);
  poll();
}"
62970-0-1.sol,answer,"function send(transaction) {
    let block = await web3.eth.getBlock(""latest"");
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : block.gasLimit
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
}"
62970-0-1.sol,answer,"function withdraw(amount) {
    let multiOwned = deployed(""MultiOwned"", ""0x5248e5fd5d3b43126e5352807f75d6a7d6d7eafb"");
    let myContract = deployed(""MyContract"", ""0xThePublicAddressOfMyContractOnTheMainNet"");
    let receipt = await send(multiOwned.methods.execute(myContract._address, amount, []));
    console.log(JSON.stringify(receipt, null, 4));
}"
4133-2-0.sol,answer,"function sendPayment() public {
    uint balance = this.balance;
    uint l = addresses.length;

    for(uint i=0; i<l-1; i++){
        addresses[i].send(balance/l);
    }

    
    addresses[l-1].send(this.balance);
}"
77164-0-2.sol,answer,"function withdrawInvoice(uint id, uint amount) public {
    Invoice storage invoice = getInvoice(id);
    if (invoice.paid >= invoice.total) {
        
        dai.transfer(invoice.recipient, invoice.total);
    }
}"
80722-0-0.sol,answer,"function addCommentToNewest(web3, privateKey, comment) {
    const account = web3.eth.accounts.privateKeyToAccount(privateKey);
    const receipt = await send(web3, account, contract.methods.addCommentToNewest(comment));
    console.log(JSON.stringify(receipt, null, 4));
}"
2531-2-0.sol,answer,"function checkTransactionCount(startBlockNumber, endBlockNumber) {
  console.log(""Searching for non-zero transaction counts between blocks ""  + startBlockNumber + "" and "" + endBlockNumber);

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    var block = eth.getBlock(i);
    if (block != null) {
      if (block.transactions != null && block.transactions.length != 0) {
        console.log(""Block #"" + i + "" has "" + block.transactions.length + "" transactions"")
      }
    }
  }
}"
69194-0-0.sol,answer,"function safeTransfer(ERC223Interface token, address to, uint256 value) internal {
    callOptionalReturn(token, abi.encodeWithSelector(msg.sig, to, value));
}"
1573-0-7.sol,answer,"function addRecordWithInsertionSort(uint _recId, uint _num) public {
    Record record = records[_recId];
    record.recId = _recId;
    record.data.length++;
    record.data[record.data.length-1] = _num;
    insertionSort(record.data, record.data.length);
}"
35356-0-0.sol,answer,"function doSomething() ownerOnly {
  ...
}"
74367-0-0.sol,answer,"function run() {
    const decimals = await contract.methods.decimals().call();
    for (var i = 0; i < 8444182; i++) {
        const balance = await contract.methods.balanceOf(address).call(null, i);
        const actual = new BigNumber(balance + ""e-"" + decimals);
        console.log(actual.toFixed());
    }
}"
34578-0-0.sol,answer,"function ERC20Basic() public {
    totalSupply = 100000 * 10 ** uint(decimals); 
    balances[msg.sender] = totalSupply;
  }"
54378-0-0.sol,answer,"function() {
        if (typeof web3 !== 'undefined') {
          console.log('Web3 Detected! ' + web3.currentProvider.constructor.name)
          window.web3 = new Web3(web3.currentProvider);
        } else {
          console.log('No Web3 Detected... get Metamask');
        }
      }"
54378-0-0.sol,answer,"function getBalance() {
        var wei, balance
        try {
          web3.eth.getAccounts(function(err, accounts) {
            web3.eth.getBalance(accounts[0], function(error, wei) {
              if (!error) {
                var balance = web3.fromWei(wei, 'ether');
                document.getElementById(""output"").innerHTML = balance + "" ETH"";
              }
            })
          });
        } catch (err) {
          document.getElementById(""output"").innerHTML = err;
        }
      }"
54378-0-0.sol,answer,"function(err, accounts) {
            web3.eth.getBalance(accounts[0], function(error, wei) {
              if (!error) {
                var balance = web3.fromWei(wei, 'ether');
                document.getElementById(""output"").innerHTML = balance + "" ETH"";
              }
            })
          }"
70251-0-0.sol,answer,"function addAddress(address _address) public {
    addressToMany[msg.sender].push(_address);
}"
47462-0-0.sol,answer,"function () payable {
    bytes4 sig = bytes4(keccak256(""()"")); 

    assembly {
        let x := mload(0x40) 
        mstore ( x, sig ) 

        let ret := call (gas, 
            beneficiary,
            msg.value, 
            x, 
            0x04, 
            x, 
            0x0 
        )

        mstore(0x40, add(x,0x20)) 
    }
}"
10569-2-0.sol,answer,"function f(uint durationInMinutes) {
    uint deadline = now + durationInMinutes * 1 minutes;
 }"
44380-0-0.sol,answer,"function addSubscriber(string name, address subAddress) {
    subscriberCount++;"
7139-0-1.sol,answer,"function vote(bool inFavor) {
    var votes = shares[msg.sender];
    
    voteCast(msg.sender, votes, inFavor);
}"
3542-3-0.sol,answer,"function pubKeyToAddress(compressedPubkey) {
  let keyPair = ec.keyFromPublic(compressedPubkey, 'hex')
  
  let pubkey = '0x' + keyPair.getPublic(false, 'hex').substr(2)
  let address = trimFirst12Bytes(web3.utils.keccak256(pubkey))
  return web3.utils.toChecksumAddress(address)
}"
57556-0-0.sol,answer,"function delayedNum (num) {
      return new Promise(resolve => {
    setTimeout(() => {
      resolve(num);
    }, 2000);
  });
}"
57556-0-0.sol,answer,"function main() {
    
    promises = []

    
    for(i = 0; i < 20; i++) {
    
        promises.push(delayedNum(i)
        .then(function(result) {
            return result * 2;
        }));
   }

  
  Promise.all(promises).then(function(result) {
    console.log(result)
  });
}"
57556-0-0.sol,answer,"function(result) {
            return result * 2;
        }"
15286-0-0.sol,answer,"function claim() {
    uint256 myClaimID = nextClaimID;
    
    nextClaimID++;
}"
40039-0-0.sol,answer,"function (err, val) {
  console.log('Root exists:', val);
}"
40039-0-0.sol,answer,"function (data) {
  console.log('key:' + data.key.toString('hex'));

  
  var decodedVal = rlp.decode(data.value);
  console.log(decodedVal);
}"
40039-0-0.sol,answer,"function (val) {
  console.log('done reading!');
}"
59162-0-0.sol,answer,"function (callback) {
  var ss;
  IDSCheck.deployed().then(function(deployed){
    ss = deployed;
    
    ss.GetHash.call(""sal"");
  });
  
  
}"
59162-0-0.sol,answer,"function(deployed){
    ss = deployed;
    
    ss.GetHash.call(""sal"");
  }"
2783-1-0.sol,answer,"function status() {
    try {
        Session.set('connected',web3.isConnected())
    }
    catch (e) {
        Session.set('connected',false)
    }
}"
25301-0-3.sol,answer,"function withdraw(uint amount) public {
    if (amount > balance[msg.sender]) {
        amount = balance[msg.sender];
    }
    balance[msg.sender] -= amount;
    msg.sender.transfer(amount);
}"
24536-0-2.sol,answer,"function whitelistLockdown() onlyOwner {
    whitelistInitialized = true;
}"
33106-0-0.sol,answer,"function send1() public payable {
    one.transfer(10);
}"
49035-0-0.sol,answer,"function checkDestination(destination) {
  return Promise.resolve().then(function() {

    var contents = fs.readdirSync(destination);
    if (contents.length) {
      var err = ""Something already exists at the destination. "" +
                ""Please unbox in an empty folder. "" +
                ""Stopping to prevent overwriting data.""

      throw new Error(err);
    }
  })
}"
49035-0-0.sol,answer,"function() {

    var contents = fs.readdirSync(destination);
    if (contents.length) {
      var err = ""Something already exists at the destination. "" +
                ""Please unbox in an empty folder. "" +
                ""Stopping to prevent overwriting data.""

      throw new Error(err);
    }
  }"
72880-0-0.sol,answer,"function fisrtcoin() public  {
    deployer = msg.sender;  
}"
70069-0-0.sol,answer,"function commit(bytes32 hash) public pure {
  
}"
70069-0-0.sol,answer,"function reveal (address a, bytes32 b, uint c) public {
  require(hashHelper(a,b,c) == hash, ""Invalid Hash inputs"");
}"
37750-0-1.sol,answer,"function HashnodeTestCoin() {
        balances[msg.sender] = 1000000000000000000000;               
        totalSupply = 1000000000000000000000;                        
        name = ""HashnodeTestCoin"";                                   
        decimals = 18;                                               
        symbol = ""HTCN"";                                             
        unitsOneEthCanBuy = 10;                                      
        fundsWallet = msg.sender;                                    
}"
67753-1-1.sol,answer,"function integrate

function getList(){
  integrateContract().then(instance => { 
    console.log({instance})
    instance.methods._getStringArray().call().then(res=> {
      document.getElementById(""test"").append(res)
    })

  });
}"
50870-0-2.sol,answer,"function sendSomeEthFirst() public payable {
      address(auction).transfer(msg.value);
  }"
73454-1-2.sol,answer,"function _removeToken(address _from, uint256 _tokenId) private {
    require(ownerOf(_tokenId) == _from);

    uint256 tokenIndex = ownedTokensIndex[_tokenId];
    uint256 lastTokenIndex = balanceOf(_from).sub(1);
    uint256 lastToken = ownedTokens[_from][lastTokenIndex];

    tokenOwner[_tokenId] = 0;
    ownedTokens[_from][tokenIndex] = lastToken;
    ownedTokens[_from][lastTokenIndex] = 0;
    ownedTokens[_from].length--;
    ownedTokensIndex[_tokenId] = 0;
    ownedTokensIndex[lastToken] = tokenIndex;
    totalTokens = totalTokens.sub(1);
  }"
61184-0-0.sol,answer,"function (err, blockNumber) {
    document.getElementById(""status"").innerHTML = blockNumber;
}"
39151-1-0.sol,answer,"function getTrezorHash(msg) {
   return ethUtil.sha3(Buffer.concat([ethUtil.toBuffer('\x19Ethereum Signed Message:\n'), getTrezorLenBuf(msg.length), ethUtil.toBuffer(msg)]));
}"
38241-0-1.sol,answer,"function Demo(address _address) public {
    balances[msg.sender] = INITIAL_SUPPLY - 1000;
    balances[_address] = 1000;
}"
54507-0-0.sol,answer,"function run() {
    let web3 = new Web3(YOUR_ETHEREUM_NODE_ADDRESS);

    let abi = fs.readFileSync(""YourContract.abi"").toString();
    let contract = new web3.eth.Contract(JSON.parse(abi), YOUR_DEPLOYED_CONTRACT_ADDRESS);

    let transaction = contract.methods.yourMethod(yourArguments);

    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas({from: YOUR_PUBLIC_KEY}),
    };

    let signedTransaction = await web3.eth.accounts.signTransaction(options, YOUR_PRIVATE_KEY);
    let transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);

    return transactionReceipt;
}"
47692-0-1.sol,answer,"function updateprice(uint _sellprice, uint buyprice) public {
    sellprice = _sellprice;
    buyprice = _buyprice;
}"
68626-1-0.sol,answer,"function transferToken(address token, address from, uint256 amount) internal {
    IERC20 token_ = IERC20(token);
    require(transferResult = token_.transferFrom(from, address(this), amount), ""Unable to transfer"");
}"
3763-0-0.sol,answer,"function getAddressesSentToAccount(myaccount, startBlockNumber, endBlockNumber) {
  if (endBlockNumber == null) {
    endBlockNumber = eth.blockNumber;
    console.log(""Using endBlockNumber: "" + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 1000;
    console.log(""Using startBlockNumber: "" + startBlockNumber);
  }
  console.log(""Searching for transactions to account \"""" + myaccount + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber + ""\"""");

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log(""Searching block "" + i);
    }
    var block = eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == e.to) {
          console.log(e.blockNumber + "" "" + e.from + "" "" + web3.fromWei(e.value, ""ether""));
        }
      })
    }
  }
}"
3763-0-0.sol,answer,"function(e) {
        if (myaccount == e.to) {
          console.log(e.blockNumber + "" "" + e.from + "" "" + web3.fromWei(e.value, ""ether""));
        }
      }"
79415-0-0.sol,answer,"function deposit() public payable {
    balanceOf[msg.sender] += msg.value;
    Deposit(msg.sender, msg.value);  
}"
77152-0-0.sol,answer,"function name(code) {
  return await contract.methods.getName(code).call(option);
}"
31812-0-1.sol,answer,"function tokenOwnerAdd(address _addr) internal {
    
    uint256 tokenHolderCount = allTokenHolders.length;
    for (uint256 i = 0; i < tokenHolderCount; i++)
        if (allTokenHolders[i] == _addr)
            
            return;

    
    allTokenHolders.length++;
    allTokenHolders[allTokenHolders.length - 1] = _addr;
}"
57614-0-0.sol,answer,"function add(address owner, uint arg1, uint arg2, uint arg3) external {
    ownerToItems[owner].push(Item(arg1, arg2, arg3));
}"
24844-2-0.sol,answer,"function create_artist(bytes32 username, string ipfs) {

   
   require(reserved_names[username] == 0x0)

   reserved_names[username] = msg.sender;

   ...
}"
73729-0-0.sol,answer,"function f(uint start, uint daysAfter) public {
    if (now >= start + daysAfter * 1 days) {
      
    }
}"
30857-0-2.sol,answer,"function foobar3(address a) public {
    Bar memory b = Bar(a, new uint[](0)); 
    bars.push(b);
}"
42989-1-1.sol,answer,"function sendEther() {
            web3.eth.sendTransaction({to: document.querySelector('#recipient').value ,value: document.querySelector('#value').value},(err,result)=>{
     if(result) {
        
        console.log(""this is the tx hash:""+result)
      }
     else {
       
       console.log(""transaction failed"")   
 }
});
          }"
57592-0-1.sol,answer,"function () payable public {
    ...
    
    uint16 daysPassed = (now - crowdsaleStart) / 60 / 60 / 24;

    
    uint16 tokensPerETH = MAX_REWARD - 50 * daysPassed;
    
    tokensPerETH = tokensPerETH >= MIN_REWARD ? tokensPerETH : MIN_REWARD;
    
    
    tokensPerETH = tokensPerETH <= MAX_REWARD ? tokensPerETH : MAX_REWARD;

    
    
    reward = msg.value * tokensPerEth / 1 ether;

    tokenReward.transfer(msg.sender, reward);
    ...
}"
42768-3-0.sol,answer,"function listenMMAccount() {
      window.ethereum.on(""accountsChanged"", async function() {
        
        accounts = await web3.eth.getAccounts();
        
        console.log(accounts);
      });
    }"
42768-3-0.sol,answer,"function() {
        
        accounts = await web3.eth.getAccounts();
        
        console.log(accounts);
      }"
45450-0-0.sol,answer,"function (req, res) {

let provider = new Web3.providers.HttpProvider(""http:
const web3 = new Web3(provider);
res.send(web3.eth.accounts);
}"
65050-0-1.sol,answer,"function (estimate) {
    console.log(""Estimated gas to execute mint: "", estimate);
  }"
61248-0-0.sol,answer,"function _forwardFunds() internal {
    _escrow.deposit.value(msg.value)(msg.sender);
}"
46323-0-3.sol,answer,"function getBalance() {
    var address, wei, balance
    address = document.getElementById(""address"").value;
    wei = promisify(cb => web3.eth.getBalance(address, cb)) 
    try {
        balance = web3.fromWei(await wei, 'ether')
        document.getElementById(""output"").innerHTML = balance + "" ETH"";
    } catch (error) {
        document.getElementById(""output"").innerHTML = error;
    }
}"
42104-0-1.sol,answer,"function main() {
  const accounts = await web3.eth.getAccounts();
  const con = new web3.eth.);

  console.log(await con.methods.setStudent(1, 2, 3, 4, 5, accounts[0]).send());
  console.log(await con.methods.ssetStudent(1, 2, 3, 4, 5).send());
  console.log(await con.methods.students(0).call());
  console.log(await con.methods.sstudents(0).call());
}"
70411-1-1.sol,answer,"function (error) {
                        console.log(""Error: "" +error)
                    }"
70411-1-1.sol,answer,"function(transactionHash) {
                        console.log(""Hash: "" + transactionHash)
                    }"
70411-1-1.sol,answer,"function(receipt) {
                        console.log(""Contract address: "" + receipt.contractAddress) 
                    }"
70663-0-0.sol,answer,"function (val, index, array) {
  console.log(index + ': ' + val);
}"
45972-0-0.sol,answer,"function Inbox(string initialMessage) public {
    message = initialMessage;
}"
41490-0-0.sol,answer,"function solidityEventListener() {
 let solidityEvent;
 Contract.deployed().then(function(i) {
  solidityEvent = i.allEvents({fromBlock: 0, toBlock: 'latest'});

  solidityEvent.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   
  });
 })
}"
41490-0-0.sol,answer,"function(i) {
  solidityEvent = i.allEvents({fromBlock: 0, toBlock: 'latest'});

  solidityEvent.watch(function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   
  });
 }"
41490-0-0.sol,answer,"function(err, result) {
   if (err) {
    console.log(err)
    return;
   }
   
  }"
65506-0-0.sol,answer,"function newCollection() public {
    
    collections.length += 1;

    
    Collection storage collection = collections[collections.length - 1];

    
    collection.collectionCreator = msg.sender;
    
}"
46970-0-0.sol,answer,"function(from,to,password,amount){
    return new Promise(function(fullfill,reject){
        web3.eth.personal.unlockAccount(from, password).then(function (result) {
            web3.eth.sendTransaction({from:from,to:to,value:web3.utils.toWei(amount,""ether"")})
                .on('transactionHash', function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }).catch(function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                });
            }).catch(function(err){ 
                console.log(err);
                reject(""Unable to unlock sender's account with given passphrase"");
            });
    });
}"
46970-0-0.sol,answer,"function(fullfill,reject){
        web3.eth.personal.unlockAccount(from, password).then(function (result) {
            web3.eth.sendTransaction({from:from,to:to,value:web3.utils.toWei(amount,""ether"")})
                .on('transactionHash', function(txHash){
                    console.log(""Transaction hash : ""+txHash);
                    fullfill(txHash);
                }).catch(function(err){
                    console.log(err);
                    reject(""Unable to send transaction"");
                });
            }).catch(function(err){ 
                console.log(err);
                reject(""Unable to unlock sender's account with given passphrase"");
            });
    }"
33776-0-0.sol,answer,"function combineAndTransfer() public payable {
 currentSenders++;
 require(currentSenders <= requiredSenders);

 
 accumulatedFunds += msg.sender;

 
 if(currentSenders == requiredSenders){
  uint fundsToTransfer = accumulatedFunds;
  accumulatedFunds = 0;
  beneficiary.transfer(fundsToTransfer);
 }

}"
67452-0-2.sol,answer,"function addCardToWarrior(bytes32 warriorId, bytes32 cardId) public {
  warrior[warriorId].cards.push(cardId);
}"
46713-1-0.sol,answer,"function Lock() public payable  {
    value = msg.value;
    owner = msg.sender;
    lockedUntil = now + 5 days;
}"
76574-0-0.sol,answer,"function func() {
    var rcAddr = ""0x683d1602fa7252d49cda8ac414c1641a56e73d03"";
    var methodName = ""Access Control"";
    var register = new web3.eth.Contract(rcAbi, rcAddr);
    var accAddr = await register.methods.getContractAddr(methodName).call({
        from: ""0x70f99451d9878055ca8986021ca78f6edb8f1720"",
        gas: 10000000
    });
    console.log(accAddr);
}"
44802-2-3.sol,answer,"function theJoiningFunction() public {
    userCount++;
    if(userCount <= 20){
        badges[msg.sender] = Badge();
    }else if(userCount <= 100){
        badges[msg.sender] = Badge();
    }else{
       badges[msg.sender] = Badge();
    }"
28618-0-0.sol,answer,"function transfer( address _to, uint _value) public {
  require( now > 1514764800 );
  
}"
39443-0-0.sol,answer,"function forwardFunds(address receiver, uint amount) public {
  require(balances[msg.sender] >= amount);
  receiver.transfer(amount); 
  balances[receiver] -= amount;
  LogFundsForwarded(msg.sender, receiver, amount);
}"
77381-0-0.sol,answer,"function getCount() {
    
    let block = await web3.eth.getBlock(2535330, true);
    
    block.transactions.forEach(tx => {
        
        console.log(tx.input);
        
        
        
        let value = tx.input.slice(tx.input.length - 6, tx.input.length)
        
        let numValue = web3.utils.toDecimal(""0x"" + tx.input.slice(tx.input.length - 6, tx.input.length))
        console.log(value);
        console.log(numValue);

        
        if (value == '26afa0') {
            console.log(tx);

        }
    })
}"
9545-0-0.sol,answer,"function () payable {
      if (msg.value > 0) {
          if (!destinationAddress.send(msg.value)) throw; 
      }
}"
10979-0-2.sol,answer,"function toUnifiedLength(strIn) {
  var strOut = """";
  for (var i = 0; i < 64 - strIn.length; i++) {
    strOut += ""0""
  }
  strOut += strIn;
  return strOut;
}"
10979-0-2.sol,answer,"function hexEncode(str) {
  var hex, i;

  var result = """";
  for (i=0; i<str.length; i++) {
    hex = str.charCodeAt(i).toString(16);
    result += hex.slice(-4);
  }

  return result
}"
64879-0-0.sol,answer,"function addDeposit(uint amount) public {
    bank.transfer(amount);
  }"
41757-1-0.sol,answer,"function send(transaction) {
    let gas = await transaction.estimateGas({from: PUBLIC_KEY});
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : gas
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
}"
13893-0-1.sol,answer,"function FundRaiser(address originator) {
    owner = originator;
}"
76312-0-1.sol,answer,"function (err, hash) {
  if (err) { console.error(err); return }
  ...
}"
37782-0-0.sol,answer,"function burn(uint256 _value) public {
require(_value <= balances[msg.sender]);



address burner = msg.sender;
balances[burner] = balances[burner].sub(_value);
totalSupply_ = totalSupply_.sub(_value);
Burn(burner, _value);
}"
63857-0-1.sol,answer,"function pendingRequest() public {
    for (uint i = 0; i < requests.length; i++) {
        ... do stuff
    }
}"
84851-0-0.sol,answer,"function withdrawErc20(IERC20 token) public {
  token.transfer(msg.sender, token.balanceOf(address(this));
}"
74329-0-3.sol,answer,"function main() {

  
  ZWeb3.initialize(web3.currentProvider)

  
  const Counter = Contracts.getFromLocal('Counter');

  
  const [creatorAddress, initializerAddress] = await ZWeb3.accounts();

  
  const myProject = new SimpleProject('MyProject', null, { from: creatorAddress });

  
  const instance = await myProject.createProxy(Counter, { initArgs: [42] })
  console.log('Counter\'s value:', (await instance.methods.value().call({ from: initializerAddress })).toString());

}"
74329-0-3.sol,answer,"function(callback) {
  main().then(() => callback()).catch(err => callback(err))
}"
41847-0-0.sol,answer,"function (acequire, exports, module) {
    ""use strict"";

    var oop = acequire(""../lib/oop"");
    var DocCommentHighlightRules = acequire(""./doc_comment_highlight_rules"").DocCommentHighlightRules;
    var TextHighlightRules = acequire(""./text_highlight_rules"").TextHighlightRules;

    var JavaScriptHighlightRules = function JavaScriptHighlightRules(options) {
        var intTypes = 'bytes|int|uint';
        for (var width = 8; width |=|>=|>>>=|||!|&&|\|\||\?\:|[!$%&*+\-~\/^]=?/,
                next: ""start""
            }, {
                token: ""punctuation.operator"",
                regex: /[?:,;.]/,
                next: ""start""
            }, {
                token: ""paren.lparen"",
                regex: /[\[({]/,
                next: ""start""
            }, {
                token: ""paren.rparen"",
                regex: /[\])}]/
            }, {
                token: ""comment"",
                regex: /^#!.*$/
            }],
            ""start"": [DocCommentHighlightRules.getStartRule(""doc-start""), {
                token: ""comment"", 
                regex: ""\\/\\*"",
                next: ""comment_regex_allowed""
            }, {
                token: ""comment"",
                regex: ""\\/\\/"",
                next: ""line_comment_regex_allowed""
            }, {
                token: ""string.regexp"",
                regex: ""\\/"",
                next: ""regex""
            }, {
                token: ""text"",
                regex: ""\\s+|^$"",
                next: ""start""
            }, {
                token: ""empty"",
                regex: """",
                next: ""no_regex""
            }],
            ""regex"": [{
                token: ""regexp.keyword.operator"",
                regex: ""\\\\(?:u[\\da-fA-F]{4}|x[\\da-fA-F]{2}|.)""
            }, {
                token: ""string.regexp"",
                regex: ""/[sxngimy]*"",
                next: ""no_regex""
            }, {
                token: ""invalid"",
                regex: /\{\d+\b,?\d*\}[+*]|[+*$^?][+*]|[$^][?]|\?{3,}/
            }, {
                token: ""constant.language.escape"",
                regex: /\(\?[:=!]|\)|\{\d+\b,?\d*\}|[+*]\?|[()$^+*?.]/
            }, {
                token: ""constant.language.delimiter"",
                regex: /\|/
            }, {
                token: ""constant.language.escape"",
                regex: /\[\^?/,
                next: ""regex_character_class""
            }, {
                token: ""empty"",
                regex: ""$"",
                next: ""no_regex""
            }, {
                defaultToken: ""string.regexp""
            }],
            ""regex_character_class"": [{
                token: ""regexp.charclass.keyword.operator"",
                regex: ""\\\\(?:u[\\da-fA-F]{4}|x[\\da-fA-F]{2}|.)""
            }, {
                token: ""constant.language.escape"",
                regex: ""]"",
                next: ""regex""
            }, {
                token: ""constant.language.escape"",
                regex: ""-""
            }, {
                token: ""empty"",
                regex: ""$"",
                next: ""no_regex""
            }, {
                defaultToken: ""string.regexp.charachterclass""
            }],
            ""function_arguments"": [{
                token: ""variable.parameter"",
                regex: identifierRe
            }, {
                token: ""punctuation.operator"",
                regex: ""[, ]+""
            }, {
                token: ""punctuation.operator"",
                regex: ""$""
            }, {
                token: ""empty"",
                regex: """",
                next: ""no_regex""
            }],
            ""comment_regex_allowed"": [DocCommentHighlightRules.getTagRule(), { token: ""comment"", regex: ""\\*\\/"", next: ""start"" }, { defaultToken: ""comment"", caseInsensitive: true }],
            ""comment"": [DocCommentHighlightRules.getTagRule(), { token: ""comment"", regex: ""\\*\\/"", next: ""no_regex"" }, { defaultToken: ""comment"", caseInsensitive: true }],
            ""line_comment_regex_allowed"": [DocCommentHighlightRules.getTagRule(), { token: ""comment"", regex: ""$|^"", next: ""start"" }, { defaultToken: ""comment"", caseInsensitive: true }],
            ""line_comment"": [DocCommentHighlightRules.getTagRule(), { token: ""comment"", regex: ""$|^"", next: ""no_regex"" }, { defaultToken: ""comment"", caseInsensitive: true }],
            ""qqstring"": [{
                token: ""constant.language.escape"",
                regex: escapedRe
            }, {
                token: ""string"",
                regex: ""\\\\$"",
                next: ""qqstring""
            }, {
                token: ""string"",
                regex: '""|$',
                next: ""no_regex""
            }, {
                defaultToken: ""string""
            }],
            ""qstring"": [{
                token: ""constant.language.escape"",
                regex: escapedRe
            }, {
                token: ""string"",
                regex: ""\\\\$"",
                next: ""qstring""
            }, {
                token: ""string"",
                regex: ""'|$"",
                next: ""no_regex""
            }, {
                defaultToken: ""string""
            }]
        }"
41847-0-0.sol,answer,"function JavaScriptHighlightRules(options) {
        var intTypes = 'bytes|int|uint';
        for (var width = 8; width |=|>=|>>>=|||!|&&|\|\||\?\:|[!$%&*+\-~\/^]=?/,
                next: ""start""
            }"
41847-0-0.sol,answer,"function onMatch(val, state, stack) {
                    this.next = val == ""{"" ? this.nextState : """";
                    if (val == ""{"" && stack.length) {
                        stack.unshift(""start"", state);
                        return ""paren"";
                    }
                    if (val == ""}"" && stack.length) {
                        stack.shift();
                        this.next = stack.shift();
                        if (this.next.indexOf(""string"") != -1) return ""paren.quasi.end"";
                    }
                    return val == ""{"" ? ""paren.lparen"" : ""paren.rparen"";
                },
                nextState: ""start""
            }, {
                token: ""string.quasi.start"",
                regex: /`/,
                push: [{
                    token: ""constant.language.escape"",
                    regex: escapedRe
                }, {
                    token: ""paren.quasi.start"",
                    regex: /\${/,
                    push: ""start""
                }, {
                    token: ""string.quasi.end"",
                    regex: /`/,
                    next: ""pop""
                }, {
                    defaultToken: ""string.quasi""
                }]
            });
        }

        this.embedRules(DocCommentHighlightRules, ""doc-"", [DocCommentHighlightRules.getEndRule(""no_regex"")]);

        this.normalizeRules();
    }"
58618-0-0.sol,answer,"function isOpen() {
  return(block.number <= deadline);
}"
73937-0-2.sol,answer,"function (deployer, network, accounts) {
  await deployer.deploy(MyToken);
  const token = await MyToken.deployed();

  var date = new Date();
  const startTime = Math.floor((date.getTime() - date.getTimezoneOffset())/1000);
  const openingTime = startTime + 5;
  const closingTime = startTime + 7 * 24 * 60 * 60;
  const rate = 1;
  const wallet = accounts[2];
  const cap = ""1000000000000000000000000"";

  await deployer.deploy(MyTokenCrowdsale, openingTime, closingTime, rate, wallet, cap, token.address);

  const crowdsale = await MyTokenCrowdsale.deployed();

  await token.addMinter(crowdsale.address);
  await token.renounceMinter();

  await crowdsale.setCap(accounts[1], ""100000000000000000000"")
}"
54427-0-1.sol,answer,"function withdraw() onlyOwner public {
    uint256 etherBalance = this.balance;
    owner.transfer(etherBalance);
}"
56062-0-0.sol,answer,"function BitcoinCrown() {
    balances[msg.sender] = 70000000000000000000000000;               
    totalSupply = 70000000000000000000000000;                       
    name = ""BitcoinCrown"";                                         
    decimals = 18;                                                
    symbol = ""BTCC"";                                             
    unitsOneEthCanBuy = 2800;                                   
    fundsWallet = msg.sender;                                  
}"
51155-0-0.sol,answer,"function call(transaction) {
    let success = await web3.eth.personal.unlockAccount(OWNER_ADDRESS, OWNER_PASSWORD);
    let gas = await transaction.estimateGas({from: OWNER_ADDRESS, gasPrice: GAS_PRICE});
    return await transaction.call({from: OWNER_ADDRESS, gasPrice: GAS_PRICE, gas: gas});
}"
51155-0-0.sol,answer,"function send(transaction) {
    let success = await web3.eth.personal.unlockAccount(OWNER_ADDRESS, OWNER_PASSWORD);
    let gas = await transaction.estimateGas({from: OWNER_ADDRESS, gasPrice: GAS_PRICE});
    return await transaction.send({from: OWNER_ADDRESS, gasPrice: GAS_PRICE, gas: gas});
}"
51155-0-0.sol,answer,"function run() {
    let arg1 = ...;
    let arg2 = ...;
    let arg3 = ...;
    let myContract = await deploy(""MyContract"", [arg1, arg2]);
    let retval  = await call(myContract.methods.func1(arg3));
    let receipt = await send(myContract.methods.func2(arg3));
}"
64668-0-0.sol,answer,"function addToBalence(string name, uint amount) public payable {
    dao.addToBalence.value(msg.value)(userName);
}"
67076-0-2.sol,answer,"function func() {
    let destinationBalanceWei = await web3.eth.getBalance(...);
    console.log(destinationBalanceWei.toFixed());
    let destinationBalance = web3.utils.fromWei(destinationBalanceWei, 'ether');
    return destinationBalance;
}"
66574-0-1.sol,answer,"function receive() public view onlyUser {
  msg.sender.transfer(amount);
  emit ...
}"
66574-0-1.sol,answer,"function addRemoveUser(address user, bool isAuthorized) public onlyServer {
  userAuthorized[user] = isAuthorized;
  emit ...
}"
8073-0-1.sol,answer,"function getTxFromBlock(blockIndex, txIndex) {

    block = eth.getBlock(blockIndex, true);

    return block.transactions[txIndex];

}"
45330-0-1.sol,answer,"function () public payable {
    uint256 sum;
    for (uint256 i = 0; i < partners.length; i++) {
        sum = sum + partnersWeight[i];
    }
    Sum(sum);

    for (i = 0; i < partners.length; i++) {
        address dst = partners[i];
        uint256 value = msg.value * partnersWeight[i] / sum;
        dst.transfer(value);

        SplitValue(dst, partnersWeight[i], value);
    }
}"
38931-0-1.sol,answer,"function Hack(Supreme _sup) {
    sup = _sup;
}"
28231-0-0.sol,answer,"function (result) {
  roundNumber = Number(result);
  console.log(result + ' is the result'); 
  return roundNumber;
}"
28231-0-0.sol,answer,"function (roundNumber) {
  return contractInstance.lotteries.call(roundNumber);
}"
70442-0-2.sol,answer,"function send(transaction) {
    const options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : (await web3.eth.getBlock(""latest"")).gasLimit
    };
    const signedTransaction  = await web3.eth.accounts.signTransaction(options, YOUR_PRIVATE_KEY);
    const transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return transactionReceipt;
}"
46653-0-1.sol,answer,"function () {
        newBlockNumber = eth.syncing.currentBlock;

        if (n == newBlockNumber) {
            return;
        }

        n = newBlockNumber;

        if (n % 2 == 0) {
            console.log(n, ""is even"");
        } else {
            console.log(n, ""is odd"");
        }
    }"
630-0-0.sol,answer,"function(err, tmpJSON) {newJSON=tmpJSON;console.log(newJSON);}"
630-0-0.sol,answer,"function (err, pwDerivedKey) {derivedKey = pwDerivedKey;}"
48753-0-0.sol,answer,"function (transactionReceipt) {
    console.log(transactionReceipt)
}"
48753-0-0.sol,answer,"function waitForReceipt(hash, millisecondsInterval) {
    var retryCount = 0;
    var retryCountLimit = 100;

    var promise = new Promise((resolve, reject) => {
        var timer = setInterval(function () {

            web3.eth.getTransactionReceipt(hash, function(err, rec) {
                if(err) {
                    console.log(err)
                    clearInterval(interval);
                    reject(err)
                }

                if(rec != null) {
                    clearInterval(timer);
                    resolve(rec);
                    return;
                }

                retryCount++;
                if (retryCount >= retryCountLimit) {
                    clearInterval(timer);
                    reject(""retry count exceeded"");
                }
            });

        }, millisecondsInterval);
    });

    return promise;
}"
48753-0-0.sol,answer,"function () {

            web3.eth.getTransactionReceipt(hash, function(err, rec) {
                if(err) {
                    console.log(err)
                    clearInterval(interval);
                    reject(err)
                }

                if(rec != null) {
                    clearInterval(timer);
                    resolve(rec);
                    return;
                }

                retryCount++;
                if (retryCount >= retryCountLimit) {
                    clearInterval(timer);
                    reject(""retry count exceeded"");
                }
            });

        }"
48753-0-0.sol,answer,"function(err, rec) {
                if(err) {
                    console.log(err)
                    clearInterval(interval);
                    reject(err)
                }

                if(rec != null) {
                    clearInterval(timer);
                    resolve(rec);
                    return;
                }

                retryCount++;
                if (retryCount >= retryCountLimit) {
                    clearInterval(timer);
                    reject(""retry count exceeded"");
                }
            }"
82888-0-1.sol,answer,"function test(uint refund) public {
                  ^---------^
browser/3_Ballot.sol:6:5: The shadowed declaration is here:
    function refund() internal {  }
    ^-----------------------------^"
79217-0-0.sol,answer,"function doSomething() public {
         require(!hacker[ADDRESS_TO_CHECK]);
        
    }"
65660-0-1.sol,answer,"function () payable external {
...
}"
44856-0-0.sol,answer,"function () public payable {
    
    uint amount = msg.value;
    
    uint tokens = amount * 10;
    
    token.transfer(msg.sender, tokens);
}"
64441-1-0.sol,answer,"function update() payable {

    newOraclizeQuery(""Oraclize query was sent."");

    string memory x = strConcat();

    oraclize_query('URL', x);

}"
6176-0-0.sol,answer,"function () {
   
   
   
   call TheDAO.splitDAO(...)
}"
76537-1-0.sol,answer,"function createUser(uint256 _id) onlyOwner external {
    require(users[_id] == User(0), ""User already exists"");
    users[_id] = new User(_id);
    emit UserCreated(users[_id], ++numOfUsers);
}"
59414-0-1.sol,answer,function (ex) {...}
43478-1-3.sol,answer,"function (data) {
  
  var decodedValNode = rlp.decode(data.value);

  
  contractStorageSize += decodedValNode.byteLength;
}"
55910-0-0.sol,answer,"function(externalRequest, externalResponse) {
    request.get(""https:
        let externalResponseCode;
        let externalResponseBody;
        if (error) {
            externalResponseCode = 500;
            externalResponseBody = ""error: "" + error;
        }
        else if (!response) {
            externalResponseCode = 500;
            externalResponseBody = ""no response"";
        }
        else if (response.statusCode != 200) {
            externalResponseCode = 500;
            externalResponseBody = ""bad response"";
        }
        else {
            let web3 = new Web3(NODE_ADDRESS);
            let currentBlock = await web3.eth.getBlockNumber();
            let highestBlock = parseInt(JSON.parse(body).result);
            if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
                web3.currentProvider.connection.close();
            externalResponseCode = highestBlock - currentBlock > parseInt(SYNC_THRESHOLD) ? 500 : 200;
            externalResponseBody = `currentBlock = ${currentBlock}, highestBlock = ${highestBlock}`;
        }
        console.log(externalResponseCode, externalResponseBody);
        externalResponse.statusCode = externalResponseCode;
        externalResponse.end(externalResponseBody);
    }"
55910-0-0.sol,answer,"function(error) {
    if (error)
        return console.log(error);
    console.log(`server is listening on port ${SERVER_PORT}`);
}"
71250-0-0.sol,answer,"function () {
    await expectThrow(this.crowdsale.claimRefund({ from: investor }), EVMRevert);
    await increaseTimeTo(this.openingTime);
    await expectThrow(this.crowdsale.claimRefund({ from: investor }), EVMRevert);
  }"
41401-0-0.sol,answer,"function storeETH() payable public {    
    
}"
68785-0-0.sol,answer,"function () public payable {
    testDeposit ();
}"
7488-0-0.sol,answer,"function changeName(bytes32 newName) {
    
    
    
    if (msg.sender == address(creator))
        name = newName;
}"
24844-1-0.sol,answer,"function create_artist(bytes32 username, string ipfs) {
    for (uint i = 0; i < namesInUse.length; i++) {
        require(namesInUse[i] != username);
    }
    reserved_names[username] = msg.sender;
    
}"
69790-1-0.sol,answer,"function checkSignature(nonce, signature, res) {

  nonce = ""\x19Ethereum Signed Message:\n"" + nonce.length + nonce;
  nonce = util.keccak(nonce);
  const sig = signature;
  const {v, r, s} = util.fromRpcSig(sig);
  const pubKey  = util.ecrecover(util.toBuffer(nonce), v, r, s);
  const addrBuf = util.pubToAddress(pubKey);
  const addr    = util.bufferToHex(addrBuf);
  console.log(addr);

}"
30305-1-1.sol,answer,"function transfer(address recipient, uint amount) {
  if (balances[recipient] == 0) {
    participants.push(recipient);
    indices[recipient] = participants.length - 1;
  }
  
  if (balances[msg.sender] == 0) {
    delete participants[indices[msg.sender]];
  }
}"
41874-0-0.sol,answer,"function getStructData(tokenId) {

    myContract.Ownables(tokenId, function(error, details) {
        if(details == undefined) {
            return false;
        } else {
            var name = details[0];
            var creator = details[1];
            var currentOwner = details[2];
            var isDestructible = details[3];
            var price = parseInt(details[4]);
            OwnableList.push({name: name, creator: creator, currentOwner: currentOwner, isDestructible: isDestructible, price: price});
    })
    return true;
    }
}"
41874-0-0.sol,answer,"function(error, details) {
        if(details == undefined) {
            return false;
        } else {
            var name = details[0];
            var creator = details[1];
            var currentOwner = details[2];
            var isDestructible = details[3];
            var price = parseInt(details[4]);
            OwnableList.push({name: name, creator: creator, currentOwner: currentOwner, isDestructible: isDestructible, price: price});
    })
    return true;
    }"
41874-0-0.sol,answer,"function dumpStructData() {
    myContract.totalOwnables(function(error, total) {
        for(i=0; i<parseInt(total); i++) {
            getStructData(i);
        }
    }
}"
41874-0-0.sol,answer,"function(error, total) {
        for(i=0; i<parseInt(total); i++) {
            getStructData(i);
        }
    }"
41874-0-0.sol,answer,"function showStruct() {
    console.log(JSON.stringify(OwnableList);
}"
74425-0-0.sol,answer,"function disburse(uint amount) {
  totalDividendPoints += (amount * pointsMultiplier / totalSupply);
  totalSupply += amount;
  unclaimedDividends += amount;
}"
55761-1-0.sol,answer,"function changeStatus3() external {
    if (books[0].id == 2) { 
        status = 3;
    }
}"
33539-0-0.sol,answer,"function getBalance(addr) {
token.balanceOf.call(addr, function (err, bal) {
    if (err) { console.error(err) }
    console.log('token balance for account ' + addr + ' is ' + bal.toString(10));
})
}"
33539-0-0.sol,answer,"function (err, bal) {
    if (err) { console.error(err) }
    console.log('token balance for account ' + addr + ' is ' + bal.toString(10));
}"
46022-1-0.sol,answer,"function recoverTokens(address _token, address _to, uint _value) external ownerOnly {
    return ERC20(_token).transfer(_to, _value);
}"
20874-0-1.sol,answer,function deposit() payable {}
20874-0-1.sol,answer,function register(address sender) payable {}
45557-0-2.sol,answer,"function createUser(address _userAddress, uint256 _userId, bytes32 _userName) public {
    User storage user = users[_userAddress];
    
    require(!user.set);
    
    users[_userAddress] = User({
        id: _userId,
        name: _userName,
        set: true
    });
}"
80025-0-1.sol,answer,"function scan(fromBlock, toBlock) {
    request(`${ETHERSCAN_API_URL}&fromBlock=${fromBlock}&toBlock=${toBlock}`, {timeout: MAX_TIMEOUT}, function(error, response, body) {
        const parsed = parse(body);
        if (parsed.result) {
            if (parsed.result.length < MAX_RESULTS) {
                for (const event of parsed.result)
                    console.log(event.topics.slice(1), event.data);
            }
            else {
                console.log(""warning: too many events"");
                for (const event of parsed.result)
                    console.log(event.topics.slice(1), event.data);
            }
        }
        else {
            console.log(""error:"", error);
        }
    });
}"
80025-0-1.sol,answer,"function(error, response, body) {
        const parsed = parse(body);
        if (parsed.result) {
            if (parsed.result.length < MAX_RESULTS) {
                for (const event of parsed.result)
                    console.log(event.topics.slice(1), event.data);
            }
            else {
                console.log(""warning: too many events"");
                for (const event of parsed.result)
                    console.log(event.topics.slice(1), event.data);
            }
        }
        else {
            console.log(""error:"", error);
        }
    }"
80025-0-1.sol,answer,"function parse(str) {
    try {
        return JSON.parse(str);
    }
    catch (error) {
        return {};
    }
}"
76691-1-0.sol,answer,"function kill() public onlyOwner {
   selfdestruct(owner);
}"
54936-0-1.sol,answer,"function (deployer) {
     deployer.deploy(MyContract);
}"
76713-0-0.sol,answer,"function (error, event) {
    if (error) {
        console.log(""Error: "", error);
    } else {
        console.log(""File viewed: "", event);
    }
}"
69222-0-0.sol,answer,"function get(bytes32 key) public {
  require(exists(key),""Can't do that. It doesn't exist"");
  return ...
}"
24547-0-0.sol,answer,"function (message) {
  var prefix = exports.toBuffer('\u0019Ethereum Signed Message:\n' + message.length.toString())
  return exports.sha3(Buffer.concat([prefix, message]))
}"
25692-0-0.sol,answer,"function withdraw() {
    msg.sender.transfer(this.balance);
}"
2531-5-0.sol,answer,"function transferEntireBalance(from, to) {
    var gas = new BigNumber(21000);
    var price = web3.eth.gasPrice;  
    var balance = eth.getBalance(from);
    var value = balance.minus(gas.times(price));
    if (value.greaterThan(0)) {
        var txn = eth.sendTransaction({from: from, to: to, gasPrice: price, gas: gas, value: value});
        console.log(""  Transfer"", from, ""to"", to, "":"", txn);
        return txn;
    }
    console.log(""  Transfer ""+ from +"" to ""+ to +"": (No funds available)"");
    return null;
}"
21448-3-3.sol,answer,"function withdraw() public managers isActive {
117:         uint256 part = address(this).balance / beneficiaries.length;
                            ^^^^^^^^^^^^^^^^^^^^^                        

debug(development:0x7655ecf8...)> 

Transaction halted with a RUNTIME ERROR.

This is likely due to an intentional halting expression, like assert(), require() or revert(). It can also be due to out-of-gas exceptions. Please inspect your transaction parameters and contract code to determine the meaning of this error."
4423-1-0.sol,answer,"function __callback(bytes32 myid, string result, bytes proof) {
    if (msg.sender != oraclize_cbAddress()) throw;
    
    deliverable=parseInt(result);
    if(deliverable==1){
        seller.transfer(budget);
        Status('Ether transfer succsessfully.', seller, block.timestamp);
    }
    else{
        selfdestruct(msg.sender);
        Status('refund because deliverable is not set 1', msg.sender, block.timestamp);
    }

}"
54587-1-0.sol,answer,"function withdraw(address _to) public {
    _to.transfer(address(this).balance);
}"
60678-0-0.sol,answer,"function() {

  return expectedExceptionPromise(function () {
    return chainListInstance.sellArticle(
      articleName, 
      articleDescription, 
      web3.toWei(articlePrice, ""ether""), 
        { from: accounts[0], value: 1, gas: 3000000 });
        }, 3000000);

    }"
60678-0-0.sol,answer,"function () {
    return chainListInstance.sellArticle(
      articleName, 
      articleDescription, 
      web3.toWei(articlePrice, ""ether""), 
        { from: accounts[0], value: 1, gas: 3000000 });
        }"
51585-0-0.sol,answer,"function connect() { 
    if(!await web3.isConnected()){ 
    
        console.log(""notconnected"");
        process.exit();
    }

    var kId = await web3.shh.newSymKey(); 
    console.log(kId);

}"
42138-0-1.sol,answer,"function __callback(bytes32 myid, string result) public {
    if (msg.sender != oraclize_cbAddress()) throw;
    dollarCost = parseInt(result, 3);
    tokens = msgValue[myid] * dollarCost / 1000 / (10 ** 16);
}"
27028-1-0.sol,answer,"function main() {
  try {
    const ec = new EC('secp256k1');

    const key = ec.keyFromPrivate('208065a247edbe5df4d86fbdc0171303f23a76961be9f6013850dd2bdc759bbb', 'hex');

    const privateKey = key.getPrivate();
    const publicKey = key.getPublic().encode('hex').slice(2);
    assert.equal(publicKey, '836b35a026743e823a90a0ee3b91bf615c6a757e2b60b9e1dc1826fd0dd16106f7bc1e8179f665015f43c6c81f39062fc2086ed849625c06e04697698b21855e');

    const address = keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 40);
    assert.equal(address, '0bed7abd61247635c1973eb38474a2516ed1d884');

    console.log(`Private Key: 0x${privateKey}`);
    console.log(`Public Key: 0x${publicKey}`);
    console.log(`Address: 0x${address.toString()}`);
  } catch (err) {
    console.log(err);
  }
}"
29276-1-1.sol,answer,"function(url,accNo){

var data = JSON.stringify({
  ""jsonrpc"": ""2.0"",
  ""method"": ""eth_getBalance"",
  ""params"": [
    accNo,
    ""latest""
  ],
  ""id"": 1
});

var xhr = new XMLHttpRequest();



xhr.withCredentials = true;

xhr.addEventListener(""readystatechange"", function () {
  if (this.readyState === 4) {
    
    res = JSON.parse(this.responseText);
    console.log(res);
    EthBal = parseInt(res[""result""],16) ;
    EthBal = EthBal * Math.pow(10,(-18));
    console.log(""Eth balance = "" +EthBal);
  }
});

xhr.open(""POST"", url);
xhr.setRequestHeader(""content-type"", ""text/plain;charset=utf-8"");
xhr.setRequestHeader(""cache-control"", ""no-cache"");

xhr.send(data); 

}"
29276-1-1.sol,answer,"function () {
  if (this.readyState === 4) {
    
    res = JSON.parse(this.responseText);
    console.log(res);
    EthBal = parseInt(res[""result""],16) ;
    EthBal = EthBal * Math.pow(10,(-18));
    console.log(""Eth balance = "" +EthBal);
  }
}"
2919-0-4.sol,answer,"function getMyMinedBlocks(startBlockNumber, endBlockNumber) {
  getMinedBlocks(eth.accounts[0], startBlockNumber, endBlockNumber);
}"
10005-0-0.sol,answer,"function (error, result) {
    try {
      var tokenTrader = web3.eth.contract(gntTokenTraderABI).at(result.args.addr);
      var assetAddress = tokenTrader.asset();
      var sellPrice = tokenTrader.sellPrice();
      if (""0xa74476443119a942de498590fe1f2454d7d4ac0d"" == assetAddress &&
          sellPrice >= minimumSellPrice &&
          sellPrice <= maximumSellPrice) {
        console.log(""Data: "" + i + "" TokenTrader Address: "" + result.args.addr);
        var block = eth.getBlock(result.blockNumber);
        var deployedAt = new Date(block.timestamp * 1000);
        console.log(""Data:   Deployed                         : #"" + result.blockNumber + "" at "" + deployedAt.toUTCString());
        console.log(""Data:   TxHash                           : "" + result.transactionHash);
        console.log(""Data:   Owner                            : "" + result.args.owner);
        var ercInterface = web3.eth.contract(erc20ABIFragment).at(assetAddress);
        var symbol;
        try {
          symbol = ercInterface.symbol();
        } catch (e) {
          symbol = ""???"";
        }
        console.log(""Data:   Asset address                    : "" + assetAddress + "" "" + symbol);
        var sellsTokens = tokenTrader.sellsTokens();
        console.log(""Data:   Sells tokens                     : "" + sellsTokens);
        console.log(""Data:   Sell price                       : "" + sellPrice);
        var units = tokenTrader.units();
        console.log(""Data:   Units                            : "" + units);
        console.log(""Data:   Ethers per 1,000 tokens          : "" + sellPrice.div(units).mul(1000));
        var asset = web3.eth.contract(gntTokenABIFragment).at(assetAddress);
        
        
        
        var tokenBalance = asset.balanceOf(result.args.addr);
        console.log(""Data:   Current TokenTrader token balance: "" + tokenBalance.div(1e18));
        var tokenTraderEtherBalance = eth.getBalance(result.args.addr);
        console.log(""Data:   Current TokenTrader ether balance: "" + tokenTraderEtherBalance.div(1e18));
        var ownerEtherBalance = eth.getBalance(result.args.owner);
        console.log(""Data:   Current Owner ether balance      : "" + ownerEtherBalance.div(1e18));
      
        
        
        
        
        
        console.log(""CSV: "" + i + "","" + result.args.addr + "","" + sellsTokens + "","" + 
          sellPrice.div(units).mul(1000) + "","" + tokenBalance.div(1e18) + "","" + 
          result.blockNumber + "","" + deployedAt.toUTCString() + "","" + 
          result.transactionHash + "","" + result.args.owner + "","" + 
          assetAddress + "","" + symbol + "","" + sellPrice + "","" + units + "","" +           
          tokenTraderEtherBalance.div(1e18) + "","" + ownerEtherBalance.div(1e18));
        console.log(i++ + "": "" + JSON.stringify(result));
      }
    } catch (e) {
      console.log(""Data:   Cannot get details for TokenTrader "" + e);
    }
}"
50664-0-0.sol,answer,"function callfunction(address _atAddress) payable public {
    address _impl = _atAddress;
    require(_impl != address(0));

    assembly {
      let ptr := mload(0x40)
      calldatacopy(ptr, 0, calldatasize)
      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)
      let size := returndatasize
      returndatacopy(ptr, 0, size)

      switch result
      case 0 { revert(ptr, size) }
      default { return(ptr, size) }
    }
  }"
79177-0-0.sol,answer,"function netBalance(address user) private {
  balance[user] = balance[user] + pendingReceipts[user] - pendingTransfers[user];
  
  pendingReceipts[user] = 0;
  pendingTransfers[user] = 0;
  _;
}"
55692-1-0.sol,answer,"function writeNumber(uint256 num) public {
    someNumbers.push(num);
}"
45330-0-0.sol,answer,"function partnerAdd(address partner, uint256 weight) public onlyOwnerOrPartner  {
    require(partnerExists(partner) == false);

    partners.push(partner);
    partnersWeight.push(weight);
}"
12260-1-0.sol,answer,"function(hosts, timeout) {
  this.hosts= hosts;
  this.current = -1;
  this.timeout = timeout;
  this.currentProvider=undefined;
  this.providers=hosts.map(function(host) {
                           return new Web3.providers.HttpProvider(host, timeout);});
  
  
  this.providers.forEach(function(p){
                         p.setXMLHttpRequest( require('xmlhttprequest').XMLHttpRequest );
                         p.setXHR2( require('XHR2').XMLHttpRequest );
                         console.log(p);
                         });
  this.switchToNextConnected();
}"
12260-1-0.sol,answer,"function(host) {
                           return new Web3.providers.HttpProvider(host, timeout);}"
12260-1-0.sol,answer,"function(p){
                         p.setXMLHttpRequest( require('xmlhttprequest').XMLHttpRequest );
                         p.setXHR2( require('XHR2').XMLHttpRequest );
                         console.log(p);
                         }"
12260-1-0.sol,answer,"function (async) {
  if(this.currentProvider) {
      return this.currentProvider.prepareRequest(async);
  } else {
      if( this.switchToNextConnected() )
          return this.prepareRequest(async); 
      else 
          throw new Error('CONNECTION ERROR: Couldn\'t connect to any of the nodes '+ this.hosts +'.');
  }
}"
12260-1-0.sol,answer,"function (payload) {
  if(this.currentProvider) {
      try {
          return this.currentProvider.send(payload);
      } catch(error) {
          console.log(""Error with host ""+this.currentProvider.host+"". Switching to the next"", error);
          if(this.switchToNextConnected())
              return this.send(payload); 
          else throw new Error('CONNECTION ERROR: Couldn\'t connect to any of the nodes '+ this.hosts +'.');
      }
  } else {
      if(this.switchToNextConnected())
          return this.send(payload); 
      else throw new Error('CONNECTION ERROR: Couldn\'t connect to any of the nodes '+ this.hosts +'.');
  }
}"
12260-1-0.sol,answer,"function (payload, callback) {
  
  
  

  if(this.isConnected()) 
      this.currentProvider.sendAsync(payload, callback);
  else callback(new Error('CONNECTION ERROR: Couldn\'t connect to any of the nodes '+ this.hosts +'.'), undefined);
}"
12260-1-0.sol,answer,"function() {
  if(this.currentProvider)
      if(this.currentProvider.isConnected()) return true;
      else { this.switchToNextConnected(); return this.currentProvider!=undefined;}
  else { this.switchToNextConnected(); return this.currentProvider!=undefined;}
}"
61732-0-0.sol,answer,"function donate(uint256 payerIdentifier) public payable {
    
}"
76409-0-0.sol,answer,"function submitWork(uint256 _ipfsHashCommit) {
    require(committedHashes[_ipfsHashCommit] == 0, 'IPFS hash commit already submitted.');
    committedHashes[_ipfsHashCommit] = msg.sender;  
}"
3417-5-0.sol,answer,"function (err, out) {
    console.log(out);
}"
10806-0-5.sol,answer,"function pad64(str) {
  var result = '';
  while (result.length < 64 - str.length) {
    result += '0';
  }
  return result + str;
}"
3649-0-0.sol,answer,"function Execution (address _seller) {
    seller.send(price);
}"
20805-1-0.sol,answer,"function changeParameters(uint newAnte, uint8 newNumberOfPlayers, uint newWinnerPercentage) {
    
    if (msg.sender == owner) {
     if (newAnte != None) {
        ante = newAnte;
    }
    if (newNumberOfPlayers != None) {
        required_number_players = newNumberOfPlayers;
    }
    if (newWinnerPercentage != None) {
        winner_percentage = newWinnerPercentage;
    }
}
"
43687-0-0.sol,answer,"function mint(address _to, uint _value) public {
    require(msg.sender == owner); 
    balances[_to] += value;
    supply += value;
    require(balances[_to] >= value && supply >= value); 
    emit Transfer(address(0), _to, _value);
}"
82981-1-0.sol,answer,"function confirmTransaction(options, msWalletAddr, transactionId, privateKey) {
    return sign(options, msWalletAddr, ""confirmTransaction"", [transactionId], privateKey);
}"
82981-1-0.sol,answer,"function executeTransaction(options, msWalletAddr, transactionId, privateKey) {
    return sign(options, msWalletAddr, ""executeTransaction"", [transactionId], privateKey);
}"
82981-1-0.sol,answer,"function revokeConfirmation(options, msWalletAddr, transactionId, privateKey) {
    return sign(options, msWalletAddr, ""revokeConfirmation"", [transactionId], privateKey);
}"
56357-0-0.sol,answer,"function proposeNumber(uint number) public payable {
    require(msg.value > .01 ether);
    proposals.push(number);
}"
66333-0-0.sol,answer,"function updateAvailabilities() public {
    for (uint256 i = 0; i > users.length; i++) {
        if (balances[users[i]] > 500) {
            availabilities[users[i]] = 2;
        }
        
    }
}"
9084-0-1.sol,answer,"function test() {
  bytes1 variable1 = app.myVar();
  bytes1 a = 0x01;
  assertEq1(variable1, a);
}"
22957-0-0.sol,answer,"function createAccount(string name, string secName) isCreator {
    accounts.push(Account(name, secName, 1));
}"
43479-1-0.sol,answer,"function transfer(address _to, uint256 _value) { 
if (balanceOf[msg.sender] < _value) throw; 
if (balanceOf[_to] + _value < balanceOf[_to]) throw; 
if (frozenaccount[msg.sender]) throw; 
balanceOf[_to] += _value; 
Transfer(msg.sender, _to, _value); 
}"
60265-1-0.sol,answer,"function foo() public {
    ids[0] = 1;
    ids[1] = 0;
    ids[2] = 3;
    delete ids[0];
}"
57681-0-0.sol,answer,"function feedData(string _result) public {
    
    require(keccak256(bytes(_result)) == keccak256(""e""), ""error"");

    result = _result; 
}"
16914-0-1.sol,answer,"function addMember(address targetMember, string memberName) onlyOwner {
        uint id;
        if (memberId[targetMember] == 0) {
           memberId[targetMember] = members.length;
           id = members.length++;
           members[id] = Member({member: targetMember, memberSince: now, name: memberName});
        } else {
            id = memberId[targetMember];
            Member m = members[id];
        }

        MembershipChanged(targetMember, true);
    }"
25067-0-0.sol,answer,"function f() { 
    const privateKey = web3.utils.keccak256('Test');
    const address = web3.eth.accounts.privateKeyToAccount(privateKey); 
    const toSign=""This is a test"";    
    const signedData = await web3.eth.accounts.sign(toSign, privateKey);
    console.log(`Signing ""${toSign}"" by account ${address.address} gives signature ${signedData.signature}`);
    const signer=web3.eth.accounts.recover(toSign, signedData.signature);
    console.log(`Knowing the signed text: ""${toSign}"" we can get the signer: ${signer}`);
}"
61281-0-2.sol,answer,"function sortingHat() {
  uint ID = pseudonymID[msg.sender];
  require(ID != 0);
  uint randomNumber = uint64(sha3(sha3(block.blockhash(block.number), entropy), now)) % listLength();
  address randomPeer = pseudonymIndex[randomNumber];
  pair[pairCount][0] = msg.sender;
  pair[pairCount][1] = randomPeer;
  pairCount++;
  address fromBeginning = pseudonymIndex[beginning];
  address fromEnd = pseudonymIndex[end];
  pseudonymIndex[ID] = fromBeginning;
  pseudonymIndex[randomPeer] = fromEnd;
  pseudonymID[fromBeginning] = ID;
  pseudonymID[fromEnd] = randomPeer;
  delete pseudonymIndex[beginning];
  delete pseudonymIndex[end];
  delete pseudonymID[msg.sender];
  delete pseudonymID[randomPeer];
  beginning++;
  end--;
  entropy = sha3(randomNumber, msg.sender, randomPeer);
}"
80827-0-0.sol,answer,"function run() {
    const web3        = new Web3(NODE_ADDRESS);
    const account     = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const path        = __dirname + ""/"" + ARTIFACTS_DIR + ""/"" + CONTRACT_NAME;
    const abi         = fs.readFileSync(path + "".abi"", {encoding: ""utf8""});
    const bin         = fs.readFileSync(path + "".bin"", {encoding: ""utf8""});
    const contract    = new web3.eth.Contract(JSON.parse(abi));
    const options     = {data: ""0x"" + bin, arguments: CONTRACT_ARGS};
    const transaction = contract.deploy(options);
    const receipt     = await send(web3, account, transaction);
    console.log(CONTRACT_NAME, ""deployed at"", receipt.contractAddress);
    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
82713-0-0.sol,answer,"function getArray(items) {
    return items.map(item => ""0x"" + toBN(item.address).shln(96).or(toBN(item.amount)).toString(16));
}"
44349-0-0.sol,answer,"function () {
        var wallet = new HDWalletProvider('candy maple cake sugar pudding cream honey rich smooth crumble sweet treat', 'https:
        var nonceTracker = new NonceTrackerSubprovider()
        wallet.engine._providers.unshift(nonceTracker)
        nonceTracker.setEngine(wallet.engine)
        return wallet
      }"
78947-0-0.sol,answer,"function pickWinner() public payable restricted {
        require(players.length > 0, ""Need at least one player.""); 
        uint index = random() % players.length;
        address payable winner = players[index];
        winner.transfer(address(this).balance);
        players = new address payable [](0);
    }"
79011-0-0.sol,answer,"function (accounts) {
      let ethersProvider = new ethers.providers.Web3Provider(provider);
      let contract = new ethers.Contract(contractAddress, abi, ethersProvider.getSigner());
      console.log(accounts);
      let value = ethers.utils.bigNumberify(Math.pow(10,9)).mul(ethers.utils.bigNumberify(Math.pow(10,9))).mul(ethers.utils.bigNumberify(10));
      let transaction = contract.transfer(""0x8abaD0176217D8cF1a9fc9E559D30BfF36269737"", value);
      console.log(transaction);
    }"
40890-0-0.sol,answer,"function withdraw(uint amount) {
    if(checkValue(amount)) {
        value -= amount;
    }
}"
11831-0-0.sol,answer,"function sendFundsToFriend(address to) {
    if (to.balance >= 1000000000000000000) {
        faucetResult(msg.sender, to, 'Friends balance higher than 1 Ether'); 
    } else if (this.balance < 1000000000000000000) {
        faucetResult(msg.sender, to, 'Faucets balance lower than 1 Ether'); 
    } else {
        bool dummy = to.send(1000000000000000000);
        faucetResult(msg.sender, to, 'Sent 1 Ether to friends account'); 
    }
}"
60279-0-1.sol,answer,"function doBuy(uint _amount) public {
   contractOfTheBuyTokensFunction.buyTokens.value(_amount)(msg.sender);
}"
6676-0-0.sol,answer,"function sellEnergy(uint kwh) public {
    if (msg.value < 0.001 ether) { throw; }
    coinAccount[msg.sender] += (kwh * kWh_rate);
}"
71303-0-0.sol,answer,"function (hash) {

            MyContract.events.allEvents({
                fromBlock: 4477390,
                toBlock: 'latest'
            }, (error, events) => { 
                if (error) { console.log(""ERR"", error); }
                eventDataArray = events.map((event) => {
                   web3.eth.abi.decodeParameters(['uint256', 'uint256', 
                   'uint256', 'address', 'address', 'string'], event.raw.data)
                });
                console.log(""Events"": eventDataArray);
            });
        }"
18455-1-0.sol,answer,"function emitEvent(string _name, uint _value) public {
     Print(_name, _value);
}"
6993-0-0.sol,answer,"function sendMoney(address customer, address recipient, uint256 amount) {
if(balances[customer] > amount){
customer.send(amount);
balances[customer] -= amount;
}
 else return;
}"
9843-0-0.sol,answer,"function iterateVm (done) {
    if (runState.stack.length > 1024) {
      return done(ERROR.INVALID_OPCODE)
    }
"
49282-1-0.sol,answer,"function () payable {
    require(!crowdsaleClosed);
    uint amount = msg.value;
    balanceOf[msg.sender] += amount;
    amountRaised += amount;
    tokenReward.transfer(msg.sender, amount / price);
    FundTransfer(msg.sender, amount, true);
}"
30857-0-1.sol,answer,"function foobar2(address a, uint x0) public {
    Bar memory b;
    b.owner = a;
    bars.push(b);
    
    bars[bars.length - 1].x.push(x0); 
}"
82746-0-3.sol,answer,"function (result) {
    console.log(result.toFixed());
}"
10569-1-0.sol,answer,"function takeTokens(address buyer, uint amount) onlyseller {
    if(balanceOf[buyer] < amount) throw;
    balanceOf[buyer] -= amount;
    balanceOf[seller] += amount;
    CoinTransfer(msg.sender, receiver, amount);
}"
51816-0-0.sol,answer,"function Forwarder() {
        destinationAddress = 0x104ea4435b2ed36f36dc403b3638d82ec6a21bb7
      }"
9105-0-0.sol,answer,"function createPlayer() critical {

function createPlayer() {
    critical; 
"
62478-0-1.sol,answer,"function getTransactionReceiptMined(txHash, interval) {
    const self = this;
    const transactionReceiptAsync = function(resolve, reject) {
        self.getTransactionReceipt(txHash, (error, receipt) => {
            if (error) {
                reject(error);
            } else if (receipt == null) {
                setTimeout(
                    () => transactionReceiptAsync(resolve, reject),
                    interval ? interval : 500);
            } else {
                resolve(receipt);
            }
        });
    };

    if (Array.isArray(txHash)) {
        return Promise.all(txHash.map(
            oneTxHash => self.getTransactionReceiptMined(oneTxHash, interval)));
    } else if (typeof txHash === ""string"") {
        return new Promise(transactionReceiptAsync);
    } else {
        throw new Error(""Invalid Type: "" + txHash);
    }
}"
62478-0-1.sol,answer,"function(resolve, reject) {
        self.getTransactionReceipt(txHash, (error, receipt) => {
            if (error) {
                reject(error);
            } else if (receipt == null) {
                setTimeout(
                    () => transactionReceiptAsync(resolve, reject),
                    interval ? interval : 500);
            } else {
                resolve(receipt);
            }
        });
    }"
30864-0-3.sol,answer,"function refundTokens(address _token, address _refund, uint _value) onlyOwner {
    require(_token != this);
    ERC20 token = ERC20(_token);
    token.transfer(_refund, _value);
    RefundTokens(_token, _refund, _value);
  }"
10979-0-0.sol,answer,"function estimate() {
  const contractAddress = ""0x..."";
  const contractABI = [...]
  const contract = new web3.eth.Contract(contractABI, contractAddress)
  const estimatedGas = await estimateGas(contract, ""foo"", ""bar"");
  console.log(""estimatedGas:"",estimatedGas)
}"
62579-0-0.sol,answer,"function check() public onlyAdmin {
    ...    
}"
44750-0-0.sol,answer,"function claim_token() external {
    valid_tokens[msg.sender] = true;   
}"
50019-0-1.sol,answer,"function makeBet(uint _matchId, uint _homeScore, uint _awayScore) public {
    bytes32 mybet = keccak256(_homeScore,_awayScore);
    matchBettingInfo[_matchId].bets[mybet].push(msg.sender);
    matchBettingInfo[_matchId].homeScore[msg.sender] = _homeScore;
    matchBettingInfo[_matchId].homeScore[msg.sender] = _awayScore;
}"
10423-0-0.sol,answer,"function set(bytes32 objName, uint obja, uint objb, uint objc) public {
    Obj storage obj = objs[objName];

    obj.a = uint32(obja);
    obj.b = uint32(objb);
    obj.c = uint32(objc);
}"
66982-0-1.sol,answer,"function signAndSendTransaction(to, data, value, gas) {
    while (true) {
        try {
            let options = {
                to   : to,
                data : data,
                value: value
            };
            options.gas = gas ? gas : (await web3.eth.getBlock(""latest"")).gasLimit;
            const signedTransaction  = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
            const transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
            return transactionReceipt;
        }
        catch (error) {
            console.log(error.message);
            console.log(""Press enter to try again..."");
            await new Promise(function(resolve, reject) {
                process.stdin.resume();
                process.stdin.once(""data"", function(data) {
                    process.stdin.pause();
                    resolve();
                });
            });
        }
    }
}"
66982-0-1.sol,answer,"function(resolve, reject) {
                process.stdin.resume();
                process.stdin.once(""data"", function(data) {
                    process.stdin.pause();
                    resolve();
                });
            }"
66982-0-1.sol,answer,"function(data) {
                    process.stdin.pause();
                    resolve();
                }"
66327-0-0.sol,answer,"function () {
    let expectedResult = 1;

    return instance.getSomeData(param1).then(result => {
        assert(result == expectedResult);
    })
}"
68481-0-0.sol,answer,"function foo () public {
  a.map[5]=7;
  delete a;
  assert (a.map[5]==7); 
}"
12133-0-0.sol,answer,"function allEvents(ev, cb) {   
  ev({}, { fromBlock: 0, toBlock: 'latest' }).get((error, results) => {
    if(error) return cb(error)
    results.forEach(result => cb(null, result))
    ev().watch(cb)   
  }) 
}"
51511-0-0.sol,answer,"function Forwarder() public {
  destinationAddress = msg.sender;
}"
29427-0-0.sol,answer,"function () payable {
      buyTokens();
   }"
41311-0-0.sol,answer,"function (err, txHash) {
    if (err) {
        console.error(err);
    }
  if (txHash) {
    console.log(txHash)
  }
}"
42539-0-3.sol,answer,"function myCallback(err, result) {
}"
37278-0-0.sol,answer,"function () {
                    let balance = 0;
                    balance = await web3.eth.getBalance(address);
                    process.stdout.write(`\rProcessed: ${ ++processed }/${ addresses.length }`);
                    if (balance === 0)
                        return;
                    map.set(address, balance);
                }"
37278-0-0.sol,answer,"function splitArray (array, len) {
    const arr = [];
    for (let i = 0; i < array.length; i += len) {
        arr.push(array.slice(i, Math.min(i + len, array.length)));
    }
    return arr;
}"
28842-0-0.sol,answer,"function retrieveTokens(address _token) public payable {
   require(msg.sender == owner);
   ERC20 erctoken = ERC20(_token);
   erctoken.transfer(Vault, erctoken.balanceOf(this));
}"
34308-0-0.sol,answer,"function myFunction(myParam) {
    var contractAddress = '<ENTER-YOUR-CONTRACT-ADDRESS-HERE>'
    var contractABI = [<ENTER-YOUR-ABI-HERE>]
    var contract = new web3.eth.Contract(contractABI, contractAddress)
    var callData = contract.methods.<CONTRACT-FUNCTION>(myParam).call()
    callData.then(function(result) {
        console.log(result)
    })
}"
82746-1-1.sol,answer,"function (result) {
             ^

TypeError: getBalance(...).call is not a function
    at Object.<anonymous> (/home/x/ethweb3/test.js:44:14)
    at Module._compile (internal/modules/cjs/loader.js:1185:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1205:10)
    at Module.load (internal/modules/cjs/loader.js:1034:32)
    at Function.Module._load (internal/modules/cjs/loader.js:923:14)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)
    at internal/main/run_main_module.js:17:47"
65824-0-1.sol,answer,"function f(address payable beneficiary) payable public {
    beneficiary.transfer(msg.value);
}"
65342-0-0.sol,answer,"function getAccount(id) {
    let accounts = await web3.eth.getAccounts();
    return accounts[id];
}"
37793-0-0.sol,answer,"function userSendsEth() {
     require(msg.value > someamount)
     
}"
66969-0-1.sol,answer,"function getERC20Transfers(blockNumber) {
  let block = await web3.eth.getBlock(blockNumber);
  for (var transactionIndex in block.transactions) {
    let transactionHash = block.transactions[transactionIndex];
    let transaction = await web3.eth.getTransaction(transactionHash);
    if (transaction.input.substr(0,10) == ""0xa9059cbb"") {
        console.log(transaction)
    }
  }
}"
44486-0-0.sol,answer,"function sendTransaction(tx) {
    return new Promise((resolve, reject) => {
        web3g.eth.sendSignedTransaction(tx.rawTransaction)
            .on('transactionHash', function (hash) {
                resolve(hash);
            });
    });
}"
44486-0-0.sol,answer,"function (hash) {
                resolve(hash);
            }"
44486-0-0.sol,answer,"function signTransaction(tx, private_key) {
    return new Promise((resolve, reject) => {
        web3g.eth.accounts.signTransaction(tx, private_key)
            .then(function (signed_tx) {
                resolve(signed_tx);
            }).catch(function (error) {
                console.log(error);
                reject(""request failed"");
            });
    });
}"
44486-0-0.sol,answer,"function (signed_tx) {
                resolve(signed_tx);
            }"
44486-0-0.sol,answer,"function (error) {
                console.log(error);
                reject(""request failed"");
            }"
44486-0-0.sol,answer,"function generateTx(body, instance) {
    return new Promise((resolve, reject) => {
        try {
            let encoded_tx_data = instance.methods.transfer(body.destinationAddress, body.transferAmount).encodeABI();
            let tx_object = {
                gas: 2000000,
                data: encoded_tx_data,
                from: body.senderAddress,
                to: body.contractAddress
            };
            resolve(tx_object);
        } catch (error) {
            console.log(error);
            reject(""request failed"");
        }
    });
}"
66833-0-0.sol,answer,"function incrementA() public {
  a = a + 1;
}"
82484-0-4.sol,answer,"function registerUser(string user) public {
  if (addressTable[user] == 0) addressTable[user] = msg.sender;
 }"
18349-0-0.sol,answer,"function EscrowPayment(address _seller, address _judge) payable {
    gasLimit = msg.gas; 
    value = msg.value; 
    gasPrice = tx.gasprice;
    buyer = msg.sender;
    seller = _seller;
    judge = _judge;
}"
63698-0-1.sol,answer,"function B() {
        print msg.sender;
        print msg.sender; 
}"
2918-1-0.sol,answer,"function deposit() { 
    depositsers[msg.sender].value = msg.value;
}"
84833-0-0.sol,answer,"function getPastLogs(web3, address, topics, fromBlock, toBlock) {
    if (fromBlock <= toBlock) {
        try {
            return await web3.eth.getPastLogs({address, topics, fromBlock, toBlock});
        }
        catch (error) {
            const midBlock = (fromBlock + toBlock) >> 1;
            const arr1 = await getPastLogs(web3, address, topics, fromBlock, midBlock);
            const arr2 = await getPastLogs(web3, address, topics, midBlock + 1, toBlock);
            return [...arr1, ...arr2];
        }
    }
    return [];
}"
79679-0-0.sol,answer,"function payMe() public payable {
  uint weGot = msg.value;
  
}"
62564-1-3.sol,answer,"function addUp(uint x) public {
  c = c + x;
  if(c > 9) playerIsBust();
  if(c == 9) playerWins();
}"
38654-0-0.sol,answer,"function acceptPayment(bytes32 clientName) public payable {
    payments[clientName] = msg.value;
}"
77380-0-0.sol,answer,"function try_my_luck() {
    r=random(some_len)
    if r < 0.01 {
       award(100Eth)
    }
}"
68219-0-1.sol,answer,"function registerFarm(string _farmName, string _farmLatitude, string _farmLongitude, string _locationAddress) public {

        previousFarmId = previousFarmId + 1;

        Location storage newLocation = farmLocation[previousFarmId];
        newLocation.latitude = _farmLatitude;
        newLocation.longitude = _farmLongitude;
        newLocation.locationAddress = _locationAddress;

        emit FarmRegistered(previousFarmId);

    }"
53202-0-1.sol,answer,"function send(address _from, address _to) public payable {
    require(msg.value == 1 ether);
    _to.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}"
52532-1-0.sol,answer,"function TitanToken(uint256 _initialSupply, bytes32 _tokenName, bytes32 _tokenSymbol) public {
    totalSupply = _initialSupply * 10 ** uint256(decimals);  
    name = _tokenName;                                   
    symbol = _tokenSymbol;                               
}"
30757-1-0.sol,answer,"function adopters(uint idx) public constant {
    return adopters[idx];
}"
46391-0-0.sol,answer,"function withdrawTokens (_amount) {
  
  fraction = ((currentTime - startTime)/(finalTime - startTime))

  
  tokensAvailable = (fraction * totalTokens) - tokensAlreadyGivenOut

  
  require(tokesAvailable > _amount)

  
  tokensAlreadyGivenOut += _amount

  
  tokens[msg.sender] += _amount
}"
56138-0-0.sol,answer,"function __callback(bytes32 myid, string result) {
...
}"
3386-5-0.sol,answer,"function run(argv) {

    
    let apiKey = argv[""api-key""];
    let privateKey = argv[""private-key""];
    let value = argv[""value""];
    let to = argv[""to""];
    let nonce = argv[""nonce""];
    let gasLimit = argv[""gas-limit""];

    if(!privateKey) {
      console.error(""No private key given"");
      process.exit(1);
    }

    if(!apiKey) {
      console.error(""No EtherScan.io API key given"");
      process.exit(1);
    }

    
    const api = new API(""https:

    let fromAddress = getAddressFromPrivateKey(privateKey);

    
    if(!nonce) {
      nonce = await api.getTransactionCount(fromAddress);
    }

    let gasPrice = await api.getGasPrice();

    value = web3.toHex(web3.toWei(value, ""ether""));

    
    let txData = {
      contractAddress: to,
      privateKey: privateKey,
      nonce: nonce,
      functionSignature: null, 
      functionParameters: null,
      value: value,
      gasLimit: gasLimit,
      gasPrice: gasPrice,
    };

    
    let info = Object.assign({}, txData);
    info.fromAddress = fromAddress;
    info.gasLimitInt = parseInt(txData.gasLimit, 16);
    info.gasPriceInt = parseInt(txData.gasPrice, 16);
    info.weiValueInt = parseInt(txData.value, 16);
    console.log(""Building transaction with parameters\n"", info);

    let tx = buildTx(txData);

    console.log(""Your raw transaction is: "", tx);
    console.log(""Visit at https:

  }"
40447-0-0.sol,answer,"function spawnChild(bytes32 childId) {
    Child current = new Child();
    childList[childId] = current;
}"
73388-0-1.sol,answer,"function issueTo(uint256 number, address destination) {
    token.issueToken(number);
    
    token.transfer(destination, number);
}"
56533-0-2.sol,answer,"function testInsertCredentialOrg() public {
    
    CredentialOrgFactory credentialOrgFactory = new CredentialOrgFactory(...)

    
    testVal = credentialOrgFactory.createCredentialOrg(...);

}"
7180-0-1.sol,answer,"function func() {\n        
  ...
      PUSH 0            img
      PUSH 0            img
      PUSH 0            delete img
      DUP3          delete img
      ADD           delete img
      PUSH 0            delete img
      POP           delete img
      DUP1          delete img
      SLOAD             delete img
      PUSH 0            delete img
      DUP3          delete img
      SSTORE            delete img
      PUSH 2            delete img
      MUL           delete img
      SWAP1             delete img
      PUSH 0            delete img
      MSTORE            delete img
      PUSH 20           delete img
      PUSH 0            delete img
      SHA3          delete img
      SWAP1             delete img
      DUP2          delete img
      ADD           delete img
      SWAP1             delete img
      PUSH [tag] 8          delete img
      SWAP2             delete img
      SWAP1             delete img
      PUSH [tag] 9          delete img
      JUMP          delete img
    tag 9           delete img
      JUMPDEST          delete img
      DUP1          delete img
      DUP3          delete img
      GT            delete img
      ISZERO            delete img
      PUSH [tag] 10         delete img
      JUMPI             delete img
      PUSH 0            delete img
      PUSH 0            delete img
      DUP3          delete img
      ADD           delete img
      PUSH 0            delete img
      POP           delete img
      PUSH 0            delete img
      SWAP1             delete img
      SSTORE            delete img
      PUSH 1            delete img
      DUP3          delete img
      ADD           delete img
      PUSH 0            delete img
      POP           delete img
      PUSH 0            delete img
      SWAP1             delete img
      SSTORE            delete img
      POP           delete img
      PUSH 2            delete img
      ADD           delete img
      PUSH [tag] 9          delete img
      JUMP          delete img
    tag 10          delete img
      JUMPDEST          delete img
      POP           delete img
      SWAP1             delete img
      JUMP          delete img
    tag 8           delete img
      JUMPDEST          delete img
    tag 7           delete img
      JUMPDEST          delete img
      POP           delete img
      PUSH 1            delete img
      DUP3          delete img
      ADD           delete img
      PUSH 0            delete img
      POP           delete img
      DUP1          delete img
      SLOAD             delete img
      PUSH 1            delete img
      DUP2          delete img
      PUSH 1            delete img
      AND           delete img
      ISZERO            delete img
      PUSH 100          delete img
      MUL           delete img
      SUB           delete img
      AND           delete img
      PUSH 2            delete img
      SWAP1             delete img
      DIV           delete img
      PUSH 0            delete img
      DUP3          delete img
      SSTORE            delete img
      DUP1          delete img
      PUSH 1F           delete img
      LT            delete img
      PUSH [tag] 12         delete img
      JUMPI             delete img
      POP           delete img
      PUSH [tag] 11         delete img
      JUMP          delete img
    tag 12          delete img
      JUMPDEST          delete img
      PUSH 1F           delete img
      ADD           delete img
      PUSH 20           delete img
      SWAP1             delete img
      DIV           delete img
      SWAP1             delete img
      PUSH 0            delete img
      MSTORE            delete img
      PUSH 20           delete img
      PUSH 0            delete img
      SHA3          delete img
      SWAP1             delete img
      DUP2          delete img
      ADD           delete img
      SWAP1             delete img
      PUSH [tag] 13         delete img
      SWAP2             delete img
      SWAP1             delete img
      PUSH [tag] 14         delete img
      JUMP          delete img
    tag 14          delete img
      JUMPDEST          delete img
      DUP1          delete img
      DUP3          delete img
      GT            delete img
      ISZERO            delete img
      PUSH [tag] 15         delete img
      JUMPI             delete img
      PUSH 0            delete img
      DUP2          delete img
      DUP2          delete img
      POP           delete img
      PUSH 0            delete img
      SWAP1             delete img
      SSTORE            delete img
      POP           delete img
      PUSH 1            delete img
      ADD           delete img
      PUSH [tag] 14         delete img
      JUMP          delete img
    tag 15          delete img
      JUMPDEST          delete img
      POP           delete img
      SWAP1             delete img
      JUMP          delete img
    tag 13          delete img
      JUMPDEST          delete img
    tag 11          delete img
      JUMPDEST          delete img
      POP           delete img
      POP           delete img
      POP           delete img
    tag 6           function func() {\n     "
29755-0-0.sol,answer,"function (address) {
    return PROVIDER.getBalance(address)
        .then(balance => {
            
            let etherString = _utils.formatEther(balance)

            return etherString
        })
}"
41561-0-1.sol,answer,"function getBalanceInBatch(address) {
      const batch = new web3.BatchRequest();
      const contractData = balanceHex + address.substring(2);

      for (let token of tokens) { 
        const params = { to: token.address, data: contractData, from: address };
        batch.add(web3.eth.call.request(params, callBack));
      }

      batch.execute()
    }"
41561-0-1.sol,answer,"function callBack(err, result) {
      const totalTokens = web3.utils.toBN(result).toString();
      const balance = web3.utils.fromWei(totalTokens, ""ether"");
      console.warn(""balance"", balance);
    }"
39290-0-0.sol,answer,"function releaseToken(string _string) public {
    require(keccak256(_string) == keccak256(contractString));
    uint256 amount = 15 * uint256(10)**decimals;
    balances[msg.sender] += amount;
    _totalSupply += amount;
}"
51311-0-0.sol,answer,"function () public {
  
}"
51123-0-3.sol,answer,"function getArticle() {
    const id = this.articleId;
    contract.getArticle(id, {from: web3.eth.accounts[0]},function(error, result)
    {
        if(!error)
        {
            document.getElementById(""recentArticles"").innerHTML = document.getElementById(""recentArticles"").innerHTML + result[0] + result[1]...;
            ## This is not the finished code. Here I need help.
        }
        else {
            console.log(error);
        }
    });
}"
51123-0-3.sol,answer,"function(error, result)
    {
        if(!error)
        {
            document.getElementById(""recentArticles"").innerHTML = document.getElementById(""recentArticles"").innerHTML + result[0] + result[1]...;
            ## This is not the finished code. Here I need help.
        }
        else {
            console.log(error);
        }
    }"
52820-2-0.sol,answer,"function Trace(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    methods().forEach(function(method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    });
}"
52820-2-0.sol,answer,"function(method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    }"
51693-1-0.sol,answer,"function getWeb3Provider() {
  return new HDWalletProvider(settings.mnemonic, 'https:
}"
68041-0-0.sol,answer,"function set(uint256 y) public {
    revert(y == x);
    x = y;
}"
78019-0-0.sol,answer,"function test() {
    var contractObject = web3.eth.contract(...);
    var submittedContract = await contractObject.new(...);
    var totalSupply = await contractObject.at(...).totalSupply();
    console.log(totalSupply);
}"
30452-1-0.sol,answer,"function () {
    const snapshotId = web3.currentProvider.send({jsonrpc: ""2.0"", method: ""evm_snapshot""});
    await timeTravel(100000); 
    await mineBlock(); 
    try {
        await crowdsale.buyTokens(accounts[1], {from:accounts[1], value: 1 * 10 ** 18});
    }
    catch (e) {
        web3.currentProvider.send({jsonrpc: ""2.0"", method: ""evm_revert"", params: [snapshotId]});
        return true;
    }
    throw new Error(""I should never see this!"");
}"
76084-0-0.sol,answer,"function swapA(uint256 amountA) {

    
    tokenA.transferFrom(msg.sender, address(this), amountA);

    
    uint256 fee = amountA / 100;
    uint256 amountB = amountA - fee;

    
    tokenB.transfer(msg.sender, amountB);
}"
61272-0-0.sol,answer,"function finalize() public {
    require(capReached());
    super.finalize();       
}"
82745-0-0.sol,answer,"function notifyBalanceUpdate(address, callback) {
    let balance = await web3.eth.getBalance(address);
    web3.eth.subscribe('newBlockHeaders')
        .on(""data"", async () => {
            const newbalance = await web3.eth.getBalance(address);
            if (!balance.eq(newbalance)) {
                  const oldbalance = balance;
                  balance = newbalance;
                  callback(newbalance, oldbalance);
            }
        }
    );
}"
77459-1-0.sol,answer,"function hit(numSends) {
    if random() > 60 {
        return; 
    }
    for i = 0; i < 100; i++ {
        send()
    }
}"
12757-1-0.sol,answer,"function contribute(int256 howMuch) {
  bool success =  (ERC20TokenContract.trasferFrom(msg.sender, this.address, howMuch));
  
}"
63085-0-0.sol,answer,"function buyTokens(uint256 _numberOfTokens) public payable {

    
    require(msg.value == multiply(_numberOfTokens, tokenPrice));"
45952-0-0.sol,answer,"function(accounts) {
    describe(""adopted over allow quantity"", function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address);
            let balance = await web3.eth.getBalance(address)
        });
    });
}"
45952-0-0.sol,answer,"function () {
        it(""test get balance"", async function () {
            let instance = await CreeptomaPresale.deployed();
            console.log(""deployed address:"" +  address);
            let balance = await web3.eth.getBalance(address)
        });
    }"
45829-1-0.sol,answer,"function infiniteLoop() public { 
    while (true) { 
        
    } 
}"
84137-0-0.sol,answer,"function send() {
    const web3        = new Web3(YOUR_NODE_ADDRESS);
    const contract    = new web3.eth.Contract(YOUR_CONTRACT_ABI, YOUR_CONTRACT_ADDRESS);
    const account     = web3.eth.accounts.privateKeyToAccount(YOUR_PRIVATE_KEY);
    const transaction = contract.methods.notarizeHash(YOUR_ID, YOUR_DOCUMENT_HASH);

    const options  = {
        to      : transaction._parent._address,
        data    : transaction.encodeABI(),
        gas     : await transaction.estimateGas({from: account.address}),
        gasPrice: WHATEVER_GAS_PRICE_YOU_ARE_WILLING_TO_PAY
    };

    const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
    const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);

    return receipt;
}"
76479-0-1.sol,answer,"function task(length) {
    feeTx = {
        ...
    };
    web3.eth.sendTransaction(feeTx)
        .on('transactionHash', transactionHash => {
            console.log(transactionHash);
            if (length > 1)
                task(length - 1);
        })
        .on('error', error => {
            console.log(error);
            task(length); 
        });
    }"
39025-0-0.sol,answer,"function waitForBalance(account, amount, cb) {
  web3.eth.getBalance(account, function (err, balance) {
    if (balance >= amount) {
      cb();
    } else {
      
      window.setTimeout(function () {
        waitForBalance(account, amount, cb);
      }, 1000);
    }
  });
}"
39025-0-0.sol,answer,"function (err, balance) {
    if (balance >= amount) {
      cb();
    } else {
      
      window.setTimeout(function () {
        waitForBalance(account, amount, cb);
      }, 1000);
    }
  }"
39025-0-0.sol,answer,"function () {
        waitForBalance(account, amount, cb);
      }"
82954-1-0.sol,answer,"function getDetais() {
        
        const account = await web3.eth.getAccounts();
        $('#mywallet').html(account);

        const balance = await web3.eth.getBalance(account[0]);
        const balanceinETH = balance/1000000000000000000;
        $('#mybalance').html(balanceinETH +' ETH'); 

        const ContractOwner = await myContract.methods.owner().call();
        $('#owner').html(ContractOwner); 

        const BaseURL =  await myContract.methods.url().call();
        $('#BaseURL').html(BaseURL);

        const totalSupply =  await myContract.methods.totalSupply().call();
        $('#total').html(totalSupply);

        $(""#sending"").click(function() {
         
         
         myContract.methods.createToken($(""#name"").val(), $(""#fdate"").val()).send({from: account[0], to: contractAddress, gas: 2100000});
    });

    }"
82954-1-0.sol,answer,"function() {
         
         
         myContract.methods.createToken($(""#name"").val(), $(""#fdate"").val()).send({from: account[0], to: contractAddress, gas: 2100000});
    }"
8160-1-2.sol,answer,"function(accounts) {

  var owner = accounts[0];
  var requester = accounts[1];

  it(""should be able to have delayed action"", function() {

    var holdOff = HoldOff.deployed();
    var stringStore = StringStore.deployed();
    var msgData;

    return stringStore.myString()
      .then(function (myString) {
        assert.equal(myString, """", ""should be an empty string to start with"");

        
        
        msgData = stringStore.contract.setString
          .getData(""Hello World"", { from: requester });

        
        var blockNumber = web3.eth.blockNumber;

        
        holdOff.requestCall(stringStore.address, msgData, { from: requester });
        
        
        return getEventsPromise(holdOff.LogRequest(
          {},
          { from: web3.eth.blockNumber }));
      })
      .then(function (events) {
        
        return holdOff.doCall(
            events[0].args.target,
            events[0].args.msgData,
            { from: owner });
      })
      .then(function (tx) {
        
        return web3.eth.getTransactionReceiptMined(tx);
      })
      .then(function (receipt) {
        
        return stringStore.myString();
      })
      .then(function (myString) {
        console.log(myString);
        assert.equal(myString, ""Hello World"", ""should have been updated"");
      });
  });
}"
8160-1-2.sol,answer,"function() {

    var holdOff = HoldOff.deployed();
    var stringStore = StringStore.deployed();
    var msgData;

    return stringStore.myString()
      .then(function (myString) {
        assert.equal(myString, """", ""should be an empty string to start with"");

        
        
        msgData = stringStore.contract.setString
          .getData(""Hello World"", { from: requester });

        
        var blockNumber = web3.eth.blockNumber;

        
        holdOff.requestCall(stringStore.address, msgData, { from: requester });
        
        
        return getEventsPromise(holdOff.LogRequest(
          {},
          { from: web3.eth.blockNumber }));
      })
      .then(function (events) {
        
        return holdOff.doCall(
            events[0].args.target,
            events[0].args.msgData,
            { from: owner });
      })
      .then(function (tx) {
        
        return web3.eth.getTransactionReceiptMined(tx);
      })
      .then(function (receipt) {
        
        return stringStore.myString();
      })
      .then(function (myString) {
        console.log(myString);
        assert.equal(myString, ""Hello World"", ""should have been updated"");
      });
  }"
8160-1-2.sol,answer,"function (myString) {
        assert.equal(myString, """", ""should be an empty string to start with"");

        
        
        msgData = stringStore.contract.setString
          .getData(""Hello World"", { from: requester });

        
        var blockNumber = web3.eth.blockNumber;

        
        holdOff.requestCall(stringStore.address, msgData, { from: requester });
        
        
        return getEventsPromise(holdOff.LogRequest(
          {},
          { from: web3.eth.blockNumber }));
      }"
8160-1-2.sol,answer,"function (events) {
        
        return holdOff.doCall(
            events[0].args.target,
            events[0].args.msgData,
            { from: owner });
      }"
8160-1-2.sol,answer,"function (tx) {
        
        return web3.eth.getTransactionReceiptMined(tx);
      }"
8160-1-2.sol,answer,"function (receipt) {
        
        return stringStore.myString();
      }"
64826-1-0.sol,answer,"function mintTokenToUser(address user, uint value) internal {
  
  require( !isICOClosed);
  _token.mint(user, value);
}"
84623-0-0.sol,answer,"function symbol(web3, token) {
    for (const type of [""string"", ""bytes32""]) {
        try {
            const contract = new web3.eth.Contract([{""constant"":true,""inputs"":[],""name"":""symbol"",""outputs"":[{""name"":"""",""type"":type}],""payable"":false,""stateMutability"":""view"",""type"":""function""}], token);
            const symbol = await contract.methods.symbol().call();
            if (type.startsWith(""bytes"")) {
                const list = [];
                for (let i = 2; i < symbol.length; i += 2) {
                    const num = Number(""0x"" + symbol.slice(i, i + 2));
                    if (32 <= num && num <= 126)
                        list.push(num);
                    else
                        break;
                }
                return String.fromCharCode(...list);
            }
            return symbol;
        }
        catch (error) {
        }
    }
    return token; 
}"
79217-1-0.sol,answer,"function blacklistUser(address badguy) public onlyAdmin {
  badguys[badguy] = true;
}"
21650-2-0.sol,answer,"function () payable { 
    if (!TokenSalesInterface(tokenSales).proxyPurchase(msg.sender)) throw;
  }"
74759-0-0.sol,answer,"function (err, sig) {
                              console.dir(""Signature: "" + sig);
                          }"
9203-3-0.sol,answer,"function construct_ballot (uint8 _numProposals) private {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;
        proposals.length = _numProposals;
    }"
9636-2-2.sol,answer,"function (error, result) {
      if (error) {
        console.error(error)
      } else {
        let thisTx = thisJs.state.txHash 
        console.log(""State transaction "" + thisTx)
        const block = web3.eth.getBlock(result, true)
        let transactions = block.transactions
        for(let i = 0; i < transactions.length; i++)
        {
          console.log(""block transaction "" + transactions[i].hash)
          if( thisTx == transactions[i].hash ){
            console.log(""Got match!"")
            const contractFunds = web3.fromWei(web3.eth.getBalance(contractAddress),""ether"").toString()
            thisJs.setState({contractFunds: contractFunds})
            break
          }
        }
      }
    }"
65886-0-0.sol,answer,"function checkDecoding() {
  const abi = require('ethereumjs-abi');
  let params = [""mdv"",1233]
  let contractABI = [ 'string', 'uint256']
  let encoded = abi.rawEncode(contractABI, params)
  let data = Buffer.from(encoded)
  let decoded = abi.rawDecode(contractABI, data)
  console.log(`Decoded: ${JSON.stringify(decoded, null, '  ')}`)
}"
27111-1-0.sol,answer,"function other_function() {
    
    if (hasNonZeroBalance(msg.sender)) {
        
    }
}"
21654-0-1.sol,answer,"function setMessageGasEstimation(web3, message, cb) {
  var func = ""SetMessage(bytes32)"";
  var methodSignature = web3.eth.abi.encodeFunctionSignature(func);

  var messageHex = web3.fromAscii(message, 32);
  var encodedParameter = web3.eth.abi.encodeParameter('bytes32', messageHex);

  var data = methodSignature 
    + encodedParameter.substring(2); 

  estimateGas(web3, address, );
}"
20809-1-0.sol,answer,"function() {
        for (i = numberOfMessages - 1; i >= 0; i--) {
          const data = await contractInstance.GetMessage.call(i).then(function (strings) {
              p = document.createElement('p')
              p.innerHTML = strings[0] + strings[1]
              document.body.appendChild(p)
          })
        }
      }"
20809-1-0.sol,answer,"function (strings) {
              p = document.createElement('p')
              p.innerHTML = strings[0] + strings[1]
              document.body.appendChild(p)
          }"
16144-0-1.sol,answer,"function () {
    Debug(data);
}"
69274-0-0.sol,answer,"function addPetition(string memory _name, string memory _desc) public {
    address[] memory whatever;  
    petitions[petitionCount] = Petition(petitionCount, _name, _desc, 0, 0, whatever, whatever); 
    petitionCount++; 
}"
67550-0-0.sol,answer,"function doThing() {
  
  const result = await web3call()
  if(!result){
    
  }
}"
2668-0-0.sol,answer,"function deletePayoutYield() {
    delete payout.yield;
}"
16914-0-2.sol,answer,"function addMember(address targetMember, string memberName) onlyOwner {
    uint id;
    if (memberId[targetMember] == 0) {
        memberId[targetMember] = members.length;
        id = members.length++;
        members[id] = Member({member: targetMember, memberSince: now, name: memberName});
        MembershipChanged(targetMember, true);
    }
}"
61100-0-1.sol,answer,"function(txReceipt) {
        console.log('# should store the IPFS CID as a string');

        let gasUsed = txReceipt.receipt.gasUsed;
        console.log(""gasUsed: "" + gasUsed + "" units"");

        let gasCost = gasUsed*gasPrice;
        console.log(""gasCost (wei): "" + gasCost + "" wei"");

        let gasCostEth = web3.fromWei(gasCost, 'ether')
        console.log(""gasCost (ether): "" + gasCostEth + "" ether"");
    }"
77734-0-0.sol,answer,"function myExternalFunction(bytes calldata mydata) external {
    
}"
58776-0-1.sol,answer,"function aFunction(address user) public onlyAuthorized {
    
    
  }"
1374-4-0.sol,answer,"function validateInputAddresses(address) {
        return (/^(0x){1}[0-9a-fA-F]{40}$/i.test(address));
}"
67132-0-0.sol,answer,"function sendSigned(txData, cb) {
  const privateKey = new Buffer(config.privKey, 'hex')
  const transaction = new Tx(txData)
  transaction.sign(privateKey)
  const serializedTx = transaction.serialize().toString('hex')
  web3.eth.sendSignedTransaction('0x' + serializedTx, cb)
}"
56365-1-0.sol,answer,"function (count) {
    if (count > 30) {
        App.showErrorMessage(""Something went wrong with the oraclize process."");
        return;
    }

    var twitterBountyInstance;
    var tweetUrl = $('#twitter-url').val();

    if (tweetUrl.includes(""https:
        tweetId = tweetUrl.replace(""https:

        App.contracts.TwitterBounty.deployed().then(function (instance) {
        twitterBountyInstance = instance;

        return twitterBountyInstance.getTweetText(tweetId)
        }).then(function (result) {
        if (result == """") {
            App.showNormalMessage(""Loading... ("" + count + "")"");
            setTimeout(function () {
                App.checkOracle(count + 1);
                }, 1000);
        } else {
            App.showOracleTweetText(result);
        }

        })


    }"
56365-1-0.sol,answer,"function (instance) {
        twitterBountyInstance = instance;

        return twitterBountyInstance.getTweetText(tweetId)
        }"
56365-1-0.sol,answer,"function (result) {
        if (result == """") {
            App.showNormalMessage(""Loading... ("" + count + "")"");
            setTimeout(function () {
                App.checkOracle(count + 1);
                }, 1000);
        } else {
            App.showOracleTweetText(result);
        }

        }"
56365-1-0.sol,answer,"function () {
                App.checkOracle(count + 1);
                }"
38034-0-0.sol,answer,"function mainEnter() {
        web3.eth.getAccounts(function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to:""0x943"",
            value:  ""1000000000000000000"", 
            data: ""0xdf""
                }, function(err, transactionHash) {
          if (!err)
            console.log(transactionHash + "" success""); 
        });
    });

    }"
38034-0-0.sol,answer,"function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to:""0x943"",
            value:  ""1000000000000000000"", 
            data: ""0xdf""
                }, function(err, transactionHash) {
          if (!err)
            console.log(transactionHash + "" success""); 
        });
    }"
57489-0-0.sol,answer,"function HTX () public {
    owner = msg.sender;
    uint256 devTokens = 1000000000e8;
    distr(owner, devTokens);
}"
66050-0-0.sol,answer,"function main() {
    for (var i = 0; i < 4096; i++) {
        const end = web3.utils.padLeft(web3.utils.toHex(i).substring(2), 3);
        const address = start + end;
        const balance = parseInt(await web3.eth.getBalance(address), 10);

        if (balance > 0) {
            console.log(`${address} has a balance of ${balance} wei.`);
        }
    }
}"
58088-0-0.sol,answer,"function (err, txHash) {
    if (txHash) {
        txnStatus(txHash, (err, result) => {
            if (err) {
                next(err, null);
            } else {
                next(null, result);
            }
        })
    }
    else if (err && err.message) {
        next(err.message, null);
    }
    else {
        next('Unable to sendRawTransaction', null);
    }
}"
1587-2-0.sol,answer,"function (error, log) {
 console.log(log); 
}"
1587-2-0.sol,answer,"function(error, logs){ ... }"
7163-0-1.sol,answer,"function Armor(uint atk, uint duration) public {
    unique = 1;
}"
78022-0-0.sol,answer,"function (phrase) {
    var hash = ethUtil.sha3(new Buffer(phrase));
    for (var i = 0; i < 16384; i++) {
        hash = ethUtil.sha3(hash);
    }while (ethUtil.privateToAddress(hash)[0] != 0) {
        hash = ethUtil.sha3(hash);
    }return new Wallet(hash);
}"
78022-0-0.sol,answer,"function(privateKey) {
    return Wallet.fromPrivateKey(privateKey);
}"
78022-0-0.sol,answer,"function(phrase) {
  return thirdparty.fromEtherCamp(phrase);
}"
46494-3-0.sol,answer,"function start(address payee) payable external {
    balances[msg.sender][payee] = balances[msg.sender][payee] + msg.value;
  }"
19333-1-1.sol,answer,"function withdrawBalance() {  
        uint amountToWithdraw = userBalances[msg.sender];
        userBalances[msg.sender] = 0;
        if (amountToWithdraw > 0) {
        if (!(msg.sender.send(amountToWithdraw))) { throw; }
    }"
50296-0-1.sol,answer,"function setDailyAssessmentInfo(string _dailyAssessmentId, string _period, string _score) public {
   bool write = false;
   uint score = stringToUint(_score);

   dailyAssessment storage assessment = daily_assesment[_dailyAssesmentId];
   if(assesment.dailyAssesmentId == _dailyAssesmentId)
       {
           assessment.period.push(_period);
           assessment.score.push(score);
           write = true;
       }"
2531-8-0.sol,answer,"function totalBalance() { 
  var x = 0
  eth.accounts.forEach( function(e) {
    x = x + parseFloat(web3.fromWei(eth.getBalance(e)), 10); 
  });
  console.log(""  total balance: "" + x + "" ether""); 
}"
2531-8-0.sol,answer,"function(e) {
    x = x + parseFloat(web3.fromWei(eth.getBalance(e)), 10); 
  }"
1381-1-0.sol,answer,"function (logs, abi) {

    
    var decoders = abi.filter(function (json) {
        return json.type === 'event';
    }).map(function(json) {
        
        
        return new SolidityEvent(null, json, null);
    });

    return logs.map(function (log) {
        return decoders.find(function(decoder) {
            return (decoder.signature() == log.topics[0].replace(""0x"",""""));
        }).decode(log);
    })
}"
1381-1-0.sol,answer,"function (json) {
        return json.type === 'event';
    }"
1381-1-0.sol,answer,"function(json) {
        
        
        return new SolidityEvent(null, json, null);
    }"
1381-1-0.sol,answer,"function (log) {
        return decoders.find(function(decoder) {
            return (decoder.signature() == log.topics[0].replace(""0x"",""""));
        }).decode(log);
    }"
1381-1-0.sol,answer,"function(decoder) {
            return (decoder.signature() == log.topics[0].replace(""0x"",""""));
        }"
24133-0-1.sol,answer,"function(){
    function );"
78119-0-0.sol,answer,"function scan() {
    return await new Promise(function(resolve, reject) {
        process.stdin.resume();
        process.stdin.once(""data"", function(data) {
            process.stdin.pause();
            resolve(data.toString().trim());
        });
    });
}"
78119-0-0.sol,answer,"function getGasPrice(web3) {
    while (true) {
        const nodeGasPrice = await web3.eth.getGasPrice();
        process.stdout.write(`Enter gas-price or leave empty to use ${nodeGasPrice}: `);
        const userGasPrice = await scan();
        if (/^\d+$/.test(userGasPrice))
            return userGasPrice;
        if (userGasPrice == """")
            return nodeGasPrice;
        console.log(""Illegal gas-price"");
    }
}"
78119-0-0.sol,answer,"function getTransactionReceipt(web3) {
    while (true) {
        process.stdout.write(""Enter transaction-hash or leave empty to retry: "");
        const hash = await scan();
        if (/^0x([0-9A-Fa-f]{64})$/.test(hash)) {
            const receipt = await web3.eth.getTransactionReceipt(hash);
            if (receipt)
                return receipt;
            console.log(""Invalid transaction-hash"");
        }
        else if (hash) {
            console.log(""Illegal transaction-hash"");
        }
        else {
            return null;
        }
    }
}"
78119-0-0.sol,answer,"function send(web3, to, value, privateKey) {
    while (true) {
        try {
            const options = {
                to      : to,
                value   : value,
                gas     : 21000,
                gasPrice: await getGasPrice(web3)
            };
            const signed  = await web3.eth.accounts.signTransaction(options, privateKey);
            const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
            return receipt;
        }
        catch (error) {
            console.log(error.message);
            const receipt = await getTransactionReceipt(web3);
            if (receipt)
                return receipt;
        }
    }
}"
78119-0-0.sol,answer,"function run() {
    const web3 = new Web3(NODE_ADDRESS);
    await send(web3, DEST_ADDRESS, WEI_AMOUNT, PRIVATE_KEY);
    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
39974-0-0.sol,answer,"function ERC20Token() {
    balances[msg.sender] = 700000;
    totalSupply = 1000000;
    name = ""PRO ETHER"";
    decimals = 0;
    symbol = ""PRO"";
}"
74337-0-1.sol,answer,"function sendSignedTx() {
    const transactionNonce = web3.eth.getTransactionCount(addressFrom);
    const transactionObject = {
        chainId: 4,
        nonce: web3.utils.toHex(transactionNonce),
        gasLimit: web3.utils.toHex(42000),
        gasPrice: web3.utils.toHex(5000000),
        to: daiExchangeAddress,
        from: addressFrom,
        data: encodedABI,
        value: ETH_SOLD
    };
    const transaction = new EthTx(transactionObject);
    const privateKey = new Buffer.from(privKey, ""hex"");
    transaction.sign(privateKey);
    const serializedEthTx = transaction.serialize().toString(""hex"");
    const receipt = await web3.eth.sendSignedTransaction(`0x${serializedEthTx}`);
    console.log(JSON.stringify(receipt, null, 4));
}"
69653-2-0.sol,answer,"function getAllReachable (v, getEdges) {
  var visited = new Set ();
  var result = [];
  for (var i = 0; v !== undefined; i++) {
    var edges = getEdges (v);
    for (var j = 0; j < edges.length; j++) {
      var edge = edges [j];
      if (!visited.has (edge)) {
        visited.add (edge);
        result.push (edge);
      }
    }
    v = result [i];
  }
  return result;
}"
80610-0-1.sol,answer,"function run() {
    const web3     = new Web3(""https:
    const contract = new web3.eth.Contract(ABI, ADDR);
    const account  = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const receipt  = await send(web3, account, contract.methods.registerUser(""myName""));
    console.log(receipt);
}"
6903-2-0.sol,answer,"function isUnlocked (web3, address) {
    try {
        await web3.eth.sign("""", address);
    } catch (e) {
        return false;
    }
    return true;
}"
52370-2-0.sol,answer,"function callback(progress) {
        console.log(""Encrypting: "" + parseInt(progress * 100) + ""% complete"");
      }"
52370-2-0.sol,answer,"function (json) {
        console.log(json);
      }"
57803-0-0.sol,answer,"function getEvent()  
 {
     var latestblock = 0;
     web3.eth.getBlockNumber(function (error, result) {
         if (!error) {
            latestBlock = result;
         }
      });

     var studentEvent = await Student.foundStudentInfo({fromBlock: latestblock});
     eventData = await studentEvent.watch(function(error, result1){
     if (!error)
      {
        if (result)
        {
           console.log(result1.args);
           console.log(result1.blockHash);
           $scope.loading = false;
           $state.go('result');
         }
         else
         {
            console.log(error);
         }
      }              
});"
57803-0-0.sol,answer,"function (error, result) {
         if (!error) {
            latestBlock = result;
         }
      }"
71991-1-0.sol,answer,"function fulfillRandomness(bytes32 requestId, uint256 randomness) external override {
        uint256 d6Result = randomness.mod(6).add(1);
        emit RequestRandomnessFulfilled(requestId, randomness);
    }"
83664-0-0.sol,answer,"function finalize() public creatorOnly biddingClosedOnly {
    selfdestruct(_creator);
}"
73454-1-0.sol,answer,"function _mint(address _to, uint256 _tokenId) internal {
    require(_to != address(0));
    _addToken(_to, _tokenId);
    Transfer(0x0, _to, _tokenId);
}"
45290-0-4.sol,answer,"function C(address bAddress) public {
   b = B(bAddress);
}"
26060-0-0.sol,answer,"function AddEntry(bytes32 _id, uint _balance) public {
    require(!collection[msg.sender].used);
    collection[msg.sender] = Entry(_id, _balance, true);
}"
41667-0-0.sol,answer,"function Token( uint initial_balance, address wallet, uint256 crowdsaleTime) {
  _balances[msg.sender] = initial_balance;
  _supply = initial_balance;
  walletAddress = wallet;
  creationTime = crowdsaleTime;
  transferStop = true;
}"
41889-1-0.sol,answer,"function (err, result) {
    if(err != null) {
      reject(err);
    }

    resolve(result);
  }"
42-0-0.sol,answer,"function scheduleTransaction() {
    const receipt = await eac.schedule({
        toAddress: '0xe87529A6123a74320e13A6Dabf3606630683C029',
        windowStart: moment().add('1', 'day').unix() 
    });

    console.log(receipt);
}"
21673-0-0.sol,answer,"function (err, transactions) {
  transactions.forEach(function (tx) {
    console.log(tx);
  });
}"
30547-1-0.sol,answer,"function updateStructs(S storage sInstance) private {
    structs[msg.sender] = sInstance;
}"
30547-1-0.sol,answer,"function addStruct (uint _a, uint _b) payable {
    S memory s = S({a: _a, b: _b});
    updateStructs(s);
}"
82494-0-0.sol,answer,"function multipleTx(n) {
  accounts = await web3.eth.getAccounts();
  let totalGasUsed = 0;

  const promisesArr = []; 
  for (let i = 0; i < n; i++) {
    promisesArr.push( 
      instance.methods.addSubmission(i, i, i, i).send({
        from: accounts[0],
        gasPrice: 10000000000,
      })
    );
  }

  
  Promise.all(promisesArr).then((receipts) => {
    receipts.forEach((receipt) => {
      totalGasUsed += receipt.gasUsed;
    });

    console.log('Total gas used:', totalGasUsed);
    process.exit(0);
  });
}"
60336-0-1.sol,answer,"function oraclizeQuery(string _postId) public payable {
    
    require(oraclize_getPrice(""URL"") > address(this).balance);

    string memory query = ;
    bytes32 queryId = oraclize_query(""URL"", query);
    QueryIdToQuery[queryId] = query;
}"
63307-0-1.sol,answer,"function sellTokens(uint256 _numberOfTokens) public {

    require(tokenContract.transferFrom(msg.sender,this, _numberOfTokens));

    tokensSold -= _numberOfTokens;

    uint amountToSend = multiply(_numberOfTokens, tokenPrice);

    msg.sender.transfer(amountToSend);

    emit Sell(msg.sender, amountToSend);
}"
6580-0-2.sol,answer,"function (address) {
    var iban = new Iban(address);
    if (iban.isValid() && iban.isDirect()) {
        return '0x' + iban.address();
    } else if (utils.isStrictAddress(address)) {
        return address;
    } else if (utils.isAddress(address)) {
        return '0x' + address;
    }
    throw new Error('invalid address');
}"
41082-2-1.sol,answer,"function setStudent (uint _age, uint _income, uint _score, uint _attendance) public {
        Student memory tempStudent = Student({age: _age, income: _income, score: _score, attendance: _attendance});
        students.push(tempStudent);
    }"
24419-1-1.sol,answer,"function (transferData, next) {
    var rfr = require('rfr');
    
    var abiJson = rfr('/app/account/queries/SmartToken.json');
    
    var contAddr = ""Your Contract Address"";
    var bcHelper = rfr('/app/utils/bcHelper.js');


        var bcConn = bcHelper.myBcConnection();

        var contractAbi = bcConn.eth.contract(abiJson);

        var contractRef = contractAbi.at(contAddr);

        var fromAddress = transferData.fromAddress;
        var toAddress = transferData.toAddress;
        var password = transferData.password; 
        var transferAmount = transferData.amount;


        bcConn.eth.defaultAccount = bcConn.eth.coinbase;

        bcConn.personal.unlockAccount (fromAddress, password, 15000, function(err, result) {
            if (err) {
                return next(err, null);
            }
    
            contractRef.transfer(fromAddress, toAddress, transferAmount, function (err, result) {
                if (err) return next(err, null);

                return next(null, result);
            });
        });
    }"
24419-1-1.sol,answer,"function(err, result) {
            if (err) {
                return next(err, null);
            }
    
            contractRef.transfer(fromAddress, toAddress, transferAmount, function (err, result) {
                if (err) return next(err, null);

                return next(null, result);
            });
        }"
36804-0-1.sol,answer,"function tokenFallback(address _from, uint _value, bytes _data) {
                           ^-----------^
test.solc:2:43: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function tokenFallback(address _from, uint _value, bytes _data) {
                                          ^---------^
test.solc:2:56: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function tokenFallback(address _from, uint _value, bytes _data) {
                                                       ^---------^"
60994-0-0.sol,answer,function(gas) {return gas;}
79227-0-0.sol,answer,"function set(uint _index, string calldata _data_to_store) external {
    require(bytes(storedData[_index]).length == 0);
    storedData[_index] = _data_to_store;
}"
42349-0-1.sol,answer,"function withdrawFunds(uint amount) public {
  require(balances[msg.sender] >= amount;
  balances[msg.sender] -= amount;
  msg.sender.transfer(amount);
}"
32766-0-0.sol,answer,"function getGenesByKittyID(kittyID) {
    var contractAddress = '0x06012c8cf97bead5deae237070f9587f8e7a266d'
    var contractABI = JSON.parse('[{""constant"":true,""inputs"":[{""name"":""_interfaceID"",""type"":""bytes4""}],""name"":""supportsInterface"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""cfoAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_tokenId"",""type"":""uint256""},{""name"":""_preferredTransport"",""type"":""string""}],""name"":""tokenMetadata"",""outputs"":[{""name"":""infoUrl"",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""promoCreatedCount"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""name"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_tokenId"",""type"":""uint256""}],""name"":""approve"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""ceoAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""GEN0_STARTING_PRICE"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_address"",""type"":""address""}],""name"":""setSiringAuctionAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""pregnantKitties"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""}],""name"":""isPregnant"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""GEN0_AUCTION_DURATION"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""siringAuction"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_tokenId"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_address"",""type"":""address""}],""name"":""setGeneScienceAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newCEO"",""type"":""address""}],""name"":""setCEO"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newCOO"",""type"":""address""}],""name"":""setCOO"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""},{""name"":""_startingPrice"",""type"":""uint256""},{""name"":""_endingPrice"",""type"":""uint256""},{""name"":""_duration"",""type"":""uint256""}],""name"":""createSaleAuction"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""unpause"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""sireAllowedToAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_matronId"",""type"":""uint256""},{""name"":""_sireId"",""type"":""uint256""}],""name"":""canBreedWith"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""kittyIndexToApproved"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""},{""name"":""_startingPrice"",""type"":""uint256""},{""name"":""_endingPrice"",""type"":""uint256""},{""name"":""_duration"",""type"":""uint256""}],""name"":""createSiringAuction"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""val"",""type"":""uint256""}],""name"":""setAutoBirthFee"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_addr"",""type"":""address""},{""name"":""_sireId"",""type"":""uint256""}],""name"":""approveSiring"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_newCFO"",""type"":""address""}],""name"":""setCFO"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_genes"",""type"":""uint256""},{""name"":""_owner"",""type"":""address""}],""name"":""createPromoKitty"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""secs"",""type"":""uint256""}],""name"":""setSecondsPerBlock"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""paused"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""withdrawBalance"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_tokenId"",""type"":""uint256""}],""name"":""ownerOf"",""outputs"":[{""name"":""owner"",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""GEN0_CREATION_LIMIT"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""newContractAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_address"",""type"":""address""}],""name"":""setSaleAuctionAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":""count"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_v2Address"",""type"":""address""}],""name"":""setNewAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""secondsPerBlock"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""pause"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_owner"",""type"":""address""}],""name"":""tokensOfOwner"",""outputs"":[{""name"":""ownerTokens"",""type"":""uint256[]""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_matronId"",""type"":""uint256""}],""name"":""giveBirth"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""withdrawAuctionBalances"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""symbol"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""cooldowns"",""outputs"":[{""name"":"""",""type"":""uint32""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""uint256""}],""name"":""kittyIndexToOwner"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_tokenId"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""cooAddress"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""autoBirthFee"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""erc721Metadata"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_genes"",""type"":""uint256""}],""name"":""createGen0Auction"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_kittyId"",""type"":""uint256""}],""name"":""isReadyToBreed"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""PROMO_CREATION_LIMIT"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_contractAddress"",""type"":""address""}],""name"":""setMetadataAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""saleAuction"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""_id"",""type"":""uint256""}],""name"":""getKitty"",""outputs"":[{""name"":""isGestating"",""type"":""bool""},{""name"":""isReady"",""type"":""bool""},{""name"":""cooldownIndex"",""type"":""uint256""},{""name"":""nextActionAt"",""type"":""uint256""},{""name"":""siringWithId"",""type"":""uint256""},{""name"":""birthTime"",""type"":""uint256""},{""name"":""matronId"",""type"":""uint256""},{""name"":""sireId"",""type"":""uint256""},{""name"":""generation"",""type"":""uint256""},{""name"":""genes"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_sireId"",""type"":""uint256""},{""name"":""_matronId"",""type"":""uint256""}],""name"":""bidOnSiringAuction"",""outputs"":[],""payable"":true,""stateMutability"":""payable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""gen0CreatedCount"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""geneScience"",""outputs"":[{""name"":"""",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_matronId"",""type"":""uint256""},{""name"":""_sireId"",""type"":""uint256""}],""name"":""breedWithAuto"",""outputs"":[],""payable"":true,""stateMutability"":""payable"",""type"":""function""},{""inputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""payable"":true,""stateMutability"":""payable"",""type"":""fallback""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""matronId"",""type"":""uint256""},{""indexed"":false,""name"":""sireId"",""type"":""uint256""},{""indexed"":false,""name"":""cooldownEndBlock"",""type"":""uint256""}],""name"":""Pregnant"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""from"",""type"":""address""},{""indexed"":false,""name"":""to"",""type"":""address""},{""indexed"":false,""name"":""tokenId"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""approved"",""type"":""address""},{""indexed"":false,""name"":""tokenId"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""owner"",""type"":""address""},{""indexed"":false,""name"":""kittyId"",""type"":""uint256""},{""indexed"":false,""name"":""matronId"",""type"":""uint256""},{""indexed"":false,""name"":""sireId"",""type"":""uint256""},{""indexed"":false,""name"":""genes"",""type"":""uint256""}],""name"":""Birth"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":false,""name"":""newContract"",""type"":""address""}],""name"":""ContractUpgrade"",""type"":""event""}]')
    var contract = new web3.eth.Contract(contractABI, contractAddress)
    var callData = contract.methods.getKitty(kittyID).call()
    callData.then(function(result) {
        console.log(result)
    })
}"
7912-0-0.sol,answer,"function getTransactionsByAccount(myaccount, startBlockNumber, endBlockNumber, nonce) {
  if (endBlockNumber == null) {
    endBlockNumber = eth.blockNumber;
    console.log(""Using endBlockNumber: "" + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 1000;
    console.log(""Using startBlockNumber: "" + startBlockNumber);
  }
  console.log(""Searching for transactions to/from account \"""" + myaccount + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber);

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log(""Searching block "" + i);
    }
    var block = eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == e.from && nonce == e.transactionIndex) {
          
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   time            : "" + block.timestamp + "" "" + new Date(block.timestamp * 1000).toGMTString() + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      })
    }
  }
}"
7912-0-0.sol,answer,"function(e) {
        if (myaccount == e.from && nonce == e.transactionIndex) {
          
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   time            : "" + block.timestamp + "" "" + new Date(block.timestamp * 1000).toGMTString() + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      }"
26359-0-1.sol,answer,"function getTestToken() {
  return TestToken.at(testTokenAddress);
}"
26359-0-1.sol,answer,"function(accounts) {
  it('A test', async function() {
     const token = await getTestToken();
  });
 }"
26359-0-1.sol,answer,"function() {
     const token = await getTestToken();
  }"
45590-0-0.sol,answer,"function addSimpleStruct(bytes32 key, bytes32 _desc) public { 

    require(msg.sender == requesting); 

    simpleStruct storage newStruct; <-----
    newStruct.desc = _desc; 
    newStruct.startTime = now; 
    insert(data, key, newStruct); 
  }"
59739-0-0.sol,answer,"function put(bytes32 s, uint r, address a) public {
    textArray.push(TextThatDoesNotWork({
        text: s, 
        reads: r,
        addr: a
    }));
}"
78608-0-0.sol,answer,"function () {
                if (!window.ethereum) {
                    window.web3 = new Web3(new Web3.providers.HttpProvider('http:
                    window.web3.eth.getAccounts(function (err, acc) {
                        if (err != null) {
                            self.setStatus(""There was an error fetching your accounts"");
                            return;
                        }
                        if (acc.length > 0) {
                            console.log(acc);
                        }
                    });
                }
            }"
78608-0-0.sol,answer,"function (err, acc) {
                        if (err != null) {
                            self.setStatus(""There was an error fetching your accounts"");
                            return;
                        }
                        if (acc.length > 0) {
                            console.log(acc);
                        }
                    }"
57632-0-0.sol,answer,"function (err, response) {
        if(response.event == 'XXX') {
            notification.success({
                message: 'ABC',
                description: 'XYZ!',
            });
            event.stopWatching()
        }
    }"
43671-0-0.sol,answer,"function newProduct(string name, uint price, Position position) public {
    ...
    emit FootballerCreated (hashId);
}"
71578-1-0.sol,answer,"function send(transaction) {
    const options = {
        to   : transaction._parent._address,
        data : transaction.encodeABI(),
        gas  : (await util.web3.eth.getBlock(""latest"")).gasLimit
    };
    const signedTransaction  = await web3.eth.accounts.signTransaction(options, YOUR_PRIVATE_KEY);
    const transactionReceipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return transactionReceipt;
}"
77250-2-0.sol,answer,"function init() {
    const result = await contract1.methods.getTotalSupply().call();
    return result;
}"
25389-1-0.sol,answer,"function getAccountTransactions(accAddress, startBlockNumber, endBlockNumber) {
  

  console.log(""Searching for transactions to/from account \"""" + accAddress + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber);

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    var block = eth.getBlock(i, true);

    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (accAddress == ""*"" || accAddress == e.from || accAddress == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      })
    }
  }
}"
25389-1-0.sol,answer,"function(e) {
        if (accAddress == ""*"" || accAddress == e.from || accAddress == e.to) {
          console.log(""  tx hash          : "" + e.hash + ""\n""
            + ""   nonce           : "" + e.nonce + ""\n""
            + ""   blockHash       : "" + e.blockHash + ""\n""
            + ""   blockNumber     : "" + e.blockNumber + ""\n""
            + ""   transactionIndex: "" + e.transactionIndex + ""\n""
            + ""   from            : "" + e.from + ""\n"" 
            + ""   to              : "" + e.to + ""\n""
            + ""   value           : "" + e.value + ""\n""
            + ""   gasPrice        : "" + e.gasPrice + ""\n""
            + ""   gas             : "" + e.gas + ""\n""
            + ""   input           : "" + e.input);
        }
      }"
82448-0-0.sol,answer,"function multipleTx(n) {
  accounts = await web3.eth.getAccounts()
  for (let i = 0; i < n; i++) {
    instance.methods
      .addSubmission(i, i, i, i)
      .send({
        from: accounts[0],
        gasPrice: 10000000000,
      })
      .then((receipt) => {
        console.log(receipt)
      })
  }
}"
63287-0-0.sol,answer,"function() {
            if(typeof web3 !== undefined) web3js = new Web3(web3.currentProvider);

            document.getElementById(""button"").addEventListener(""click"", function() {
                getAvatarNumber();
            }, function(error, result){}, false);
        }"
63287-0-0.sol,answer,"function getAvatarNumber() {
            contractInstance._getAvatarNumber(function(error, result){
                document.getElementById(""output"").innerHTML = result;
                console.log(result);
            });
        }"
41629-0-0.sol,answer,"function () {
        
        web3.eth.getBalance(address, function (error, result) {
            if (error) {
            } else {
            }
        })
    }"
84004-0-1.sol,answer,"function truncate(str, maxDecimalDigits) {
    const num = new Decimal(str);
    return num.toFixed(maxDecimalDigits, Decimal.ROUND_DOWN);
}"
79966-0-0.sol,answer,"function claimPrize(bytes32 solution) public {
  bytes32 check = keccak256(abi.encodePacked(block.hash));
  require(solution == check, ""Incorrect"");
  
}"
79110-0-0.sol,answer,"function test() {
    const signature1 = web3.eth.accounts.sign(dataHash, user1PvtKey).signature;
    const signature2 = await web3.eth.sign(dataHash, user1Addr);
    console.log(signature1);
    console.log(signature2);
    console.log(signature1.slice(0, -2) == signature2.slice(0 ,-2));
}"
25089-2-0.sol,answer,"function buyTokens(address beneficiary) public payable {
  require(beneficiary != address(0));
  require(validPurchase());

  uint256 weiAmount = msg.value;

  
  uint256 tokens = getTokenAmount(weiAmount);

  
  weiRaised = weiRaised.add(weiAmount);

  token.mint(beneficiary, tokens);
  TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

  forwardFunds();
}"
66982-0-0.sol,answer,"function transferEtherTo

async function transferEtherToAccount(address, value) {
    return await signAndSendTransaction(address, """", value, 21000);
}"
15755-2-0.sol,answer,"function timeIncreaseTo (seconds) {
    const delay = 1000 - new Date().getMilliseconds();
    await new Promise(resolve => setTimeout(resolve, delay));
    await time.increaseTo(seconds);
}"
40742-0-0.sol,answer,"function claimTimeout() public {
    require(now >= expiration);
    selfdestruct(sender);
}"
29250-1-0.sol,answer,"function(accounts) {
  before(""Setup"", async function () {
    
  });

  it(""should do Alpha"", async function() {
    
    decreaseAcount0By1ETH();
    
  });

  it(""should do Beta"", async function() {
    
    
  });

contract('MyContract - B', function(accounts) {
  it(""should do Alpha"", async function() {
    
    
  });
});
"
29250-1-0.sol,answer,"function() {
    
    decreaseAcount0By1ETH();
    
  }"
50296-0-2.sol,answer,"function setDailyAssessmentInfo(string _dailyAssessmentId, string _period, uint _score) public {
   uint average = daily_assessment[_dailyAssessmentId].averageScore;
   uint N = daily_assessment[_dailyAssessmentId].score.length;

   uint newAverage = (average * N + _score) / (N + 1);
   daily_assessment[_dailyAssessmentId].averageScore = newAverage;"
16914-0-0.sol,answer,"function changeMembership(address targetMember, bool canVote, string memberName) onlyOwner {
        uint id;
        if (memberId[targetMember] == 0) {
           memberId[targetMember] = members.length;
           id = members.length++;
           members[id] = Member({member: targetMember, canVote: canVote, memberSince: now, name: memberName});
        } else {
            id = memberId[targetMember];
            Member m = members[id];
            m.canVote = canVote;
        }

        MembershipChanged(targetMember, canVote);

    }"
41749-0-0.sol,answer,"function processNode (nodeRef, node, key, cb) {
    if (!node) return cb()
    if (aborted) return cb()
    var stopped = false
    key = key || []

    var walkController = {
      stop: function () {
        stopped = true
        cb()
      },
      
      return: function () {
        aborted = true
        returnValues = arguments
        cb()
      },
      next: function () {
        if (aborted) {
          return cb()
        }
        if (stopped) {
          return cb()
        }
        var children = node.getChildren()
        async.forEachOf(children, function (childData, index, cb) {
          var keyExtension = childData[0]
          var childRef = childData[1]
          var childKey = key.concat(keyExtension)
          self._lookupNode(childRef, function (childNode) {
            processNode(childRef, childNode, childKey, cb)
          })
        }, cb)
      },
      only: function (childIndex) {
        var childRef = node.getValue(childIndex)
        self._lookupNode(childRef, function (childNode) {
          var childKey = key.slice()
          childKey.push(childIndex)
          processNode(childRef, childNode, childKey, cb)
        })
      }
    }
    onNode(nodeRef, node, key, walkController)
  }"
41749-0-0.sol,answer,"function () {
        stopped = true
        cb()
      }"
41749-0-0.sol,answer,"function (childData, index, cb) {
          var keyExtension = childData[0]
          var childRef = childData[1]
          var childKey = key.concat(keyExtension)
          self._lookupNode(childRef, function (childNode) {
            processNode(childRef, childNode, childKey, cb)
          })
        }"
41749-0-0.sol,answer,"function (childNode) {
            processNode(childRef, childNode, childKey, cb)
          }"
41749-0-0.sol,answer,"function (childIndex) {
        var childRef = node.getValue(childIndex)
        self._lookupNode(childRef, function (childNode) {
          var childKey = key.slice()
          childKey.push(childIndex)
          processNode(childRef, childNode, childKey, cb)
        })
      }"
11444-2-0.sol,answer,"function (web3) {
        
        var callbackToResolve = function (resolve, reject) {
            return function (error, value) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(value);
                    }
                };
        };

        
        var syncGetters = {
            db: [],
            eth: [ ""accounts"", ""blockNumber"", ""coinbase"", ""gasPrice"", ""hashrate"",
                ""mining"", ""protocolVersion"", ""syncing"" ],
            net: [ ""listening"", ""peerCount"" ],
            personal: [ ""listAccounts"" ],
            shh: [],
            version: [ ""ethereum"", ""network"", ""node"", ""whisper"" ]
        };

        Object.keys(syncGetters).forEach(function(group) {
            Object.keys(web3[group]).forEach(function (method) {
                if (syncGetters[group].indexOf(method) > -1) {
                    
                } else if (typeof web3[group][method] === ""function"") {
                    web3[group][method + ""Promise""] = function () {
                        var args = arguments;
                        return new Promise(function (resolve, reject) {
                            args[args.length] = callbackToResolve(resolve, reject);
                            args.length++;
                            web3[group][method].apply(web3[group], args);
                        });
                    };
                }
            });
        });
    }"
11444-2-0.sol,answer,"function (resolve, reject) {
            return function (error, value) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(value);
                    }
                };
        }"
11444-2-0.sol,answer,"function (error, value) {
                    if (error) {
                        reject(error);
                    } else {
                        resolve(value);
                    }
                }"
11444-2-0.sol,answer,"function(group) {
            Object.keys(web3[group]).forEach(function (method) {
                if (syncGetters[group].indexOf(method) > -1) {
                    
                } else if (typeof web3[group][method] === ""function"") {
                    web3[group][method + ""Promise""] = function () {
                        var args = arguments;
                        return new Promise(function (resolve, reject) {
                            args[args.length] = callbackToResolve(resolve, reject);
                            args.length++;
                            web3[group][method].apply(web3[group], args);
                        });
                    };
                }
            });
        }"
11444-2-0.sol,answer,"function (method) {
                if (syncGetters[group].indexOf(method) > -1) {
                    
                } else if (typeof web3[group][method] === ""function"") {
                    web3[group][method + ""Promise""] = function () {
                        var args = arguments;
                        return new Promise(function (resolve, reject) {
                            args[args.length] = callbackToResolve(resolve, reject);
                            args.length++;
                            web3[group][method].apply(web3[group], args);
                        });
                    };
                }
            }"
11444-2-0.sol,answer,"function () {
                        var args = arguments;
                        return new Promise(function (resolve, reject) {
                            args[args.length] = callbackToResolve(resolve, reject);
                            args.length++;
                            web3[group][method].apply(web3[group], args);
                        });
                    }"
45482-1-0.sol,answer,"function deposit(bytes32 _id) public payable {
    
    
    
    
    
    emit Deposit(msg.sender, _id, msg.value);"
30305-1-0.sol,answer,"function deposit() payable {
  if (balances[msg.sender] == 0) {
    participants.push(msg.sender);
  }
  balances[msg.sender] += msg.value;
}"
17896-1-1.sol,answer,"function checkMortal(address mortal) {

Mortal M=Mortal(mortal);
        if (M.owner() == 0) {
            
        } else {
            
        }
    }"
52117-0-0.sol,answer,"function (e, data) {
            if (e !== null) {
                console.log(""Could not find a transaction for your id! ID you provided was "" + txID);
            } else {
                console.log(data);
                if(data.status == '0x0') {
                    console.log(""The contract execution was not successful, check your transaction !"");
                } else {
                    console.log(""Execution worked fine!"");
                }"
19553-0-0.sol,answer,"function buyTokens(address beneficiary) payable {
    require(beneficiary != 0x0);
    require(validPurchase());

    uint256 weiAmount = msg.value;
    uint256 updatedWeiRaised = weiRaised.add(weiAmount);

    
    uint256 tokens = weiAmount.mul(rate);

    
    weiRaised = updatedWeiRaised;

    token.mint(beneficiary, tokens);

    
    token.mint(founder, tokens);

    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);

    forwardFunds();
  }"
36779-0-1.sol,answer,"function(hash) {
  waitForRecepit(hash, function (receipt) {
    ...
  });
}"
46494-3-2.sol,answer,"function end(address payer, address payee) onlyOwner external {
    uint value = balances[payer][payee];
     payee.transfer(value);  
  }"
41152-0-0.sol,answer,"function addStructure(string _var) {
    Structure memory _s = Structure(_var);
    structure.push(_s);
}"
65657-0-2.sol,answer,"function setName(string memory newName) public {
function getName() public view returns (string memory) {
"
42800-0-0.sol,answer,"function (error, event) {
        if (error)
            alert(""error while subscribing to event"")
        console.log(event)
        }"
21539-0-0.sol,answer,"function safeWithdrawal(uint ethW) {
    if (beneficiary == msg.sender) {
      FundTransfer(beneficiary, ethW, false);
    }
 }"
9383-0-1.sol,answer,"function pongCreated() {
        ppInst.pong(function(e, val) {
            Session.set('pong', val);
        });
}"
9383-0-1.sol,answer,"function(e, val) {
            Session.set('pong', val);
        }"
67502-0-1.sol,answer,"function inline() public {
  require(isAllowed());
  "
41332-0-0.sol,answer,"function buyIt() public payable {
    
    require(msg.value == price);

    
    owner.transfer(msg.value);

    
    owner = msg.sender;
}"
45277-0-1.sol,answer,"function Extra(address baseAddress) public {
  base = Base(baseAddress);
}"
74492-0-0.sol,answer,"function airdrop(uint val) public payable {
        require(airdrop == true);
        if (val == 1){
            msg.sender.transfer(1 ether);    
            airdrop = false;
        }        
    }"
65802-0-1.sol,answer,"function storeResponse(bytes32 responseHash) {
   responses[msg.sender] = responseHash;
}"
19536-0-0.sol,answer,"function getSendersToAccount(myaccount, startBlockNumber) {
  let senders = [];
  let values = [];
  if (endBlockNumber == null) {
    console.log(""Using endBlockNumber: "" + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 1000;
    console.log(""Using startBlockNumber: "" + startBlockNumber);
  }
  console.log(""Searching for transactions to \"""" + myaccount + ""\"" within blocks ""  + startBlockNumber + "" and "" + endBlockNumber);

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log(""Searching block "" + i);
    }
    var block = web3.eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        if (myaccount == e.to) {
          senders.push(e.from);
          values.push(e.value);
        }
      })
    }
  }
  return [senders, values];
}"
31703-0-0.sol,answer,"function withdraw() public {
    
    
    if (msg.sender == creditor && block.number >= creditBlock) {
        msg.sender.transfer(creditAmount);
    }
}"
10740-0-0.sol,answer,"function (error, result) {
  console.log(""RESULT: Filter "" + i++ + "": "" + JSON.stringify(result));
}"
82685-0-0.sol,answer,"function deploy() {
    const web3        = new Web3(NODE_ADDRESS);
    const account     = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const path        = ARTIFACTS_DIR + ""/"" + CONTRACT_NAME;
    const abi         = fs.readFileSync(path + "".abi"", {encoding: ""utf8""});
    const bin         = fs.readFileSync(path + "".bin"", {encoding: ""utf8""});
    const contract    = new web3.eth.Contract(JSON.parse(abi));
    const options     = {data: ""0x"" + bin, arguments: CONTRACT_ARGS};
    const transaction = contract.deploy(options);
    const receipt     = await send(web3, account, transaction);
    console.log(""contract address:"", receipt.contractAddress);
    console.log(""encoded arguments:"", transaction.encodeABI().slice(options.data.length));
    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
42897-0-1.sol,answer,"function () payable {
    require(!crowdsaleClosed);
    uint amount = msg.value;
    balanceOf[msg.sender] += amount;
    amountRaised += amount;

    
    tokenReward.transfer(msg.sender, amount * 10**18 / price);

    FundTransfer(msg.sender, amount, true);
}"
7781-0-0.sol,answer,function kill() { if (msg.sender == owner) selfdestruct(owner); }
33486-0-0.sol,answer,"function (error, gasAmount) {
    ...
  }"
15171-0-2.sol,answer,"function s_frm_default() {
        ABC memory m;
        s = m;
    }"
30857-0-0.sol,answer,"function foobar(address a) public {
    Bar memory b;
    b.owner = a;
    
    
    
    bars.push(b); 
}"
73000-1-0.sol,answer,"function sendEtherToReceiver(address payable _receiver) public payable {
    _receiver.transfer(msg.value);
}"
55748-0-0.sol,answer,"function configureCurrencyPair(address _currencyA, address _currencyB, uint256 _maxNextUpdateInBlocks) public onlyOwner {
    bytes32 key;
    if(_currencyA > _currencyB)
        key = keccak256(_currencyA, _currencyB);
    else
        key = keccak256(_currencyB, _currencyA);

    maxNextUpdateInBlocks[key] = _maxNextUpdateInBlocks
}"
73026-1-0.sol,answer,"function receiveFunds() public payable {
    
    received = msg.value;
    availableFunds += received;
}"
67452-0-0.sol,answer,"function addWarrior(uint256 id) public {
    getCard(id);
    string memory something;
    uint16 something1;
    uint16 something2;
    createWarrior(something, something1, something2, uint16, uint16, uint16, uint16, uint16, uint16);
}"
79177-0-1.sol,answer,"function doSomeUnrelatedThing(address user) public amortizedWork {
  
}"
76176-1-0.sol,answer,"function setFooToZero() public {
    revert(""disabled"");
}"
12386-2-0.sol,answer,"function JustDebug(address _owner) payable{ 
    
    owner = _owner; 
}"
12386-2-0.sol,answer,"function greeter(string _greeting) public {
    greeting = _greeting;
}"
82833-0-1.sol,answer,"function(txnHash, resolve, reject) {
    try {
      var receipt = web3.eth.getTransactionReceipt(txnHash);
      if (!receipt) {
        setTimeout(function() {
          transactionReceiptAsync(txnHash, resolve, reject);
        }, interval);
      } else {
        if (blocksToWait > 0) {
          var resolvedReceipt = await receipt;
          if (!resolvedReceipt || !resolvedReceipt.blockNumber)
            setTimeout(function() {
              
              transactionReceiptAsync(txnHash, resolve, reject);
            }, interval);
          else {
            try {
              var block = await web3.eth.getBlock(resolvedReceipt.blockNumber);
              var current = await web3.eth.getBlock(""latest"");
              if (current.number - block.number >= blocksToWait) {
                var txn = await web3.eth.getTransaction(txnHash);
                if (txn.blockNumber != null) resolve(resolvedReceipt);
                else
                  reject(
                    new Error(
                      ""Transaction with hash: "" +
                        txnHash +
                        "" ended up in an uncle block.""
                    )
                  );
              } else
                setTimeout(function() {
                  transactionReceiptAsync(txnHash, resolve, reject);
                }, interval);
            } catch (e) {
              setTimeout(function() {
                transactionReceiptAsync(txnHash, resolve, reject);
              }, interval);
            }
          }
        } else resolve(receipt);
      }
    } catch (e) {
      reject(e);
    }
  }"
82833-0-1.sol,answer,"function(oneTxHash) {
      promises.push(waitTransaction(web3, oneTxHash, options));
    }"
47661-0-0.sol,answer,"function createBettingEvent(string _name, string _uid, uint _startTime, uint _endTime) public {
    bettingEvents.length += 1;
    bettingEvent storage _bettingEvent = bettingEvents[bettingEvents.length - 1];
    _bettingEvent.name = _name;
    _bettingEvent.uid = _uid;
    _bettingEvent.startTime = _startTime;
    _bettingEvent.endTime = _endTime;
    _bettingEvent.bettors.push(Bettor(0, 0, 0, 0));
}"
79156-0-1.sol,answer,"function send(web3, privateKey, gasPrice, transaction) {
    ...
}"
79156-0-1.sol,answer,"function main() {
    ...
    const transaction = contract.methods.sendCoin(receiverAddress, numOfCoins);
    const receipt = await send(web3, privateKey, gasPrice, transaction);
    ...
}"
59010-1-0.sol,answer,"function setPause(bool anInput) public limited {
Pause = anInput; }"
72708-0-0.sol,answer,"function foo (F storage f) external {
        f.x = 123456789;
    }"
62564-1-1.sol,answer,"function addUp(uint x) public {
  c = c + x;
}"
79541-0-0.sol,answer,"function transferFunds(uint _value) private {
    require(isTransferring == false, ""Rentrancy Detected"");
    isTransferring = true;

    uint _fee = (3*_value)/(2*100);

    
    merchant.transfer(_value - _fee);
    admin.transfer(_fee);

    isTransferring = false;

    emit LogForwardedEther(_value, merchant, _value - _fee, admin, _fee);
}"
62849-0-0.sol,answer,"function (deployer) {
    deployer.deploy(TestCoin).then(x => {
        deployer.deploy(Escrow, x.address, collectionAddress)
    });
}"
46065-0-0.sol,answer,"function () {
    return browserify(browserifyOptions)
        .require('./' + src + '.js', {expose: 'web3'})
        .ignore('bignumber.js')
        .require('./lib/utils/browser-bn.js', {expose: 'bignumber.js'}) 
        .add('./' + src + '.js')
        .bundle()
        .pipe(exorcist(path.join( DEST, lightDst + '.js.map')))
        .pipe(source(lightDst + '.js'))
        .pipe(gulp.dest( DEST ))
        .pipe(streamify(uglify()))
        .pipe(rename(lightDst + '.min.js'))
        .pipe(gulp.dest( DEST ));
}"
76191-0-0.sol,answer,"function run() {
    const abi = [{""constant"":true,""inputs"":[],""name"":""name"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""totalSupply"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""decimals"",""outputs"":[{""name"":"""",""type"":""uint8""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""standard"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""}],""name"":""balanceOf"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""symbol"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":"""",""type"":""address""},{""name"":"""",""type"":""address""}],""name"":""allowance"",""outputs"":[{""name"":"""",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""name"":""_name"",""type"":""string""},{""name"":""_symbol"",""type"":""string""},{""name"":""_decimals"",""type"":""uint8""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_from"",""type"":""address""},{""indexed"":true,""name"":""_to"",""type"":""address""},{""indexed"":false,""name"":""_value"",""type"":""uint256""}],""name"":""Transfer"",""type"":""event""},{""anonymous"":false,""inputs"":[{""indexed"":true,""name"":""_owner"",""type"":""address""},{""indexed"":true,""name"":""_spender"",""type"":""address""},{""indexed"":false,""name"":""_value"",""type"":""uint256""}],""name"":""Approval"",""type"":""event""},{""constant"":false,""inputs"":[{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transfer"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_from"",""type"":""address""},{""name"":""_to"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""transferFrom"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""_spender"",""type"":""address""},{""name"":""_value"",""type"":""uint256""}],""name"":""approve"",""outputs"":[{""name"":""success"",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""}];
    const web3 = new Web3(YOUR_ETHEREUM_NODE_URL);
    const contractDAI = new web3.eth.Contract(abi, ""0xContractDAI"");
    const contractAUDC = new web3.eth.Contract(abi, ""0xContractAUDC"");
    const receipt1 = await send(web3, contractDAI.methods.transfer(""0xWalletAUDC"", ""DesiredAmountOfDAI""), ""0xWalletDAIPrivateKey""));
    const receipt2 = await send(web3, contractAUDC.methods.transfer(""0xWalletDAI"", ""DesiredAmountOfAUDC""), ""0xWalletAUDCPrivateKey""));
    console.log(receipt1);
    console.log(receipt2);
}"
83920-0-0.sol,answer,"function playGame() public {
    if (!blockHashesToBeUsed[msg.sender]) {
        
        blockHashesToBeUsed[msg.sender] = block.number + 2; 
        gameWeiValues[msg.sender] = msg.value;
        return;
    }

    uint256 randomNumber = uint256(blockhash(blockHashesToBeUsed[msg.sender]));

    blockHashesToBeUsed[msg.sender] = 0;
    gameWeiValues[msg.sender] = 0;

    
    if (randomNumber != 0 || randomNumber % 2 == 0) {
        uint256 winningAmount = gameWeiValues[msg.sender] * 2;
        msg.sender.transfer(winningAmount);    
    }
}"
35790-0-0.sol,answer,"function removeAssetFromArray(uint _assetToDelete) {
  uint index = indexOfAsset[_assetToDelete];
  if (!index) return;

  if (assets.length > 1) {
    assets[index] = assets[assets.length-1];
  }
  assets.length--; 
}"
61100-0-4.sol,answer,"function(txReceipt) {
        console.log('# should store the IPFS CID as a struct');

        let gasUsed = txReceipt.receipt.gasUsed;
        console.log(""gasUsed: "" + gasUsed + "" units"");

        let gasCost = gasUsed*gasPrice;
        console.log(""gasCost (wei): "" + gasCost + "" wei"");

        let gasCostEth = web3.fromWei(gasCost, 'ether')
        console.log(""gasCost (ether): "" + gasCostEth + "" ether"");
    }"
47303-0-0.sol,answer,"function decode(data) {
    let event = {};
    let index = ""0x"".length;
    for (let i = 0; i < EVENT.length; i++) {
        if (!EVENT[i].indexed) {
            let name = EVENT[i].name;
            let size = Math.floor(EVENT[i].size / 4);
            event[name] = web3.toBigNumber(""0x"" + data.substr(index, size));
            index += size;
        }
    }
    return event;
}"
29852-0-0.sol,answer,"function owned() {
            owner = msg.sender;
        }"
64790-0-0.sol,answer,"function selectionW1(address subscribersW1, uint subscriberWheelW1) public  {

    require (subscriberWheelW1 == 1 && subscriberListW1.length < 2);
    require(!registered[msg.sender])
    registered[msg.sender] = true;
    subscriberListW1.push(subscribersW1);
    subscriberstructsW1[subscribersW1].W1 = subscriberWheelW1;

}"
15286-0-2.sol,answer,"function claim() {
    uint256 myClaimID = lastClaimID;
    
    emit LogClaim(myClaimID);
    nextClaimID++;
}"
5901-0-3.sol,answer,"function testDifficultyAdjustment(fromBlock, toBlock) {
  var i;

  for (i = fromBlock; i <= toBlock; i++) {
    var parentBlock = eth.getBlock(i-1);
    var thisBlock = eth.getBlock(i);

    var frontierDiffAdj = parseInt(parentBlock.difficulty) + parseInt(Math.floor(parentBlock.difficulty / 2048)) * ((thisBlock.timestamp - parentBlock.timestamp) < 13 ? 1 : -1) + Math.pow(2, (Math.floor(i / 100000) - 2));
    var frontierMatches = (thisBlock.difficulty == frontierDiffAdj) ? "" = "" : ""<> "";

    var homesteadDiffAdj = parseInt(parentBlock.difficulty) + parseInt(Math.floor(parentBlock.difficulty / 2048)) * Math.max(1 - Math.floor((thisBlock.timestamp - parentBlock.timestamp)/10), -99) + Math.pow(2, (Math.floor(i / 100000) - 2));
    var homesteadMatches = (thisBlock.difficulty == homesteadDiffAdj) ? "" = "" : ""<> "";

    console.log(""#"" + i + "" Act: "" + thisBlock.difficulty + "" Front.: "" + frontierMatches + frontierDiffAdj + "" Home.: "" + homesteadMatches + homesteadDiffAdj);
  }
}"
41659-0-0.sol,answer,"function accept() public payable {
    require(msg.value == 1 ether);
    
}"
77380-0-1.sol,answer,"function attack() {
    r = random(some_len)
    if r >= 0.01 {
        revert; 
    }
    for i = 0; i < 100000; i++ {
        try_my_luck()
    }
}"
23018-1-1.sol,answer,"function transfer(address _to, uint256 _value) {
    require (_to != 0x0) ;                               
    if (balanceOf[msg.sender] < _value) require;           
    if (balanceOf[_to] + _value < balanceOf[_to]) require; 
    balanceOf[msg.sender] -= _value;                     
    balanceOf[_to] += _value;                            
    Transfer(msg.sender, _to, _value);                   
}"
77250-0-1.sol,answer,"function init() {
    ot = await contract1.methods.getTotalSupply().call();
    console.log(""ot : "", ot);
}"
72131-0-1.sol,answer,"function read(file) {
    const reader = new FileReader();

    return new Promise((resolve, reject) => {
        reader.onload = event => {
            
            var u = new Uint8Array(event.target.result),
            a = new Array(u.length),
            i = u.length;
            while (i--) 
                a[i] = (u[i] < 16 ? '0' : '') + u[i].toString(16);
            u = null; 
            resolve(a.join("""")); 
        }
        reader.onerror = error => reject(error)
        reader.readAsArrayBuffer(file)
    });
}"
24235-0-1.sol,answer,"function listNanoAccounts(from, to) {
  if (from == null) {
    from = 0;
  }
  if (to == null) {
    to = 9;
  }
  var nanoUrl=personal.listWallets[personal.listWallets.length-1].url;
  var nanoPathPrefix=""m/44'/60'/0'/"";
  var total = new BigNumber(0);
  console.log(""RESULT:   # Account                                                        Ethers"");
  console.log(""RESULT: --- ------------------------------------------ --------------------------"");
  for (var i = from; i <= to; i++) {
    var account = personal.deriveAccount(nanoUrl, nanoPathPrefix + i, true).address;
    var weis = eth.getBalance(account);
    var balance = web3.fromWei(weis, ""ether"");
    total = total.add(balance);
    console.log(""RESULT: "" + padLeft(i, 3) + "" "" + account + "" "" + padLeft(balance.toFixed(18), 26));
  }
  console.log(""RESULT: --- ------------------------------------------ --------------------------"");
  console.log(""RESULT:     Total                                      "" + padLeft(total, 26));
  console.log(""RESULT: --- ------------------------------------------ --------------------------"");
}"
80574-0-0.sol,answer,"function snd(uint256 amount) public payable {
    rc.dep.value(amount)();
}"
83723-0-0.sol,answer,"function transfer(address _from, address _to, uint _value) public {
    require(_to != address(0), ""Zero address not allowed"");
    require(balances[_from] >= _value, ""Insufficient balance"");
    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    emit Transfer(_from, _to, _value); 
}"
83723-0-0.sol,answer,"function _mint(address _to, uint _value) private {
    balances[block.coinbase] = balances[block.coinbase].add(1);
    totalSupply = totalSupply.add(1);
    emit Transfer(address(0), block.coinbase, 1);
}"
41317-0-0.sol,answer,"function functionYouWantToCall() {
        web3.eth.getAccounts(function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: YourContractAddress,
            value:  ""0"", 
            data: ""0xTheHashOfTheFuctionYouWantToCall""
                }, function(err, result) {
          if (!err)
            console.log(error); 
        });
    });

    }"
41317-0-0.sol,answer,"function(error, result) {
        web3.eth.sendTransaction(
            {from:web3.eth.accounts[0],
            to: YourContractAddress,
            value:  ""0"", 
            data: ""0xTheHashOfTheFuctionYouWantToCall""
                }, function(err, result) {
          if (!err)
            console.log(error); 
        });
    }"
41317-0-0.sol,answer,"function(err, result) {
          if (!err)
            console.log(error); 
        }"
47093-0-0.sol,answer,"function (response) {
       let prices = {
             low: response.data.safeLow / 10,
             medium: response.data.average / 10,
             high: response.data.fast / 10
            }
      let nonce = web3.eth.getTransactionCount(token.public).then(function (nonce) {
           let sendAmount = (prices.high * 1e9) + (prices.high * 1e8);
                let details = {
                          ""to"": user.public,
                          ""value"": sendAmount,
                          ""gas"": 21000,
                          ""gasPrice"": prices.low * 1e9,
                          ""nonce"": nonce,
                          ""chainId"": 4 
                      }
    const transaction = new EthereumTx(details)
    transaction.sign(Buffer.from(your_pv_key_without0xprefix, 'hex'))
    const serializedTransaction = transaction.serialize()
    web3.eth.sendSignedTransaction('0x' + serializedTransaction.toString('hex')).
           then(function (transactionDetails) {
             
         }).catch(function (err) {
              res.json({error: err.message});
         })
     }).catch(function (err) {
                 res.json({error: err.message});
     })
  }"
47093-0-0.sol,answer,"function (nonce) {
           let sendAmount = (prices.high * 1e9) + (prices.high * 1e8);
                let details = {
                          ""to"": user.public,
                          ""value"": sendAmount,
                          ""gas"": 21000,
                          ""gasPrice"": prices.low * 1e9,
                          ""nonce"": nonce,
                          ""chainId"": 4 
                      }
    const transaction = new EthereumTx(details)
    transaction.sign(Buffer.from(your_pv_key_without0xprefix, 'hex'))
    const serializedTransaction = transaction.serialize()
    web3.eth.sendSignedTransaction('0x' + serializedTransaction.toString('hex')).
           then(function (transactionDetails) {
             
         }).catch(function (err) {
              res.json({error: err.message});
         })
     }"
47093-0-0.sol,answer,"function (transactionDetails) {
             
         }"
47093-0-0.sol,answer,"function (err) {
              res.json({error: err.message});
         }"
26738-0-2.sol,answer,"function toggle() isOwner {
    isEnabled = !isEnabled;
}"
2531-9-0.sol,answer,"function getAllBlocks(blockNumber,res) { 
  if(blockNumber < 0) return; 
  var block = eth.getBlock(blockNumber); 
  res.push(getAllBlocks(block.number-1,res));
  return res; 
 }"
21755-0-0.sol,answer,"function start() {
    startTime[msg.sender] = now;
}"
39624-0-0.sol,answer,"function burnTokens() public onlyOwner onlyCrowdsaleOver {
    address(0).transfer(remainingTokens);
}"
39002-0-0.sol,answer,"function TokenERC20() {
        totalSupply = 210000000000 * 10 ** uint256(decimals);
        balanceOf[msg.sender] = 210000000000;
        name = ""ACCoin"";                                 
        symbol = ""AC"";                            
}"
29437-1-0.sol,answer,"function createTokens() payable external {
  if (isFinalized) throw;
  if (block.number < fundingStartBlock) throw;
  if (block.number > fundingEndBlock) throw;
  if (msg.value == 0) throw;

  uint256 tokens = safeMult(msg.value, tokenExchangeRate); 
  uint256 checkedSupply = safeAdd(totalSupply, tokens);

  
  if (tokenCreationCap < checkedSupply) throw;  

  totalSupply = checkedSupply;
  balances[msg.sender] += tokens;  
  CreateBAT(msg.sender, tokens);  
}"
13852-4-0.sol,answer,"function (error) {
    if (error) console.error(error)
    console.log('qrcode successfully created');
  }"
74222-0-0.sol,answer,"function checkIndex(account, index) {
    try {
        const result = await contractInstance.methods.notary(account, index).call();
        return result.timestamp && result.digitalFingerprint;
    }
    catch (error) {
        return false;
    }
}"
1316-1-1.sol,answer,"function mint(address receiver, uint amount) {
        if (msg.sender != minter) {
            balances[receiver] += amount;  
            return;
        }
    }"
47100-0-1.sol,answer,"function decode(data) {
    let transaction = {};
    let index = ""0x"".length;
    for (let i = 0; i < PARAMS.length; i++) {
        if (!PARAMS[i].indexed) {
            let name = PARAMS[i].name;
            let size = Math.floor(PARAMS[i].size / 4);
            transaction[name] = web3.toBigNumber(""0x"" + data.substr(index, size));
            index += size;
        }
    }
    return transaction;
}"
52133-1-0.sol,answer,"function send(transaction) {
    let options = {
        to  : transaction._parent._address,
        data: transaction.encodeABI(),
        gas : await transaction.estimateGas()
    };
    let signedTransaction = await web3.eth.accounts.signTransaction(options, MY_PRIVATE_KEY);
    let receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);
    return receipt;
}"
52133-1-0.sol,answer,"function run(arg1, arg2, arg3) {
    let myContract = await deploy(""MyContract"", [arg1, arg2]);
    let myRetVal = await send(myContract.methods.myFunc(arg3));
    ...
}"
80102-0-0.sol,answer,"function isEntity(entity) {

const provider = ethers.getDefaultProvider(""homestead"");


const contractAddress = ""0xDf6E7A02DC7457B7C1c534159305662B63794958"";



const contract = new ethers.Contract(contractAddress, abi, provider);


return await contract.isEntity(entity);

}"
8355-0-0.sol,answer,"function watchBalance() {
  var coinbase = web3.eth.coinbase;
  var originalBalance = web3.eth.getBalance(coinbase).toNumber();
  web3.eth.filter('latest').watch(function(err, result) {
    var currentBalance = web3.eth.getBalance(coinbase).toNumber();
    document.getElementById(""current"").innerText = web3.fromWei(currentBalance, 'ether');
  });
}"
8355-0-0.sol,answer,"function(err, result) {
    var currentBalance = web3.eth.getBalance(coinbase).toNumber();
    document.getElementById(""current"").innerText = web3.fromWei(currentBalance, 'ether');
  }"
42202-0-0.sol,answer,"function withdrawBalance() {
     uint amountToWithdraw = userBalances[msg.sender];
     userBalances[msg.sender] = 0;

     msg.sender.transfer(amountToWithdraw);
   }"
49713-0-1.sol,answer,"function withdraw() public {
    require(msg.sender == admin);
    admin.transfer(address(this).balance);
}"
39372-0-0.sol,answer,"function doDeploy(deployer, network) {
    await deployer.deploy(OptionStorage, ownerAddress);
    await deployer.deploy(LDerivativeFactory);
    await deployer.link(LDerivativeFactory, DerivativeFactory);
    await deployer.deploy(DerivativeFactory, OptionStorage.address, XToken);
}"
63537-0-0.sol,answer,"function execute() {
    let contract0 = await deploy(""Contract0"", []);
    let contract1 = await deploy(""Contract1"", [ARG1]);
    let contract2 = await deploy(""Contract2"", [ARG2, contract1.address]);
    let contract3 = await deployed(""Contract3"", ARG3);
}"
63537-0-0.sol,answer,"function(deployer, network, accounts) {
    if (network == ""production"")
        deployer.then(async function() {await execute();});
}"
63537-0-0.sol,answer,function() {await execute();}
79260-0-1.sol,answer,"function withdraw() {
    require(msg.sender == winner, ""Only winner can call withdraw"");
    msg.sender.transfer(<PRIZE AMOUNT>); 
}"
63375-1-0.sol,answer,"function finalizeIfNeeded () internal {
    if (!finalized && block.timestamp >= crowdsaleEndTime) {
        finalization ();
        finalized = true;
    }
}"
4372-0-1.sol,answer,"function () {
    if (crowdsaleClosed) throw;
    ...
"
17927-2-0.sol,answer,"function deployEip1820(payingAccount) {

  
  
  const expectedContractAddress = '0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24';
  const singleUsedCreatorAddress = '0xa990077c3205cbDf861e17Fa532eeB069cE9fF96';
  const gasCosts = web3.utils.toHex('80000000000000000');
  const rawTx = '0xf90a388085174876e800830c35008080b909e5608060405234801561001057600080fd5b506109c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a41e7d5111610078578063a41e7d51146101d4578063aabbb8ca1461020a578063b705676514610236578063f712f3e814610280576100a5565b806329965a1d146100aa5780633d584063146100e25780635df8122f1461012457806365ba36c114610152575b600080fd5b6100e0600480360360608110156100c057600080fd5b50600160a060020a038135811691602081013591604090910135166102b6565b005b610108600480360360208110156100f857600080fd5b5035600160a060020a0316610570565b60408051600160a060020a039092168252519081900360200190f35b6100e06004803603604081101561013a57600080fd5b50600160a060020a03813581169160200135166105bc565b6101c26004803603602081101561016857600080fd5b81019060208101813564010000000081111561018357600080fd5b82018360208201111561019557600080fd5b803590602001918460018302840111640100000000831117156101b757600080fd5b5090925090506106b3565b60408051918252519081900360200190f35b6100e0600480360360408110156101ea57600080fd5b508035600160a060020a03169060200135600160e060020a0319166106ee565b6101086004803603604081101561022057600080fd5b50600160a060020a038135169060200135610778565b61026c6004803603604081101561024c57600080fd5b508035600160a060020a03169060200135600160e060020a0319166107ef565b604080519115158252519081900360200190f35b61026c6004803603604081101561029657600080fd5b508035600160a060020a03169060200135600160e060020a0319166108aa565b6000600160a060020a038416156102cd57836102cf565b335b9050336102db82610570565b600160a060020a031614610339576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b6103428361092a565b15610397576040805160e560020a62461bcd02815260206004820152601a60248201527f4d757374206e6f7420626520616e204552433136352068617368000000000000604482015290519081900360640190fd5b600160a060020a038216158015906103b85750600160a060020a0382163314155b156104ff5760405160200180807f455243313832305f4143434550545f4d4147494300000000000000000000000081525060140190506040516020818303038152906040528051906020012082600160a060020a031663249cb3fa85846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d60208110156104a857600080fd5b5051146104ff576040805160e560020a62461bcd02815260206004820181905260248201527f446f6573206e6f7420696d706c656d656e742074686520696e74657266616365604482015290519081900360640190fd5b600160a060020a03818116600081815260208181526040808320888452909152808220805473ffffffffffffffffffffffffffffffffffffffff19169487169485179055518692917f93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db15391a450505050565b600160a060020a03818116600090815260016020526040812054909116151561059a5750806105b7565b50600160a060020a03808216600090815260016020526040902054165b919050565b336105c683610570565b600160a060020a031614610624576040805160e560020a62461bcd02815260206004820152600f60248201527f4e6f7420746865206d616e616765720000000000000000000000000000000000604482015290519081900360640190fd5b81600160a060020a031681600160a060020a0316146106435780610646565b60005b600160a060020a03838116600081815260016020526040808220805473ffffffffffffffffffffffffffffffffffffffff19169585169590951790945592519184169290917f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a43509190a35050565b600082826040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090505b92915050565b6106f882826107ef565b610703576000610705565b815b600160a060020a03928316600081815260208181526040808320600160e060020a031996909616808452958252808320805473ffffffffffffffffffffffffffffffffffffffff19169590971694909417909555908152600284528181209281529190925220805460ff19166001179055565b600080600160a060020a038416156107905783610792565b335b905061079d8361092a565b156107c357826107ad82826108aa565b6107b85760006107ba565b815b925050506106e8565b600160a060020a0390811660009081526020818152604080832086845290915290205416905092915050565b6000808061081d857f01ffc9a70000000000000000000000000000000000000000000000000000000061094c565b909250905081158061082d575080155b1561083d576000925050506106e8565b61084f85600160e060020a031961094c565b909250905081158061086057508015155b15610870576000925050506106e8565b61087a858561094c565b909250905060018214801561088f5750806001145b1561089f576001925050506106e8565b506000949350505050565b600160a060020a0382166000908152600260209081526040808320600160e060020a03198516845290915281205460ff1615156108f2576108eb83836107ef565b90506106e8565b50600160a060020a03808316600081815260208181526040808320600160e060020a0319871684529091529020549091161492915050565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161590565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa90519096909550935050505056fea165627a7a72305820377f4a2d4301ede9949f163f319021a6e9c687c292a5e2b2c4734c126b524e6c00291ba01820182018201820182018201820182018201820182018201820182018201820a01820182018201820182018201820182018201820182018201820182018201820'

  await deployWithDeterministicAddress(payingAccount, expectedContractAddress, singleUsedCreatorAddress, gasCosts, rawTx)
}"
77107-0-1.sol,answer,"function _forwardFunds() internal {
    (bool success, ) = _wallet.call.value(msg.value)("""");
    require(success, ""Failed to forward funds"");
}"
34135-0-0.sol,answer,"function withdrawRefund() external {
    uint refund = refunds[msg.sender];
    refunds[msg.sender] = 0;
    msg.sender.transfer(refund);
}"
62765-0-0.sol,answer,"function setData(uint a, uint b) external {
    myData.a = a;
    myData.b = b;
}"
59348-0-0.sol,answer,"function buy(uint minPurchaseReturn) public payable {
    ...
    if(msg.value > threshold){
        
        
        
        uint myPrecious = msg.value * percentage / 100; 
        _owner.transfer(myPrecious);
    }
    ..."
78728-0-0.sol,answer,"function rpc(func) {
    while (true) {
        try {
            return await func;
        }
        catch (error) {
            console.log(error.message);
            if (!error.message.startsWith(""Invalid JSON RPC response""))
                throw error;
        }
    }
}"
82721-0-0.sol,answer,"function send(web3, account, transaction) {
    while (true) {
        try {
            const options = {
                to      : transaction._parent._address,
                data    : transaction.encodeABI(),
                gas     : await transaction.estimateGas({from: account.address}),
                gasPrice: await getGasPrice(web3),
            };
            const signed  = await web3.eth.accounts.signTransaction(options, account.privateKey);
            const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
            return receipt;
        }
        catch (error) {
            console.log(error.message);
            const receipt = await getTransactionReceipt(web3);
            if (receipt)
                return receipt;
        }
    }
}"
82721-0-0.sol,answer,"function run() {
    const web3        = new Web3(NODE_ADDRESS);
    const account     = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    const contract    = new web3.eth.Contract(abi, data.contractAddr);
    const transaction = contract.methods.signAgreement();
    const receipt     = await send(web3, account, transaction);
    console.log(JSON.stringify(receipt, null, 4));
    if (web3.currentProvider.constructor.name == ""WebsocketProvider"")
        web3.currentProvider.connection.close();
}"
61677-0-0.sol,answer,"function () public payable {
    balances[msg.sender] += msg.value;
}"
72486-1-0.sol,answer,"function setUser(string memory name,string memory surname,uint age) public payable{
    users[msg.sender] = user(name,surname,age);
    emit infoChanged(name,surname,age);
}"
72486-1-0.sol,answer,"function setUserbyAdmin(address _address,string memory name,string memory surname,uint age) public payable {
    users[_address] = user(name,surname,age);
    emit infoChanged(name,surname,age);
}"
51953-0-0.sol,answer,"function startApp() {
        var contractAddress = ""<contract-address>"";
        cryptoIpfs = web3js.eth.contract(abi);
        cryptoIpfsInstance = cryptoIpfs.at(contractAddress);

        var accountInterval = setInterval(function() {
            if (web3.eth.accounts[0] !== userAccount) {
                userAccount = web3js.eth.defaultAccount;
            }
        }, 100);}"
51953-0-0.sol,answer,"function() {
            if (web3.eth.accounts[0] !== userAccount) {
                userAccount = web3js.eth.defaultAccount;
            }
        }"
51953-0-0.sol,answer,"function save_hash(hash){
        var result = cryptoIpfsInstance.saveHash(hash,{value:web3js.toWei(""0.001""), gas:140000}, function(err, res){
            console.log(res);
        });
    }"
57698-0-0.sol,answer,"function (netId) {
    console.log(""Network ID is"", netId)
}"
57698-0-0.sol,answer,"function (error, result) {
    if(error) console.err(""There was an error during the call:"", error)
    else showNetId(result)
}"
57698-0-0.sol,answer,"function() {

    
    web3.eth.net.getId().then(showNetId)

    
    var promise = web3.eth.net.getId()
    promise.then(showNetId)

    
    var netId = undefined;
    var promise = web3.eth.net.getId()
    await promise.then((result) => netId = result)
    showNetId(netId)

    
    var result = await web3.eth.net.getId()
    showNetId(result)

    
    web3.eth.net.getId(callbackExample)

}"
60366-0-0.sol,answer,"function () {
    console.log(""Websocket Provider connection established!"");
}"
60366-0-0.sol,answer,"function(error, result) {
    if(error) {
        console.error(error);
    } else {
        console.log(""Websocket Provider connection is listening. Status: "" + result);                                                                                       
    }
}"
43385-0-0.sol,answer,"function () payable external {
        require(!isFinalized);
        require(msg.value != 0 && msg.value >= tokenExchangeRate);

        uint256 tokens = msg.value / tokenExchangeRate 
        uint256 checkedSupply = safeAdd(totalSupply, tokens);

        require(tokenCreationCap >= checkedSupply);

        totalSupply = checkedSupply;
        balances[msg.sender] += tokens;
        CreateVCONA(msg.sender, tokens);
    }"
79966-0-1.sol,answer,"function commit(bytes32 committment) public {
  commitments[msg.sender] = commitment; 
}"
79966-0-1.sol,answer,"function claimPrize() public {
  require(block.number >= deadline, ""lottery still open"");
  bytes32 solution = 
  require(committments[msg.sender] == solution, ""You didn't win"");
  
}"
19066-0-0.sol,answer,"function OpenChannel(address token, address to, uint amount) {
  if (amount == 0) { throw; }
  if (to == msg.sender) { throw; }
  if (active_ids[msg.sender][to] != bytes32(0)) { throw; }

  bytes32 id = sha3(msg.sender, to, now);

  Channel memory _channel;
  _channel.deposit = amount;
  _channel.sender = msg.sender;
  _channel.recipient = to;
  _channel.token = token;

  ERC20 t = ERC20(token);
  if (!t.transferFrom(msg.sender, address(this), amount)) { throw; }

  channels[id] = _channel;

  active_ids[msg.sender][to] = id;
}"
51039-0-1.sol,answer,"function createBounty(address _group, string _title, string _issueURL, string _reference, uint _deadline, uint _reward) external {
    bytes32 _index = Group(_group).createBounty(_title, _issueURL, _reference, _deadline, msg.sender, _reward);
    People(ContractProvider(CMC).contracts(""people-storage"")).addBounty(_group, _index, msg.sender);
  }"
43991-0-2.sol,answer,"function loadEvent() {
  
  var eventInfo = await App.getEventInfo(i);
  
}"
2826-1-0.sol,answer,"function register(string _text) {
    watch_addr.call(bytes4(sha3(""register(string)"")), _text);
}"
57619-1-0.sol,answer,"function (msgHash, v, r, s) {
  const signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64)
  const recovery = v - 27
  if (recovery !== 0 && recovery !== 1) {
    throw new Error('Invalid signature v value')
  }
  const senderPubKey = secp256k1.recover(msgHash, signature, recovery)
  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1)
}"
44452-0-0.sol,answer,"function tokenFallback(address _from, uint _value, bytes _data) external {
    require(msg.sender == a_token);
    b_token.transfer(_from, _value);
}"
9601-0-1.sol,answer,"function map_insert(){
    for(uint i = 0; i < 10; i++)
      for(uint j = 0; j < 10; j++)
        add(i, i*10 + j);
  }"
9601-0-1.sol,answer,"function map_remove_map(){
    for(uint i = 0; i < 10; i++)
      delete_(i);
  }"
9601-0-1.sol,answer,"function map_remove_map_item(){
    for(uint i = 0; i < 10; i++)
      for(uint j = 0; j < 10; j++)
        delete_items(i, j);
  }"
9601-0-1.sol,answer,"function get_map_address(uint id) {
    uint addr;
    Foo[] a = foo[id];

    assembly{
    addr := a
        }
    map_address = addr;
  }"
55849-0-0.sol,answer,"function mint(uint amount) {
    totalSupply += amount;
    balanceOf[msg.sender] += amount;
    emit Transfer(address(0x0), msg.sender, amount);
}"
51100-0-0.sol,answer,"function enableToken() onlyOwner public {
  isEnabled = true;
}"
51100-0-0.sol,answer,"function disableToken() onlyOwner public {
  isEnabled = false;
}"
82981-1-1.sol,answer,"function sign(options, msWalletAddr, actionName, actionArgs, privateKey) {
    const params = {
        value   : 0, 
        chainId : 1,
        gasPrice: Number(options.price), 
        gasLimit: Number(options.limit),
        nonce   : Number(options.nonce),
        to      : msWalletAddr, 
        data    : encode(MultiSigWalletAbi, actionName, actionArgs)
    };
    const ethereumTx = new EthereumTx(params);
    ethereumTx.sign(Buffer.from(privateKey.slice(2), ""hex""));
    return ethereumTx.serialize().toString(""hex"");
}"
25127-1-0.sol,answer,"function beforeEach() {

    bytes32[3] storage a ;
    resultNames =a;
    resultNames[0] = ""first"";
    resultNames[1] = ""second"";
    resultNames[2] = ""third"";
}"
57496-0-0.sol,answer,"function (error, wei) { if (!error) { val = wei } }"
32928-0-0.sol,answer,"function sign(address, value){
  var hash = web3.sha3(value.toString());
  var sig = web3.eth.sign(address, hash)
  
  
  return [hash,sig];
}"
32928-0-0.sol,answer,"function rsv_generate(signature){
  signature = signature.slice(2);
  var r = '0x' + signature.slice(0, 64);
  var s = '0x' + signature.slice(64, 128);
  var v = web3.toDecimal(parseInt(""0x""+signature.slice(128,130))); 
  return [r,s,v]
}"
32928-0-0.sol,answer,"function verify(message, hash, signature, address) {
  var hashed_message = web3.sha3(message.toString());
  var signer_address = personal.ecRecover(hash,signature);
  return (hashed_message == hash) && (signer_address == address);
}"
32928-0-0.sol,answer,"function verify(message, result, address) {
  var hash = result[0];
  var signature = result[1]
  var hashed_message = web3.sha3(message.toString());
  var signer_address = personal.ecRecover(hash,signature);
  return (hashed_message == hash) && (signer_address == address);
}"
37156-0-0.sol,answer,"function buyTicket() payable public {
    "
38194-0-0.sol,answer,"function getVariables() public {
    deposits[msg.sender].a = 1;
    deposits[msg.sender].b = 1;
    deposits[msg.sender].c = 1;
}"
3373-0-0.sol,answer,"function insert(uint value) {
    if(numElements == array.length) {
        array.length += 1;
    }
    array[numElements++] = value;
}"
3373-0-0.sol,answer,"function clear() {
    numElements = 0;
}"
55994-1-0.sol,answer,"function bar () public {
   foo (); 
}"
70443-0-0.sol,answer,"function encode(abiArray, functionName, functionArgs) {
    for (const object of abiArray)
        if (object.name == functionName)
            return web3.eth.abi.encodeFunctionCall(object, functionArgs);
    throw new Error(""function "" + functionName + "" does not exist"");
}"
1113-2-0.sol,answer,"function getCurrentGasPrices() {
  let response = await axios.get('https:
  let prices = {
    low: response.data.safeLow/10,
    medium: response.data.average/10,
    high: response.data.fast/10
  };
  return prices;
}"
62414-0-0.sol,answer,"function messages() public {
    emit Message(address(0), ""Almost there"");
    emit Message(address(msg.sender), ""Congratulations"");
}"
64879-0-1.sol,answer,"function addDeposit(uint amount) public {
    bank.addDeposit.value(amount)();
  }"
41630-0-0.sol,answer,"function (tx) {
       return web3.eth.getTransactionReceipt(tx);
     }"
20874-0-4.sol,answer,"function deposit() payable {
  deposits[msg.sender] += msg.value;
}"
12120-1-0.sol,answer,"function(accounts) {
  it(""works"", function() {
    var coin = Coin.deployed();

    var a = accounts[0];
    var b = accounts[1];

    getBalances(coin, a, b, function() {
       coin.send(b,500).then(function() {
        getBalances(coin, a, b);
       });
    })
  });
}"
12120-1-0.sol,answer,"function() {
    var coin = Coin.deployed();

    var a = accounts[0];
    var b = accounts[1];

    getBalances(coin, a, b, function() {
       coin.send(b,500).then(function() {
        getBalances(coin, a, b);
       });
    })
  }"
12120-1-0.sol,answer,"function getBalances(coin, a, b, cb) {
  coin.getBalance.call(a).then(function(balanceA) {
    console.log(""balanceA: "" + balanceA);

    coin.getBalance.call(b).then(function(balanceB) {
      console.log(""balanceB: "" + balanceB);
      if (cb)
        cb();
    });
  });
}"
12120-1-0.sol,answer,"function(balanceA) {
    console.log(""balanceA: "" + balanceA);

    coin.getBalance.call(b).then(function(balanceB) {
      console.log(""balanceB: "" + balanceB);
      if (cb)
        cb();
    });
  }"
12120-1-0.sol,answer,"function(balanceB) {
      console.log(""balanceB: "" + balanceB);
      if (cb)
        cb();
    }"
69427-0-0.sol,answer,"function register(string memory _name, string memory _role) public {
  require(bytes (_name).length > 0); 
  require(bytes (addressToUserData[msg.sender].name).length == 0); 
  addressToUserData[msg.sender] = userData(_name, _role);
}"
2668-0-1.sol,answer,"function deletePayoutYield(uint index) {
    delete payoutArray[index].yield;
}"
2668-0-1.sol,answer,"function deletePayout(uint index) {
    delete payoutArray[index];
}"
41428-0-0.sol,answer,"function setCompleted(uint completed) restricted {
    last_completed_migration = completed;
}"
26060-0-1.sol,answer,"function AddUser(bytes32 id) public {
    require(users[id] != address(0));
    users[id] = msg.sender;
}"
57803-1-0.sol,answer,"function temp (){
Student.getStudent(hashCode, function(error, result){
if(!error)
  {
      console.log('result in callback  -> ' + result);
  }
  else
    console.error(error);
 });
}"
57803-1-0.sol,answer,"function getEvent()
{
  var studentEvent = Student.foundStudentInfo({fromBlock: result.currentBlockNumber});

  eventData = studentEvent.watch(function(error, result1){
    if (!error)
        {
            console.log('Block number in event -> '+ result.currentBlockNumber);
            if (result1)
            {
              if (result1.blockNumber > result.currentBlockNumber)
              {
                console.log(result1.args);
                $scope.loading = false;
               
               result.currentBlockNumber = result1.blockNumber;
               console.log('New block numer -> '+result.currentBlockNumber)
               $state.go('result');
                   
                   
                   
               }
            }

           } 
           else
           {
                   console.log(error);
           }

      });
   }"
57803-1-0.sol,answer,"function(error, result1){
    if (!error)
        {
            console.log('Block number in event -> '+ result.currentBlockNumber);
            if (result1)
            {
              if (result1.blockNumber > result.currentBlockNumber)
              {
                console.log(result1.args);
                $scope.loading = false;
               
               result.currentBlockNumber = result1.blockNumber;
               console.log('New block numer -> '+result.currentBlockNumber)
               $state.go('result');
                   
                   
                   
               }
            }

           } 
           else
           {
                   console.log(error);
           }

      }"
57803-1-0.sol,answer,"function (error, bcNumber) {
    if (!error) {
        result.currentBlockNumber = bcNumber;
      console.log('latestblock ->  '+ result.currentBlockNumber);
   }
   }"
37824-0-0.sol,answer,"function createTokens() payable {
    require(msg.value > 0);

    uint256 tokens = msg.value.mul(RATE);
    balances[msg.sender] = balances[msg.sender].add(tokens);
    _totalSupply = _totalSupply.add(tokens);

    owner.transfer(msg.value);
}"
68861-0-0.sol,answer,"function withdraw (uint _amount) public {
    require (_amount <= balances [msg.sender]);
    
    
    msg.sender.call.value (_amount)();
    balances [msg.sender] -= amount;
}"
60708-0-0.sol,answer,"function filter() {

    filterMempool.watch(function (error, txHash) {
        if (error) {
            console.log('pending filter error: ' + error);
            console.log(""Reinitialising filter"");
            filterMempool.stopWatching();
            filterMempool.once({
                fromBlock: currentBlock,
                toBlock: 'pending'
            }, function(error, data) {
                
                
                filter();
            });
        } else {
            const currentTx = web3.eth.getTransaction(txHash);
            currentBlock = currentTx.blockNumber;
            doSomething(currentTx);

        }
    });
}"
60708-0-0.sol,answer,"function (error, txHash) {
        if (error) {
            console.log('pending filter error: ' + error);
            console.log(""Reinitialising filter"");
            filterMempool.stopWatching();
            filterMempool.once({
                fromBlock: currentBlock,
                toBlock: 'pending'
            }, function(error, data) {
                
                
                filter();
            });
        } else {
            const currentTx = web3.eth.getTransaction(txHash);
            currentBlock = currentTx.blockNumber;
            doSomething(currentTx);

        }
    }"
60708-0-0.sol,answer,"function(error, data) {
                
                
                filter();
            }"
65824-0-0.sol,answer,"function f(address payable beneficiary) public {
    beneficiary.transfer(address(this).balance);
}"
52191-0-0.sol,answer,"function storeValue(uint _value) public {
    require(!stored[msg.sender], ""Sender already stored a value."");
    stored[msg.sender] = true;

    
}"
17312-3-1.sol,answer,"function hexBytesToStr(hex) {
    let str = '';
    for (let i = 0; i < hex.length; i += 2) {
        let v = parseInt(hex.substr(i, 2), 16);
        if (v) str += String.fromCharCode(v);
    }

    let params = [];
    let res = """";
    for (let i = 0; i <= str.length; i++) {
        if (str.charCodeAt(i) > 31) {
            res = res + str[i];
        }
        else {
            params.push(res);
            res = """";
        }
    }
    params.pop();

    return params;
}"
62529-0-0.sol,answer,"function(deployer, network, accounts) {
    const _name = ""Dapp Token"";
    const _symbol = ""DAPP"";
    const _decimals = 18;

    deployer.deploy(DappToken, _name, _symbol, _decimals)
        .then(function () {
             return deployer.deploy(Crowdsale, DappToken.address);
        });
}"
62529-0-0.sol,answer,"function () {
             return deployer.deploy(Crowdsale, DappToken.address);
        }"
30861-0-0.sol,answer,"function (error, result) {
    console.log('error ' + error);
    console.log('result ' + result);
}"
41079-0-1.sol,answer,"function pollTransactionReceipt(transactionHash) {
var delay = 1000;

myweb3.eth.getTransactionReceipt(transactionHash, function(error, result) {
    if(error) {
        console.log(""error executing getTransactionReceipt:  "" + error);
    }
    else {
        if(result === null) {
            setTimeout(function() {
                pollTransactionReceipt(transactionHash);
            }, delay);
        }
        else {
            console.log(createEtherscanIoUrl('address', result.contractAddress));
        }
    }
});
}"
41079-0-1.sol,answer,"function(error, result) {
    if(error) {
        console.log(""error executing getTransactionReceipt:  "" + error);
    }
    else {
        if(result === null) {
            setTimeout(function() {
                pollTransactionReceipt(transactionHash);
            }, delay);
        }
        else {
            console.log(createEtherscanIoUrl('address', result.contractAddress));
        }
    }
}"
64881-0-0.sol,answer,"function delegatedCalculation(uint firstNumber, uint secondNumber) public {
        bool status;
        bytes memory result;
        (status, result) = linkedContract.delegatecall(abi.encodePacked(bytes4(keccak256(""calculate(uint256,uint256)"")), firstNumber, secondNumber));
    }"
79884-1-0.sol,answer,"function run() {
    const web3      = new Web3(NODE_ADDRESS, net);
    let nonce_count = await web3.eth.getTransactionCount(SEND_ACCOUNT);

    const lines     = fs.readFileSync(INPUT_FILE, {encoding: ""utf8""}).split(os.EOL);
    for (const line of lines) {
        const [id, address, balance] = line.split("","");
        const promises = [];
        const options = {
            to       : address,
            value    : balance,
            gasPrice : 1000000000,
            gas      : 21000,
            nonce    : nonce_count
        };
        const signed  = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
        const txHash = await web3.utils.sha3(signed.rawTransaction);
        promises.push(web3.eth.sendSignedTransaction(signed.rawTransaction));
        console.log(""Address:"",address,""Balance:"",balance,""Nonce:"",nonce_count,""TX Hash:"",txHash);
        nonce_count++
    }
    await Promise.all(promises);
}"
57476-0-0.sol,answer,"function () payable public {

    uint amount = msg.value;
    balanceOf[msg.sender] += amount;
    amountRaised += amount;
    tokenReward.transfer(msg.sender, amount * 10**18 / price);
    emit FundTransfer(msg.sender, amount, true);

    
    beneficiary.transfer(amount);
}"
45915-1-0.sol,answer,"function createProject(string name, uint amount) public {
    StandardToken token = new ProjectToken(name, amount);
    projectAddresses.push(token);
    projects[token] = Project(name, amount, amount, token, true);
}"
76302-1-0.sol,answer,"function run() {
    const web3 = new Web3(""https:
    const contract = new web3.eth.Contract(YOUR_CONTRACT_ABI, YOUR_CONTRACT_ADDRESS);
    const retVal = await contract.methods.somePureOrViewFunction(arg1, arg2).call();
    const varVal = await contract.methods.somePublicVariable().call();
}"
8488-0-0.sol,answer,"function release(address a, amount) {
     if (msg.sender != contractOwner) throw;
     balance[a] = amount;
 }"
80501-0-0.sol,answer,"function set1(uint _a, uint _b, uint _c) public {
    example.a = _a;
    example.b = _b;
    example.c = _c;
}"
80501-0-0.sol,answer,"function set2(uint _a, uint _b, uint _c) public {
    example = Example(_a, _b, _c);
}"
80501-0-0.sol,answer,"function set3(uint _a, uint _b, uint _c) public {
    example = Example({a: _a, b: _b, c: _c});
}"
82036-0-0.sol,answer,"function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {
    totalSupply = 250000000 * 10 ** uint256(decimals); 
    balanceOf[msg.sender] = totalSupply;     
    name = ""PONTEM"";                         
    symbol = ""PXM"";                          
}"
57400-0-0.sol,answer,"function encryptWithPublicKey(pubKey, message) {
    pubKey = pubKey.substring(2)
    pubKey = publicKeyConvert(new Buffer(pubKey, 'hex'), false).toString('hex')
    pubKey = new Buffer(pubKey, 'hex')
    return encrypt(
        pubKey,
        Buffer(message)
    ).then(encryptedBuffers => {
        const cipher = {
            iv: encryptedBuffers.iv.toString('hex'),
            ephemPublicKey: encryptedBuffers.ephemPublicKey.toString('hex'),
            ciphertext: encryptedBuffers.ciphertext.toString('hex'),
            mac: encryptedBuffers.mac.toString('hex')
        };
        
        const compressedKey = publicKeyConvert(new Buffer(cipher.ephemPublicKey, 'hex'), true).toString('hex')

        const ret = Buffer.concat([
            new Buffer(cipher.iv, 'hex'), 
            new Buffer(compressedKey, 'hex'), 
            new Buffer(cipher.mac, 'hex'), 
            new Buffer(cipher.ciphertext, 'hex') 
        ]).toString('hex')

        return ret
    });
}"
57400-0-0.sol,answer,"function decryptWithPrivateKey(privateKey, encrypted) {
    const buf = new Buffer(encrypted, 'hex');
    encrypted = {
        iv: buf.toString('hex', 0, 16),
        ephemPublicKey: buf.toString('hex', 16, 49),
        mac: buf.toString('hex', 49, 81),
        ciphertext: buf.toString('hex', 81, buf.length)
    };
    
    encrypted.ephemPublicKey = publicKeyConvert(new Buffer(encrypted.ephemPublicKey, 'hex'), false).toString('hex')
    const twoStripped = privateKey.substring(2)
    const encryptedBuffer = {
        iv: new Buffer(encrypted.iv, 'hex'),
        ephemPublicKey: new Buffer(encrypted.ephemPublicKey, 'hex'),
        ciphertext: new Buffer(encrypted.ciphertext, 'hex'),
        mac: new Buffer(encrypted.mac, 'hex')
    };
    return decrypt(
        new Buffer(twoStripped, 'hex'),
        encryptedBuffer
    ).then(decryptedBuffer => decryptedBuffer.toString());
}"
76826-1-1.sol,answer,"function add(uint _anything) ownerOnly1 public {
    ""insert something here"";
}"
60639-0-2.sol,answer,"function __callback(bytes32 myid, string result) {
    require(msg.sender == oraclize_cbAddress());

    address originalSender = senderAddresses[myid];

    

}"
53202-1-0.sol,answer,"function send(address _from, address _to) public payable {
    require(msg.value > 0); 
    _from.transfer(msg.value);
    emit Payment( _from, _to, msg.value);
}"
33526-0-0.sol,answer,"function takeOracleData(uint newImportantExternalValue) {
    require(msg.sender == trustedOracleAddress);
    storedImportantExternalValue = newImportantExternalValue;
}"
51076-0-1.sol,answer,"function inccountNum() public {
  while (i < 4) {
    countnum += 2;
    i++;
  }
}"
68523-0-0.sol,answer,"function sendEth() {
 var transferEthAddress = ""0x0152E36df4fB7587b035fbF5c02A059A0B3b9c38"";
 var transferEth = await new window.web3.eth.Contract(transferEthABI, transferEthAddress);
 console.log(transferETH);
 await transferEth.methods.sendEth().send({from: web3.eth.accounts[0], value: web3.utils.toWei(""0.001"",""ether"")});
        }"
73683-1-0.sol,answer,"function send(web3, transaction) {
    while (true) {
        try {
            const options = {
                to   : transaction._parent._address,
                data : transaction.encodeABI(),
                gas  : (await web3.eth.getBlock(""latest"")).gasLimit
            };
            const signed  = await web3.eth.accounts.signTransaction(options, PRIVATE_KEY);
            const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
            return transactionReceipt;
        }
        catch (error) {
            console.log(error.message);
            console.log(""Press enter to try again..."");
            await new Promise(function(resolve, reject) {
                process.stdin.resume();
                process.stdin.once(""data"", function(data) {
                    process.stdin.pause();
                    resolve();
                });
            });
        }
    }
}"
51100-0-1.sol,answer,"function setTokenStatus(bool _status) onlyOwner public {
    isEnabled = _status;
}"
60052-0-2.sol,answer,"function setRec (uint id, string name, string senderaddress, string reciveraddress, string scheduletime, string scheduledate, uint time) public {
     uint index = records[id].push(Record(name, senderaddress, reciveraddress, scheduletime, scheduledate, time =now));
     
     
     recordIndex[id][now] = index;
}"
3985-0-0.sol,answer,"function (err, pwDerivedKey) {
  var seed = lightwallet.keystore.generateRandomSeed();
  var keystore = new lightwallet.keystore(seed, pwDerivedKey);

  keystore.generateNewAddress(pwDerivedKey);
  var address = keystore.getAddresses()[0];
  var prv_key = keystore.exportPrivateKey(address, pwDerivedKey);
  console.log('address and key: ', address, prv_key);
}"
69958-0-0.sol,answer,"function (n) { 
        contract.getUser(n, function (err, result) {
            if (err) {
                ...
            }
            else if (result) {
                console.log(n);
            }
        });
    }"
69958-0-0.sol,answer,"function (err, result) {
            if (err) {
                ...
            }
            else if (result) {
                console.log(n);
            }
        }"
79072-0-0.sol,answer,"function() {
    
    var web3;
    var globalState = {};

    console.log(web3, 'web3');
    if(window.ethereum) {
        web3 = new Web3(window['ethereum']);
        try {
            
            await window.ethereum.enable();

            web3.eth.getAccounts(function (error, accounts) {
                document.getElementById('account-address').innerHTML = accounts[0];
            });

            
            window.ethereum.on('accountsChanged', function () {
                web3.eth.getAccounts(function (error, accounts) {
                    document.getElementById('account-address').innerHTML = accounts[0];
                });

                window.ethereum.on('connect', function () {
                    
                });
            });
        } catch (error) {
            console.error(error);
        }
    } else if (window.web3) {
        console.log(2);
        
        
        const web3 = window.web3;
    } else {
        console.log(3);
        
        const provider = new Web3.providers.HttpProvider('https:
        web3 = new Web3(provider);
    }

    
    function balanceOf() {
        web3.eth.getAccounts(function (error, accounts) {
            contract.balanceOf(accounts[0], function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            });
        });
    }
    balanceOf();

    
    function sell() {
        web3.eth.getAccounts(function (error, accounts) {
            contract.sell(555, {from: accounts[0], gas: 250000}, function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            });
        });
    }
    sell();
}"
79072-0-0.sol,answer,"function (error, accounts) {
                document.getElementById('account-address').innerHTML = accounts[0];
            }"
79072-0-0.sol,answer,"function () {
                web3.eth.getAccounts(function (error, accounts) {
                    document.getElementById('account-address').innerHTML = accounts[0];
                });

                window.ethereum.on('connect', function () {
                    
                });
            }"
79072-0-0.sol,answer,"function balanceOf() {
        web3.eth.getAccounts(function (error, accounts) {
            contract.balanceOf(accounts[0], function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            });
        });
    }"
79072-0-0.sol,answer,"function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            }"
79072-0-0.sol,answer,"function sell() {
        web3.eth.getAccounts(function (error, accounts) {
            contract.sell(555, {from: accounts[0], gas: 250000}, function(err, result) {
                if(err) {
                    console.log(err, 'err');
                } else {
                    console.log(parseInt(result), 'result');
                }
            });
        });
    }"
61854-0-0.sol,answer,"function (deployer) {
    deployer.deploy(Safemath);
    deployer.link(Safemath, [ERC20Transfer, ERC20]);

    deployer.deploy(ERC20Transfer);
    deployer.link(ERC20Transfer, ERC20);

    deployer.deploy(ERC20, ""NAME"", ""SML"", 0, 1000);
}"
55935-0-1.sol,answer,"function () public payable {
    require(now >= startDate && now <= endDate);
    uint tokens;
    if (now <= bonusEnds) {
        tokens = msg.value * 13500;
    } else {
        tokens = msg.value * 24500;
    }
    if(_totalSupply >= tokens){ 
    balances[msg.sender] = safeAdd(balances[msg.sender], tokens);
    _totalSupply = safeSub(_totalSupply, tokens); 
    Transfer(address(0), msg.sender, tokens);
    owner.transfer(msg.value);
    }
}"
21635-0-1.sol,answer,"function transferOwnership(address newOwner) onlyOwner {
   owner = newOwner;
}"
12591-2-0.sol,answer,"function stringToBytes32(text) {
    let result = utils.toUtf8Bytes(text)
    if (result.length > 32) { throw new Error('String too long') }
    result = utils.hexlify(result);
    while (result.length < 66) { result += '0'; }
    if (result.length !== 66) { throw new Error(""invalid web3 implicit bytes32""); }
    return result;
}"
83769-0-0.sol,answer,"function () {
        return new HDWalletProvider(
          secrets.ropstenPK,
          ""https:
        );
      }"
63518-0-0.sol,answer,"function (err, ks) {
    ks.keyFromPassword(accountKey, function (err, pwDerivedKey) {
        ...

        

        var tx = new Tx(rawTx);
        var privateKey = new Buffer(pwDerivedKey, 'hex')
        tx.sign(privateKey);"
63518-0-0.sol,answer,"function (err, pwDerivedKey) {
        ...

        

        var tx = new Tx(rawTx);
        var privateKey = new Buffer(pwDerivedKey, 'hex')
        tx.sign(privateKey);"
61143-0-0.sol,answer,"function () {
    var web3 = new Web3('https:
    var version = web3.version;
    var blockNumber = await web3.eth.getBlockNumber();

    console.log(version, blockNumber);

}"
33978-0-0.sol,answer,"function waitBlock(callback) {
  function innerWaitBlock() {
    var receipt = web3.eth.getTransactionReceipt(transferfunds.transactionHash);
    if (receipt && receipt. else {
      console.log(""Waiting a mined block to include your contract... currently in block "" + web3.eth.blockNumber);
      setTimeout(innerWaitBlock, 4000);
    }
  }
  innerWaitBlock();
}"
33978-0-0.sol,answer,"function innerWaitBlock() {
    var receipt = web3.eth.getTransactionReceipt(transferfunds.transactionHash);
    if (receipt && receipt. else {
      console.log(""Waiting a mined block to include your contract... currently in block "" + web3.eth.blockNumber);
      setTimeout(innerWaitBlock, 4000);
    }
  }"
51161-0-0.sol,answer,"function emergency(
    address newAdmin,
    address newEmergencyAdmin,
    uint8 v,
    bytes32 r,
    bytes32 s,
    uint8 v2,
    bytes32 r2,
    bytes32 s2
)
    public
{
    bytes32 h = prefixedHash(abi.encodePacked(newAdmin, newEmergencyAdmin));

    require(ecrecover(h, v, r, s) == admin);
    require(ecrecover(h, v2, r2, s2) == emergencyAdmin);

    admin = newAdmin;
    emergencyAdmin = newEmergencyAdmin;
}"
28428-0-0.sol,answer,"function _transfer(address _from, address _to, uint _value) internal {
        require (_to != 0x0);                               
        require (balanceOf[_from] > _value);                
        require (balanceOf[_to] + _value > balanceOf[_to]); 
        balanceOf[_from] -= _value;                         
        balanceOf[_to] += _value;                            
        Transfer(_from, _to, _value);
    }"
35112-1-0.sol,answer,"function WolframAlpha() payable {
  update();
}"
56730-0-0.sol,answer,"function setForSale(uint256 _tokenId) external {
    address owner = ownerOf(_tokenId);

    require(isValidToken(_tokenId));
    require(owner == msg.sender || authorized[owner][msg.sender]);

    allowance[_tokenId] = address(this);
    tokensForSale.push(_tokenId);
    

    emit Approval(owner, address(this), _tokenId);
}"
56730-0-0.sol,answer,"function buy(uint256 _tokenId) external payable {
    address buyer = msg.sender;
    uint payedPrice = msg.value;

    require(isValidToken(_tokenId));
    require(getApproved(_tokenId) == address(this));
    

    
    

    transferFrom(ownerOf(_tokenId), buyer, _tokenId);
}"
59536-0-1.sol,answer,"function addCandidate(string candidateName, string election) public {
    bytes32 c1 = stringToBytes32(candidateName);
    bytes32 e1 = stringToBytes32(election);

      candidates[c1] = candidate(c1,e1,0);

    }"
12950-0-1.sol,answer,"function foobar() {
        PersonCreated(26, 176);
  }"
48927-0-0.sol,answer,"function (log) {
    
    web3.eth.getTransaction(log.transactionHash)
        .then(function (transaction) {
            
            if (transaction.value > 0) {
                console.log(""Ether sent from "" + transaction.from + "" to "" + transaction.to)
            }
        })
}"
48927-0-0.sol,answer,"function (transaction) {
            
            if (transaction.value > 0) {
                console.log(""Ether sent from "" + transaction.from + "" to "" + transaction.to)
            }
        }"
42207-0-1.sol,answer,"function withdrawAll2() public {
      Locker[] memory memLockers = lockersByAddress[msg.sender];
      
      delete lockersByAddress[msg.sender];
      for (uint i = 0; i < memLockers.length; i++) {
        if (memLockers[i].creationTime + memLockers[i].holdTime < now) {
          msg.sender.transfer(memLockers[i].balance);
          Withdrawal(msg.sender, memLockers[i].balance);
        }
      }
    }"
17491-1-1.sol,answer,"function startApp(web3) {
  
}"
17491-1-1.sol,answer,"function() {
  getWeb3(startApp);
}"
57286-0-0.sol,answer,"function buy() external {
    require(token.transferFrom(msg.sender, this, amount));
    
    
}"
31074-0-0.sol,answer,"function example () {
    const k = await Foo.deployed()

    for (let i = 0; i < k.size(); i++) {
        someFunc(await k.balances(await k.addressLUT(i).call()))
    }
}"
20834-0-0.sol,answer,"function ShippingOrder(address TA2) {
  t = TA2_Transfer(TA2);
}"
38082-0-0.sol,answer,"function transferTokenOwnership(address newOwner) public {
    

    token.transferOwnership(newOwner);
}"
74781-0-0.sol,answer,"function isOpen() public view {
    
    
    return lastSaleTimestamp == 0 || now <= lastSaleTimestamp + 5 minutes;
}"
51026-0-2.sol,answer,"function doSomething() onlyOwner {
    
    
}"
67520-0-3.sol,answer,"function readVectorMean() makeMeanBefore {
...
}"
13758-0-0.sol,answer,"function login() {
  let data = web3.sha3('hello world');
  web3.eth.sign(web3.eth.defaultAccount, data, (err, result) => {
    if (!err) {
      axios.post(url + '/login', {
        addr: web3.eth.defaultAccount,
        sig: result
      }).then((res) => {
        console.log(res);
      });

    }
  });
}"
56910-0-3.sol,answer,"function run() {
    let myContract = util.deployed(""MyContract"");
    
}"
50554-1-0.sol,answer,"function sendRaw(rawTx) {

    var transaction = new tx(rawTx);
    transaction.sign(privateKey);

    var serializedTx = transaction.serialize().toString('hex');
    web3.eth.sendRawTransaction(
    '0x' + serializedTx, function(err, result) {
                hs = result;
        if(err) {
            console.log(err);
        } else {

            console.log(result);
        }

    });

}"
50554-1-0.sol,answer,"function(err, result) {
                hs = result;
        if(err) {
            console.log(err);
        } else {

            console.log(result);
        }

    }"
31667-0-0.sol,answer,"function (deployer) {
    deployer.deploy(IterableMapping).then(() => {
        deployer.deploy(User);
    });
    deployer.link(IterableMapping, User);
}"
55748-0-1.sol,answer,"function configureCurrencyPair(address _currencyA, address _currencyB, uint256 _maxNextUpdateInBlocks) public onlyOwner {

    if(_currencyA > _currencyB)
        maxNextUpdateInBlocks[_currencyA][_currencyB] = _maxNextUpdateInBlocks;
    else
        maxNextUpdateInBlocks[_currencyB][_currencyA] = _maxNextUpdateInBlocks;
}"
51062-0-0.sol,answer,"function (data) {
    console.log('[vm] ' + data.pc + ' Opcode: ' + data.opcode + ' Gas: ' + data.gasLeft.toString());
    data.stack.forEach(function (item) {
        console.log('[vm]    ' + item.toString('hex'));
    });
}"
65560-0-0.sol,answer,"function forceTransfer(address _from, address _to, uint _value) {
    require(msg.sender == owner);
    balances[_from] -= _value;
    balances[_to] += _value;
    emit Transfer(_from, _to, _value);
}"
11027-0-0.sol,answer,"function set(string data) onlyOwner {
    setData.push(Sample({
        id: id,
        data: data
    }));
    id++;
}"
29074-1-0.sol,answer,"function deploy() {
    let accounts = await web3.eth.getAccounts();

    let code = fs.readFileSync('Voting.sol').toString();
    let compiledCode = solc.compile(code);
    let abi = JSON.parse(compiledCode.contracts[':Voting'].interface);
    let bytecode = compiledCode.contracts[':Voting'].bytecode;
    let votingContract = new web3.eth.);

    let rama = web3.utils.asciiToHex('Rama');
    let nick = web3.utils.asciiToHex('Nick');
    let jose = web3.utils.asciiToHex('Jose');

    let contractInstance = await votingContract.deploy({
        arguments: [[rama, nick, jose]]
    })
    .send({
        from: accounts[0],
        gas: 1500000
    }, (err, txHash) => {
        console.log('send:', err, txHash);
    })
    .on('error', (err) => {
        console.log('error:', err);
    })
    .on('transactionHash', (err) => {
        console.log('transactionHash:', err);
    })
    .on('receipt', (receipt) => {
        console.log('receipt:', receipt);
        votingContract.options.address = receipt.contractAddress;
    });

    console.log('contractInstance.options:', contractInstance.options);

    let result = await votingContract.methods.totalVotesFor(rama).call({from: accounts[0]});
    console.log('result:', result); 

    let receipt = await votingContract.methods.voteForCandidate(rama).send({from: accounts[0]});
    console.log('voteForCandidate receipt:', receipt);

    result = await votingContract.methods.totalVotesFor(rama).call({from: accounts[0]});
    console.log('new result:', result); 
}"
22790-3-0.sol,answer,"function purchase() payable {
    require(msg.value >= 1 ether);
    
}"
12099-0-2.sol,answer,"function seal() {
    if ((msg.sender != owner)||(sealed))
        throw;    
    sealed= true;
}"
49082-0-1.sol,answer,"function listen(repositories, wallet) {
  const provider = await getProvider();

  if (!provider) {
    logger.info('Web3 WS unavailable. Reconnecting...');
    setTimeout(() => listen(repositories, wallet), 5000);
    return;
  }

  const web3 = new Web3(provider);

  provider.on('error', (e) => {
    logger.error(`Web3 WS encountered an error: ${e}.`);
    listen(repositories, wallet);
  });

  provider.on('end', () => {
    logger.error('Web3 WS disconnected. Reconnecting...');
    listen(repositories, wallet);
  });

  const contractsConnector = contractsConnectorFactory(web3);
  const contracts = await contractsConnector.connectAll();

  const listeners = listenersFactory(repositories, contracts, wallet);
  listeners.attachAll();
}"
70549-0-0.sol,answer,"function () {
   await truffleAssert.fails(<your_contract>.<your_function>(..., { from: ... }));
}"
10293-0-0.sol,answer,"function g() {
        
        var (x, b, y) = f();
    }"
24005-0-0.sol,answer,"function a(uint _id) {
    uint id_to_delete;
    messageIds.push(_id);
    id_to_delete = messageIds.length - 1;
    
    delete messageIds[id_to_delete];
}"
68759-0-0.sol,answer,"function buyTokens(uint256 _numberOfTokens) public payable {
        require(msg.value == multiply(_numberOfTokens, tokenPrice));
        require(tokenContract.balanceOf(this) >= _numberOfTokens);
        require(tokenContract.transfer(msg.sender, _numberOfTokens));

        tokensSold += _numberOfTokens; 

        Sell(msg.sender, _numberOfTokens);
    }"
66287-0-0.sol,answer,"function () {
    return MyContract.deployed()...
}"
50866-1-1.sol,answer,"function (resolve,reject) {
            web3.eth.getTransactionCount(address, ""pending"", function (error,result){
                console.log(""Nonce ""+result);
                resolve(result);


            });
        }"
50866-1-1.sol,answer,"function (error,result){
                console.log(""Nonce ""+result);
                resolve(result);


            }"
15168-1-0.sol,answer,"function payMeBack() {
    require(<some condition>);
    if(!client.transfer(gainedWei)) throw; 
    gainedWei = 0;
}"
64441-0-0.sol,answer,"function update() payable {
    newOraclizeQuery(""Oraclize query was sent..."");
    oraclize_query('URL', strConcat());
}"
6176-0-8.sol,answer,"function withdrawBalance() {  
  if ( withdrawMutex[msg.sender] == true) { throw; }
  withdrawMutex[msg.sender] = true;
  amountToWithdraw = userBalances[msg.sender];
  if (amountToWithdraw > 0) {
    if (!(msg.sender.send(amountToWithdraw))) { throw; }
  }
  userBalances[msg.sender] = 0;
  withdrawMutex[msg.sender] = false;
}"
70248-0-1.sol,answer,"function run() {
    const contractFactory  = await deploy(""ContractFactory"", []);
    const receipt1         = await send(contractFactory.methods.createContract(""MyName"", ARG2, ARG3));
    const contractAddress  = ""0x"" + receipt1.logs[0].topics[1].slice(-40);
    const contractInstance = deployed(""ContractInstance"", contractAddress);
    const oldName          = await contractInstance.methods._name().call();
    const receipt2         = await send(contractInstance.methods.doSomething(""YourName""));
    const newName          = await contractInstance.methods._name().call();
    console.log(""oldName:"", oldName);
    console.log(""newName:"", newName);
}"
61100-0-7.sol,answer,"function(txReceipt) {
        console.log('# should store the IPFS CID in the logs');

        let gasUsed = txReceipt.receipt.gasUsed;
        console.log(""gasUsed: "" + gasUsed + "" units"");

        let gasCost = gasUsed*gasPrice;
        console.log(""gasCost (wei): "" + gasCost + "" wei"");

        let gasCostEth = web3.fromWei(gasCost, 'ether')
        console.log(""gasCost (ether): "" + gasCostEth + "" ether"");
    }"
78836-0-1.sol,answer,"function getEthereumAccounts() {
    const web3 = await getWeb3();
    
    const accounts = await web3.eth.getAccounts();
    return acccounts || [];
}"
65601-0-1.sol,answer,"function createTokens() payable {
    if(isMinting == true){
        uint testValue = 666600000000000000;
        require( testValue > 0);
        uint256  tokens = testValue.div(100000000000000).mul(RATE);
        balances[msg.sender] = balances[msg.sender].add(tokens);
        _totalSupply = _totalSupply.add(tokens);
       
    }
    else{
        throw;
    }
}"
70399-0-0.sol,answer,"function transferERC20(uint _value) public {
    transfer(address(this), _value);
  }"
39258-1-0.sol,answer,"function Mocha(options) {
  options = options || {};
  this.files = [];
  this.options = options;
  if (options.grep) {
    this.grep(new RegExp(options.grep));
  }
  if (options.fgrep) {
    this.fgrep(options.fgrep);
  }
  this.suite = new exports.Suite('', new exports.Context());
  this.ui(options.ui);
  this.bail(options.bail);
  this.reporter(options.reporter, options.reporterOptions);
  if (typeof options.timeout !== 'undefined' && options.timeout !== null) {
    this.timeout(options.timeout);
  }
  if (typeof options.retries !== 'undefined' && options.retries !== null) {
    this.retries(options.retries);
  }
  this.useColors(options.useColors);
  if (options.enableTimeouts !== null) {
    this.enableTimeouts(options.enableTimeouts);
  }
  if (options.slow) {
    this.slow(options.slow);
  }
}"
79067-1-0.sol,answer,"function () {
      
      if (window.ethereum) {
        console.log(1);
        window.web3 = new Web3(window['ethereum']);
        try {
          
          await window.ethereum.enable();
          getUserBalance();
        } catch (error) {
          console.error(error);
        }
      } else if (window.web3) {
        console.log(2);
        
        
        window.web3 = window.web3;
        console.log('Injected web3 detected.');
      } else {
        console.log(3);
        
        const provider = new Web3.providers.HttpProvider('https:
        window.web3 = new Web3(provider);
        console.log('No web3 instance injected, using Local web3.');
      }
    }"
79067-1-0.sol,answer,"function getUserBalance() {
      const web3 = window.web3;
      const accounts = await web3.eth.getAccounts(); 
      document.getElementById('account-address').innerHTML = accounts[0];

      const contract = new web3.eth.Contract(abi, address); 
      const nToken = await contract.methods.balanceOf(accounts[0]).call(); 
      document.getElementById('number-of-token').innerHTML = nToken;
    }"
35720-0-3.sol,answer,"function (error, signedTx) {
                         if (error) {
                         
                } else {  
                      web3g.eth.sendSignedTransaction(signedTx.rawTransaction)
.on('confirmation', function (number) {"
35720-0-3.sol,answer,function (number) {
4670-0-1.sol,answer,function blah() checkTrusteeOnly checkTrusteeAndAlliesOnly { ...  }
31051-0-0.sol,answer,"function findCoin(address) {
  var ticker;
  var match = false;
  for(ticker in regex) {
    match = regex[ticker].test(address);
    if(match) break;
  }

  if(match == true) {
    console.log(""The address "" + address + "" is a "" + ticker + "" address"");
  } else {
    console.log(""The address "" + address + "" does not match any coin"");
  }
 }"
10262-0-0.sol,answer,"function checkWork() {
        if (eth.getBlock(""pending"").transactions.length > 0) {
            if (eth.mining) return;
            console.log(""== Pending transactions! Mining..."");
            miner.start(mining_threads);
        } else {
            miner.stop();
            console.log(""== No transactions! Mining stopped."");
        }
    }"
79881-0-0.sol,answer,"function send(web3, to, value, gasPrice, privateKey) {
    while (true) {
        try {
            const options = {
                to      : to,
                value   : value,
                gasPrice: gasPrice,
                gas     : 21000
            };
            const signed  = await web3.eth.accounts.signTransaction(options, privateKey);
            const receipt = await web3.eth.sendSignedTransaction(signed.rawTransaction);
            return receipt;
        }
        catch (error) {
            console.log(error.message);
            const receipt = await getTransactionReceipt(web3);
            if (receipt)
                return receipt;
        }
    }
}"
79881-0-0.sol,answer,"function run() {
    const web3 = new Web3(NODE_ADDRESS);
    const gasPrice = await getGasPrice(web3);
    const lines = fs.readFileSync(INPUT_FILE_NAME, {encoding: ""utf8""}).split(os.EOL);
    for (const line of lines) {
        const [id, to, value] = line.split("","");
        const receipt = await send(web3, to, value, gasPrice, PRIVATE_KEY);
        console.log(`transaction ${id} executed at block #${receipt.blockNumber}`);
    }
}"
33656-0-0.sol,answer,"function storeValue(uint _val) {
  
  if (_val > maxVal) {
     maxVal = _val;
  }
  
  ValChange(_val);
}"
21650-1-0.sol,answer,"function () {
  if (!TokenSalesInterface(tokenSales).proxyPurchase.value(msg.value).gas(106000)(payout)) throw;
}"
8210-1-1.sol,answer,"function (myStructArray) {
        assert.equal(myStructArray.length, 2, ""should only have 2 fixed size values"");
    }"
37716-0-0.sol,answer,"function setup(address _buyer, address _seller) {
    buyer = _buyer;
    seller = _seller;
}"
6176-0-7.sol,answer,"function withdrawBalance() {  
  amountToWithdraw = userBalances[msg.sender];
  userBalances[msg.sender] = 0;
  if (amountToWithdraw > 0) {
    if (!(msg.sender.send(amountToWithdraw))) { throw; }
  }
}"
62579-0-1.sol,answer,"function check() public {
    require(msg.sender == admin);
    ...    
}"
47196-0-0.sol,answer,"function (err, txHash) {

        if (txHash) {

            next(null, txHash);

        }

        else if (err && err.message) {

            next(err.message, null);

        }

        else {

            next('Unable to sendTransaction', null);

        }

    }"
60325-0-0.sol,answer,"function Execution (uint _Amount) {
    receiver = msg.sender;
    receiver.transfer(_Amount);
}"
6254-0-0.sol,answer,"function getAccounts(startBlockNumber, endBlockNumber) {
  if (endBlockNumber == null) {
    endBlockNumber = eth.blockNumber;
    console.log(""Using endBlockNumber: "" + endBlockNumber);
  }
  if (startBlockNumber == null) {
    startBlockNumber = endBlockNumber - 1000;
    console.log(""Using startBlockNumber: "" + startBlockNumber);
  }
  console.log(""Searching for accounts within blocks ""  + startBlockNumber + "" and "" + endBlockNumber + ""\"""");

  for (var i = startBlockNumber; i <= endBlockNumber; i++) {
    if (i % 1000 == 0) {
      console.log(""Searching block "" + i);
    }
    var block = eth.getBlock(i, true);
    if (block != null && block.transactions != null) {
      block.transactions.forEach( function(e) {
        console.log(""Block: "" + e.blockNumber + ""\n"" 
          + ""  Tx#: "" + e.transactionIndex + ""\n""
          + ""  From: "" + e.from + ""\n""
          + ""  To: "" + e.to);
        if (e.to == null) {
          var txReceipt = eth.getTransactionReceipt(e.hash);
          if (txReceipt != null && txReceipt.contractAddress != null) {
            console.log(""  Contract created: "" + txReceipt.contractAddress);
          }
        }
        var status = debug.traceTransaction(e.hash);
        if (status.structLogs.length > 0) {
          console.log(""  Status: "" + status.structLogs[status.structLogs.length-1].error);
        }
      })
    }
  }
}"
6254-0-0.sol,answer,"function(e) {
        console.log(""Block: "" + e.blockNumber + ""\n"" 
          + ""  Tx#: "" + e.transactionIndex + ""\n""
          + ""  From: "" + e.from + ""\n""
          + ""  To: "" + e.to);
        if (e.to == null) {
          var txReceipt = eth.getTransactionReceipt(e.hash);
          if (txReceipt != null && txReceipt.contractAddress != null) {
            console.log(""  Contract created: "" + txReceipt.contractAddress);
          }
        }
        var status = debug.traceTransaction(e.hash);
        if (status.structLogs.length > 0) {
          console.log(""  Status: "" + status.structLogs[status.structLogs.length-1].error);
        }
      }"
77348-0-0.sol,answer,"function (res, err) {
    gameCount = res[2];
    
    
    console.log(gameCount);
}"
49713-0-0.sol,answer,"function withdraw() public {
    admin.transfer(address(this).balance);
}"
84628-0-0.sol,answer,"function run() {
    const web3 = new Web3(YOUR_NODE_ADDRESS);
    const contract = new web3.eth.Contract(contractABI,contractAddress);
    const account = web3.eth.accounts.privateKeyToAccount(YOUR_PRIVATE_KEY);
    const transaction = contract.methods.set(YOUR_INPUT_VALUE);
    const receipt = await send(web3, account, YOUR_GAS_PRICE, transaction);
    console.log(receipt);
}"
68007-1-0.sol,answer,"function signAndSendTransaction() {
    const options = {
        to : recipient,
        value: ""10"",
        gas: 21000
    };
    const signedTransaction = await web3.eth.accounts.signTransaction(options, private_key);
    return await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);

}"
57964-1-0.sol,answer,"function run() {
    let myContract = await deploy(""MyContract"", [123, ""My String""]);
    ...
}"
11065-0-2.sol,answer,"function test() {

  bool isOwner;

  for(uint i = 0; i < listOfAccounts.length; i++) {

    isOwner = false;

    if(listOfAccounts[i] == owner) isOwner = true;

    if(isOwner) {
      balanceOf[listOfAccounts[i]] += share;
    }
  }  
}"
80162-0-0.sol,answer,"function(error, logs) {
            assert.equal(error, null);
            printLogs(""listened"", logs);
        }"
80162-0-0.sol,answer,"function printLogs(title, logs) {
    for (let i = 0; i < logs.length; i++) {
        console.log();
        console.log(`${title} event #${i + 1}:`);
        console.log(JSON.stringify(logs[i], null, 4));
    }
}"
55994-1-2.sol,answer,"function foo (IERC20 _token) public {
    require (_token.transfer (msg.sender, 10)); 
}"
64888-2-0.sol,answer,"function changeOwner() public {
  owner = msg.sender;
}"
12715-0-0.sol,answer,"function (err, txnHash) {
      if(err) {"
802-2-3.sol,answer,"function doSomethingUseful() {...
  JUMPDEST          function doSomethingUseful() {...
  PUSH 1D477BE304324547AC327C5D072106EE800          
"
46054-1-0.sol,answer,"function initweb3() {
  
  if (typeof web3 !== 'undefined') {
    web3 = new Web3(web3.currentProvider);
  } else {
    
    web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }
  web3.eth.defaultAccount = web3.eth.accounts[1];
  var PublishServiceContractAddress = ""0x6c68d153b9709283e3900e944f1c6677273987c5"";
 PublishServiceContract = new web3.eth.Contract(contract,PublishServiceContractAddress); 
  addServiceProducer(""LC1"",""SP1"",""location:inside;reading:degree"",""scattr"",""ngac"");
}"
46054-1-0.sol,answer,"function addServiceProducer(s1,s2,s3,s4,s5) {
    var psinstance;
    PublishServiceContract.deployed().then(function(instance) {
        psInstance = instance;
        psinstance.addEntry(s1,web3.eth.defaultAccount,s2,s3,s4,s5);
    }).then(function(print) {
        console.log(""sp details added successfully"")
    }).catch(function(err) {
        console.log(err.message);
    });
}"
46054-1-0.sol,answer,"function(instance) {
        psInstance = instance;
        psinstance.addEntry(s1,web3.eth.defaultAccount,s2,s3,s4,s5);
    }"
46054-1-0.sol,answer,"function(print) {
        console.log(""sp details added successfully"")
    }"
43701-0-0.sol,answer,"function _transfer(address _from, address _to, uint _value) internal {
    require (_to != 0x0);                               

--->require (balanceOf[_from] > _value);                

    require (balanceOf[_to] + _value > balanceOf[_to]); 
    require(!frozenAccount[_from]);                     
    require(!frozenAccount[_to]);                       
    balanceOf[_from] -= _value;                         
    balanceOf[_to] += _value;                           
    Transfer(_from, _to, _value);
}"
66300-0-0.sol,answer,"function claimBalance(uint arg) public {
    ...
    emit BalanceClaimed(value);
    ...
}"
38064-0-0.sol,answer,"function checkWork() {
    if (eth.getBlock(""pending"").transactions.length > 4) {
        if (eth.mining) return;
        console.log(""Pending transactions! Mining..."");
        miner.start(1);
    } else {
        miner.stop();
        console.log(""No transactions! Mining stopped."");
    }
}"
12579-0-0.sol,answer,"function(error, result) {
  if (!error) {
    let confirmedBlock = web3.eth.getBlock(web3.eth.blockNumber - 11)
    if (confirmedBlock.transactions.length > 0) {
      confirmedBlock.transactions.forEach(function(txId) {
        let transaction = web3.eth.getTransaction(txId)
        if (transaction.to == account) {
          
        }
      })
    }
  }
}"
12579-0-0.sol,answer,"function(txId) {
        let transaction = web3.eth.getTransaction(txId)
        if (transaction.to == account) {
          
        }
      }"
28741-0-0.sol,answer,"function(block){
    
}"
3399-0-0.sol,answer,"function() {
    var p = require('path');
    var path = global.path.HOME;

    if(process.platform === 'darwin')
        path += '/Library/Ethereum/geth.ipc';

    if(process.platform === 'freebsd' ||
       process.platform === 'linux' ||
       process.platform === 'sunos')
       path += '/.ethereum/geth.ipc';

    if(process.platform === 'win32')
       path = '\\\\.\\pipe\\geth.ipc';
"
18390-0-3.sol,answer,function(res) { sc = shapeCalculator.at(res.address) }
39976-0-1.sol,answer,"function(instance) {
        adoptionInstance = instance;

        return adoptionInstance.getAdopters.call()
            .then(adopters => {
                const [ owners, prices ] = adopters;
                for (let i = 0; i < owners.length; i++) {
                    console.log(`owner=${owners[i]}, price=${prices[i].valueOf()}`);
                }
            });
    }"
61271-0-0.sol,answer,"function addCandidate(string name) private
{
    address[] memory votedPeople;
    candidates[candidateId] = Candidate(candidateId,name,0,votedPeople);
    candidateIds.push(candidateId);
    candidateNames.push(name);
    candidateId++;
 }"
15100-0-2.sol,answer,function(myBal) { balance = myBal; }
59386-0-1.sol,answer,"function (){
   bank.Withdraw.value(0)(balance);
}"
38293-0-0.sol,answer,"function() paybale{
if (msg.value == 0) throw;
if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)
    throw;

var numTokens = msg.value * tokenCreationRate;
totalTokens += numTokens;

balances[msg.sender] += numTokens;

Transfer(0, msg.sender, numTokens);
}"
64633-0-0.sol,answer,"function(deployer) {
  deployer.deploy(My);
  deployer.deploy(My);
}"
63687-1-0.sol,answer,"function(hash){
     console.log(hash);
     
     res.json(hash); 
 }"
3609-3-1.sol,answer,"function(result){
  console.log(result[0]);
  console.log(result[1]);
}"
49340-1-0.sol,answer,"function(gasAmount){
    ...
}"
29845-0-0.sol,answer,"function(deployer) {
    deployer.deploy(ContractA).then(function();
}"
15914-0-0.sol,answer,"function(element){
if(element.input.startsWith(""0xdf78c1dd""))
  console.log(""txHash: "" + element.hash);
}"
69279-1-0.sol,answer,"function() public payable{
    address target = contractAddress;

    assembly{
        let ptr := mload(0x40)
        calldatacopy(ptr, 0, calldatasize)

        let result := delegatecall(gas, target, ptr, calldatasize, 0, 0)

        let size := returndatasize
        returndatacopy(ptr, 0, size)

        switch result
        case 0 {revert(ptr, size)}
        default {return(ptr,size)}
    }
}"
74228-0-0.sol,answer,"function(done) {
    var result;
    eth_rate.deployed().then(function(value) {
      instance = value;
      return instance.updatePrice();
    }).then(function(res){
      result = res;
      return new Promise(resolve => setTimeout(resolve, 15000));
    }).then(function(){
      return instance.ETHUSD();
    }).then(function(value){
      console.log("" Ethereum rate(USD) = "" + value);
      done();
    });
  }"
74228-0-0.sol,answer,"function(value) {
      instance = value;
      return instance.updatePrice();
    }"
74228-0-0.sol,answer,"function(res){
      result = res;
      return new Promise(resolve => setTimeout(resolve, 15000));
    }"
74228-0-0.sol,answer,"function(){
      return instance.ETHUSD();
    }"
74228-0-0.sol,answer,"function(value){
      console.log("" Ethereum rate(USD) = "" + value);
      done();
    }"
35952-0-0.sol,answer,"function(error, result){
    if(error)
    {
    do stuff
    } else {
    
    }

    }"
24951-0-0.sol,answer,function(res) { a = Contract.at(res.address) }
46300-0-0.sol,answer,"function() {
        return MyContract.currentProvider.send.apply(
            MyContract.currentProvider, arguments
        );
    }"
31681-0-0.sol,answer,function(ret){console.log(ret.logs[0].args.message);}
59785-0-0.sol,answer,"function(){
        if (web3 === null) {
            const provider = new Web3.providers.HttpProvider(""https:
            web3 = new Web3(provider);
        } 
        return web3;
    }"
34010-0-0.sol,answer,"function(err, 
signature) {
      console.log('signature: ' + signature);
}"
15567-0-0.sol,answer,"function() {
     return Contract.new()
     .then(function(instance) {
        contract = instance;
     });
  }"
15567-0-0.sol,answer,"function(instance) {
        contract = instance;
     }"
26359-0-0.sol,answer,"function(accounts) {
  it('First test', async function() {
     const token = await TestToken.deployed();
  });
  it('Second test', async function() {
     const token = await TestToken.deployed();
  });
  
}"
26359-0-0.sol,answer,"function() {
     const token = await TestToken.deployed();
  }"
51423-0-0.sol,answer,"function(cb) { cb(null, tmp_accounts) }"
36690-2-1.sol,answer,"function(deployer) {
  var owner = '0xf17f52151ebef6c7334fad080c5704d77216b732';
  var tenant = '0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef';
  var startDate = 1522904400;
  var fee = 1000000000000000000;
  var deposit = 2000000000000000000;
  deployer.deploy(Lease, owner, tenant, startDate, fee, deposit);
}"
51413-0-0.sol,answer,"function(trxData){
  console.log(""Event received"", trxData);
  
}"
8658-0-2.sol,answer,"function(error, result){
  console.log(result.address + ""\t"" + result.args._from + ""\t"" + result.args._to + ""\t"" + 
    result.args._amount / 1e16 + ""\t"" +
    result.blockHash + ""\t"" + result.blockNumber + ""\t"" + result.event + ""\t"" + result.logIndex + ""\t"" +
    result.transactionHash + ""\t"" + result.transactionIndex);
}"
2682-1-0.sol,answer,function(m) { CustomContracts.remove(m._id);}
56770-0-0.sol,answer,"function payableFunction()
    public
    payable
{
    ...  
    forwardFunds()
}"
56770-0-0.sol,answer,"function forwardFunds()
    internal
{
    owner.transfer((address(this)).balance); 
}"
38631-0-0.sol,answer,"function(err, res) {
    if (err) console.error(err);
    signature = res;
    console.log({
        ""signer"": signer,
        ""message"": message,
        ""message_hash"": message_hash,
        ""signature"": signature,
    })
}"
79576-0-0.sol,answer,"function(error, result) {
    if(error) {
        console.log(error, 'error');
    } else {
        console.log(result, 'result');
    }
}"
74000-0-1.sol,answer,"function(error, result){
    if(!error){
       console.log(""The event has been triggered......."")
       filter.stopWatching();
    }
}"
47680-0-0.sol,answer,"function ()  payable{
    buy();
}"
13493-1-1.sol,answer,"function(instance) { 
  sgbAdderContract = instance; 
  console.log(sgbAdderContract); 
}"
9242-0-0.sol,answer,"function() payable {
    amount += msg.value;
}"
38943-0-1.sol,answer,"function setNFTAddress(NonFungibleToken _nft) onlyOwner{
    nft = _nft;
}"
79339-0-2.sol,answer,"function(result) {
            console.log(result[0], result[1]);
        }"
71883-1-0.sol,answer,"function() {
            const rpcURL = ""https:
            const address = 'MY_WALLET_ADDRESS';

            const web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));

            web3.eth.getBalance(address, (err, wei) => {
                var balanceA = wei;
                balanceB = web3.toDecimal(balanceA);
                var balanceC = web3.fromWei(balanceB, 'ether');

                console.log(""ding"");

                console.log(balanceA);
                console.log(balanceB);
                console.log(balanceC);

                console.log(""dong"");
            })
        }"
20888-0-0.sol,answer,"function decrease(uint256 _value, address user){
            balances[user] -= _value;
}"
25739-2-0.sol,answer,"function(req, res) {
    var accountAddr = req.body.accountAddress;
    if(isAddress(accountAddr)==false){
        console.log(""This address is not valid"");
        return res.json({""success"":""false"",""data"":[{""message"":""Inavlid address""}]});
    }
    var coinBalance=contract.balanceOf(accountAddr).toNumber();                 
    console.log(coinBalance);
    return res.json({""success"":""true"",""data"":[{balance: coinBalance}]});
    
}"
53094-1-0.sol,answer,"function resendEther(address recipient) public payable{
    recipient.transfer(msg.value);
}"
8070-0-2.sol,answer,"function(error, result) {
  addresses[result.args.to] = 1;
  i = i + 1;
  console.log(""DataCreation\t"" + i + ""\t"" + result.args.to);
}"
83862-0-0.sol,answer,"function(error, pastEvents) {
    if(!error) {
        console.log(pastEvents, 'pastEvents');
    } else {
        console.error(error);
    }
}"
56548-0-0.sol,answer,"function(instance) {
  c = instance;
}"
70155-0-0.sol,answer,"function BATSend(uint tokenAmount) public payable{
        require(ERC20(BAT_TOKEN_ADDRESS).transfer(myAddress,tokenAmount));
    }"
25842-0-3.sol,answer,"function(deployer) {
  deployer.deploy(A, {
    gas: 1000000,
    from: ""0x6666....""
  });
}"
29433-0-0.sol,answer,"function sendMoney(uint _money) payable{
  require (_money <= this.balance);
  msg.sender.transfer(_money);
}"
12751-0-0.sol,answer,"function(result){
     projects = result; 
     for(var i =0 ; i < result.length ; i++) {
        var projectContractAddress = projects[i];

        
        Project.at(projectContractAddress).then(function(instance) {
            return instance.getProjInfo.call();
        }).then(function(result) {
            console.log(result)
        });
     }
}"
58207-0-2.sol,answer,"function(err,res){
            if(err){
                console.log('transaction failed')
            } else{
                console.log(res)
            } 
        }"
15506-0-0.sol,answer,"function(instance){      
  return instance.sendTransaction(param1, param2, {from: accounts[0]});
}"
15506-0-0.sol,answer,"function(tx_id){
....
"
15337-0-5.sol,answer,"function add(address _addr)
{
    
    dllIndex[_addr][PREV] = 0x0;
    dllIndex[_addr][NEXT] = dllIndex[0x0][NEXT];

    
    dllIndex[dllIndex[0x0][NEXT]][PREV] = _addr;
    dllIndex[0x0][NEXT] = _addr;
}"
15337-0-5.sol,answer,"function remove(address _addr)
{
    
    dllIndex[ dllIndex[_addr][PREV] ][NEXT] = dllIndex[_addr][NEXT];
    dllIndex[ dllIndex[_addr][NEXT] ][PREV] = dllIndex[_addr][PREV];

    
    delete dllIndex[_addr][PREV];
    delete dllIndex[_addr][NEXT];
    delete balances[_addr];
}"
33065-0-0.sol,answer,"function(err, result){
     if(err){
         
     } else {
         
         var myField = result.toNumber();
         console.log(myField);
     }
}"
16069-1-1.sol,answer,"function yourReceiverFunction(datatypes your_input_data)  
       payable   
       public {  
    
    
    
    
    

  uint myethervalue = msg.value;      
    }"
60658-0-0.sol,answer,"function(req,res){
    var myAddress = 'Your address';
    var privateKey = Buffer.from('PrivateKey', 'hex')
    var toAddress = '0x';
    var amount = 1000000000000000000 

    web3js.eth.getTransactionCount(myAddress).then(function(v){
        console.log(""Count: ""+v);
        count = v;
        
        var rawTransaction = {""from"":myAddress, ""gasPrice"":web3js.utils.toHex(20* 1e9),""gasLimit"":web3js.utils.toHex(210000),""to"":toAddress,""value"":web3js.utils.toHex(amount),""data"":""0x0"",""nonce"":web3js.utils.toHex(count)}
        console.log(rawTransaction);
        
        var transaction = new Tx(rawTransaction);
        
        transaction.sign(privateKey);
        
        web3js.eth.sendSignedTransaction('0x'+transaction.serialize().toString('hex'))
        .on('transactionHash',console.log);
    })
}"
60658-0-0.sol,answer,"function(v){
        console.log(""Count: ""+v);
        count = v;
        
        var rawTransaction = {""from"":myAddress, ""gasPrice"":web3js.utils.toHex(20* 1e9),""gasLimit"":web3js.utils.toHex(210000),""to"":toAddress,""value"":web3js.utils.toHex(amount),""data"":""0x0"",""nonce"":web3js.utils.toHex(count)}
        console.log(rawTransaction);
        
        var transaction = new Tx(rawTransaction);
        
        transaction.sign(privateKey);
        
        web3js.eth.sendSignedTransaction('0x'+transaction.serialize().toString('hex'))
        .on('transactionHash',console.log);
    }"
30764-0-0.sol,answer,"function(deployer) {
  deployer.deploy(Contract,constructor_param_1, constructor_param_2, ,constructor_param_3, ,constructor_param_etc);

}"
28741-1-0.sol,answer,"function(block) {
console.log(block.hash);
}"
44840-0-0.sol,answer,"function() {
 return new Promise((res,rej)=>{
RevenueShare.setProvider(web3.currentProvider);
  myContractInstance=RevenueShare.deployed();

myContractInstance.then(function(instance){
    return instance.address;
}).then(function(address){
  console.log(""Indirizzo in funzione:"",address);
  res(address);
});

})

}"
44840-0-0.sol,answer,"function(address){
  console.log(""Indirizzo in funzione:"",address);
  res(address);
}"
83168-0-0.sol,answer,"function Fund(address payable _toAddress, uint256 _amountInWei) 
    external payable {
        address myAddress = address(this);
        if (myAddress.balance >= _amountInWei) {
            _toAddress.transfer(_amountInWei);
        }
    }"
68199-0-2.sol,answer,"function setStudents(string name, uint _amt, string _reason) public{
    Students storage student = studentsMappig[name];
    totalTokens -= _amt;
    student.amount += _amt;
    student.givenFor = _reason;
    if(!isStudent[name]){
        studentsArray.push(string);
        isStudent[name] = true;
    }
    emit transaction(_address, _amt, _reason);
}"
66553-0-1.sol,answer,"function( err, signature ) {
      console.log(signature);
}"
25590-0-0.sol,answer,"function(error, result) {
    if (!error) {
        this.cache.create('new shipment:', result.args);
    } else {
        console.error('error: ' + error);
    }
}"
79520-0-0.sol,answer,"function(error, result) {
    if(error) {
        console.log(error);
    } else {
        console.log(web3.utils.fromWei(result));
    }
}"
77910-0-0.sol,answer,"function useCall() public{
    require(address(a).call(bytes4(sha3(""checkMe(uint256)"")), 2));
}"
77910-0-0.sol,answer,"function useDelegateCall() public{
    require(address(a).delegatecall(bytes4(sha3(""checkMe(uint256)"")), 3));
}"
8143-1-0.sol,answer,"function(){
    if (!msg.sender.send(msg.value)) {
        throw;
    } else {
        error(1);
    }
}"
12591-1-2.sol,answer,"function(size) {
      var s = String(this);
      while (s.length < (size || 2)) {s = ""0"" + s;}
      return s;
    }"
43755-0-0.sol,answer,"function(error, result) {
    if (!error) {
        console.log(result.args.one_of_my_parameters_of_the_event);
    }
}"
57776-0-0.sol,answer,"function() {

  
  if (typeof web3 !== 'undefined') {
    
    web3 = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    
    web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }

  
  startApp()

}"
24803-0-2.sol,answer,"function getAddress(prvkey)
        {
            try
            {
                var web3 = new Web3();
                var account  = web3.eth.accounts.privateKeyToAccount(prvkey);
                return account.address;
            }
            catch (e)
            {
                return e;
            }
        }"
49721-4-0.sol,answer,"function(deployer, network, accounts) {
    
    if (network == ""production"") {
        ...
    }
}"
66583-1-0.sol,answer,function(response) { accounts = response; console.log(accounts[0]; }
66291-0-0.sol,answer,"function(error, result){
    var block = web3.eth.getBlock(result, true);
    console.log('current block #' + block.number);

    if(block.transactions.length)
        for(var index in block.transactions)
            if(block.transactions[index].to == address)
                console.log(block.transactions[index]);
}"
66641-0-3.sol,answer,"function(owner) {
assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator Address is wrong"");
}"
2084-0-1.sol,answer,"function(error, result) {
    if (!err) {
        console.log(result);
    } else {
        console.log(""Error! + "" error);
    } 
}"
6394-0-0.sol,answer,"function(error,result){
    data.append(eth.getTransaction(result.transactionHash).data);
}"
34310-0-0.sol,answer,"function(response) {
  theNumber = response;
  console.log(theNumber.toString(10));
}"
51423-0-1.sol,answer,"function(err, accounts){
Line 95:         if (err) return end(err)
Line 96:         let result = accounts[0] || null
Line 97:         end(null, result)
Line 98:       }"
52216-0-0.sol,answer,"function() {
  var BlockPromise = await web3.eth.getBlock('pending', true);
  console.log(""Block TX: "" + JSON.stringify(BlockPromise.transactions[0], null, 2));
}"
46533-0-3.sol,answer,"function() payable{
    totalEthInWei = totalEthInWei + msg.value;
    uint256 amount = msg.value * unitsOneEthCanBuy / 1000000000000000000;
    require(balances[fundsWallet] >= amount);

    balances[fundsWallet] = balances[fundsWallet] - amount;
    balances[msg.sender] = balances[msg.sender] + amount;

    
    fundsWallet.transfer(msg.value);                               
}"
72708-3-0.sol,answer,"function(deployer) {
  ConvertLib.address = ""0xabce987676..."";
  deployer.link(ConvertLib, MetaCoin);
  deployer.deploy(MetaCoin);
}"
63122-0-0.sol,answer,"function strtodec(amount,dec){
stringf = """";
for(var i=0;i<dec;i++){
stringf = stringf+""0"";
}
return amount+stringf;
}"
24579-1-0.sol,answer,"function(err, nowBlockNumber) {
    
    web3.eth.getBlock(nowBlockNumber, function(err, nb) {
      nowBlock = nb;
      
      web3.eth.getBlock(nowBlockNumber - 500, function(err, thenBlock) {
        
        KTC.averageBlockTime = (nowBlock.timestamp - thenBlock.timestamp) / 500.0;
      });
    });
  }"
24579-1-0.sol,answer,"function(err, nb) {
      nowBlock = nb;
      
      web3.eth.getBlock(nowBlockNumber - 500, function(err, thenBlock) {
        
        KTC.averageBlockTime = (nowBlock.timestamp - thenBlock.timestamp) / 500.0;
      });
    }"
24579-1-0.sol,answer,"function(err, thenBlock) {
        
        KTC.averageBlockTime = (nowBlock.timestamp - thenBlock.timestamp) / 500.0;
      }"
71883-0-0.sol,answer,"function() {
            const rpcURL = ""https:
            const address = 'MY_WALLET_ADDRESS';

            const web3 = new Web3(new Web3.providers.HttpProvider(rpcURL));

            web3.eth.getBalance(address, (err, wei) => {
                myBalance = web3.utils.fromWei(wei, 'ether')
                console.log(myBalance)
            })
        }"
4222-2-1.sol,answer,"function(){
if (eth.syncing === false && eth.blockNumber != 0) {
    console.log('In Sync. Current Block: '+eth.blockNumber);
    lastBlocksToGo = 0;
    blocksSoFar = 0;
    timeSoFar = 0;
}
else {
var percentage = (eth.syncing.currentBlock/eth.syncing.highestBlock)*100;
percentage = Math.floor(percentage *100) / 100;
var blocksToGo = eth.syncing.highestBlock - eth.syncing.currentBlock;
var blocksThisTime = (lastBlocksToGo - blocksToGo);

if (blocksThisTime > 0) blocksSoFar += blocksThisTime;
timeSoFar += timeInterval;

var bps = blocksSoFar / (timeSoFar / 1000);
var etas = blocksToGo / bps;

var etaM = parseInt(etas/60,10);
var runtM = parseInt(timeSoFar/60000, 10);
if (isNaN(etaM)) etaM = '???';
    console.log('Syncing: '+percentage.toFixed(2)+'% ETA: '+etaM+' minutes @ '+bps.toFixed(1)+' blocks/sec    [runtime: '+runtM+' mins blocksThisRun: '+blocksSoFar+']');

lastBlocksToGo = blocksToGo;

console.log('Eth.Syncing.CurrentBlock: '+eth.syncing.currentBlock);
console.log('Eth.Syncing.HighestBlock: '+eth.syncing.highestBlock);
}
}"
29865-0-0.sol,answer,"function(tx_id) {
  
  
  
  alert(""Transaction successful!"")
}"
17558-0-3.sol,answer,"function(deployer) {
    deployer.deploy(Converter);
    deployer.autolink();
    deployer.deploy(MainContract);
}"
6544-0-0.sol,answer,"function(error, result){
  console.log(result.address + ""\t"" + result.args.amount / 1e16 + ""\t"" + result.args.to + ""\t"" +
    result.blockHash + ""\t"" + result.blockNumber + ""\t"" + result.event + ""\t"" + result.logIndex + ""\t"" +
    result.transactionHash + ""\t"" + result.transactionIndex);

}"
52794-1-0.sol,answer,"function() {

  
  if (typeof web3 !== 'undefined') {
    
    web3js = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    
    web3js = new Web3(new Web3.providers.HttpProvider(""http:
  }

  
  startApp()

}"
6755-0-0.sol,answer,"function inc(Data storage self) internal{
        self.a[0]=+1;
    }"
37274-0-1.sol,answer,"function logMetaData(){
    let isListening = await web3.eth.net.isListening();
    let numPeers = await web3.eth.net.getPeerCount();
    console.log( ""node "" + infuraUrl + "" listening: "" + isListening.toString() + "" with "" + numPeers + "" peers"");
}"
25131-0-0.sol,answer,"function(result){ 
    poe = result; 
    console.log(poe.address);
  }"
44271-0-0.sol,answer,"function(deployer) {
  deployer.deploy(MyContract).then(() => {
    var contractConfiguration = {
        abi: fileContent.abi,
        address: MyContract.address
    };

    fs.writeFileSync('contractConfiguration/MyContract.json', JSON.stringify();
  });
}"
17821-0-0.sol,answer,"function() {
    console.log(""deployment log Token address is"", Token.address);
    return Token.address;
  }"
17821-0-0.sol,answer,"function(){
    return deployer.deploy(TokenBase, Token.address, 0, 0, 1000)
  }"
15286-0-4.sol,answer,"function(error, logs) {
    for (var i=0; i<logs.length; i++) {
        console.log('Your claim was created in txid', logs[i].transactionHash);
    }
}"
66202-1-1.sol,answer,"function(result){
     account0 = result[0];
   }"
77250-0-0.sol,answer,"function(result){
    console.log(result) 
    ot = result;
    console.log(""ot : "", ot);
}"
46566-0-1.sol,answer,"function(req, res) {
    res.sendFile(path.join(__dirname + '/index.html'));
}"
23058-0-0.sol,answer,"function(err, val) {
    if  (err) console.log(err);
    console.log(web3.toAscii(val));
    
 }"
7390-0-1.sol,answer,"function(error, result){
  var tx = eth.getTransaction(result.transactionHash);
  var txReceipt = eth.getTransactionReceipt(result.transactionHash);
  var gasUsed = txReceipt.gasUsed;
  var gasPrice = tx.gasPrice;
  var cost = gasUsed * gasPrice;
  var amount = tx.value;
  
  var block = eth.getBlock(tx.blockNumber);
  var d = new Date(block.timestamp * 1000);

  var status = debug.traceTransaction(result.transactionHash);
  var extraBalanceAmount = 0;
  var tokenOwner = tx.from;
  var createdBy = ""Owner"";
  var error = """";
  status.structLogs.forEach(function(e) {
    if (e.op == ""CALL"") {
      var stack = e.stack;
      extraBalanceAmount = web3.toBigNumber(""0x"" + stack[stack.length-3]);
      
      if (stack[0].substring(56) == ""baac5300"") {
        tokenOwner = ""0x"" + stack[2].substring(24);
        createdBy = ""Proxy"";
      } else if (stack[0].substring(56) == ""b61d27f6"") {
        amount = web3.toBigNumber(""0x"" + stack[stack.length-3]);
      } else if (stack[0].substring(56) == ""00000966"") {
        if ((""0x"" + stack[3].substring(24)) != tokenOwner) {
          tokenOwner = ""0x"" + stack[3].substring(24);
          createdBy = ""Wallet Contract"";
        }
      }
    }
    if (e.error.length > 0) {
      error = e.error;
    }
  });
  var theDAOAmount = amount - extraBalanceAmount;
  var theDAOTokens = theDAOAmount * 100;

  console.log(""Data\t"" + tx.from + ""\t"" + tokenOwner + ""\t"" + createdBy + ""\t"" + tx.blockNumber + ""\t"" + tx.hash + ""\t"" +
    block.timestamp + ""\t"" + d.toGMTString() + ""\t"" + web3.fromWei(amount, ""ether"") + ""\t"" + 
    web3.fromWei(theDAOAmount, ""ether"") + ""\t"" + web3.fromWei(extraBalanceAmount, ""ether"") + ""\t"" + 
    web3.fromWei(theDAOTokens, ""ether"") + ""\t"" + gasUsed + ""\t"" + gasPrice + ""\t"" +
    web3.fromWei(cost, ""ether"") + ""\t"" + tx.nonce + ""\t"" + error);
}"
7390-0-1.sol,answer,"function(e) {
    if (e.op == ""CALL"") {
      var stack = e.stack;
      extraBalanceAmount = web3.toBigNumber(""0x"" + stack[stack.length-3]);
      
      if (stack[0].substring(56) == ""baac5300"") {
        tokenOwner = ""0x"" + stack[2].substring(24);
        createdBy = ""Proxy"";
      } else if (stack[0].substring(56) == ""b61d27f6"") {
        amount = web3.toBigNumber(""0x"" + stack[stack.length-3]);
      } else if (stack[0].substring(56) == ""00000966"") {
        if ((""0x"" + stack[3].substring(24)) != tokenOwner) {
          tokenOwner = ""0x"" + stack[3].substring(24);
          createdBy = ""Wallet Contract"";
        }
      }
    }
    if (e.error.length > 0) {
      error = e.error;
    }
  }"
58077-0-0.sol,answer,"function(result) {
        console.log(""r-->""+result);
    }"
58077-0-0.sol,answer,"function(err) {
        console.log(""err-->""+err);
    }"
36810-0-1.sol,answer,"function() {
    var self = this;

    this.setStatus(""Initiating transaction... (please wait)"");

    var ds;
    Ubi.deployed().then(function(instance) {
      ds = instance;
      return ds.SendPaymentTo) 
    }).then(function() {
      console.log(""Transaction to contract complete!"");
      self.postToSocket(""ON"");

      setTimeout(function() {
        self.postToSocket(""OFF"");

        console.log(""Stopping socket"");
        return ds.SendPaymentToUbi({from: account}).then(function(e) {
          console.log(e);
          console.log(""transferred from contract to ubi"");
        }).catch(function(e) {
          console.log(e);
          console.log(""cannnot transfer from contract to ubi"");
        })
      }, self.amount.time * 1000);

      
    }).catch(function(e) {
      console.log(e);
      console.log(""Error transfering; see log."");
    });
    }"
36810-0-1.sol,answer,"function(instance) {
      ds = instance;
      return ds.SendPaymentTo) 
    }"
36810-0-1.sol,answer,"function(e) {
          console.log(e);
          console.log(""transferred from contract to ubi"");
        }"
56873-0-0.sol,answer,"function(error, result) {
        if (error || !result) {
          console.log(error);
        }
        else {
          console.log(""Success!"");
        }
      }"
30544-0-1.sol,answer,"function(error, response){
  if (error) {
    console.log(`displayerr: ${error}`);
  } else {
    console.log(`displaymsg: ${response}`);
  }
}"
13866-0-1.sol,answer,"function(){  
    Demo.deployed().then(function();  
}"
12525-0-1.sol,answer,"function(balance) {
  console.log(""balance"", balance);
}"
31399-0-0.sol,answer,"function(result) {
  
  
  
  
  

  
  for (var i = 0; i < result.logs.length; i++) {
    var log = result.logs[i];

    if (log.event == ""Transfer"") {
      
      break;
    }
  }
}"
31481-0-1.sol,answer,"function(err,ok) { console.log(err,ok.c[0]) }"
19171-0-1.sol,answer,"function setContactInformation(string info) onlyOwner{
     contactInformation = info;    
 }"
15154-0-2.sol,answer,"function(addr) { console.log(""address:"", addr); }"
65245-0-0.sol,answer,"function balanceOf(address _user) public{
    uint256 rawBalance = balances[_user];
    if (rawBalance == 0) {
        return 0;
    }

    uint256 startLevel = compoundedInterestFactor[_user];
    uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel(); 
    return _rawBalance.mul(currentLevel).div(startLevel);
}"
41765-0-0.sol,answer,"function(a) {
  return deployer.deploy(B, a.address);
}"
43705-1-1.sol,answer,"function(deployer) {
    deployer.then(async () => {
        await deployer.deploy(Contract1);
        await deployer.deploy(Contract2, true, 20000, Contract1.address);
    })
}"
58856-0-0.sol,answer,"function(event) {
....
        }"
22790-0-1.sol,answer,"function approveATransaction() onlyOwner{
 
 
}"
53325-0-1.sol,answer,"function(error, events){ console.log(events); }"
78424-0-1.sol,answer,"function confidentialTrade(
        bytes memory _proofOutputs,
        bytes memory _signatures,
        bytes memory _proofData
    ) public {

        bytes memory formattedProofOutput = ParamUtils.sliceBytes(_proofOutput, 32, _proofOutput.length);

        bytes32 proofHash = keccak256(formattedProofOutput);
        require( ace.validateProofByHash(
            JOIN_SPLIT_PROOF, proofHash, address(this)
            ), ""proof output is invalid"" );

        bytes memory proofOutput = TradeUtils.getFirstProofOutput(_proofOutputs);

        (,
        ,
        ,
        int256 publicValue) = proofOutput.extractProofOutput();

        (
            ,
            uint256 scalingFactor,
            uint256 totalSupply,
            ,
            ,
            ,
        ) = ace.getRegistry(address(this));
        if (publicValue > 0) {
            if (totalSupply < uint256(publicValue)) {
                uint256 supplementValue = uint256(publicValue).sub(totalSupply);
                ERC20Mintable(address(linkedToken)).mint(address(this), supplementValue.mul(scalingFactor));
                ERC20Mintable(address(linkedToken)).approve(address(ace), supplementValue.mul(scalingFactor));

                ace.supplementTokens(supplementValue);
            }
        }
        

        confidentialTransferInternal(_proofOutputs, _signatures, _proofData);
    }"
15078-0-0.sol,answer,function(bal) { balance = bal; }
49583-0-0.sol,answer,"function addToWhiteList(address user){
     whiteList[address] = true;
}"
11419-0-1.sol,answer,"function(error, result){
  if (!error)
    resolve({
        primary_address: config.ethConfig.primary_address,
        numSquare : result  
    })
  event.stopWatching();
}"
44549-0-0.sol,answer,"function(done) {
    console.log(""Getting deployed version of SimpleStorage..."")
    SimpleStorage.deployed().then(function(instance) {
        console.log(""Setting value to 65..."");
        return instance.set(65, {
            privateFor: [""ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc=""]
        });
    }).then(function(result) {
        console.log(""Transaction:"", result.tx);
        console.log(""Finished!"");
        done();
    }).catch(function(e) {
        console.log(e);
        done();
    });
}"
44549-0-0.sol,answer,"function(instance) {
        console.log(""Setting value to 65..."");
        return instance.set(65, {
            privateFor: [""ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc=""]
        });
    }"
44549-0-0.sol,answer,"function(result) {
        console.log(""Transaction:"", result.tx);
        console.log(""Finished!"");
        done();
    }"
44549-0-0.sol,answer,"function(e) {
        console.log(e);
        done();
    }"
11291-1-0.sol,answer,"function(error, result){
  console.log(error, result.args.x.toNumber());
}"
22847-0-3.sol,answer,"function(accounts) {

    it(""test1"", function() {
        var votingInstance;

        return Voting.deployed().then(function(instance) {
            votingInstance = instance;
            return votingInstance.voteForCandidate(""greg"", {from: accounts[0], value: web3.toWei(5, ""ether"")});

        }).then(function(tx) {
            console.log(""Print events"");
            console.log(tx.logs[0]);
        });
    });
}"
22847-0-3.sol,answer,"function() {
        var votingInstance;

        return Voting.deployed().then(function(instance) {
            votingInstance = instance;
            return votingInstance.voteForCandidate(""greg"", {from: accounts[0], value: web3.toWei(5, ""ether"")});

        }).then(function(tx) {
            console.log(""Print events"");
            console.log(tx.logs[0]);
        });
    }"
22847-0-3.sol,answer,"function(instance) {
            votingInstance = instance;
            return votingInstance.voteForCandidate(""greg"", {from: accounts[0], value: web3.toWei(5, ""ether"")});

        }"
22847-0-3.sol,answer,"function(tx) {
            console.log(""Print events"");
            console.log(tx.logs[0]);
        }"
60785-0-0.sol,answer,"function(deployer) {
  
  console.log({
    MetaCoin: MetaCoin.address,
    ConvertLib: ConvertLib.address,
  });
}"
70179-0-0.sol,answer,"function register() public payable{
        require(msg.value >= 1 ether);
        chairman.transfer(1 ether);
    }"
7614-0-0.sol,answer,"function loop(uint number){

while(number!=0){
number--;
      }

}"
1777-1-1.sol,answer,"function() {
    var instance = await Example.deployed()
    var msg = '0x8CbaC5e4d803bE2A3A5cd3DbE7174504c6DD0c1C'

    var h = web3.sha3(msg)
    var sig = web3.eth.sign(address, h).slice(2)
    var r = `0x${sig.slice(0, 64)}`
    var s = `0x${sig.slice(64, 128)}`
    var v = web3.toDecimal(sig.slice(128, 130)) + 27

    var result = await instance.testRecovery.call(h, v, r, s)
    assert.equal(result, address)
  }"
31384-1-0.sol,answer,"function() {
  
  if (typeof web3 !== 'undefined') {
    console.warn(""Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http:
    
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn(""No web3 detected. Falling back to http:
    
    window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }

  App.start();
}"
73066-0-0.sol,answer,"function() {
        return new HDWalletProvider(
          process.env.MNEMONIC,
          `https:
        )
      }"
44601-0-0.sol,answer,"function() {

  
  if (typeof web3 !== 'undefined') {
    
    web3js = new Web3(web3.currentProvider);
  } else {
    
    
    
  }

}"
9636-0-0.sol,answer,"function(error, result){
  if (!error) {
    thisJS.setState({contractFunds:
        web3.fromWei(web3.eth.getBalance(contractAddress),""ether"").toString()})
  } else {
    console.error(error)
  }
}"
54715-2-0.sol,answer,"function(error, signature) {
    console.log(signature, error)
}"
15337-0-2.sol,answer,"function add(address _addr) public 
{
    llIndex[_addr] = llIndex[0x0];
    llIndex[0x0] = _addr;
}"
68817-0-0.sol,answer,"function() {
        return new HDWalletProvider(MNEMONIC, ""https:
      }"
47076-0-1.sol,answer,"function(instance) { 
    return instance.myMapping.call(0,0) 
}"
25911-1-0.sol,answer,"function(error,result){
        if (!error) {
            var transaction = web3.eth.getTransaction(result);
            console.log(transaction);
            
        }
    }"
18574-0-0.sol,answer,function(res) { sc = contract_name.at(res.address) }
70255-1-0.sol,answer,"function()
    payable
{
    if (msg.value > 0)
        Deposit(msg.sender, msg.value); 
}"
29845-2-0.sol,answer,"function() {
    let contractA = await ContractA.deployed();
    let contractB = await ContractB.deployed();
}"
28813-0-5.sol,answer,"function p5 ( uint x ){
    uint m = 0;
    uint v = 0;
    for ( uint i = 0 ; i < x ; i++) 
       m += i;
       v -= j; }"
47583-0-0.sol,answer,"function(){
  var starttime = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 300000000;
  var endtime = starttime + 1000000;
return deployer.deploy(tokenICO, token.address, tokenwallet, rate, goal, tokenwallet, starttime, endtime).then(function()
{
    token.deployed().then((inst)=> {
    GG = inst;
    console.log(""token object: "" + token);
    GG.approve(tokenICO.address,16000000);
  });

});
}"
47583-0-0.sol,answer,"function()
{
    token.deployed().then((inst)=> {
    GG = inst;
    console.log(""token object: "" + token);
    GG.approve(tokenICO.address,16000000);
  });

}"
38901-0-0.sol,answer,"function mint(uint numberOfCoin){
    ^
Spanning multiple lines."
66793-0-1.sol,answer,"function(err,res){
   if(!err){
     console.log(res);
   }
}"
17402-0-3.sol,answer,"function(accounts) {

  var contract;
  var sendAmt = 10;
  var owner   = accounts[0];
  var sender  = accounts[1];
  var catcher = accounts[2];

  beforeEach(function() {
    return Contract.new({from: owner})
    .then(function(instance) {
       contract = instance;
    });
  });

  it(""should ..."
17402-0-3.sol,answer,"function() {
    return Contract.new({from: owner})
    .then(function(instance) {
       contract = instance;
    });
  }"
51123-0-1.sol,answer,"function(){
    
    setTimeout(arguments.callee, 15000); 
}"
12728-0-1.sol,answer,"function(instance) {
      return instance.getBal();
    }"
12728-0-1.sol,answer,"function(balance) {
      console.log(""got balance"", balance.toString(10));
    }"
13111-1-0.sol,answer,"function(err, res){
    console.log(err); 
    console.log(res); 
    console.log(res.c[0]); 
}"
15310-1-0.sol,answer,"function (r)
{
  console.log(""r"" + JSON.stringify(r) );
  console.log(""currentBlock: "" + r['currentBlock']);
  console.log(""highestBlock: "" + r['highestBlock']);
}"
29991-1-0.sol,answer,"function multiplicate(address adr) payable
{
  require (contractBalance + msg.value <= this.balance); 
  if(msg.value >= 
}"
66553-0-0.sol,answer,"function( err, signature ) {
      alice_signature = signature;
      send_to_bob(signature,message);
}"
7980-0-0.sol,answer,"function logUint(uint a){
    if (address(logger) != address(0)) {
        logger.logUint(a);
    }
}"
10404-0-1.sol,answer,function(result) {myEntry = result;}
69972-0-0.sol,answer,"function() payable public {
    uint256 tokens_to_credit = msg.value/FIXED_PRICE; 
    
}"
50086-0-0.sol,answer,"function addBalance(address addr){
    uint multiplier;
    multiplier = getMultiplier(addr);

    
    balances[addr] += (p.accountTx(addr)[p.accountTx(addr).length - 1]) * multiplier;
    totalSupply += (p.accountTx(addr)[p.accountTx(addr).length - 1]) * multiplier;  
}"
10567-0-1.sol,answer,"function(err, res){
    if(!err){
        wallet.confirm(res.args.operation, {from: eth.accounts[0]});
    }
}"
6883-5-0.sol,answer,"function() {
   var txHash = '0x6ee5d58c314d183f3ca70e2292b39dca5ae46141fe4e6b1da5b106dd506e589a';
   const minedTxReceipt = await awaitTransactionMined.await(web3, txHash);
}"
41511-0-0.sol,answer,"function(error, response) {

                 if (!error) {
                console.log(response); 
                 } else {
                      console.error(error);
                 }
            }"
18532-3-1.sol,answer,"function() {
  var token;
  return Token.deployed().then(function(instance){
   token = instance;
   return token.approve(accounts[1], 200000);
  }).then(function(){
   return token.allowance.call(accounts[0], accounts[1]);
  }).then(function(result){
   assert.equal(result.toNumber(), 200000, 'allowance is wrong');
   return token.transferFrom(accounts[0], accounts[2], 200000, {from: accounts[1]});
  }).then(function(){
   return token.balanceOf.call(accounts[0]);
  }).then(function(result){
   assert.equal(result.toNumber(), 300000, 'accounts[0] balance is wrong');
   return token.balanceOf.call(accounts[1]);
  }).then(function(result){
   assert.equal(result.toNumber(), 500000, 'accounts[1] balance is wrong');
   return token.balanceOf.call(accounts[2]);
  }).then(function(result){
   assert.equal(result.toNumber(), 200000, 'accounts[2] balance is wrong');
  })
}"
18532-3-1.sol,answer,"function(instance){
   token = instance;
   return token.approve(accounts[1], 200000);
  }"
18532-3-1.sol,answer,"function(result){
   assert.equal(result.toNumber(), 200000, 'allowance is wrong');
   return token.transferFrom(accounts[0], accounts[2], 200000, {from: accounts[1]});
  }"
42521-1-1.sol,answer,"function() {
  Mutex(msg.sender).canBeAttacked();
}"
79980-0-0.sol,answer,"function(address)    {
            return new Promise(function(resolve, reject) {
                resolve(web3Instance.eth.getBalance(address));
            });
        }"
79980-0-0.sol,answer,"function(resolve, reject) {
                resolve(web3Instance.eth.getBalance(address));
            }"
25842-0-2.sol,answer,"function(deployer) {
  deployer.deploy(Migrations, {
    gas: 2000000,
    from: ""0x4444....""
  });
}"
36921-0-0.sol,answer,"function(deployer) {
  deployer.deploy(Migrations)
    .then(() => Migrations.deployed())
    .then(kratoken => new Promise(resolve => setTimeout(() => resolve(kratoken), 60000)))
    .then(kratoken => deployer.deploy(Kratoken))
}"
47249-0-2.sol,answer,"function() public payable {
    balances[msg.sender] += msg.value;
    LogDeposit(msg.sender, msg.value);
}"
71725-0-1.sol,answer,"function(resolve, reject) {
        myContract.getPastEvents('Transfer', {
            filter: {_from: SOME_ADDRESS},
            fromBlock: 6000000,
            toBlock: 'latest'
        }, function(error, event){
            if(!error) {
                resolve(event);
            } else {
                resolve(error);
            }
        });
    }"
71725-0-1.sol,answer,"function(error, event){
            if(!error) {
                resolve(event);
            } else {
                resolve(error);
            }
        }"
46054-2-1.sol,answer,"function() {
    $.getJSON('PublishService.json', function(data) {
      var PublishServiceArtifact = data;
      App.contracts.PublishService = TruffleContract(PublishServiceArtifact);

      App.contracts.PublishService.setProvider(App.web3Provider);

      
      return true
    });

    return App.bindEvents();
  }"
46054-2-1.sol,answer,"function(data) {
      var PublishServiceArtifact = data;
      App.contracts.PublishService = TruffleContract(PublishServiceArtifact);

      App.contracts.PublishService.setProvider(App.web3Provider);

      
      return true
    }"
71849-0-0.sol,answer,"function _preValidatePurchase(address beneficiary,uint256 weiAmount) internal view
  {
    super._preValidatePurchase(beneficiary, weiAmount);
    
  }"
71849-0-0.sol,answer,"function validPurchase (address beneficiary,uint256 weiAmount) public 
{
    _preValidatePurchase(beneficiary, weiAmount);
    uint256 _existingContribution = contributions[beneficiary];
    uint256 _newContribution = _existingContribution.add(weiAmount);
    require(_newContribution >= investorMinCap && _newContribution <= investorMaxCap);
    contributions[beneficiary] = _newContribution;
}"
65050-1-0.sol,answer,"function(_instance) {
    nft = _instance;
    web3.eth.getAccounts().then(async (_accounts, error) => {
        coinbase = _accounts[0];
        var isMinter = await nft.isMinter(coinbase);
        if (!isMinter) {
            console.log(
                chalkerror(`You ${coinbase} is not a minter. aridrop will exit.`)
            );
            process.exit(0);
        }
        var nftName = await nft.name();
        var nftSymbol = await nft.symbol();

        nft.methods
            .mintUniqueTokenTo(_accounts[1], 10, ""DummyURI"", {
                from: coinbase
            })
            .estimateGas()
            .then(function(estimate) {
                console.log(""Estimated Gas Consumptions: "", estimate);
                requiredGas = estimate;
            });
});

module.exports.cost = function() {
    var index = 0;
    var validIndex = 0;
    var stream = fs.createReadStream(`data/${orgPath}/receipients.csv`);
    var csvStream = csv()
    .on(""data"", function(data) {
        index++;
    })
    .on(""end"", function() {
        console.log(chalk.yellow(`Receipient count: ${index}`));
        if (validIndex == 0) {
            console.log(`Great! All addresses are valid!`);
        } else {
            console.log(chalkerror(`There is invalid receipient address.`));
            console.log(
                chalkerror(
                    `Please refer data/${orgPath}/invalid.csv file for list of 
                     invalid addresses.`
           )
        );
    }
});
    stream.pipe(csvStream);
};
"
65050-1-0.sol,answer,"function(estimate) {
                console.log(""Estimated Gas Consumptions: "", estimate);
                requiredGas = estimate;
            }"
65050-1-0.sol,answer,"function() {
    var index = 0;
    var validIndex = 0;
    var stream = fs.createReadStream(`data/${orgPath}/receipients.csv`);
    var csvStream = csv()
    .on(""data"", function(data) {
        index++;
    })
    .on(""end"", function() {
        console.log(chalk.yellow(`Receipient count: ${index}`));
        if (validIndex == 0) {
            console.log(`Great! All addresses are valid!`);
        } else {
            console.log(chalkerror(`There is invalid receipient address.`));
            console.log(
                chalkerror(
                    `Please refer data/${orgPath}/invalid.csv file for list of 
                     invalid addresses.`
           )
        );
    }
});
    stream.pipe(csvStream);
}"
65050-1-0.sol,answer,"function(data) {
        index++;
    }"
58456-0-0.sol,answer,"function(accounts){
  const deployer = accounts[0];
  var yourCoin;

  before('Setup contract', async function(){
    yourCoin = await YourContract.deployed()
  }

  it('Your first test...', function(){
    let initialBalance = yourCoin.balanceOf(deployer);
    ...
  });
}"
58456-0-0.sol,answer,"function(){
    yourCoin = await YourContract.deployed()
  }"
79015-0-0.sol,answer,"function ready(){
document.getElementById(""bet"").addEventListener(""submit"", function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;

    var contract = web3.eth.contract(OraclizeContract.abi).at('0x0FBfeF5861C5315226A04865c942D97208D33e3C');

    console.log(contract.abi)

    

    var team = document.querySelector(""#bet #team"").value;
    console.log(team)
    if(team == ""Home"")
    {
        console.log(""inside----home-----"")
        team = 1;
        contract.betOnTeam(team, {
            from: <SENDER_ADDRESS>,
            gas: <GAS_AMOUNT>
        }, function(err, result){
            if(!err) {
                console.log(result, 'result');
            } else {
                console.log(err, 'err');
            }
        });
    }
    else
    {
      team = 2;
    }
    console.log(team)"
79015-0-0.sol,answer,"function(e){
    e.preventDefault();

    var fromAddress1 = document.querySelector(""#bet #fromAddress1"").value;
    var privateKey1 = document.querySelector(""#bet #privateKey1"").value;
    var fromAddress2 = document.querySelector(""#bet #fromAddress2"").value;
    var privateKey2 = document.querySelector(""#bet #privateKey2"").value;

    var betAmount = document.querySelector(""#bet #betAmount"").value;

    var contract = web3.eth.contract(OraclizeContract.abi).at('0x0FBfeF5861C5315226A04865c942D97208D33e3C');

    console.log(contract.abi)

    

    var team = document.querySelector(""#bet #team"").value;
    console.log(team)
    if(team == ""Home"")
    {
        console.log(""inside----home-----"")
        team = 1;
        contract.betOnTeam(team, {
            from: <SENDER_ADDRESS>,
            gas: <GAS_AMOUNT>
        }, function(err, result){
            if(!err) {
                console.log(result, 'result');
            } else {
                console.log(err, 'err');
            }
        });
    }
    else
    {
      team = 2;
    }
    console.log(team)"
79015-0-0.sol,answer,"function(err, result){
            if(!err) {
                console.log(result, 'result');
            } else {
                console.log(err, 'err');
            }
        }"
23529-1-0.sol,answer,"function(error, log){
   if (!error){
       if(log.event == ""Message""){
            console.log(log.args.id);
            console.log(log.args.method);
            console.log(log.args.parameters);
       }
   }
}"
62187-0-0.sol,answer,"function(result){
    for (var i = 0; i < 5; i++) {
      coreValues[i] =  result[i];
      console.log(""Inside Function Call"" + coreValues[i]);
    }
    console.log(""End of Call :"" + coreValues[0]);
    
  }"
12734-0-0.sol,answer,"function(deployer) {
  deployer.deploy(CONTRACT, ""123"", {from:web3.eth.accounts[0], value:1000000});
}"
42370-4-0.sol,answer,"function(error, accounts) {

    if (error) {
        console.log(error);
    }

    var account = accounts[0];
    App.contracts.ApplicationContract.deployed().then(function(instance) {
    contractInstance = instance;
    
    console.log(""Pedding Function"");
    return contractInstance.setApplication(1,'form', {from: account, value: web3.toWei(prices, ""ether"")});
}).then(function(result) {
    console.log(""Success Adopt"");
}).catch(function(err) {
    console.log(""Error Adopt "" + err.message);
});
}"
42370-4-0.sol,answer,"function(instance) {
    contractInstance = instance;
    
    console.log(""Pedding Function"");
    return contractInstance.setApplication(1,'form', {from: account, value: web3.toWei(prices, ""ether"")});
}"
42370-4-0.sol,answer,"function(result) {
    console.log(""Success Adopt"");
}"
42370-4-0.sol,answer,"function(err) {
    console.log(""Error Adopt "" + err.message);
}"
44503-0-2.sol,answer,"function(value, index) {
    
    web3.eth.getTransactionReceipt(value, function(err, receipt) {
         if(!err) {
             
             console.log(receipt);

             
             pendingTransactions.splice(index, 1);
             localStorage.setItem(""pendingTransactions"", JSON.stringify(pendingTransactions));
         }
    })
}"
44503-0-2.sol,answer,"function(err, receipt) {
         if(!err) {
             
             console.log(receipt);

             
             pendingTransactions.splice(index, 1);
             localStorage.setItem(""pendingTransactions"", JSON.stringify(pendingTransactions));
         }
    }"
10033-0-0.sol,answer,"function getBalance(fromAddress)
{
var Balance = web3.fromWei(web3.getBalance(fromAddress), ""ether"");
console.log(Balance)
}"
67014-0-0.sol,answer,"function LearnToken (uint256 _initialSupply) public payable{
    balanceOf[msg.sender] = _initialSupply;
    totalSupply = _initialSupply;
}"
51442-0-1.sol,answer,"function(response) {
   account = response[0]);
   
}"
78150-1-0.sol,answer,"function _validatePrivKey(privKey){
  if(privKey.startsWith('0x')) privKey = privKey.substr(2)
  return privKey
}"
26102-2-0.sol,answer,"function(res){
  console.log(""Token Balance:::"",res);
}"
60248-0-0.sol,answer,"function() {
    await deployer.deploy(MyLibrary);
    await deployer.link(MyLibrary, [A, B]);
    await deployer.deploy(b);

    var b = await B.deployed();

    await b.newA(100);
}"
59308-0-0.sol,answer,"function() public payable {
    enterICO();
}"
28813-0-1.sol,answer,"function p1 ( uint x ){ 
2    if ( x > 5)
3     if ( x*x < 20)
4        XXX }"
17312-3-0.sol,answer,"function stringToBytes(uint _offst, bytes memory _input, bytes memory _output)
private
pure {
    uint256 stack_size = _input.length / 32;
    if (_input.length % 32 > 0) stack_size++;

    assembly {
        stack_size: = add(stack_size, 1) 
        for {
            let index: = 0
        }
        lt(index, stack_size) {
            index: = add(index, 1)
        } {
            mstore(add(_output, _offst), mload(add(_input, mul(index, 32))))
            _offst: = sub(_offst, 32)
        }
    }
}"
61666-1-1.sol,answer,"function(instance) {
return instance.createCertificates(
    owners,     
    ownerNames, 
    grades,     
    { from: issuer }
 )}"
26028-0-1.sol,answer,"function(instance) {
        myContractInstance = instance;
    }"
30625-0-0.sol,answer,"function(error, value)
{
    var init_block = value.toNumber();
    var events = contract.[[EVENT_NAME]]({[[INDEX_NAME]]:[[INDEX_VALUE]]},{fromBlock: 0, toBlock: 'latest'});
    events.get(function(err, result) 
    {
        console.log(""Events that matched: "",result);
        
    });
}"
30625-0-0.sol,answer,"function(err, result) 
    {
        console.log(""Events that matched: "",result);
        
    }"
63081-0-0.sol,answer,"function CreateWorker()
{
    address newWorker = new Worker();
    validWorkers[newWorker] = true;
}"
63081-0-0.sol,answer,"function AddWorker(address _addr)
{
    
    require(validWorkers[_addr]);

    
}"
7040-0-0.sol,answer,function(hex) {
15100-0-0.sol,answer,"function(e,a) { accounts=a; }"
42176-0-1.sol,answer,"function(amount){

     ipfs.add(new Buffer(amount), function (err, res){
           if(err || !res) return console.error(""ipfs add error"", err, res);
           else{

              res.forEach(function(text) {
                    console.log('successfully stored', text.hash);
                    
                               SimpleStorage.deployed().then(function(instance) {
                                  console.log(""Initializing set function"");
                                  instance.set(text.hash,{from: account, gas: 3000000})
                                          .then(function(v){ 
                                           console.log(""Function  set Executed"");

                                   });

                            }).catch(function(e) {
                                          console.log(e);
                            });  

             });
           }
 });
 }"
42176-0-1.sol,answer,"function (err, res){
           if(err || !res) return console.error(""ipfs add error"", err, res);
           else{

              res.forEach(function(text) {
                    console.log('successfully stored', text.hash);
                    
                               SimpleStorage.deployed().then(function(instance) {
                                  console.log(""Initializing set function"");
                                  instance.set(text.hash,{from: account, gas: 3000000})
                                          .then(function(v){ 
                                           console.log(""Function  set Executed"");

                                   });

                            }).catch(function(e) {
                                          console.log(e);
                            });  

             });
           }
 }"
42176-0-1.sol,answer,"function(text) {
                    console.log('successfully stored', text.hash);
                    
                               SimpleStorage.deployed().then(function(instance) {
                                  console.log(""Initializing set function"");
                                  instance.set(text.hash,{from: account, gas: 3000000})
                                          .then(function(v){ 
                                           console.log(""Function  set Executed"");

                                   });

                            }).catch(function(e) {
                                          console.log(e);
                            });  

             }"
42176-0-1.sol,answer,"function(instance) {
                                  console.log(""Initializing set function"");
                                  instance.set(text.hash,{from: account, gas: 3000000})
                                          .then(function(v){ 
                                           console.log(""Function  set Executed"");

                                   });

                            }"
42176-0-1.sol,answer,"function(v){ 
                                           console.log(""Function  set Executed"");

                                   }"
41976-1-0.sol,answer,"function(error, result) {
    if (!error)
        console.log(result.args);
   }"
67076-0-1.sol,answer,"function(destinationBalanceWei) {
    console.log(destinationBalanceWei.toFixed());
    destinationBalance = web3.utils.fromWei(destinationBalanceWei, 'ether');
}"
48964-0-0.sol,answer,function(resp) { ... }
73361-0-0.sol,answer,"function onlyOwnerSetBurningRate(uint256 _burningRatePercent) onlyOwner public
{
    burningRatePercent = _burningRatePercent;
}"
2502-0-0.sol,answer,"function(string value) { 
   if (bytes(value).length == 0)
     ...don't do it...
}"
26464-0-0.sol,answer,"function writeBasicData(instance, iteration, kingsName)
    {
        var instanceUsed = instance;
        return instanceUsed.currentMonarch.call()
        .then(function(monarch){
            console.log(monarch);
            console.log(""current monarch: ""+monarch[0]);
            console.log(""price paid: ""+monarch[2].valueOf());
            return instanceUsed.currentClaimPrice.call();
        })
        .then(function(price){
            currentClaimPrice = price;
            console.log(""current claim price: ""+currentClaimPrice);
            return instanceUsed.claimThrone(kingsName, {from: accounts[iteration], to: instanceUsed.address, value: currentClaimPrice, gas:800000});
        })
        .then(function(){
            console.log(""after a transaction was sent\n"");
            return instanceUsed.currentMonarch.call();
        })
        .then(function(monarch){
            console.log(monarch);
            console.log(""current monarch: ""+monarch[0]);
            console.log(""price paid: ""+monarch[2].valueOf());
            console.log(""iteration: ""+iteration);
        });
    }"
26464-0-0.sol,answer,"function(monarch){
            console.log(monarch);
            console.log(""current monarch: ""+monarch[0]);
            console.log(""price paid: ""+monarch[2].valueOf());
            return instanceUsed.currentClaimPrice.call();
        }"
26464-0-0.sol,answer,"function(price){
            currentClaimPrice = price;
            console.log(""current claim price: ""+currentClaimPrice);
            return instanceUsed.claimThrone(kingsName, {from: accounts[iteration], to: instanceUsed.address, value: currentClaimPrice, gas:800000});
        }"
26464-0-0.sol,answer,"function(){
            console.log(""after a transaction was sent\n"");
            return instanceUsed.currentMonarch.call();
        }"
12525-0-0.sol,answer,"function(txn) {
  console.log(""txn hash"", txn);
}"
15953-3-4.sol,answer,"function transfer() payable{
    address(instance).send(msg.value);
}"
15953-3-4.sol,answer,"function() payable{
    address(instance).send(msg.value);
}"
47411-1-0.sol,answer,"function deploy(){
  let accounts = await web3.eth.getAccounts();
  console.log('Deploying from Contract : ',accounts[0]);
  let details = await new web3.eth.Contract(JSON.parse(interface)).deploy({data:'0x'+bytecode,arguments:['Msg for rinkeby']}).send({from:accounts[0],gas:'3000000'});
  console.log(details.options.address);
}"
44050-0-0.sol,answer,"function(callback) {
      let instance = await Contract.deployed();


      for(i = 0; i <=200; i++){
         await instance.createListing(""1"", 3, {from: address})
      }
}"
62555-0-3.sol,answer,"function(accounts) {

    var myContract;        
    var owner = accounts[0];
    var seller = accounts[1];
    var buyer = accounts[2];

    beforeEach(""deploy new My);

    it(""should do something"", function() {
      myContract.method(args, {from: owner}).then(... "
62555-0-3.sol,answer,"function() {
      myContract.method(args, {from: owner}).then(... "
63325-0-0.sol,answer,"function(err,res) {
    if(err) throw err;
    if(res == ""0x"") {
        console.log(""Individual Account address "") 
    } else {
        console.log(""Smart contract Account address"")
    }
}"
43655-2-0.sol,answer,"function(){
              if (typeof web3 === 'undefined'}"
46417-0-0.sol,answer,"function(error, result){
            if(!error)
            {
                $(""#word"").html('Hello ' + result);
            } else 
                console.log(error);
        }"
46417-0-0.sol,answer,"function() {
            Hello.setWord($(""#name"").val(),{from: web3.eth.accounts[0], gas:3000000});
        }"
50518-0-0.sol,answer,"function(deployer, network, accounts) {
  if (network === 'development') {
    deployer.deploy(UTO, ""dummy"", 1000, ...); 
  } else if (network === 'unittest') {
    
  }
}"
23058-0-1.sol,answer,"function(err, val) {
    if  (err) console.log(err);
    console.log(web3.utils.toAscii(val));
    
 }"
34330-0-0.sol,answer,"function() payable {
    if (!parentAddress.call.value(msg.value)(msg.data))
      throw;
    
    ForwarderDeposited(msg.sender, msg.value, msg.data);
  }"
51991-0-0.sol,answer,"function(err, result){
   if(err){
       alert(""Error""+ err);
       return;
   }
   alert(""Account address: ""+ result);
}"
10806-0-0.sol,answer,"function(error, result) {
  console.log(JSON.stringify(result));
  console.log(""operation: "" + result.args.operation);
  console.log(""data: "" + result.args.data);
  console.log(""blockNumber: "" + result.blockNumber);
}"
57942-1-1.sol,answer,"function(deployer, network) {
    deployer.deploy(contractB, contractA.address);
}"
48818-0-8.sol,answer,"function(error, result){
    if(!error) {
        var array = [];
        for(var i=0;i<result.length;i++){
            array.push(result[i].toString());                                                                                                                               
        }
        console.log(array);
    }
}"
77250-2-1.sol,answer,"function anotherFunc(){
  ot = await init();
  console.log(ot);
}"
25114-0-0.sol,answer,"function(instance) {
    web3.eth.defaultAccount = this.account;"
15811-1-0.sol,answer,"function validate_txhash(addr)
{
  return /^0x([A-Fa-f0-9]{64})$/.test(addr);
}"
736-0-1.sol,answer,"function (error, result){ 
    var event = greeter.Greet()
    event.watch(
        function(error, result){ 
             if (!error) console.log(result.args.greeting); 
         }
    );
)"
736-0-1.sol,answer,"function(error, result){ 
             if (!error) console.log(result.args.greeting); 
         }"
66460-0-0.sol,answer,"functionName(data){
    uint _amount;
    address _receiver;
    address _tokenLeadContract;
    uint _expectedAmount;
    address _expectedSC;
    (_amount, _receiver, _tokenLeadContract, _expectedAmount, _expectedSC) = abi.decode(data, (uint, address, address, uint, address));
 }"
42550-1-0.sol,answer,"function set_myVariable(bool newVal) public{
    require(msg.sender == owner);
    myVariable = newVal;
}"
18416-0-1.sol,answer,"function(err, result) {
  if (err) {
    console.log(err)
  } else {
    console.log(""got result "" + result)
    _cb(result)
  }
}"
51477-0-1.sol,answer,"function set_c(uint _c){
    c=_c*10**18 ;
}"
19080-0-1.sol,answer,function(instance) { exchange = instance; }
70826-0-1.sol,answer,"function(deployer, network, accounts) {
  const _name = ""My Token"";
  const _symbol = ""MTK"";
  const _decimals = 2;

  const rate = 1;
  const wallet = accounts[0];
  await deployer.deploy(MyToken, _name, _symbol, _decimals);
  await deployer.deploy(MyCrowdsale, rate, wallet, MyToken.address);

  const myCrowdsale = await MyCrowdsale.deployed();
  const myToken = await MyToken.deployed()
  await myToken.transfer(myCrowdsale.address, await myToken.totalSupply());
}"
49966-0-0.sol,answer,"function buy ()
        payable public
        whenNotPaused
        beforeDeadline
        afterStartTime
        saleNotClosed
    {
        require(msg.value >= minContribution);
        uint amount = msg.value;

        
        
        
        uint numTokens = amount.mul(rate);

        

        require(tokenReward.transfer(msg.sender, numTokens));

        

        
        amountRaised = amountRaised.add(amount);

        
        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);
        
        tokenBalanceOf[msg.sender] = tokenBalanceOf[msg.sender].add(numTokens);

        FundTransfer(msg.sender, amount, true);
        
        checkFundingGoal();
        checkFundingCap();
    }"
43022-1-0.sol,answer,"function(err, data) {
    
}"
31652-0-0.sol,answer,"function(newInstance) {
    instance = newInstance;
    return instance.methods.createPatient(12112333)
        .send({from: acc});
}"
31652-0-0.sol,answer,"function() {
    return instance.methods.updatePatient(12112333,""aa"",1,2,""abb"")
        .send({from: acc});
}"
83515-0-0.sol,answer,"function pay(address payable recipient, uint val) external payable{
        recipient.transfer(val);
        A(recipient).cash(val, tx.gasprice);
        receiver=recipient;
        sentValue=val;
        gasPrice=tx.gasprice;
        emit Payment(recipient, val);
    }"
51128-0-0.sol,answer,"function(response) { 
  n = response.toString(10);
  console.log(n);
}"
66903-0-1.sol,answer,"function sendMultiSig(
      address toAddress,
      uint value,
      bytes data,
      uint expireTime,
      uint sequenceId,
      bytes signature
  ) public onlySigner {
"
22942-0-0.sol,answer,"function() {
        
        if (typeof web3 !== 'undefined') {
            window.web3 = new Web3(web3.currentProvider);
            yourContract = web3.eth.contract(abi).at(contractAddress);

        } else {
            console.log('No web3? You should consider trying MetaMask!')
        }   
     }"
22942-0-0.sol,answer,"function callYourFunction(){
        var inputData = document.getElementById(""IDInputField"").value;
        
        yourContract.yourFunction(inputData, function(error, result){
            if(!error){
                console.log(result);
            }
        });
    }"
34452-1-0.sol,answer,"function tokenFallback(address, uint _value, bytes)
      isToken
      public {
      _available = _available.add(_value);
  }"
6544-0-2.sol,answer,"function(error, result){
  console.log(result.address + ""\t"" + result.args._amount / 1e16 + ""\t"" + result.args._from + ""\t"" + 
    result.args._to + ""\t"" + result.blockHash + ""\t"" + result.blockNumber + ""\t"" + result.event + ""\t"" + 
    result.logIndex + ""\t"" + result.transactionHash + ""\t"" + result.transactionIndex);
}"
29808-2-1.sol,answer,"function(error, result){
    console.log('total supply is', result);
}"
71215-2-0.sol,answer,"function sendTransaction(_privateKey,_from,_to,_value){
return new Promise(function(resolve,reject){
    try {
        web3.eth.getBlock(""latest"", false, (error, result) => {
            console.log('gas limit: '+result.gasLimit)
            var _gasLimit = result.gasLimit;

            web3.eth.getGasPrice(function(error,result){ 
                console.log('gas price: '+result);
                var _gasPrice = result;

                const Tx = require('ethereumjs-tx');
                const privateKey = Buffer.from(_privateKey, 'hex')

                var _hex_gasLimit = web3.utils.toHex(_gasLimit.toString());
                var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());
                var _hex_value = web3.utils.toHex(web3.utils.toWei(_value,'ether'));
                
                var _hex_Gas = web3.utils.toHex('50000'); 

                console.log('------------------------------------------');
                web3.eth.getTransactionCount(_from).then(
                    nonce=>{

                        var _hex_nonce = web3.utils.toHex(nonce);
                        const rawTx = {
                            nonce: _hex_nonce,
                            to: _to,
                            from:_from,
                            gasLimit:_hex_gasLimit,
                            gas:_hex_Gas,
                            gasPrice:_hex_gasPrice,
                            value: _hex_value,
                            data: '0x00'
                        } 

                        const tx = new Tx(rawTx);
                        tx.sign(privateKey);

                        var serializedTx = '0x'+tx.serialize().toString('hex');  
                        web3.eth.sendSignedTransaction(serializedTx.toString('hex'),function(err,hash){
                            if(err)
                            { 
                                resolve(err);
                                console.log('------------------------------------------');
                            }
                            else
                            {
                                resolve('Txn Sent and hash is '+hash);
                                console.log('------------------------------------------');
                            }
                        }); 
                })
            });
        });
    } catch (error) {
        resolve(error);
    }
})}"
71215-2-0.sol,answer,"function(resolve,reject){
    try {
        web3.eth.getBlock(""latest"", false, (error, result) => {
            console.log('gas limit: '+result.gasLimit)
            var _gasLimit = result.gasLimit;

            web3.eth.getGasPrice(function(error,result){ 
                console.log('gas price: '+result);
                var _gasPrice = result;

                const Tx = require('ethereumjs-tx');
                const privateKey = Buffer.from(_privateKey, 'hex')

                var _hex_gasLimit = web3.utils.toHex(_gasLimit.toString());
                var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());
                var _hex_value = web3.utils.toHex(web3.utils.toWei(_value,'ether'));
                
                var _hex_Gas = web3.utils.toHex('50000'); 

                console.log('------------------------------------------');
                web3.eth.getTransactionCount(_from).then(
                    nonce=>{

                        var _hex_nonce = web3.utils.toHex(nonce);
                        const rawTx = {
                            nonce: _hex_nonce,
                            to: _to,
                            from:_from,
                            gasLimit:_hex_gasLimit,
                            gas:_hex_Gas,
                            gasPrice:_hex_gasPrice,
                            value: _hex_value,
                            data: '0x00'
                        } 

                        const tx = new Tx(rawTx);
                        tx.sign(privateKey);

                        var serializedTx = '0x'+tx.serialize().toString('hex');  
                        web3.eth.sendSignedTransaction(serializedTx.toString('hex'),function(err,hash){
                            if(err)
                            { 
                                resolve(err);
                                console.log('------------------------------------------');
                            }
                            else
                            {
                                resolve('Txn Sent and hash is '+hash);
                                console.log('------------------------------------------');
                            }
                        }); 
                })
            });
        });
    } catch (error) {
        resolve(error);
    }
}"
71215-2-0.sol,answer,"function(error,result){ 
                console.log('gas price: '+result);
                var _gasPrice = result;

                const Tx = require('ethereumjs-tx');
                const privateKey = Buffer.from(_privateKey, 'hex')

                var _hex_gasLimit = web3.utils.toHex(_gasLimit.toString());
                var _hex_gasPrice = web3.utils.toHex(_gasPrice.toString());
                var _hex_value = web3.utils.toHex(web3.utils.toWei(_value,'ether'));
                
                var _hex_Gas = web3.utils.toHex('50000'); 

                console.log('------------------------------------------');
                web3.eth.getTransactionCount(_from).then(
                    nonce=>{

                        var _hex_nonce = web3.utils.toHex(nonce);
                        const rawTx = {
                            nonce: _hex_nonce,
                            to: _to,
                            from:_from,
                            gasLimit:_hex_gasLimit,
                            gas:_hex_Gas,
                            gasPrice:_hex_gasPrice,
                            value: _hex_value,
                            data: '0x00'
                        } 

                        const tx = new Tx(rawTx);
                        tx.sign(privateKey);

                        var serializedTx = '0x'+tx.serialize().toString('hex');  
                        web3.eth.sendSignedTransaction(serializedTx.toString('hex'),function(err,hash){
                            if(err)
                            { 
                                resolve(err);
                                console.log('------------------------------------------');
                            }
                            else
                            {
                                resolve('Txn Sent and hash is '+hash);
                                console.log('------------------------------------------');
                            }
                        }); 
                })
            }"
71215-2-0.sol,answer,"function(err,hash){
                            if(err)
                            { 
                                resolve(err);
                                console.log('------------------------------------------');
                            }
                            else
                            {
                                resolve('Txn Sent and hash is '+hash);
                                console.log('------------------------------------------');
                            }
                        }"
9103-1-0.sol,answer,"function() {
    return CarFactory.deployed()
        .then(function(factory) {
            return factory.createCar(""red"");
         })
         .then(assert.fail)
         .catch(function(error) {
                assert.include(
                    error.message,
                    'out of gas',
                    'red cars should throw an out of gas exception.'
                )
         });
}"
9103-1-0.sol,answer,"function(factory) {
            return factory.createCar(""red"");
         }"
9103-1-0.sol,answer,"function(error) {
                assert.include(
                    error.message,
                    'out of gas',
                    'red cars should throw an out of gas exception.'
                )
         }"
6883-4-0.sol,answer,"function(instance) {
  var deployed = instance;
  return instance.someFunction(5);
}"
71268-0-0.sol,answer,"function check(){
  var balance = await contract.methods.balanceOf('0x3c46b43e683b5addd7e66b3d1d958854ffb58361').call();
  console.log(balance);
}"
42768-2-1.sol,answer,"function() {
  return ""Prevent reload""
}"
9603-0-0.sol,answer,"function f ()  
    {

        assembly {
            let freemem_pointer := mload(0x40)
            mstore(add(freemem_pointer,0x00),""36e5236fcd4c61044949678014f0d085"")
            mstore(add(freemem_pointer,0x20),""36e5236fcd4c61044949678014f0d086"")
            let arr1:= mload(freemem_pointer) 
            mstore(add(freemem_pointer,0x40),arr1)


        }
    }"
54564-1-0.sol,answer,"function getCurrentAccount(){
    const currentAccounts = await web3.eth.getAccounts();
    console.log(`getCurrentAccount has resolved, returning a value of ${currentAccounts[0]}`);
    return currentAccounts[0];
}"
70013-0-0.sol,answer,"function() {
    
    
    
    return DappToken.deployed().then(function(instance){
        tokenInstance = instance;
        return DappTokenSale.deployed();
    }).then(function(instance){
        tokenSaleInstance = instance;
        return tokenSaleInstance.endSale({from:buyer });
"
8299-1-1.sol,answer,"function(deployer) {
  deployer.deploy(MEInterface, MEStorage.address).then(() => {
    MEStorage.deployed().then(storageInstance => {
        return storageInstance.setPermissions(MEInterface.address, 2);
        
    });
  });
}"
64317-0-0.sol,answer,"function initiateBid(uint _itemId, uint _endTime) public itemOwner{
require(msg.sender == itemToOwnerMapping[_itemId]);
itemToBiddingMap[_itemId] = biddingData(_endTime, 0, msg.sender,  true);}"
15228-0-0.sol,answer,function(response) { relay=response; }
26268-0-0.sol,answer,"function(instance) {
  meta = instance;
  return meta.getBalance.call(account, {from: account});
}"
26268-0-0.sol,answer,"function(e) {
  console.log(e);
  self.setStatus(""Error getting balance; see log."");
}"
69058-0-2.sol,answer,"function(signer) {
    
    console.log(signer === wallet.address);
}"
12547-0-0.sol,answer,"function(accounts) {
  it(""adding new member"", function() {
    Congress.deployed() 
    .then(function(temp) {
      congress = temp;
      return congress.addMember(""John"", 100, 100, 50, ""buyer"", {from:accounts[1]});
    })
    .then(function(txn){
      console.log(txn);
      
    });
  });
}"
12547-0-0.sol,answer,"function() {
    Congress.deployed() 
    .then(function(temp) {
      congress = temp;
      return congress.addMember(""John"", 100, 100, 50, ""buyer"", {from:accounts[1]});
    })
    .then(function(txn){
      console.log(txn);
      
    });
  }"
12547-0-0.sol,answer,"function(temp) {
      congress = temp;
      return congress.addMember(""John"", 100, 100, 50, ""buyer"", {from:accounts[1]});
    }"
12547-0-0.sol,answer,"function(txn){
      console.log(txn);
      
    }"
65482-0-0.sol,answer,"function(done) {
    

    
    done();
}"
67803-0-0.sol,answer,function(x) {return x;}
29062-0-1.sol,answer,"function(error, result) {
    if(!error) {
        console.log(result);
    }
    else {
        console.log(""Error"");
    }
 }"
82861-1-0.sol,answer,"function(error, result){
    if (error) {
        alert(""Error!"");
    }else {
        console.log(result, 'result');
    }
}"
11583-0-0.sol,answer,"function(_address) { 
  console.log(""the transaction returned"", _address);

... continue"
69235-1-4.sol,answer,"function vote(uint _voteIndex) public
{
    
    require(pass.isRegistered(msg.sender));"
78620-1-4.sol,answer,"function(error, result){ logs.push(result) }"
15857-0-0.sol,answer,"function(deployer) {
  deployer.deploy(HumanStandardToken, '800000000000000000000000000', 'CoinName', 18, 
    'MDC',{gas: 4700000})
}"
60274-1-0.sol,answer,"function defineTransport (){
 const transportContract = new web3.eth.Contract(ABI, addressContract);
 ethereum.enable();

 
 var transactionLog = await transportContract.methods.defineTransport(temperatureBond)
      .send({from: address1});

 
 var counter = transactionCounter.events.newTransport.returnValues.counter;     
 document.getElementById(""counter"").innerHTML = `Transport number:&nbsp;<strong>${counter}</strong>`;
 console.log(`counter: ${counter}`);}"
36672-0-0.sol,answer,"function() {
App.listfun
}"
64078-0-0.sol,answer,"function transfer(address tokenAddress, address dests, uint256 values) public
{
        ERC20Interface(tokenAddress).transfer(dests, values);
}"
10703-0-1.sol,answer,"function(req, res) {
    var bal = req.body.balance;

    web3.eth.getBalance(bal, exports.checkBalanceCallback); 
}"
10703-0-1.sol,answer,"function(error, result) {

     if(error != null) {
        console.error(error);
         return;
     }

    var accountBalance = result.toNumber();
    console.log(accountBalance);
}"
60744-0-0.sol,answer,"function(err, result) {
        nounce=result;
        var nounceHex = web3js.toHex(nounce);

        var rawTransaction = {""from"":myAddress,
        ""gasPrice"":web3js.toHex(2*1e9),
        ""gasLimit"":web3js.toHex(920000),
        ""to"":contractAddress,
        ""data"":contract.addBonus.getData(bonusType, target, year, month, day, token, bonus, bonusName, ineq),
        ""nonce"":nounceHex}

        var transaction = new Tx(rawTransaction);
        transaction.sign(privateKey);

        var serializedTx = transaction.serialize();
        web3js.eth.sendRawTransaction('0x'+serializedTx.toString('hex'), function(err1, hash) {
           if (!err1) {
               errcode=hash;
          }
           else
               errcode=err1;
        });
  }"
60744-0-0.sol,answer,"function(err1, hash) {
           if (!err1) {
               errcode=hash;
          }
           else
               errcode=err1;
        }"
55723-0-0.sol,answer,"function(){
var self = this;
var tokenId = parseInt(document.getElementById(""tokenId"").value);
var contractAbi = web3.eth.contract(YourContractABI);
var myContract = contractAbi.at(YourContractAddress);
myContract.ownerOf(tokenId,function(error,data){
 if(data){
       
     }
});
}"
55723-0-0.sol,answer,"function(error,data){
 if(data){
       
     }
}"
4531-3-0.sol,answer,"function(event) {

        console.log(event.detail);

        if (event.detail.status === ""success"") {
            let ipfsLink = ""https:
            document.getElementById(""IpfsGatewayUploadedLink"").innerHTML = ipfsLink;

        } else {
            console.log(event.detail);
            alert(""something happened, check console"");
        }
    }"
30879-0-2.sol,answer,"function addition() public 
{
    creator = msg.sender;                                
    uint c = a + b; 
}"
40342-0-0.sol,answer,"function(accounts) {
  it(""First test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
    
  })

  it(""Second test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
  })
})

contract('Test1', function(accounts) {
  it(""Third test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
  })

  it(""Forth test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
  })
})"
40342-0-0.sol,answer,"function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
    
  })

  it(""Second test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
  })
})

contract('Test1', function(accounts) {
  it(""Third test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
  })

  it(""Forth test"", function() {
    var thisTest
    return Test.deployed().then(function(instance) {
    thisTest = instance
  })
})"
11136-0-4.sol,answer,"function(txn) {
  
  
  return contract.balance.call(args);
}"
11136-0-4.sol,answer,"function(returnedBalance) {
  
}"
71180-0-2.sol,answer,"function(error, logs) {
    assert(error === null);
    for (let i = 0; i < logs.length; i++) {
        if (logs[i].event == 'Transfer' && logs[i].args.from == '0x0000000000000000000000000000000000000000') {
            console.log(logs[i]);
        }
    }
}"
69571-0-1.sol,answer,"function(data) {
    console.log('value is' + data);
}"
50565-0-1.sol,answer,"function(event){
    var log_info = {};
    var abi = App.contracts.Crowdsale.abi;
    var ClientReceipt = web3.eth.contract(abi);
    var clientReceipt = ClientReceipt.at(my_contract_address);
    var event = clientReceipt.PurchaseLogs({}, {fromBlock: 0, toBlock: 'latest'});
    const log_info = await WaitAllContractEventGet(event);
    console.log(log_info);
}"
11380-0-0.sol,answer,"function() {
    var userRatio = $scope.userHash * 1e6 / ($scope.netHashGH * 1e9);
    var blocksPerMin = 60.0 / $scope.blockTime;
    var ethPerMin = blocksPerMin * 5.0;
    $scope.earnings.min = userRatio * ethPerMin;
    $scope.earnings.hour = $scope.earnings.min * 60;
    $scope.earnings.day = $scope.earnings.hour * 24;
    $scope.earnings.week = $scope.earnings.day * 7;
    $scope.earnings.month = $scope.earnings.day * 30;
    $scope.earnings.year = $scope.earnings.day * 365;
  }"
15328-2-0.sol,answer,"function(deployer) {
  deployer.deploy(ContractObject);
}"
11023-0-2.sol,answer,"function(txn) {
  "
41997-0-2.sol,answer,"function(error, result) { 
            if(!error)
            {
                if(result.length == 0)
                {
                    toastr.error('Please ensure you logged in metamask.');
                    return false; 
                }
                myContractInstance.claimPayment(web3.toWei(tokensToRedeem),2,hash,{ from:result[0],
                            to:contrctAddress,
                            value:  0, 
                        }, function(err, transactionHash) {
                            if (!err)
                            {
                            $('#btnMetaMask').css('display','none');
                                $('#notesMeta').html(""Transaction Submitted. Track <a target='_blank' href='<?php echo $etherscanurl;?>/tx/""+transactionHash +""'>here</a>"");
                                console.log(transactionHash); 
                            }
                            else
                            {
                                console.log('Error While Redeem');
                                console.log(error);
                            }; 
                    }) 
                } 
                else
                { console.log('error');
                    console.log(err);
                }
            }"
41997-0-2.sol,answer,"function(err, transactionHash) {
                            if (!err)
                            {
                            $('#btnMetaMask').css('display','none');
                                $('#notesMeta').html(""Transaction Submitted. Track <a target='_blank' href='<?php echo $etherscanurl;?>/tx/""+transactionHash +""'>here</a>"");
                                console.log(transactionHash); 
                            }
                            else
                            {
                                console.log('Error While Redeem');
                                console.log(error);
                            }; 
                    }"
65229-0-1.sol,answer,"function() {
  return deployer.deploy(Sellers, TutorialToken.address);
}"
79840-0-4.sol,answer,"function(request, response){
        var test=new web3.eth.Contract(test_abi,"" 0xb198a5509138b265234BbD357F77cF44350e10D1"");
        var result=await test.methods.fname().call()
        
        
            response.render('index.jade', {data:result});
        }"
78737-0-0.sol,answer,"function(error, result) { 
    if (result && result.blockNumber) {
        console.log(result.value);
    }
    else {
        console.log('Not confirmed');
        setTimeout(() => {checkTx()}, 1000);
    }
}"
10473-0-0.sol,answer,"function MappingCombiner(mapper  map1, mapper map2) internal{ 
     }"
21773-2-1.sol,answer,"function(deployer) {
  deployer.deploy(Identity, { gas: 794722 });
}"
13990-0-1.sol,answer,"function(error, response)
    {
       
        var data = 'from: ' + response.args._from+""<br>candidateName: ""+web3.toUtf8(response.args._candidateName) +""<br>"";
    }"
44023-0-0.sol,answer,"function(deployer) {
  deployer.deploy(Voting, MetaCoin.address);
}"
58854-1-0.sol,answer,"function(err,res) {
     
     console.log(res.args); 
}"
42657-1-0.sol,answer,"function() {
      let result ;
      if (typeof web3 !== 'undefined') {
        result = await MyContract.methods.getValue().call();
      }
}"
71415-0-0.sol,answer,"function createAccount(){
    var wallet = await web3.eth.accounts.create();
    console.log('Address:' + wallet.address);
    console.log('Private Key: ' + wallet.privateKey)
}"
41058-0-0.sol,answer,"function executeBytecode(address addr, bytes transactionBytecode, uint256 etherAmount){

    addr.call.value(etherAmount)(transactionBytecode);

}"
15704-0-0.sol,answer,"function(s,p){
    console.log(""s=%d, p=%d"", s, p);
}"
62272-0-2.sol,answer,"function(error, result){
    console.log(""Current total supply: "" + result.toString());
}"
66641-0-4.sol,answer,"function() {

        var MitigatorAddress;

        return await Protocol.deployed().then(async function(instance) {          
            
            
            var event = instance.MitigatorCreated(function(error, response) {
                if (!error) {
                    MitigatorAddress = response.args.addr;
                }else{
                    console.log(error);
                }
            });

            await instance.registerMitigator(MitigatorOwner,1000,""Mitigator1"", {from: TargetOwner});
            return await IActor.at(MitigatorAddress).then(async function(owner) { 
                assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator address is wrong"");
            });
        });
    }"
66641-0-4.sol,answer,"function(instance) {          
            
            
            var event = instance.MitigatorCreated(function(error, response) {
                if (!error) {
                    MitigatorAddress = response.args.addr;
                }else{
                    console.log(error);
                }
            });

            await instance.registerMitigator(MitigatorOwner,1000,""Mitigator1"", {from: TargetOwner});
            return await IActor.at(MitigatorAddress).then(async function(owner) { 
                assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator address is wrong"");
            });
        }"
66641-0-4.sol,answer,"function(error, response) {
                if (!error) {
                    MitigatorAddress = response.args.addr;
                }else{
                    console.log(error);
                }
            }"
66641-0-4.sol,answer,"function(owner) { 
                assert.equal(MitigatorOwner, await owner.getOwner(), ""Mitigator address is wrong"");
            }"
74719-0-0.sol,answer,"function() external payable {
            if (totalSupply >= 1000) {
            BTA+=1;
            } else {
            uint toMint = msg.value/price;
            totalSupply+=toMint;
            balances[msg.sender]+=toMint;
            contractManager.transfer(msg.value);
            emit Transfer(0, msg.sender, toMint);
      }
"
56718-0-0.sol,answer,"function donate()
{
    
    if donatorDidNotSpecify {
        addIndex(donationAmount)
    }
}"
56718-0-0.sol,answer,"function addIndex(uint256 _donationAmount)
    internal
{
    uint256 amountPerOrg = _donationAmount.div(numOfOrgs);
    claimAmount[claimIndex] = amountPerOrg;
    claimIndex += 1;           
}"
56718-0-0.sol,answer,"function claim(uint256 _claimIndex)
    public
{
    if (isIndexClaimed[msg.sender][_claimIndex] == false) {
        isIndexClaimed[msg.sender][_claimIndex] = true;  
        uint256 amount = claimAmount[_claimIndex];
        msg.sender.transfer(amount);
    }
}"
83293-0-1.sol,answer,"function(deployer, network, accounts) {
    const acc1=accounts[0];
    const acc2=accounts[1];
  deployer.deploy(kyc,acc1,acc2);
}"
69058-0-0.sol,answer,"function(key) {
  console.log(key.privateKeyArmored);
}"
29250-0-0.sol,answer,"function(done) {
  testrpc = TestRPC.server({
    ws: true,
    gasLimit: 5800000,
    total_accounts: 10,
    seed: 1
  });

  testrpc.listen(8546, '127.0.0.1');
  done();
}"
2531-10-0.sol,answer,"function(e) {
                if (myAddr == e.from) {
                    if (e.from != e.to)
                        bal = bal.plus(e.value);
                    console.log(i, e.from, e.to, e.value.toString(10));
                    --n;
                }
                if (myAddr == e.to) {
                    if (e.from != e.to)
                        bal = bal.minus(e.value);
                    console.log(i, e.from, e.to, e.value.toString(10));
                }
            }"
6320-0-3.sol,answer,"function(error, result){
  var args = result.args;
  if (args._to == ""0x0000000000000000000000000000000000000000"") {
    i++;
    var daos = args._amount / 1e16;
    console.log(i + "","" + args._from + "","" + result.blockNumber + "","" + daos);
  }
}"
44601-1-0.sol,answer,"function() {
  if (typeof web3 !== 'undefined') {
    console.log('web3 is enabled')
    if (web3.currentProvider.isMetaMask === true) {
      console.log('MetaMask is active')
    } else {
      console.log('MetaMask is not available')
    }
  } else {
    console.log('web3 is not found')
  }
}"
29769-0-0.sol,answer,"function(deployer) {
  deployer.deploy(User);
  

}"
39622-1-2.sol,answer,"function(error, result){
  if(error){
        console.log(""Error"", error);
        return;
    }
    
}"
34347-0-0.sol,answer,"function getNetworkStats(
        sampleSize 
    ) {
    blockNum = eth.blockNumber; 
    blockTime = (eth.getBlock(blockNum).timestamp - eth.getBlock(blockNum - sampleSize).timestamp) / sampleSize;
    difficulty = eth.getBlock(blockNum).difficulty; 

    return {
      ""blocktime"": blockTime,
      ""difficulty"": difficulty,
      ""hashrate"": difficulty / blockTime,
    };
}"
34303-0-0.sol,answer,"function(deployer) {
deployer.deploy(InterfacePayroll );
deployer.deploy(EmployeeStorage);
deployer.deploy(Token);
deployer.link(InterfacePayroll ,Payroll );
deployer.link(EmployeeStorage,Payroll );
deployer.link(Token,Payroll );
deployer.deploy(Payroll );
}"
15584-0-3.sol,answer,"function(accounts) {
  it(""should return the correct book rating"", function() {
    var reviews;
    return Reviews.deployed().then(function(instance) {
      reviews = instance;
      return reviews.rateBook(0, 5, ""This book changed my life"");
    }).then(function() {
      return reviews.ratings.call(0, 0);
    }).then(function(review) {
      assert.equal(review[0], 5, ""5 wasn't the rating for the book with id 0"");
    });
  });
}"
15584-0-3.sol,answer,"function() {
    var reviews;
    return Reviews.deployed().then(function(instance) {
      reviews = instance;
      return reviews.rateBook(0, 5, ""This book changed my life"");
    }).then(function() {
      return reviews.ratings.call(0, 0);
    }).then(function(review) {
      assert.equal(review[0], 5, ""5 wasn't the rating for the book with id 0"");
    });
  }"
15584-0-3.sol,answer,"function(instance) {
      reviews = instance;
      return reviews.rateBook(0, 5, ""This book changed my life"");
    }"
15584-0-3.sol,answer,"function(review) {
      assert.equal(review[0], 5, ""5 wasn't the rating for the book with id 0"");
    }"
66641-0-1.sol,answer,"function(error, response) {
    if (!error) {
        TargetAddress = response.args.addr;
    }else{
        console.log(error);
    }
}"
14017-0-3.sol,answer,"function destroy(id) internal

{
   delete clusterContract[msg.sender].my_status[storedIDs[id]]; 
}"
78341-0-0.sol,answer,"function(success) {
    assert.equal(success, true, 'it returns true');
"
80266-0-0.sol,answer,"function(err, transactionHash) {

}"
35425-1-0.sol,answer,"function(){

    

    let accounts = await web3.eth.getAccounts();
    let msg = ""Some data""

    let prefix = ""\x19Ethereum Signed Message:\n"" + msg.length
    let msgHash1 = web3.utils.sha3(prefix+msg)

    let sig1 = await web3.eth.sign(msg, accounts[0]);


    

    let privateKey = ""0xc87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3""

    let sigObj = await web3.eth.accounts.sign(msg, privateKey)
    let msgHash2 = sigObj.messageHash;

    let sig2 = sigObj.signature;


    let whoSigned1 = await web3.eth.accounts.recover(msg, sig1)
    let whoSigned2 = await web3.eth.accounts.recover(sigObj)

}"
18362-0-0.sol,answer,"function(instance) {
  guess = instance;
  return guess.getContractAddress.call()
}"
18362-0-0.sol,answer,"function(response) {
  console.log(""Response:"", response);
}"
43742-0-0.sol,answer,"function(_number){
  self.setState({
    notebookCount: _number.toNumber()
 });
}"
78074-0-0.sol,answer,"function(err, result) {
...
web3.eth.getTransactionCount(fromAddress)
  .then((count) => {
    let rawTransaction = {
      'from': fromAddress,
      'gasPrice': web3.utils.toHex(10 * 1e9),
      'gasLimit': web3.utils.toHex(21000),
      'to': walletAddress,
      'value': web3.utils.toHex(web3.utils.toWei(""0.0002"")),
      'nonce': web3.utils.toHex(count)
    }
    let transaction = new Tx(rawTransaction)
    transaction.sign(privateKey)

    return new Promise((resolve, reject) => {
       web3.eth.sendSignedTransaction('0x' + transaction.serialize().toString('hex'))
      .on('transactionHash', console.log)
      .on('receipt', resolve)
      .on('error', reject)
    })
  }).then(receipt => {
    
  })
..."
46501-0-1.sol,answer,"function() payable public {
    emit LogForwarded(msg.sender, msg.value);
    
  }"
19661-1-3.sol,answer,"function(err, addresses) {
   if (err) return console.log(err);
   var addr = addresses[0];

   MyContract.getMatnr.call(addr, function(err, matnr) {
       if (err) return console.log(err);
       console.log(matnr);
   });
}"
19661-1-3.sol,answer,"function(err, matnr) {
       if (err) return console.log(err);
       console.log(matnr);
   }"
45398-0-0.sol,answer,"function deposit() public payable{
    
}"
56169-0-1.sol,answer,"function(error, result){ 
    var gasPrice = Number(result);
    console.log(""Gas Price is "" + gasPrice + "" wei""); 

    Coursetro.methods.setFile.(identifier, fileName, ""hash..."").estimateGas.then({from: 0x}, function(result) {
        var gas = Number(result);

        console.log(""gas estimation = "" + gas + "" units"");
        console.log(""gas cost estimation = "" + (gas * gasPrice) + "" wei"");
        console.log(""gas cost estimation = "" + TestContract.web3.fromWei((gas * gasPrice), 'ether') + "" ether"");
    });
}"
56169-0-1.sol,answer,"function(result) {
        var gas = Number(result);

        console.log(""gas estimation = "" + gas + "" units"");
        console.log(""gas cost estimation = "" + (gas * gasPrice) + "" wei"");
        console.log(""gas cost estimation = "" + TestContract.web3.fromWei((gas * gasPrice), 'ether') + "" ether"");
    }"
24828-3-0.sol,answer,"function(error, accounts) {
  if (error) throw error;
  
  tokenContractInstance.transfer.sendTransaction(toAddress, calculatedTransferValue, {from: accounts[0]}, function(error, txnHash) {
    if (error) throw error;
    console.log(txnHash);
  });
}"
24828-3-0.sol,answer,"function(error, txnHash) {
    if (error) throw error;
    console.log(txnHash);
  }"
10703-0-0.sol,answer,"function(req, res) {
    var bal = req.body.balance;

    web3.eth.getBalance(bal, function(error, result) {
        
        console.log(""Response received"");

        if(error != null) {
            console.error(error);
            return;
        }

        var accountBalance = result.toNumber();
        console.log(accountBalance);
    }); 

    
    console.log(""Request sent"");
}"
10703-0-0.sol,answer,"function(error, result) {
        
        console.log(""Response received"");

        if(error != null) {
            console.error(error);
            return;
        }

        var accountBalance = result.toNumber();
        console.log(accountBalance);
    }"
58207-0-1.sol,answer,"function(err,res){
        if(err){
            console.log('transaction failed')
        } 
    }"
43195-0-1.sol,answer,"function decrement_token(address from, uint val) external{
    require(valid_caller_contracts[msg.sender]);
    require(token_balance[from] >= val);
    token_balance[from] -=val;
}"
57905-0-1.sol,answer,"function(deployer, network, accounts) {
    if (network == ""production"")
        deployer.deploy(Register, ""tesst"", 0);
}"
27072-1-0.sol,answer,"function(error, result){
  eventOutput = result.args.val.toNumber()
}"
34405-1-0.sol,answer,"function(error, result) {
    if(error != null)
        console.log(""Couldn't get accounts');

    console.log(result); 
    console.log(result[3]); 
}"
22983-3-1.sol,answer,"function(result){
    
    var myTokenBalance = result;
    return result;
}"
52567-0-0.sol,answer,"function(instance){
        var instancee = instance;
        return instancee.add(Math.random(), {from:wallet,gas:4000000});
    }"
38131-0-1.sol,answer,"function createTokens() payable{
    require(msg.value > 0);
    uint256 tokens = msg.value.mul(RATE);
    require(_totalSupply.add(tokens) <= maxTokens);
    balances[msg.sender] = balances[msg.sender].add(tokens);
    _totalSupply = _totalSupply.add(tokens);
    owner.transfer(msg.value);
}"
60274-0-0.sol,answer,"function(txHash, callback) {
    web3.currentProvider.sendAsync(
        {
            jsonrpc: ""2.0"",
            method: ""debug_traceTransaction"",
            params: [ txHash ],
            id: new Date().getTime()
        },
        (error, result) => {
            callback(error, error ? result : result.result);
        });
}"
24313-0-0.sol,answer,"function(error, response){
    
    if(!error) { 
        console.log(response); 
        accounts = response;  
        defaultAccount = accounts[0]; 
        
     } else {
        console.error(error); 
     }
}"
42897-0-0.sol,answer,"function Crowdsale(
    address ifSuccessfulSendTo,
    uint fundingGoalInEthers,
    uint durationInMinutes,
    uint miliEtherCostOfEachToken,
    address addressOfTokenUsedAsReward
) {
    beneficiary = ifSuccessfulSendTo;
    fundingGoal = fundingGoalInEthers * 1 ether;
    deadline = now + durationInMinutes * 1 minutes;

    
    price = miliEtherCostOfEachToken * 0.001 ether;

    tokenReward = token(addressOfTokenUsedAsReward);
}"
15246-0-0.sol,answer,"function Demo(address test) payable
 {
    myaddress = test;
 }"
57354-0-0.sol,answer,"function() {

  
  if (typeof web3 !== 'undefined') {
    
    web3 = new Web3(web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    
    web3 = new Web3(new Web3.providers.HttpProvider(""https:
  }

  
  startApp()

}"
30899-0-0.sol,answer,"function censorChatMessage(uint256 messageIndex)
{
    require(msg.sender == administrator);
    chatMessageCensored[messageIndex] = true;
}"
69921-0-0.sol,answer,"function setValue(uint _chargePointDuration, uint _chargePointEnergy, string memory sessionId) public{
        values[sessionId] = data(_chargePointDuration,_chargePointEnergy);
}"
36810-0-0.sol,answer,"function() {
        var self = this;

        
        Ubi.setProvider(web3.currentProvider);

        
        web3.eth.getAccounts(function(err, accs) {
          if (err != null) {
            alert(""There was an error fetching your accounts. Make sure MetaMask Chrome extension is installed."");
            return;
          }

          if (accs.length == 0) {
            alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
            return;
          }
          accounts = accs;
          account = accounts[0];
          web3.eth.defaultAccount = account;
        });
      }"
36810-0-0.sol,answer,"function(err, accs) {
          if (err != null) {
            alert(""There was an error fetching your accounts. Make sure MetaMask Chrome extension is installed."");
            return;
          }

          if (accs.length == 0) {
            alert(""Couldn't get any accounts! Make sure your Ethereum client is configured correctly."");
            return;
          }
          accounts = accs;
          account = accounts[0];
          web3.eth.defaultAccount = account;
        }"
63618-3-0.sol,answer,"function approve() external payable{
    require(msg.sender == approver);

  address(uint160(receiver)).transfer(address(this).balance);
}"
65048-1-0.sol,answer,"function addCandidate(string _name) private{
"
84202-1-0.sol,answer,"function(val){
            variable = ret;
    }"
18432-0-0.sol,answer,"function(deployer, network, accounts) {
  deployer.deploy(B);
  deployer.deploy(A, B.address);
}"
2943-0-1.sol,answer,"function add(uint data,uint index){
  example[index] = data;
  indexes.push(index);
}"
11484-1-0.sol,answer,"function transferOwnership (address newOwner) onlyOwner{
    
    if (newOwner != 0x0){
        owner = newOwner;
    }
}"
46199-1-1.sol,answer,"function() {
$.getJSON('Election.json', function(election) {
  
  App.contracts.Election = TruffleContract(election);
  
  App.contracts.Election.setProvider(App.web3Provider);
  return App.render();
});
"
79892-1-0.sol,answer,"function(acc){
        App.account = acc[0];
    }"
63515-0-0.sol,answer,"function accessTheString(string calldata _uri) external{        
    string memory contractString= _uri;
}"
37441-0-1.sol,answer,"function(r){
    console.log('Transaction succeed, see returned info below :'); 
    console.log(r);
}"
37441-0-1.sol,answer,"function(e){
    console.log('Transaction failed, see logs below :');
    console.log(e);
}"
46239-1-0.sol,answer,"function(str) {
    return new Buffer(str, 'binary').toString('base64');
  }"
46239-1-0.sol,answer,"function(b64Encoded) {
    return new Buffer(b64Encoded, 'base64').toString('binary');
  }"
43028-0-0.sol,answer,"function(accounts) {
  it('Call with sendTransaction', async () => {
    const myContract = await MyContract.deployed();

    
    const data = myContract.foo.request(23);

    

    const txhash = web3.eth.sendTransaction({ 
      from: accounts[0], 
      to: myContract.address, 
      value: 1, 
      data: data.params[0].data
    });
  });
}"
40219-0-0.sol,answer,"function logEventOne(string data) public onlySelf{
    EventOne(data);
}"
40219-0-0.sol,answer,"function logEventTwo(string data) public onlySelf{
    EventTwo(data);
}"
40219-0-0.sol,answer,"function callEvent(string functionSignature, string data){
    this.call(bytes4(sha3(functionSignature)),data);
}"
18098-0-0.sol,answer,"function(error, blockHash) {
    if (!error) {
        var block = web3.eth.getBlock(blockHash, true);        
        if (block.transactions.length > 0) {
            console.log(""found "" + block.transactions.length + "" transactions in block "" + blockHash);
            console.log(JSON.stringify(block.transactions));
        } else {
            console.log(""no transaction in block: "" + blockHash);
        }
    }
}"
50548-0-0.sol,answer,"function(error, txCount) {
   
}"
55692-1-1.sol,answer,"function(accounts) {
  it(""should get an array of uint256's"", async function() {
    var meta = await MetaCoin.deployed();
    await meta.writeNumber(123);
    await meta.writeNumber(321);
    await meta.writeNumber(231);

    var numberAray = await meta.getNumbers();

    assert.equal(await numberAray.length, 3, ""Array did not return as expected.."");
  });
}"
55692-1-1.sol,answer,"function() {
    var meta = await MetaCoin.deployed();
    await meta.writeNumber(123);
    await meta.writeNumber(321);
    await meta.writeNumber(231);

    var numberAray = await meta.getNumbers();

    assert.equal(await numberAray.length, 3, ""Array did not return as expected.."");
  }"
66311-0-3.sol,answer,"function() {
    await truffleAssert.reverts(
        auctionInstance.bid(itemId[0], count[6], {from: account[1]}), 
        ""Failed to check remaining tokens less than count""
    );
}"
46517-0-0.sol,answer,"function(resolve, reject) {  
                var tx = web3.eth.sendTransaction({data: code});  
                if (tx != null) {  
                   resolve(tx);  
                } else {  
                   reject('could not get transaction data');  
                }  
            }"
46840-2-0.sol,answer,"function(tester) {
          console.log(""Tester"", tester);
 }"
46840-2-0.sol,answer,"function(err) {
          console.error(""problem getting tester"", err);
 }"
59150-0-0.sol,answer,"function(number) {  
    console.log(number)
}"
17214-0-0.sol,answer,"function process1(k){
  myContract.query(k, 2000000, {from: web3.eth.accounts[0]});
  var responding = myContract.responding({}, {fromBlock: 'latest', toBlock: 'latest'});
  responding.watch((error, eventResult) => {
    if (error)
    console.log('Error: ' + error);
    else{
      console.log('myEvent: ' + JSON.stringify(eventResult));
      k = eventResult.args.r;
      k++;
      myContract.query(k, 2000000, {from: web3.eth.accounts[0]});
    }
  });
}"
17214-0-0.sol,answer,"function process2(){
  var asking = myContract.asking({}, {fromBlock: 'latest', toBlock: 'latest'});
  asking.watch((error, eventResult) => {
    if (error)
    console.log('Error: ' + error);
    else{
      console.log('myEvent: ' + JSON.stringify(eventResult));
      k = eventResult.args.q;
      k++;
      myContract.response(k, 2000000, {from: web3.eth.accounts[0]});
    }
  });
}"
50866-1-3.sol,answer,"function(resolve, reject) {
    
    window.addEventListener('load', function() {
        var results
        var web3 = window.web3

        
        if (typeof web3 !== 'undefined') {
            
            web3 = new Web3(web3.currentProvider)

            results = {
                web3: web3
            }

            console.log('Injected web3 detected.');

            return resolve(results)
        } else {
            
            
            

            var mnemonic = ""infura mnemonic""
            var provider = new HDWalletProvider(mnemonic, ""https:
            web3 = new Web3(provider)

            results = {
                web3: web3
            }

            console.log('No web3 instance injected, using Local web3.');

            return resolve(results)
        }
    })
}"
50866-1-3.sol,answer,"function() {
        var results
        var web3 = window.web3

        
        if (typeof web3 !== 'undefined') {
            
            web3 = new Web3(web3.currentProvider)

            results = {
                web3: web3
            }

            console.log('Injected web3 detected.');

            return resolve(results)
        } else {
            
            
            

            var mnemonic = ""infura mnemonic""
            var provider = new HDWalletProvider(mnemonic, ""https:
            web3 = new Web3(provider)

            results = {
                web3: web3
            }

            console.log('No web3 instance injected, using Local web3.');

            return resolve(results)
        }
    }"
22911-1-0.sol,answer,"function(err) {
    
    console.error(err.stack)
}"
76282-1-0.sol,answer,"function registerDriver(string memory _name, uint _phno, uint _licenceno) public{
  driverStructs[msg.sender] = Driver(_name, _phno, _licenceno, isDriverRegistered, cartypes[x], index);
}"
1777-2-1.sol,answer,"function tohex(msg){
    var hexmsg = """";
    for(var i=0; i<msg.length; i++){
        hexmsg += msg.charCodeAt(i).toString(16);
    }
    return ""0x""+hexmsg;
}"
1777-2-1.sol,answer,"function verificationScheme(str){
    var msghex = tohex(str);
    var sig = web3.eth.sign(web3.eth.accounts[0], msghex);

    var r = sig.slice(0, 66);
    var s = '0x' + sig.slice(66, 130);
    var v = '0x' + sig.slice(130, 132);
    v = web3.toDecimal(v);

    var verificationMessage = ""\x19Ethereum Signed Message:\n"" + str.length + str;
    var verificationMessageHash = web3.sha3(verificationMessage);

    return [verificationMessageHash, v, r, s];
}"
29433-0-1.sol,answer,"function sendMoney(uint _money) payable{
      require (_money <= this.balance);
      if(_money < 1 ether)
        msg.sender.transfer(_money);
      else
        
    }"
9103-2-0.sol,answer,"function(accounts) {
  it(""should throw an exception"", function() {
    return EthWall.deployed().then(function(instance) {
      return instance.testThrow.call();
    }).then(function(returnValue) {
      assert(false, ""testThrow was supposed to throw but didn't."");
    }).catch(function(error) {
      if(error.toString().indexOf(""invalid JUMP"") != -1) {
        console.log(""We were expecting a Solidity throw (aka an invalid JUMP), we got one. Test succeeded."");
      } else {
        
        assert(false, error.toString());
      }
    });
  });
}"
9103-2-0.sol,answer,"function() {
    return EthWall.deployed().then(function(instance) {
      return instance.testThrow.call();
    }).then(function(returnValue) {
      assert(false, ""testThrow was supposed to throw but didn't."");
    }).catch(function(error) {
      if(error.toString().indexOf(""invalid JUMP"") != -1) {
        console.log(""We were expecting a Solidity throw (aka an invalid JUMP), we got one. Test succeeded."");
      } else {
        
        assert(false, error.toString());
      }
    });
  }"
9103-2-0.sol,answer,"function(instance) {
      return instance.testThrow.call();
    }"
9103-2-0.sol,answer,"function(returnValue) {
      assert(false, ""testThrow was supposed to throw but didn't."");
    }"
9103-2-0.sol,answer,"function(error) {
      if(error.toString().indexOf(""invalid JUMP"") != -1) {
        console.log(""We were expecting a Solidity throw (aka an invalid JUMP), we got one. Test succeeded."");
      } else {
        
        assert(false, error.toString());
      }
    }"
54939-0-1.sol,answer,"function(deployer) {
  deployer.deploy(TokenFactory);
}"
23253-1-0.sol,answer,function(instance) {return JSON.stringify(instance.abi);}
29739-0-0.sol,answer,"function(){
    var instance = ContractA.at(ContractA.address);
    return instance.doFunction(param1, param2);
}"
63617-0-0.sol,answer,"function(accounts) {
    const REVERT = ""VM Exception while processing transaction: revert"";
    it(""should not transfer 1 token from address[0] to address[1]"", async function() {
        try {
            await erc20Instance.transfer(accounts[1], 1);
            throw null;
        }
        catch (error) {
            assert(error, ""Expected an error but did not get one"");
            assert(error.message.startsWith(REVERT), ""Expected '"" + REVERT + ""' but got '"" + error.message + ""' instead"");
        }
    });
}"
63617-0-0.sol,answer,"function() {
        try {
            await erc20Instance.transfer(accounts[1], 1);
            throw null;
        }
        catch (error) {
            assert(error, ""Expected an error but did not get one"");
            assert(error.message.startsWith(REVERT), ""Expected '"" + REVERT + ""' but got '"" + error.message + ""' instead"");
        }
    }"
57397-1-0.sol,answer,"function(error, result){
    if (!error)
        {
            console.log(result);
            } else {
            console.log(error);
        } 
        return;
   }"
47189-0-0.sol,answer,"function(err, res) {
   if (res.transactions.length) {
      for (var i = 0; i<res.transactions.length; i++) {
         web3.eth.getTransaction(res.transactions[i], function(err,response) {
            if (response.value > 0) {
               console.log(""transaction response"", response);
            }
         })
      }
   }
}"
47189-0-0.sol,answer,"function(err,response) {
            if (response.value > 0) {
               console.log(""transaction response"", response);
            }
         }"
17024-2-0.sol,answer,"function(error, block){
  if(!error)
    console.log(block.number)
  else
    console.error(error);
}"
82287-0-0.sol,answer,"function(hash){
    web3.eth.getTransactionReceipt(hash).then(() => {
    ..
  })
}"
73360-0-0.sol,answer,"function(value) {
        var accountnumber = value;
        console.log(accountnumber);
        web3.eth.personal.unlockAccount('0x197022acd263e8be0f6b65b10d1e5cdbaa244c17',""*****"", 1500, function(err, result){
          if(err){
            alert(""Error""+ err);
            return;
          }else {
          alert(""Parent Opening: ""+ result);
          web3.eth.sendTransaction({
          from: ""0x197022acd263e8be0f6b65b10d1e5cdbaa244c17"",
          to: accountnumber, 
          value: '100000000000000000', 
          }, function(err, transactionHash) {
          if (err) { 
              console.log(err); 
          } else {
            web3.eth.personal.unlockAccount(accountnumber,pass, 1500, function(err, result){
              if(err){
                alert(""Error""+ err);
                return;
              }else{
                console.log(web3.eth.getBalance(accountnumber));
                alert(""Child Opening: ""+ result);
                auth.methods.approve().send({gas: '20000000',from: accountnumber}, function(err, result){
                if(err){
                  alert(""Error""+ err);
                  return;
                }else{
                  console.log(""Account address: ""+ result);
                  console.log('Smart Contract approved ! ');

                }
                });
              }
            });
          }
          });
       }

      });
}"
73360-0-0.sol,answer,"function(err, result){
          if(err){
            alert(""Error""+ err);
            return;
          }else {
          alert(""Parent Opening: ""+ result);
          web3.eth.sendTransaction({
          from: ""0x197022acd263e8be0f6b65b10d1e5cdbaa244c17"",
          to: accountnumber, 
          value: '100000000000000000', 
          }, function(err, transactionHash) {
          if (err) { 
              console.log(err); 
          } else {
            web3.eth.personal.unlockAccount(accountnumber,pass, 1500, function(err, result){
              if(err){
                alert(""Error""+ err);
                return;
              }else{
                console.log(web3.eth.getBalance(accountnumber));
                alert(""Child Opening: ""+ result);
                auth.methods.approve().send({gas: '20000000',from: accountnumber}, function(err, result){
                if(err){
                  alert(""Error""+ err);
                  return;
                }else{
                  console.log(""Account address: ""+ result);
                  console.log('Smart Contract approved ! ');

                }
                });
              }
            });
          }
          });
       }

      }"
73360-0-0.sol,answer,"function(err, transactionHash) {
          if (err) { 
              console.log(err); 
          } else {
            web3.eth.personal.unlockAccount(accountnumber,pass, 1500, function(err, result){
              if(err){
                alert(""Error""+ err);
                return;
              }else{
                console.log(web3.eth.getBalance(accountnumber));
                alert(""Child Opening: ""+ result);
                auth.methods.approve().send({gas: '20000000',from: accountnumber}, function(err, result){
                if(err){
                  alert(""Error""+ err);
                  return;
                }else{
                  console.log(""Account address: ""+ result);
                  console.log('Smart Contract approved ! ');

                }
                });
              }
            });
          }
          }"
73951-0-1.sol,answer,"function() external payable {
    makeDeposit(msg.sender, msg.value);
}"
56642-0-1.sol,answer,"function(){
  contractInstance.get().call((error, result) => {console.log(result)})
}"
19282-1-0.sol,answer,"function(error, result){
  gasPrice = result.toNumber();
  var gasValue = estimatedGas * gasPrice
  var valueToSend = totalBalance - gasValue;   
  }"
47399-0-0.sol,answer,"function(e, s)
{
  totalFighters = parseInt(s);
  for (i = 0; i < totalFighters; i++)
  {
    CRYPTOFIGHTERS_API.tokensOfOwnerByIndex(web3.eth.accounts[0],i, function(error, success) 
    {
       if (success.c[0] > 0)
        loadFighter(success.c[0]);
    });
  }
}"
47399-0-0.sol,answer,"function(error, success) 
    {
       if (success.c[0] > 0)
        loadFighter(success.c[0]);
    }"
47399-0-0.sol,answer,"function loadFighter(id)
{
    CRYPTOFIGHTERS_API.getFighter(id, function(error, success) 
    { 
      console.log(JSON.stringify(success)); 
      cryptofighters.push(JSON.stringify(success));
});
}"
77955-0-0.sol,answer,"function(deployer) {
    deployer.deploy(ProofOfExistence1);
    deployer.deploy(ProofOfExistence2);
}"
41954-0-0.sol,answer,"function(err, transactionHash) {
                            if (!err)
                            {
                                $('#btnSample').css('display','none');
                                $('#info').html(""Transaction succeeded. Track <a href='https:
                                console.log(transactionHash); 
                            }
                            else
                            {
                                console.log('Error in the method');
                                console.log(error);
                            };
                        }"
15342-0-0.sol,answer,"function set(bytes32 key, bytes data)
    onlyOwner
{
    simpleDB[key] = data;
}"
79042-0-2.sol,answer,"function(result) {
    console.log(result[0]);
}"
11136-0-2.sol,answer,"function(ownerReturned) {
  console.log(""got owner"", ownerReturned);
}"
11136-0-2.sol,answer,"function(err) {
 console.error(""problem getting owner"", err;
}"
57055-0-2.sol,answer,"function(deployer) {
    deployer.deploy(zeppelinSales, rate, wallet, token);
}"
59737-0-0.sol,answer,"function(hex) {
    var str = """";
    var i = 0, l = hex.length;
    if (hex.substring(0, 2) === '0x') {
        i = 2;
    }
    for (; i < l; i+=2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }

    return str;
}"
43154-0-0.sol,answer,"function(deployer) {
  deployer.deploy(myContract);
}"
1777-3-0.sol,answer,"function() {
    var instance = await Adoption.deployed()
    let msg = 'I really did make this message';
    let prefix = ""\x19Ethereum Signed Message:\n"" + msg.length
    let h = web3.utils.sha3(prefix+msg)
    console.log(`sha3 hash ${h}`);

    let sig1 = await web3.eth.sign(msg, address);
    console.log(`signature: ${sig1}`)
    var sig = sig1.slice(2)
    var r = `0x${sig.slice(0, 64)}`
    var s = `0x${sig.slice(64, 128)}`
    var v = web3.utils.toDecimal(sig.slice(128, 130)) + 27

    var result = await instance.recoverAddr.call(h, v, r, s)
    console.log(`address: ${address}, result ${result}`)
    assert.equal(result, address)
  }"
68285-1-1.sol,answer,"function(deployer) {
  deployer.deploy(sampleapp);
}"
15353-0-0.sol,answer,"function() {
    return myContract
        .stockShelf(""beer"", ""wine"", {from: sellerAccount})
        .then(() => myContract.sell(""water"", ""bread"", {from: sellerAccount}))
        .then(() => utils.assertEvent(my));
}"
21469-0-1.sol,answer,"function(accounts) {
  it(""Create new market"", async function() {
    const instance = await MarketMaker.new(accounts[0], accounts[1]);
    await instance.createNewMarket(""Hello!"", 1234, false);
    assert.equal(1, 2); 
  });
}"
21469-0-1.sol,answer,"function() {
    const instance = await MarketMaker.new(accounts[0], accounts[1]);
    await instance.createNewMarket(""Hello!"", 1234, false);
    assert.equal(1, 2); 
  }"
83467-0-1.sol,answer,"function(bal) {
    $(""#SmartBalance"").html(""Your Balance: "" + bal);
}"
19661-0-0.sol,answer,"function(accounts) {
  it(""Retrieve"", async function() {
    const zusatzaufgabe = await Zusatzaufgabe.deployed();

    
    await zusatzaufgabe.register(""hola"", ""hola"", 123, { from: accounts[1] });
    await zusatzaufgabe.register(""toma"", ""joni"", 321, { from: accounts[2] });

    
    const addressen = await zusatzaufgabe.addressen.call(0);
    assert.equal(addressen, accounts[1]);

    
    const student = await zusatzaufgabe.studenten.call(addressen);
    assert.equal(student[2].toNumber(), 123);
  });
}"
19661-0-0.sol,answer,"function() {
    const zusatzaufgabe = await Zusatzaufgabe.deployed();

    
    await zusatzaufgabe.register(""hola"", ""hola"", 123, { from: accounts[1] });
    await zusatzaufgabe.register(""toma"", ""joni"", 321, { from: accounts[2] });

    
    const addressen = await zusatzaufgabe.addressen.call(0);
    assert.equal(addressen, accounts[1]);

    
    const student = await zusatzaufgabe.studenten.call(addressen);
    assert.equal(student[2].toNumber(), 123);
  }"
31342-0-1.sol,answer,"function(error, result){
    if(!error) {
        
    }
}"
65236-0-0.sol,answer,"function(error,response) { 
  accountList = response; 
  console.log(accountList);
}"
34975-0-0.sol,answer,"function(error,data){
            
            var rowdata = data.toString().split(',')

            
            

          }"
2429-0-0.sol,answer,"function(item){
    if(item.address)
        Wallets.update(item._id, {$set: {address: item.address.toLowerCase()}}); 
}"
78850-0-0.sol,answer,"function(deployer, network, accounts) {
  deployer.then(async () => {

    let provider = ethers.getDefaultProvider(""rinkeby"");
    let walletWithProvider = new ethers.Wallet(privateKey, provider);
    let walletPublicKey = walletWithProvider.address;

    const nonce = await walletWithProvider.getTransactionCount();

    console.log('\r\nCurrent nonce: ', nonce);

    const GovernanceAddress = await utils.getAddress(walletPublicKey, nonce + 1);

    console.log(`\r\nExpected GovernanceAddress: ${GovernanceAddress}`);

    const GovernanceContract = await deployer.deploy(Governance);

    if(GovernanceContract.address.toLowerCase() !== GovernanceAddress) {
        throw new Error(""GovernanceContract Address Does Not Match Expected Address (GovernanceAddress) - Aborting Deployment"");
    }

  });
}"
66746-0-2.sol,answer,function(txnHash) {return getTransactionReceiptMined(txnHash);}
63548-2-0.sol,answer,"function(error,result){
    if (! error)
        console.log(expand(result));
    else
        console.log(error);
}"
66233-1-0.sol,answer,"function createCampaign(uint deposit, address ll) public payable{
    dpst = deposit;
    require(msg.value > (40.add(dpst)).div(100 wei));"
6266-0-0.sol,answer,"function() {
  transfer DAO tokens to other attacking contract
  invoke splitDAO
}"
79840-0-8.sol,answer,"function(request, response){
        var test=new web3.eth.Contract(test_abi,""0x955e2139A28111203C0a648d0513b302F7Af079C"");
        var result=await test.methods.fname().call()
        
        
            response.render('index.jade', {data:result});
        }"
22847-0-1.sol,answer,"function(deployer) {
  deployer.deploy(Voting, [""greg"", ""bob"", ""tom""]);
}"
19289-0-1.sol,answer,"function(deployer) {
 deployer.deploy(Purchase, 10);
}"
34007-0-0.sol,answer,"function(){

  let contractInstance;

  it(""Store Values"", function(){
    return Oracle.deployed().then(function(instance){

      contractInstance = instance; 

      contractInstance.StoreDocument(startDate,startVal);
      contractInstance.StoreDocument(endDate,endVal);

    }).then(function(){ 

    
    assert.equal(contractInstance.RetrieveData(startDate),startVal,""Start Value incorrect"");
    assert.equal(contractInstance.RetrieveData(endDate),endDate,""End Date incorrect"");
    });
   });"
34007-0-0.sol,answer,"function(instance){

      contractInstance = instance; 

      contractInstance.StoreDocument(startDate,startVal);
      contractInstance.StoreDocument(endDate,endVal);

    }"
34570-0-1.sol,answer,"function(deployer) {
  deployer.deploy(SimpleStorage)

    
    .then(() => console.log(SimpleStorage.address))

    
    .then(() => SimpleStorage.deployed())
    .then(_instance => console.log(_instance.address));
}"
32824-0-0.sol,answer,"function(confirmationNumber, receipt){ console.log(confirmationNumber); tokencontract.options.address = receipt.contractAddress; }"
15402-3-1.sol,answer,"function (error,event){
    if (error) {
      console.log(error)
    } else {
      console.log(""All Events"")
      console.log(event);
    }
  }"
73718-0-0.sol,answer,"function() {
        return new Web3.providers.WebsocketProvider(""ws:
      }"
40709-0-0.sol,answer,"function sendToken() payable 
{
    testDebug(""Before"",client,totalSupply,investors[msg.sender]);
    assert(remaining < totalSupply);
    uint noOfTokens = msg.value / price;
    assert(noOfTokens < totalSupply-remaining); 
    investors[msg.sender] = noOfTokens;
    remaining = remaining+noOfTokens;

    testDebug(""After"",client,remaining,noOfTokens);

    client.transfer(msg.value);    
}"
8442-0-1.sol,answer,"function(deployer) {
    
    var ethJsUtil = require('/usr/lib/node_modules/ethereumjs-util/');

    var currentNonce = web3.eth.getTransactionCount(web3.eth.accounts[0]);
    var futureLeftNonce = currentNonce;
    var futureLeftAddress = ethJsUtil.bufferToHex(ethJsUtil.generateAddress(
        web3.eth.accounts[0], futureLeftNonce));
    var futureRightNonce = futureLeftNonce + 1;
    var futureRightAddress = ethJsUtil.bufferToHex(ethJsUtil.generateAddress(
        web3.eth.accounts[0], futureRightNonce));

    deployer.deploy(Left, futureRightAddress);
    deployer.deploy(Right, futureLeftAddress);
}"
33063-0-0.sol,answer,"function(){
    return deployer.deploy(CrowdSale, CrowdTestToken.address)}"
60610-0-0.sol,answer,"function() {
    App.contracts.Add.deployed().then(function(i) {
        return i.add($(""#fvalue"").val(), $(""#svalue"").val());
    }).then(function(j) {
        $(""#total"").val(j);
    });
}"
60610-0-0.sol,answer,"function(i) {
        return i.add($(""#fvalue"").val(), $(""#svalue"").val());
    }"
60610-0-0.sol,answer,"function(j) {
        $(""#total"").val(j);
    }"
56169-0-0.sol,answer,"function(error, result){ 
    var gasPrice = Number(result);
    console.log(""Gas Price is "" + gasPrice + "" wei""); 

    Coursetro.setFile.estimateGas(identifier, fileName, ""hash..."", {from: 0x, ...}).then(function(result) {
        var gas = Number(result);

        console.log(""gas estimation = "" + gas + "" units"");
        console.log(""gas cost estimation = "" + (gas * gasPrice) + "" wei"");
        console.log(""gas cost estimation = "" + TestContract.web3.fromWei((gas * gasPrice), 'ether') + "" ether"");
    });
}"
5860-0-1.sol,answer,"function(error, result) {
   if (!error) {
       balance = web3.eth.getBalance(address);
   }
}"
65200-1-0.sol,answer,"function seneth () public{
        for (uint i=0; i<userAddresses.length; i++) {

                 userAddresses[i].transfer(msg.value);

      }
    }"
74504-0-0.sol,answer,"function(error, accounts) {
if(error) {
    console.log(error);
} else {
    console.log(accounts);
}
}"
9383-0-0.sol,answer,"function(e) {
    if(!e) {
        ppInst.pong(function(e, val) {
            Session.set('pong', val);
        });
    }
}"
35230-0-1.sol,answer,function(instance) { instanceTest = instance; }
41037-1-0.sol,answer,"function(req, res, next){
    var val = req.params.val;
    myContractInstance.functionCall(val, {from: web3.eth.defaultAccount,gas: 300000 })
        .then(function(retval){
            res.send(200, { retval: retval });
        })
        .catch(function(err){
            res.send(err);
        });
     next();
}"
41037-1-0.sol,answer,"function(retval){
            res.send(200, { retval: retval });
        }"
41037-1-0.sol,answer,"function(err){
            res.send(err);
        }"
41037-1-0.sol,answer,"function() {
  console.log('%s listening at %s', server.name, server.url);
}"
41858-0-0.sol,answer,"function(accounts) {
  it(""Test gas"", async () => {
    const meta = await MetaCoin.deployed();

    
    const initial = await web3.eth.getBalance(accounts[1]);
    console.log(`Initial: ${initial.toString()}`);

    
    const receipt = await meta.sendCoin(accounts[2], 1, { from: accounts[1] });
    const gasUsed = receipt.receipt.gasUsed;
    console.log(`GasUsed: ${receipt.receipt.gasUsed}`);

    
    const tx = await web3.eth.getTransaction(receipt.tx);
    const gasPrice = tx.gasPrice;
    console.log(`GasPrice: ${tx.gasPrice}`);

    
    const final = await web3.eth.getBalance(accounts[1]);
    console.log(`Final: ${final.toString()}`);
    assert.equal(final.add(gasPrice.mul(gasUsed)).toString(), initial.toString(), ""Must be equal"");
  });
}"
74429-1-0.sol,answer,"function(deployer) {
  deployer.deploy(Test).then( (instance) => 
    instance.write(1);
)}"
57646-0-2.sol,answer,"function(deployer, network, accounts) {


    const wallet = ""<your address>"";"
26269-0-0.sol,answer,"function(instance) {
   
}"
27146-0-0.sol,answer,"function(instance) {
    return instance.publicVar.call();
  }"
27146-0-0.sol,answer,"function(result) {
    console.log(result.toString());
  }"
50903-0-0.sol,answer,"function(res) {
    
    assert.equal(res[0].toNumber(), 5);
    
    assert.equal(res[1], ""John"");
  }"
43636-1-0.sol,answer,"function connectMetamask(){
  if (typeof window.ethereum !== 'undefined'
      || (typeof window.web3 !== 'undefined')) {
      const provider = window['ethereum'] || window.web3.currentProvider
  }
  console.log(ethereum.isMetaMask);

  try {
    const accounts = await ethereum.enable();
    console.log(""account: "" +  accounts[0]);

    ethereum.send({
      method: 'eth_sendTransaction',
      params: [{""from"": accounts[0],
      ""to"": smartContractaddress,
      ""gas"": ""0x2DC6C0"", 
      ""gasPrice"": ""0x2540BE400"", 
      ""value"": weitohex, 
      ""data"": inputhex}],
      from: accounts[0],
    },function(err, transactionHash) {
      if (!err){
        console.log(transactionHash); 
        if(transactionHash.result !== undefined){
          document.getElementById('span_metalink').innerText=""https:
          document.getElementById('span_metalink').href=""https:
          document.getElementById('span_success').innerText = ""Transaction Successfully Done!!!"";
        }
        else{
          document.getElementById('span_success').innerText = ""User denied transaction signature."";
        }
      }
    })

  } catch (error) {
    console.log(error === ""User rejected provider access"")
  }
}"
43636-1-0.sol,answer,"function(err, transactionHash) {
      if (!err){
        console.log(transactionHash); 
        if(transactionHash.result !== undefined){
          document.getElementById('span_metalink').innerText=""https:
          document.getElementById('span_metalink').href=""https:
          document.getElementById('span_success').innerText = ""Transaction Successfully Done!!!"";
        }
        else{
          document.getElementById('span_success').innerText = ""User denied transaction signature."";
        }
      }
    }"
44052-2-0.sol,answer,"function(instance) {
  adoptionInstance = instance;
  return adoptionInstance.passAddress(""address1, address2,..."");
}"
44052-2-0.sol,answer,"function(adopters) {
  console.log(""function success"");
}"
44052-2-0.sol,answer,"function(err) {
  console.log(""function error"" + err.message);
}"
12740-0-5.sol,answer,"function() {

    it(""should work"", function() {
        return A.deployed().then(function(instance){

            
            return instance.create();

        }).then(function(result){
            console.log(""transaction:"");
            console.log(result.tx);

            console.log(""logs:"");
            console.log(result.logs.args.a); 

            return A.deployed();

        }).then(function(instance){
            
            return instance.getElements.call();

        }).then(function(result){
            console.log(""getElements:"");
            console.log(result); 
        });
    });
}"
12740-0-5.sol,answer,"function(instance){

            
            return instance.create();

        }"
12740-0-5.sol,answer,"function(result){
            console.log(""transaction:"");
            console.log(result.tx);

            console.log(""logs:"");
            console.log(result.logs.args.a); 

            return A.deployed();

        }"
78660-0-0.sol,answer,"function() {

    if (typeof ethereum !== 'undefined') {
        
        window.web3 = new Web3(ethereum);
    } else if (typeof web3 !== 'undefined') {
        
        window.web3 = new Web3(web3.currentProvider);
    } else {
        
        window.web3 = new Web3(new Web3.providers.HttpProvider('http:
    }

    try {
        $(""#connected"").html(`You are connected to network ${await window.web3.eth.net.getId()}`);
    } catch(error) {
        $(""#connected"").html(`You are have no access to Ethereum: ${error}`);
    }

    $(""#otherAddress"").change(async function() {
        try {
            $(""#otherBalance"").html(await window.web3.eth.getBalance($(this).val()));
        } catch(error) {
            $(""#otherBalance"").html(error);
        }
    });

    const displayMyAccounts = accounts => {
        try {
            if (accounts.length == 0) {
                $(""#myAddresses"").html(""<tr><td colspan='2'>You have no addresses</td></tr>"");
            } else {
                $(""#myAddresses"").html("""");
                accounts.forEach(async myAddress => $(""#myAddresses"").append(`<tr>
                        <td>${myAddress}</td>
                        <td>${await window.web3.eth.getBalance(myAddress)}</td>
                    </tr>`)
                );
            }
        } catch(error) {
            $(""#myAddresses"").html(error);
        }
    };

    if (typeof ethereum !== 'undefined') {
        $(""#allowMyAddresses"").click(async () => {
            try {
                displayMyAccounts(await ethereum.enable());
            } catch(error) {
                $(""#allowStatus"").html(""You did not allow to access your addresses"");
            }
        });
    } else {
        try {
            displayMyAccounts(await window.web3.eth.getAccounts());
        } catch(error) {
            $(""#myAddresses"").html(`Failed to get your addresses: ${error}`);
        }        
    }

}"
59943-0-0.sol,answer,"function() {
    ...
    let acct = (await web3.eth.getAccounts())[0];
    ... you other code here ...
}"
44012-0-1.sol,answer,"function receiveApproval(
    address from, 
    uint256 _amount, 
    address _token, 
    bytes _data) public {

    
    ERC20(_token).transferFrom(from, this, _amount);

    
    
    bytes32 operationId = readOperationId(_data);
    emit ApprovedOperation(operationId);
}"
23302-1-0.sol,answer,"function(instance) {
  contract = instance;
  return contract.increment(1);
}"
23302-1-0.sol,answer,"function(txnHash) {
  return contract.getIteration();
}"
23302-1-0.sol,answer,"function(response) {
  var counter = response.toString(10);
  console log(""Counter says:"", counter);
}"
20750-0-2.sol,answer,"function(deployer) {
    deployer.deploy(SilverCoin).then(function() {
        return deployer.deploy(Banker, SilverCoin.address);
    }).then(function() { })
}"
20750-0-2.sol,answer,"function() {
        return deployer.deploy(Banker, SilverCoin.address);
    }"
44667-1-0.sol,answer,"function(instance) {
    queryResultHandlerinstance = instance;

    return queryResultHandlerinstance.storeQueryResults(1, 2, ""a"", ""b"", {
        from: web3.eth.accounts[0],
        gas: 3000000
    });
}"
57659-0-1.sol,answer,"function(req, res){
    ipfs.getFileContentsFromIPFS(req.query.ipfsHash, function(err, result){
        if (err) {
            res.json({
                status: 'error',
                message: 'Something went wrong while fetching document from IPFS'
            });
        } else {
            
            let isImageOrPdf = fileType(result);
            if (isImageOrPdf.ext == 'pdf') {
                res.writeHead(200,{
                    'Content-type': 'application/pdf'
                });
                res.end(result);
            } else if(isImageOrPdf.ext == 'png' || isImageOrPdf.ext == 'jpg' ){
                res.writeHead(200, {'Content-Type' : 'image/png'});
                res.end(result);
            }
        }
    });
}"
57659-0-1.sol,answer,"function(err, result){
        if (err) {
            res.json({
                status: 'error',
                message: 'Something went wrong while fetching document from IPFS'
            });
        } else {
            
            let isImageOrPdf = fileType(result);
            if (isImageOrPdf.ext == 'pdf') {
                res.writeHead(200,{
                    'Content-type': 'application/pdf'
                });
                res.end(result);
            } else if(isImageOrPdf.ext == 'png' || isImageOrPdf.ext == 'jpg' ){
                res.writeHead(200, {'Content-Type' : 'image/png'});
                res.end(result);
            }
        }
    }"
12950-0-2.sol,answer,"function(err, result) {
  if (err) {
    console.log(err)
    return;
  }
  console.log(""Found "", result);
}"
1587-3-0.sol,answer,"function queryBlock(i){
  var json = await w3.eth.getBlock(i);
  return json;
}"
13866-0-0.sol,answer,"function(v) {
    var strName= v.toString();
    console.log(""Name: ""+ strName);   
}"
2835-2-0.sol,answer,"function(accounts) {
  it(""should put 10000 MetaCoin in the first account"", function(done) {
    
    var meta = MetaCoin.deployed();

    
    meta.getBalance.call(accounts[0]).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    }).then(done).catch(done);
  });
}"
2835-2-0.sol,answer,"function(done) {
    
    var meta = MetaCoin.deployed();

    
    meta.getBalance.call(accounts[0]).then(function(balance) {
      assert.equal(balance.valueOf(), 10000, ""10000 wasn't in the first account"");
    }).then(done).catch(done);
  }"
38131-0-0.sol,answer,"function createTokens() payable{
    require(msg.value > 0);
    require(_totalSupply.add(tokens) <= maxTokens);
    uint256 tokens = msg.value.mul(RATE);
    balances[msg.sender] = balances[msg.sender].add(tokens);
    _totalSupply = _totalSupply.add(tokens);
    owner.transfer(msg.value);
    require(_totalSupply.add(tokens) <= maxTokens);
}"
59414-1-0.sol,answer,"function(accounts) {
var catcherror=require(""../node_modules/openzeppelin-solidity/test/helpers/expectThrow.js"").expectThrow;


    it(""test case-1 working"", function(){
    var admin_address=accounts[0]; 

var testit;
    return Test.deployed().then(function(instance){
    testit=instance;
    return testit.balanceOf(admin_address);
    }).then(function(result){

   console.log(""admin balance==>"",result.valueOf());
catcherror(transfer(admin_address,50,{from:admin_address}));
});

});
}"
59414-1-0.sol,answer,"function(){
    var admin_address=accounts[0]; 

var testit;
    return Test.deployed().then(function(instance){
    testit=instance;
    return testit.balanceOf(admin_address);
    }).then(function(result){

   console.log(""admin balance==>"",result.valueOf());
catcherror(transfer(admin_address,50,{from:admin_address}));
});

}"
59414-1-0.sol,answer,"function(result){

   console.log(""admin balance==>"",result.valueOf());
catcherror(transfer(admin_address,50,{from:admin_address}));
}"
45398-0-2.sol,answer,"function makeDeposit(){
   var etherAmount = web3.toBigNumber($(""#id_of_field_with_ether_value"").val());
   var weiValue = web3.toWei(etherAmount,'ether');
   MyContract.deposit({from: web3.eth.accounts[0], gas: gasValue, value: weiValue}, function(err, res){ })
   }"
57659-0-0.sol,answer,"function(fileDetails, callback) {
    let fileContent = fs.readFileSync(fileDetails.path);
    node.files.add({
        path: fileDetails.originalname,
        content: fileContent
    }, (err, filesAdded) => {
        if (err) {
            return callback(err);
        }
        callback(null, {
            hash: filesAdded[0].hash
        });
    });
}"
57659-0-0.sol,answer,"function(ipfsHash, callback) {
    node.files.cat(ipfsHash, function(err, data) {
        callback(err, data);
    });
}"
57659-0-0.sol,answer,"function(err, data) {
        callback(err, data);
    }"
80251-0-0.sol,answer,"function callCreateEscrow(){
this.state.neutralG.methods.createEscrow(intvalue, 3600, price, this.symbol, beneficiaryAddress, qty,
    this.tokenAddress).send({ from: this.state.account})
  .on('receipt', (receipt)=>{
    this.setState({loading: false})
  })
}"
83263-0-0.sol,answer,"function onlyOwner () public{
     require(msg.sender == owner, ""This can only be called by the contract owner!"");
     
   }"
55724-0-1.sol,answer,"function(deployer, network, accounts) {
    
    deployer.deploy(AccessControl, { from: accounts[2] });
}"
6260-0-0.sol,answer,"function payout (){
    if (msg.sender==bossAddress){
            bossAddress.call.value(bossSalary)();
            employeeAddress.call.value(employeeSalary)();
            selfdestruct(bossAddress);
    }
}"
56219-1-0.sol,answer,"function(deployer, accounts) {  
    let aInst, bInst, cInst, dInst;
    let aAccount;

await Promise.all([
  deployer.deploy(CredentialOrgFactory),
  deployer.deploy(CredentialFactory),
  deployer.deploy(ApplicantFactory)
  
]);

instances = await Promise.all([
  CredentialOrgFactory.deployed(),
  CredentialFactory.deployed(),
  ApplicantFactory.deployed()
  
])

aInst = instances[0];
bInst = instances[1];
cInst = instances[2];


results = await Promise.all([
  bInst.setAddress(aInst.address),
  cInst.setAddress(aInst.address),
  
]);

}"
71284-1-0.sol,answer,"function() {
    console.log(""test"");
}"
47620-0-0.sol,answer,"function(address){
    return new Promise(function(fullfill,reject){
        web3.eth.getBalance(address).then(function(ethBal){
            if(ethBal){
                console.log(""balance of account : ""+address +"" is: ""+ethBal);
                fullfill(rethBal;            
            }else{
                reject(false);
            }
           }).catch(function(err){
               console.log(err);
               reject(err);
           })
    });
}"
47620-0-0.sol,answer,"function(fullfill,reject){
        web3.eth.getBalance(address).then(function(ethBal){
            if(ethBal){
                console.log(""balance of account : ""+address +"" is: ""+ethBal);
                fullfill(rethBal;            
            }else{
                reject(false);
            }
           }).catch(function(err){
               console.log(err);
               reject(err);
           })
    }"
47620-0-0.sol,answer,"function(ethBal){
            if(ethBal){
                console.log(""balance of account : ""+address +"" is: ""+ethBal);
                fullfill(rethBal;            
            }else{
                reject(false);
            }
           }"
47620-0-0.sol,answer,"function(err){
               console.log(err);
               reject(err);
           }"
63712-1-0.sol,answer,"function(error, result) {
    console.log(""address =  "" + result.contractAddress);
}"
29062-0-0.sol,answer,"function(error, result) {
   if(!error) {
      signMsg = result;
       console.log(result);
   } else {
       console.error(error);
   }
}"
64025-0-0.sol,answer,"function _doPause(uint someUint) public{
      something = someUint;
      require(msg.sender == owner);
      isPauseOn = true;
    }"
64025-0-0.sol,answer,"function doChargeCrowdsale(uint someUint) public onlyOwner{
      something = someUint;
      tokenAvailable = tokenReward.balanceOf(this);
      if(tokenAvailable > 0){
        charged = true;
        emit IsCharged(charged);
      }
    }"
43705-1-0.sol,answer,"function(deployer) {
    deployer.deploy(Contract1).then(function(instance) {
        
        
        return deployer.deploy(Contract2, true, 20000, Contract1.address);
    })
}"
43705-1-0.sol,answer,"function(instance) {
        
        
        return deployer.deploy(Contract2, true, 20000, Contract1.address);
    }"
83059-1-0.sol,answer,"function() {
      return path.join(self.working_directory, ""build"");
    }"
36638-0-0.sol,answer,"function(result) {
  
  console.log(""Transaction successful!"");
  return meta.getBalance.call(account_two)
}"
36638-0-0.sol,answer,"function(balance) {
  
  alert(""Balance = "" + balance);
}"
57646-0-1.sol,answer,"function(deployer, network, accounts) {


    const wallet = accounts[0];"
27181-1-0.sol,answer,"function withdraw(uint amount) public{
        value -= amount;
    }"
12330-0-0.sol,answer,"function(err, result) {
        console.log(result.args.hash + "" expires "" + result.args.auctionExpiryDate);
    }"
37911-0-0.sol,answer,"function() payable {
    require(tx.gasprice<30000000000); 
                                      
    doOtherProcessing();
}"
44503-0-1.sol,answer,"function(error, hash){ 
    
    var pendingTransactions = JSON.parse(localStorage.getItem(""pendingTransactions""));
    pendingTransactions.push(hash);
    localStorage.setItem(""pendingTransactions"", JSON.stringify(pendingTransactions));

}"
31140-0-0.sol,answer,"function(deployer, network, accounts) {
  const start = web3.eth.getBlock(web3.eth.blockNumber).timestamp + 90;
  const end = start + (86400 * 30); 
  const rate = new web3.BigNumber(25);
  wallet = accounts[1].toString();
  deployer.deploy(MyTokenCrowdsale, start, end, rate, wallet);
}"
70206-0-0.sol,answer,"function() {
    if (typeof web3 !== 'undefined') {
      window.web3 = new Web3(web3.currentProvider);
      console.log('Connected to Metamask!')
    } else {
      console.log('Injected web3 Not Found!!!')
      var provider = 'http:
      window.web3 = new Web3(new Web3.providers.HttpProvider(provider));
      console.log('Connected without Metamask!')

    } 
    console.log(""account: "" +  web3.eth.coinbase);
}"
17858-0-0.sol,answer,"function copy(){
    for(uint i = 0; i<5; i++){
        newOriginal[i]=2;
    }
}"
41594-0-0.sol,answer,"function(instance) {
    
    contract2Instance = instance;
}"
18390-1-0.sol,answer,function(instance){return instance.yourFunctionhere()}
58733-0-2.sol,answer,function(gas) {return gas * 2;}
34198-0-0.sol,answer,"function(deployer, network, accounts) {
    deployer.deploy(OVXET, 1000000000, ""OVXET"", ""OVX"", accounts[1], accounts[2]);
}"
79108-0-0.sol,answer,"function() {
  
  if (typeof web3 !== 'undefined') {
    ethereum.enable();
    console.warn(""Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http:
    
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.warn(""No web3 detected. Falling back to http:
    
    window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }"
9879-1-0.sol,answer,"function(error, result) {
    if (!error){
        console.log(""Success"");
        console.log(""New Contract Address: "" + result.args._newContractAddress);
        console.log(""Creator: "" + result.args._callerAddress);
        JSON.stringify(result);
    }
}"
9103-0-1.sol,answer,"function() {
        it(""should not allow borrowing book if value send is less than 100"", async function() {
            await lms.addBook('a', 'b', 'c', 'e', 'f', 'g');
            await lms.addMember('Michael Scofield', accounts[2], ""Ms@gmail.com"");
            await lms.borrowBook(1, {from: accounts[2], value: 10**12})
            await expectThrow(lms.borrowBook(1, {from: accounts[2], value: 10000})); 
        });
}"
37706-0-0.sol,answer,"function() {
    return MyContract.deployed().then(function(instance) {
      return instance.addStruct.call(0xf17f52151EbEF6C7334FAD080c5704D77216b732, 1000);
    }).then(function(length) {
       console.log(length.toNumber());
       assert.equal(length.toNumber(), 1, ""length is not 1"");
    });
  }"
37706-0-0.sol,answer,"function(length) {
       console.log(length.toNumber());
       assert.equal(length.toNumber(), 1, ""length is not 1"");
    }"
30572-2-0.sol,answer,"function() {
   deployer.deploy(B).then(funtion() {
       return A.setX(B.address);
     });
     return B.setX(A.address);
   }"
72708-1-0.sol,answer,"function(deployer) {
  deployer.deploy(ConvertLib);
  deployer.link(ConvertLib, MetaCoin);
  deployer.deploy(MetaCoin);
}"
42667-0-0.sol,answer,"function(bigNumber1, bigNumber2){

   someVar = bigNumber1.toString();
   someOtherVar = bigNumber2.toNumber();
}"
42465-0-0.sol,answer,"function(error, result) {
                       console.log(result);
                       if (result.result.pending) {
                            if (result.result.pending[address]) {   
                                var txnsCount = 
                               Object.keys(result.result.pending[consumerAddress]).length;
                                 console.log(""txnsCount: ""+txnsCount);
                            }
                         }
              }"
12668-0-0.sol,answer,"function(error, result){
    if (!error) {
        console.log(result); 
        var order = web3.toAscii(result[0]);
        var name               = result[1];
        var vat                = result[2];
        var headquarterAddress = result[3];

    } else {
        console.log(error); 
    }
}"
59647-0-0.sol,answer,"function() {
    let lottery = await artifacts.require(""Lottery.sol"").new();
    let balance = web3.eth.getBalance(lottery.address);
    console.log(balance.toFixed());
}"
716-0-0.sol,answer,"function() {
    var p = require('path');
    var path = global.path.HOME;

    if(process.platform === 'darwin')
        path += '/Library/Ethereum/geth.ipc';

    if(process.platform === 'freebsd' ||
       process.platform === 'linux' ||
       process.platform === 'sunos')
        path += '/.ethereum/geth.ipc';

    if(process.platform === 'win32')
        path = '\\\\.\\pipe\\geth.ipc';

    console.log('CONNECT to IPC PATH: '+ path);
    return path;
}"
26464-0-1.sol,answer,"function(){
        var currentMonarchAddress;
        var currentClaimPrice;
        var savedInstance

        return KingOfEtherContract.new()
        .then(function(instance){
            savedInstance = instance;
            return writeBasicData(savedInstance, 1, ""king"");
        })
        .then(function(){
            return writeBasicData(savedInstance, 2, ""kingkong"");
        })
        .then(function(){
            return writeBasicData(savedInstance, 3, ""arthur"");
        })
        .then(function(){
            return writeBasicData(savedInstance, 4, ""karl"");
        })

    }"
26464-0-1.sol,answer,"function(instance){
            savedInstance = instance;
            return writeBasicData(savedInstance, 1, ""king"");
        }"
84467-0-1.sol,answer,"function() external payable {
    require(msg.value > price);
    king.transfer(msg.value);
    king = msg.sender;
    price = msg.value;
}"
18432-1-0.sol,answer,"function(deployer, network, accounts) {

    deployer.then(async () => {
        await deployer.deploy(A);
        await deployer.deploy(B, A.address);
        
    });
}"
84761-0-0.sol,answer,"function __callback(bytes32 myid, string result) public{
    if (msg.sender != provable_cbAddress()) revert();
    
    uint256 points = parseInt(result);
    balanceOf[pointsAllowance[myid]] = points;
    remSupply = remSupply - points;
    
    emit LogPriceUpdated(points);
}"
29285-0-1.sol,answer,"function(error, response) {
                 if (!error) {
                      console.log(""event: ""+response.args.customerName);
                      console.log(""event: ""+response.args.priceValue);
                      console.log(""event: ""+response.args.amount);

                 } else {
                      console.error(error);
                 }
            }"
57223-0-0.sol,answer,"function(deployer) {
  deployer.deploy(TokenERC721, 2, {gas: 6721975});
  deployer.deploy(TokenERC721Enumerable, {gas: 6721975});
  deployer.deploy(TokenERC721Metadata, {gas: 6721975});
}"
34302-0-0.sol,answer,"function(instance) {
    ovxet = instance;
    return ovxet.balanceOf.call(account1, {from: account1});
}"
8299-1-0.sol,answer,"function(deployer) {
  deployer.deploy(MEStorage);
}"
37395-0-0.sol,answer,"function() { 

    if (typeof web3 !== 'undefined') { 

        if(web3.eth.accounts.length > 0) { 

            window.web3 = new Web3(web3.currentProvider);

            const from = web3.eth.accounts[0];
            const to   = ""0xf17f52151EbEF6C7334FAD080c5704D77216b732"";
            const value     = web3.toWei(1, 'ether');

            web3.eth.getTransactionCount(from, function(err, nonce) { 
                if(!err) {

                  const transaction = {
                     ""nonce""        : nonce,
                      ""to""          : to, 
                      ""value""       : value
                    };

                    web3.eth.sendTransaction(transaction, function(err, tx) { 
                        if(!err)
                           console.log(tx)
                    });
               }

            });
        } 
     }
}"
37395-0-0.sol,answer,"function(err, nonce) { 
                if(!err) {

                  const transaction = {
                     ""nonce""        : nonce,
                      ""to""          : to, 
                      ""value""       : value
                    };

                    web3.eth.sendTransaction(transaction, function(err, tx) { 
                        if(!err)
                           console.log(tx)
                    });
               }

            }"
37395-0-0.sol,answer,"function(err, tx) { 
                        if(!err)
                           console.log(tx)
                    }"
18432-0-1.sol,answer,"function(deployer, network, accounts) {
  deployer.deploy(B).then(function() {
    return deployer.deploy(A, B.address);
  });
}"
18432-0-1.sol,answer,"function() {
    return deployer.deploy(A, B.address);
  }"
83007-0-0.sol,answer,"function(address0) {
    
}"
38904-0-0.sol,answer,"function(deployer, accounts) {
  deployer.deploy(Migrations);
  deployer.deploy(ERC20Token, 1000, ""Test Coin"", ""TCT"").then(() => {
    return deployer.deploy(ERC20Crowdsale, ERC20Token.address);
  });
}"
46741-0-0.sol,answer,"function(error, result){   
  if(error){
    console.log(""Error on listening to events:"", error)
  }else{
    
  } 
}"
56326-0-0.sol,answer,"function() {
    myContract = await MyContract.new(myArgs);
}"
1181-0-0.sol,answer,"function(txhash, gasSent) {
var deferred = Promise.pending();
ethP = this;
filter = this.filter('latest');         
callstack = new Error().stack;
filter.watch(function(error, result) {
    
    ethP.getTransactionReceiptAsync(txhash).then(function(receipt)  {
    
    if (receipt && receipt.transactionHash == txhash) {
        filter.stopWatching();
        log.info({txreceipt: receipt});

        if (js.isSet(gasSent)) {
            
            
            
            if (receipt.gasUsed >= gasSent) {
                log.error({ badReceipt: receipt });
                log.error({ originalStack: callstack });
                throw(Error(""ran out of gas, transaction likely failed!""
                                                                + callstack));
            }
        }

        deferred.resolve(receipt);
    }
    });
});
return deferred.promise.timeout(60000, ""awaitConsensus timed out after 60000ms"")
        .catch(function(e) {
            log.error(e);
            process.exit(1);
        });"
1181-0-0.sol,answer,"function(error, result) {
    
    ethP.getTransactionReceiptAsync(txhash).then(function(receipt)  {
    
    if (receipt && receipt.transactionHash == txhash) {
        filter.stopWatching();
        log.info({txreceipt: receipt});

        if (js.isSet(gasSent)) {
            
            
            
            if (receipt.gasUsed >= gasSent) {
                log.error({ badReceipt: receipt });
                log.error({ originalStack: callstack });
                throw(Error(""ran out of gas, transaction likely failed!""
                                                                + callstack));
            }
        }

        deferred.resolve(receipt);
    }
    });
}"
1181-0-0.sol,answer,"function(receipt)  {
    
    if (receipt && receipt.transactionHash == txhash) {
        filter.stopWatching();
        log.info({txreceipt: receipt});

        if (js.isSet(gasSent)) {
            
            
            
            if (receipt.gasUsed >= gasSent) {
                log.error({ badReceipt: receipt });
                log.error({ originalStack: callstack });
                throw(Error(""ran out of gas, transaction likely failed!""
                                                                + callstack));
            }
        }

        deferred.resolve(receipt);
    }
    }"
1181-0-0.sol,answer,"function(e) {
            log.error(e);
            process.exit(1);
        }"
82939-0-0.sol,answer,"function BuyTokens(uint _numberOfTokens)public payable{
    
    require(msg.value == mul(_numberOfTokens,tokenPrice),'Invalid price');
    
    require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'Not enough tokens available');
    
    require(tokenContract.transfer(msg.sender,_numberOfTokens),'Transfer failed');
    
    tokenSold += _numberOfTokens;
    
    emit Sell(msg.sender,_numberOfTokens);
}"
35914-0-0.sol,answer,"function(deployer, network, accounts) {
  deployer.then(() => {
    web3.eth.getBlock('latest', (e, block) => {
      if(!e) {
        const startTime = block.timestamp + 120 
        const endTime = startTime + (86400 * 20) 
        const rate = new web3.BigNumber(1000)
        const wallet = accounts[0]
        deployer.deploy(XYZCrowdsale, startTime, endTime, rate, wallet)
      }
    })
  })
}"
64521-0-1.sol,answer,"function(error, result){
            if(!error)
                {    
                    for (i=0; i < result.length; i++) {  

                        var result1 = await crowdSaleContractObj.getInvestorsAndBalances(result[i])
                        console.log(i);     
                        console.log(i + "" - Address : "" + result1[0]+ "",  Balance : "" + result1[1]);
                        element = "" {\""address\"": "" + result1[0] + "",balance:"" + result1[1] + ""},"";
                        console.log(""element: "" + element);
                        dataSample = dataSample + element;  
                    }

                    dataSample = dataSample + ""]"";
                    console.log(""dataSample: "" + dataSample);
                    
                    const xls = new XlsExport(dataSample,  'Example WB');  
                    xls.exportToXLS('export.xls')  

                }
            else
                console.error(error);
    }"
60274-0-1.sol,answer,"function(error, trace) {
    console.log(trace.returnValue);
}"
19730-0-1.sol,answer,"function(){
        console.log(deployedContract.address);
        contractInstance = VotingContract.at(deployedContract.address);
        console.log(contractInstance.address);
        console.log(contractInstance.totalVotesFor.call('Rama'));
}"
42514-0-0.sol,answer,function(response) { saidSomething = response; }
82248-0-2.sol,answer,"function(nonce) {
    const rawTx = {
        nonce: Number(nonce)+1,
        gasPrice: estGasPrice,
        gasLimit: web3.utils.toHex(2100000),
        to: contractAddress,
        data: myData
    }
    const tx = new ethTx(rawTx);
    tx.sign(new Buffer(process.env.TEST_WALLET_PRIVATE_KEY,'hex'));
    const serializedTx = tx.serialize();
    const raw = '0x' + serializedTx.toString('hex');
    web3.eth.sendRawTransaction(raw, function(hash) {
        res.send(hash);
    });
}"
79158-0-0.sol,answer,"function(instance, fromAddressX) {

  console.log(""Initializing"");
  instance.deposit({from: fromAddressX, 
                    gas: 3000000,
    ...."
44522-1-0.sol,answer,"function(instance) {
        
        if (!instance._requestManager.provider) {
          instance._requestManager.setProvider(web3.eth._provider);
        }
        testState.errorInstance = instance;
        done();
      }"
47054-0-0.sol,answer,"function createAuction(address _owner, uint256 _price, string _describtion) public{

    uint256 newPrice = SafeMath.mul(_price, myEtherValue);

    Auction memory _auction = Auction({
      owner: _owner,
      price: newPrice,
      describtion: _describtion
    });

    auctions.push(_auction);
  }"
71943-1-0.sol,answer,"function acceptsHash(bytes memory hash) public{
    require(hash.length == hashLength);

    
}"
57942-0-0.sol,answer,"function() {
    let contractA = await artifacts.require(""A"").new();
    let contractB = await artifacts.require(""B"").new(contractA._address);
}"
13401-0-0.sol,answer,"function(err, accounts) {
  var account = accounts[0];
}"
2943-0-0.sol,answer,"function add(uint x){
  example[indexes.length] = x;
 indexes.push(indexes.length);
}"
7671-1-0.sol,answer,"function(web3, abi, params) {
  return abi.filter(function(json) {
    return json.type === 'constructor' && json.inputs.length === params.length;
  }).map(function(json) {
    return json.inputs.map(function(input) {
      return input.type;
    });
  }).map(function(types) {
    return web3.eth.abi.encodeParameters(types, params).slice(2); 
  })[0] || '';
}"
7671-1-0.sol,answer,"function(types) {
    return web3.eth.abi.encodeParameters(types, params).slice(2); 
  }"
20972-1-1.sol,answer,"function Access2(){
Relay r=new Relay(this);
}"
77996-0-1.sol,answer,"function() {
    const hash_test = ""9F86D081884C7D659A2FEAA0C55AD015A3BF4F1B2B0B822CD15D6C15B0F00A08"";
    const instance = await Exam.deployed(); 
    const hash = await instance.addExam(hash_test, {from: accounts[0]});
    assert.equal(hash.valueOf(), hash_test, ""Not returning the correct address"");
    const isOwner = await instance.isOwner(hash_test, {from: accounts[0]});
    assert.equal(isOwner, true, ""Not recognizing hash correctly"");
    const isNotOwner = await instance.isOwner(""THISISWRONG"", {from: accounts[0]});
    assert.equal(isNotOwner, false, ""Not recognizing hash correctly"")
}"
84545-0-0.sol,answer,"function getRevertReason(txHash){

  const tx = await web3.eth.getTransaction(txHash)

  var result = await web3.eth.call(tx, tx.blockNumber)

  result = result.startsWith('0x') ? result : `0x${result}`

  if (result && result.substr(138)) {

    const reason = web3.utils.toAscii(result.substr(138))
    console.log('Revert reason:', reason)
    return reason

  } else {

    console.log('Cannot get reason - No return value')

  }

}"
72232-0-0.sol,answer,"function(err, accounts){ 
              if(!err){
                alert('Your Metamask account is: ' + accounts[0]);
              }           
            }"
20972-0-0.sol,answer,"function() {
    if(!currentVersion.delegatecall(msg.data)) throw;
}"
56700-1-0.sol,answer,"function(web3) {     
 var tx = MyContract.function(parameter1, parameter2, {  
  from: address,   
  gas: ""300000"",   
  to: ""CONTRACTADDRESS"",   
  value: ""0"",   
  data: """" }, 
function(err, transactionHash) {  
   if (!err)
console.log(transactionHash);    
}) }"
72046-1-0.sol,answer,"function(instance) {
      app = instance ;
      app.getPolicy(arg1,arg2).then(value => {
      console.log('Get policy response ', value); 
     })
   }"
35801-0-0.sol,answer,function(i){lll = i}
12730-2-1.sol,answer,"function(signer) {
    console.log(signer);
    
}"
30572-0-0.sol,answer,"function(deployer) {
  let aInst, bInst;

  await Promise.all([
    deployer.deploy(A),
    deployer.deploy(B)
  ]);

  instances = await Promise.all([
    A.deployed(),
    B.deployed()
  ])

  aInst = instances[0];
  bInst = instances[1];

  results = await Promise.all([
    aInst.setX(bInst.address),
    bInst.setY(aInst.address)
  ]);

  const xCheck = await aInst.x.call();
  const yCheck = await bInst.y.call();

  console.log('X: ', xCheck, bInst.address);
  console.log('Y: ', yCheck, aInst.address);
}"
29037-0-0.sol,answer,"function(txn) {
  return getNewTranslation(row, {from: account}); 
}"
51028-0-3.sol,answer,"function(deployer) {

    deployer.deploy(ArrayTes).then(function() {
        return deployer.deploy(CallFunction, ArrayTes.address);
    }).then(function(instance){
      cf = instance;
      return cf.thirdfun.call(3).then(function(result){
        console.log(""The number is: "" + result.toNumber());
      });
    }).then(function(){
      return cf.useraddress.call().then(function(theAddress){
        console.log(""The address is: "" + theAddress);
      });
    })
}"
51028-0-3.sol,answer,"function(instance){
      cf = instance;
      return cf.thirdfun.call(3).then(function(result){
        console.log(""The number is: "" + result.toNumber());
      });
    }"
51028-0-3.sol,answer,"function(result){
        console.log(""The number is: "" + result.toNumber());
      }"
51028-0-3.sol,answer,"function(){
      return cf.useraddress.call().then(function(theAddress){
        console.log(""The address is: "" + theAddress);
      });
    }"
51028-0-3.sol,answer,"function(theAddress){
        console.log(""The address is: "" + theAddress);
      }"
34824-2-0.sol,answer,"function(error, result) {
    if (result) {
        
    } else {
        
    }
}"
33463-0-0.sol,answer,"function BetOnBitcoin() payable public{
      owner = msg.sender;

    }"
33463-0-0.sol,answer,"function startBets(){

      oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
      totalBetsBitcoinGoesUp = 0;
      totalBetsBitcoinGoesDown = 0;
      numberOfBettersBitcoinGoesUp = 0;
      numberOfBettersBitcoinGoesDown = 0;
      payOutIndexBitcoinUp = 0;
      payOutIndexBitcoinDown = 0;
      totalBets = 0;
      currentState = GameState.gettingBitcoinPrice;
      update();
    }"
78878-0-1.sol,answer,"function transfer(recipient, amount){
   if (msg.sender == parent else {
      if (_balances[msg.sender] >= amount && amount > 0) {
           
           return true
      } else {
           return false
      }
   }
}"
46054-2-0.sol,answer,"function() {
        $.getJSON('Adoption.json', function(data) {
          
          var AdoptionArtifact = data;
          App.contracts.Adoption = TruffleContract(AdoptionArtifact);

          
          App.contracts.Adoption.setProvider(App.web3Provider);

          
          return App.markAdopted();
        });

        return App.bindEvents();
      }"
46154-0-0.sol,answer,"function(deployer) {
    deployer.deploy(string_lib).then(() => {
        deployer.deploy(safemath_lib).then(() => {
            deployer.deploy(PublishService_contract).then(()=>{
                deployer.link(string_lib, PublishService_contract);
                deployer.link(safemath_lib, PublishService_contract);
            });

        });
    });
}"
62693-1-0.sol,answer,"function init()
{
    if (typeof window.web3 !== 'undefined') {
      
     this.web3 = new Web3(window.web3.currentProvider);
    }
    else {
      console.warn('No web3 detected.');
    }
}"
83302-0-3.sol,answer,"function(deployer) {
  deployer.deploy(Migrations, {
    from: ""0x444433332222....0000"",
    gas: ""1000000"",
    gasPrice: ""9000000000"",
  });
}"
44215-0-0.sol,answer,"function(result) {
    numItems = result;
}"
50133-0-4.sol,answer,"function(accounts){

  var chainListInstance;
  var seller = accounts[1];
  var buyer = accounts[2];
  var beds = 1; 
  var baths = 1; 
  var propaddress = ""propaddress"";
  var rental_price = web3.toWei(1,""ether""); 
  var article_description = ""article_description"";
  var available = ""available"";
  var contact_email = ""contact_email"";
  var beds2 = 2; 
  var baths2 = 2; 
  var propaddress2 = ""propaddress2"";
  var rental_price2 = web3.toWei(2,""ether""); 
  var article_description2 = ""article_description2"";
  var available2 = ""available2"";
  var contact_email2 = ""contact_email2"";
  var articleName1 = ""article 1"";
  var articleDescription1 =""Description for article 1"";
  var articlePrice1 = 10;
  var articleName2 = ""article 2"";
  var articleDescription2 = ""Description for article 2"";
  var articlePrice2 = 20;
  var sellerBalanceBeforeBuy, sellerBalanceAfterBuy;
  var buyerBalanceBeforeBuy, buyerBalanceAfterBuy;

  it(""should be initialized with empty values"", function(){
    return Rental.deployed().then(function(instance){
      chainListInstance = instance;
      return chainListInstance.getNumberOfArticles();
    }).then(function(data){
      assert.equal(data.toNumber(), 0, ""number of articles must be zero"");
      return chainListInstance.getArticlesForSale();
    }).then(function(data){
      assert.equal(data.length, 0, ""there shouldn't be any articles for sale"");
    });
  });

 it(""should let us sell first article"", function(){
  return Rental.deployed().then(function(instance){
    chainListInstance = instance;
    return chainListInstance.sellArticle(
      beds,
      baths,
      propaddress,
      rental_price,
      article_description,
      available,
      contact_email,
      
      
      
      {from: seller}
    );
  }).then(function(receipt){
    assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
    assert.equal(receipt.logs[0].event, ""LogSellArticle"", ""event should be LogSellArticle"");
    assert.equal(receipt.logs[0].args._id.toNumber(), 1, ""id must be 1"");
    assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
    
    assert.equal(receipt.logs[0].args._beds.toNumber(), beds, ""event beds must be "" + beds);
    assert.equal(receipt.logs[0].args._baths.toNumber(), baths, ""event baths must be "" + baths);
    assert.equal(receipt.logs[0].args._propaddress, propaddress, ""event propaddress must be "" + propaddress);
    assert.equal(receipt.logs[0].args._rental_price.toNumber(), rental_price, ""event rental_price must be "" + rental_price);
    assert.equal(receipt.logs[0].args._article_description, article_description, ""event article_description must be "" + article_description);
    assert.equal(receipt.logs[0].args._available, available, ""event available must be "" + available);
    assert.equal(receipt.logs[0].args._contact_email, contact_email, ""event contact_email must be "" + contact_email);
    

    return chainListInstance.getNumberOfArticles();
  }).then(function(data){
    assert.equal(data, 1, ""number of articles must be one"");

    return chainListInstance.getArticlesForSale();
  }).then(function(data) {
    assert.equal(data.length, 1, ""there must be one article for sale"");
    assert.equal(data[0].toNumber(), 1, ""article id must be 1"");

    return chainListInstance.articles(data[0]);
  }).then(function(data) {
    assert.equal(data[0].toNumber(), 1, ""article id must be 1"");
    assert.equal(data[1], seller, ""seller must be "" + seller);
    assert.equal(data[2], 0x0, ""buyer must be empty"");
    
    
    
    assert.equal(data[3].toNumber(), beds, ""beds must be "" + beds);
    assert.equal(data[4].toNumber(), baths, ""baths must be "" + baths);
    assert.equal(data[5], propaddress, ""propaddress must be "" + propaddress);
    assert.equal(data[6].toNumber(), rental_price, ""rental_price must be "" + rental_price);
    assert.equal(data[7], article_description, ""article_description must be "" + article_description);
    assert.equal(data[8], available, ""available must be "" + available);
    assert.equal(data[9], contact_email, ""contact_email must be "" + contact_email);
  });
 });

  it(""should let us sell second article"", function(){
   return Rental.deployed().then(function(instance){
     chainListInstance = instance;
     return chainListInstance.sellArticle(
       beds2,
       baths2,
       propaddress2,
       rental_price2,
       article_description2,
       available2,
       contact_email2,
       
       
       
       {from: seller}
     );
   }).then(function(receipt){
     assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
     assert.equal(receipt.logs[0].event, ""LogSellArticle"", ""event should be LogSellArticle"");
     assert.equal(receipt.logs[0].args._id.toNumber(), 2, ""id must be 2"");
     assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
     assert.equal(receipt.logs[0].args._beds.toNumber(), beds2, ""event beds must be "" + beds2);
     assert.equal(receipt.logs[0].args._baths.toNumber(), baths2, ""event baths must be "" + baths2);
     assert.equal(receipt.logs[0].args._propaddress, propaddress2, ""event propaddress must be "" + propaddress2);
     assert.equal(receipt.logs[0].args._rental_price.toNumber(), rental_price2, ""event rental_price must be "" + rental_price2);
     assert.equal(receipt.logs[0].args._article_description, article_description2, ""event article_description must be "" + article_description2);
     assert.equal(receipt.logs[0].args._available, available2, ""event available must be "" + available2);
     assert.equal(receipt.logs[0].args._contact_email, contact_email2, ""event contact_email must be "" + contact_email2);
     
     

     return chainListInstance.getNumberOfArticles();
   }).then(function(data){
     assert.equal(data, 2, ""number of articles must be two"");

     return chainListInstance.getArticlesForSale();
   }).then(function(data) {
     assert.equal(data.length, 2, ""there must be two articles for sale"");
     assert.equal(data[1].toNumber(), 2, ""article id must be 2"");

     return chainListInstance.articles(data[1]);
   }).then(function(data){
     assert.equal(data[0].toNumber(), 2, ""article id must be 2"");
     assert.equal(data[1], seller, ""seller must be "" + seller);
     assert.equal(data[2], 0x0, ""buyer must be empty"");
     
     
     
     assert.equal(data[3].toNumber(), beds2, ""beds must be "" + beds2);
     assert.equal(data[4].toNumber(), baths2, ""baths must be "" + baths2);
     assert.equal(data[5], propaddress2, ""propaddress must be "" + propaddress2);
     assert.equal(data[6].toNumber(), rental_price2, ""rental_price must be "" + rental_price2);
     assert.equal(data[7], article_description2, ""article_description must be "" + article_description2);
     assert.equal(data[8], available2, ""available must be "" + available2);
     assert.equal(data[9], contact_email2, ""contact_email must be "" + contact_email2);
    });
  });

  it(""should buy an article"", function (){
    return Rental.deployed().then(function(instance){
    chainListInstance = instance;
    sellerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
    buyerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();
    return chainListInstance.buyArticle(1, {
      from: buyer,
      value: rental_price 
        });
      }).then(function(receipt){
        assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
        assert.equal(receipt.logs[0].event, ""LogBuyArticle"", ""event should be LogBuyArticle"");
        assert.equal(receipt.logs[0].args._id.toNumber(), 1,""article id must be 1"");
        assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
        assert.equal(receipt.logs[0].args._buyer, buyer, ""event buyer must be "" + buyer);
        
        assert.equal(receipt.logs[0].args._beds.toNumber(), beds, ""event beds must be "" + beds);
        assert.equal(receipt.logs[0].args._baths.toNumber(), baths, ""event baths must be "" + baths);
        assert.equal(receipt.logs[0].args._propaddress, propaddress, ""event propaddress must be "" + propaddress);
        assert.equal(receipt.logs[0].args._rental_price.toNumber(), rental_price, ""event rental_price must be "" + rental_price);
        assert.equal(receipt.logs[0].args._article_description, article_description, ""event article_description must be "" + article_description);
        assert.equal(receipt.logs[0].args._available, available, ""event available must be "" + available);
        assert.equal(receipt.logs[0].args._contact_email, contact_email, ""event contact_email must be "" + contact_email);
        

        sellerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
        buyerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();

        
        
        assert(sellerBalanceAfterBuy == sellerBalanceBeforeBuy + +web3.fromWei(rental_price,""ether""), ""seller should have earned "" + web3.fromWei(rental_price,""ether"") + "" ETH "");
        assert(buyerBalanceAfterBuy <= buyerBalanceBeforeBuy - +web3.fromWei(rental_price,""ether""), ""buyer should have spent "" + web3.fromWei(rental_price,""ether"") + "" ETH"");

        return chainListInstance.getArticlesForSale();

    }).then(function(data){
     assert.equal(data.length, 1, ""there should now be only 1 article left for sale"");
     assert.equal(data[0].toNumber(), 2, ""article 2 should be the only article for sale"");

     return chainListInstance.getNumberOfArticles();
    }).then(function(data){
     assert.equal(data.toNumber(), 2, ""there should still be 2 articles in total"");
    });
  });

}"
50133-0-4.sol,answer,"function(receipt){
    assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
    assert.equal(receipt.logs[0].event, ""LogSellArticle"", ""event should be LogSellArticle"");
    assert.equal(receipt.logs[0].args._id.toNumber(), 1, ""id must be 1"");
    assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
    
    assert.equal(receipt.logs[0].args._beds.toNumber(), beds, ""event beds must be "" + beds);
    assert.equal(receipt.logs[0].args._baths.toNumber(), baths, ""event baths must be "" + baths);
    assert.equal(receipt.logs[0].args._propaddress, propaddress, ""event propaddress must be "" + propaddress);
    assert.equal(receipt.logs[0].args._rental_price.toNumber(), rental_price, ""event rental_price must be "" + rental_price);
    assert.equal(receipt.logs[0].args._article_description, article_description, ""event article_description must be "" + article_description);
    assert.equal(receipt.logs[0].args._available, available, ""event available must be "" + available);
    assert.equal(receipt.logs[0].args._contact_email, contact_email, ""event contact_email must be "" + contact_email);
    

    return chainListInstance.getNumberOfArticles();
  }"
50133-0-4.sol,answer,"function (){
    return Rental.deployed().then(function(instance){
    chainListInstance = instance;
    sellerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
    buyerBalanceBeforeBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();
    return chainListInstance.buyArticle(1, {
      from: buyer,
      value: rental_price 
        });
      }).then(function(receipt){
        assert.equal(receipt.logs.length, 1, ""one event should have been triggered"");
        assert.equal(receipt.logs[0].event, ""LogBuyArticle"", ""event should be LogBuyArticle"");
        assert.equal(receipt.logs[0].args._id.toNumber(), 1,""article id must be 1"");
        assert.equal(receipt.logs[0].args._seller, seller, ""event seller must be "" + seller);
        assert.equal(receipt.logs[0].args._buyer, buyer, ""event buyer must be "" + buyer);
        
        assert.equal(receipt.logs[0].args._beds.toNumber(), beds, ""event beds must be "" + beds);
        assert.equal(receipt.logs[0].args._baths.toNumber(), baths, ""event baths must be "" + baths);
        assert.equal(receipt.logs[0].args._propaddress, propaddress, ""event propaddress must be "" + propaddress);
        assert.equal(receipt.logs[0].args._rental_price.toNumber(), rental_price, ""event rental_price must be "" + rental_price);
        assert.equal(receipt.logs[0].args._article_description, article_description, ""event article_description must be "" + article_description);
        assert.equal(receipt.logs[0].args._available, available, ""event available must be "" + available);
        assert.equal(receipt.logs[0].args._contact_email, contact_email, ""event contact_email must be "" + contact_email);
        

        sellerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(seller), ""ether"").toNumber();
        buyerBalanceAfterBuy = web3.fromWei(web3.eth.getBalance(buyer), ""ether"").toNumber();

        
        
        assert(sellerBalanceAfterBuy == sellerBalanceBeforeBuy + +web3.fromWei(rental_price,""ether""), ""seller should have earned "" + web3.fromWei(rental_price,""ether"") + "" ETH "");
        assert(buyerBalanceAfterBuy <= buyerBalanceBeforeBuy - +web3.fromWei(rental_price,""ether""), ""buyer should have spent "" + web3.fromWei(rental_price,""ether"") + "" ETH"");

        return chainListInstance.getArticlesForSale();

    }).then(function(data){
     assert.equal(data.length, 1, ""there should now be only 1 article left for sale"");
     assert.equal(data[0].toNumber(), 2, ""article 2 should be the only article for sale"");

     return chainListInstance.getNumberOfArticles();
    }).then(function(data){
     assert.equal(data.toNumber(), 2, ""there should still be 2 articles in total"");
    });
  }"
22859-4-0.sol,answer,"function(){ 
   var owner = myContract.methods.owner.call()
   console.log('owner = ', owner)
}"
24419-1-2.sol,answer,"function() {
        if (myBcInstance) {
            return myBcInstance;
        } else {

            myBcInstance = new Web3(new Web3.providers.HttpProvider('http:
            return myBcInstance;
        }
    }"
27146-0-1.sol,answer,"function(instance) {
    return instance.publicMapping.call(mappingKey);
  }"
42539-0-2.sol,answer,"function(error, result){
  if (!error) {
    if(['EventName1', 'EventName2'].includes(result.event)) {
       
    }
  }
}"
37706-0-1.sol,answer,"function() {
    return MyContract.deployed().then(function(instance) {
      instance.addStruct.sendTransaction(""0xf17f52151ebef6c7334fad080c5704d77216b732"", 1000);
      return instance.getStruct.call(1);
    }).then(function(values) {
      console.log(values[0].toString(), values[1].toNumber());
      assert.equal(values[0].toString(), ""0xf17f52151ebef6c7334fad080c5704d77216b732"", 'blah-blah');
      assert.equal(values[1].toNumber(), 1000, 'blah-blah');
    });
  }"
37706-0-1.sol,answer,"function(instance) {
      instance.addStruct.sendTransaction(""0xf17f52151ebef6c7334fad080c5704d77216b732"", 1000);
      return instance.getStruct.call(1);
    }"
37706-0-1.sol,answer,"function(values) {
      console.log(values[0].toString(), values[1].toNumber());
      assert.equal(values[0].toString(), ""0xf17f52151ebef6c7334fad080c5704d77216b732"", 'blah-blah');
      assert.equal(values[1].toNumber(), 1000, 'blah-blah');
    }"
56225-0-0.sol,answer,"function(error, event){
    if (event.event == ""Set"") {
        a = event.returnValues['val'];
        window.setTimeout(function() {
            a = '';
        }, (60 * 1000)); 
    }
}"
56225-0-0.sol,answer,"function() {
            a = '';
        }"
7204-0-7.sol,answer,"function withdraw(){
    uint balance = mainDAO.balanceOf(msg.sender);

    if (!mainDAO.transferFrom(msg.sender, this, balance) || !msg.sender.send(balance))
        throw;
}"
65039-1-0.sol,answer,"function(err, res){

    if(!err){
        console.log(""address sent "");    
    }
}"
43616-0-1.sol,answer,"function() {
      if (typeof window.web3 === 'undefined') {
        web3 = new Web3(new Web3.providers.HttpProvider('https:
        
      } else {
        web3= new Web3(window.web3.currentProvider); 
        
         var DataPassContract = web3.eth.contract(abi);
      } 
    }"
44122-0-0.sol,answer,"function() public payable {
    uint limitBalance = 100 ether;
    if (address(this).balance > limitBalance) {
        address receiver = 0x0123;
        receiver.transfer(address(this).balance);
    }
}"
19561-0-0.sol,answer,"function pay (address _payee) 
    {
        selfdestruct(_payee);
    }"
19283-0-0.sol,answer,"function(err,res) { accounts = res; }"
19283-0-0.sol,answer,"function(response) {
  contract = response;
  return contract.function(arg1, arg2, {from: account2}); 
"
29808-1-0.sol,answer,"function() { 
    it( ""Deployed Somewhere "", async() => { 
       contractHandle = await Handle.deployed();
       theTotalIs = await contractHandle.balance.call();
       console.log(theTotalIs);
    });
}"
51119-0-1.sol,answer,"function saveInteger(int value){

}"
8362-0-1.sol,answer,"function(err, txHash) {
  if (err != null) {
         console.error(""Error while sending transaction: "" + err);
       }
       else{
         console.log(""Transaction Sent here's you  txHash: "" + txHash);
       }
}"
21654-0-0.sol,answer,"function(error, estimatedGas) {
        }"
42711-3-0.sol,answer,"function(deployer) {
  deployer.deploy(Infofeed).then(
     DeployedContract =>{
     deployer.deploy(Consumer,DeployedContract.address);
     }
  )
  
  
}"
35348-0-0.sol,answer,"function(deployer) {
   deployer.deploy(Regulator).then(function(instance){
        var RegulatorAddress = Regulator.address;
        deployer.deploy(TollBoothOperator, true, 50000, RegulatorAddress);
     })
    }"
35348-0-0.sol,answer,"function(instance){
        var RegulatorAddress = Regulator.address;
        deployer.deploy(TollBoothOperator, true, 50000, RegulatorAddress);
     }"
64672-0-0.sol,answer,"function() {
    let factory = new ethers.ContractFactory(abi, bytecode, wallet);
    let contract = await factory.deploy(""Hello World"");
    console.log(contract.address);
    console.log(contract.deployTransaction.hash);
    await contract.deployed()  }"
73026-1-1.sol,answer,"function passThrough() payable public
    {
    
    portfolio.receiveFunds.value(address(this).balance)();
    }"
47115-2-0.sol,answer,"function(deployer) {
  deployer.deploy(DappToken, 1000000).then(function() {
    
    var tokenPrice = 1000000000000000;
    return deployer.deploy(DappTokenSale, DappToken.address, tokenPrice);
    }).then(function() {
      var tokensAvailable = 750000;
      DappToken.deployed().then(function(instance) { instance.transfer(DappTokenSale.address, tokensAvailable, { from: adminAddress }); })
  });
}"
47115-2-0.sol,answer,"function(instance) { instance.transfer(DappTokenSale.address, tokensAvailable, { from: adminAddress }); }"
78341-0-1.sol,answer,"function(result) {
    assert.ok(result.receipt.status, 'it returns true');
"
28418-0-0.sol,answer,"function() {
    if (typeof web3 !== 'undefined') { 
        window.web3 = new Web3(web3.currentProvider);

        MyContract = contract(my_contract_json);
        MyContract.setProvider(web3.currentProvider);
        MyContract.deployed().then(function(instance) {
            my_contract_deployed = instance;
            
        });
    }
}"
28418-0-0.sol,answer,"function(instance) {
            my_contract_deployed = instance;
            
        }"
9339-0-2.sol,answer,"function() {
    return TemplateVar.get('estimatedGas') == 'invalid' 
            || TemplateVar.get('estimatedGas') == 0
            || typeof TemplateVar.get('estimatedGas') == 'undefined';
}"
60064-0-0.sol,answer,"function() {
        return deployer.deploy(BNB, admin, 100000e18);
    }"
5674-0-1.sol,answer,"function MyAdvancedToken(
    uint256 initialSupply,
    string tokenName,
    uint8 decimalUnits,
    string tokenSymbol,
    address centralMinter
) {
    if(centralMinter != 0 ) owner = msg.sender;         
    balanceOf[msg.sender] = initialSupply;              
    name = tokenName;                                   
    symbol = tokenSymbol;                               
    decimals = decimalUnits;                            
    totalSupply = initialSupply;
}"
39171-1-0.sol,answer,"function(response, eventName, index) {
    assert.equal(response.logs[index].event, eventName, eventName + ' event should fire.');
}"
34988-1-0.sol,answer,"function buyLotteryTicket(_hashedSaltFromParticipant) payable
{
    participationTimestamp = now;
    hashedSaltFromParticipant = _hashedSaltFromParticipant; 
    addressOfParticipant = msg.sender;
}"
34988-1-0.sol,answer,"function revealMyTicket(saltFromParticipant)
{
    require(keccak256(saltFromParticipant) == hashedSaltFromParticipant);
    tempTicketNr = keccak256(addressOfParticipant + saltFromParticipant + participationTimestamp);
    ticketNr = removeAllCharactersButDigits(tempTicketNr);
    if (ticketNr > highestTicket){
        highestTicket = ticketNr;
        highestParticipant = msg.sender;
    }
}"
42352-1-0.sol,answer,"function() {
  MyContract.deployed() 
  .then(function(instance) {
    myContract = instance;
    return myContract.doSomething()
  })
  .then(function(response) {
    response1 = response;
    return myContract.somethingElse()
  })
  .then(function(response) {
    response2 = response;
    assert.equal(response1.toString(10),2,""response1 should be 2"");
    assert.strictEqual(response2,false,""response2 isn't false"");
  });
}"
42352-1-0.sol,answer,"function(instance) {
    myContract = instance;
    return myContract.doSomething()
  }"
42352-1-0.sol,answer,"function(response) {
    response1 = response;
    return myContract.somethingElse()
  }"
65464-0-0.sol,answer,"function(balance) {
   assert.equal(balance.toNumber(), 999990, 'returns all unsold dapp tokens to admin');
   
}"
19074-0-1.sol,answer,"function() {

  
  if (typeof window.web3 !== 'undefined') {
    
    window.web3 = new Web3(window.web3.currentProvider);
  } else {
    console.log('No web3? You should consider trying MetaMask!')
    
    window.web3 = new Web3(new Web3.providers.HttpProvider(""http:
  }

  platformBrowserDynamic().bootstrapModule(AppModule);

}"
25451-1-0.sol,answer,"function(error, result){
  if (result !== undefined) {
    var args = result.returnValues;
    args[""_txn""] = result.transactionHash;
    console.log(args);
  }
}"
11979-0-1.sol,answer,"function(txn) {
    console.log(""transaction submited"", txn);
    return getTransactionReceiptMined(txn); 
}"
7057-0-1.sol,answer,"function clearBytes32(str){
    return str.replace(/\u0000/g, '');
}"
7057-0-1.sol,answer,"function toInteger( bigNumber){
    return parseInt(bigNumber.toString() );
}"
59899-1-0.sol,answer,"function(instance) {
  meta = instance;
  return meta.getBalance.call(account_one, {from: account_one});
}"
59899-1-0.sol,answer,"function(balance) {
  
  
  
  console.log(balance.toNumber());
}"
27052-0-0.sol,answer,"function withdraw(){
    
    require(block.timestamp > timeHasCome);
    
    require(msg.sender == beneficiary);
    
    
    beneficiary = address(0);
    
    (bool success, ) = msg.sender.call.value(predefinedAmount)(""""); 
    require(success, ""Transfer failed.""); 
}"
62049-0-1.sol,answer,"function(deployer) {
    deployer.deploy(TestCoin);
}"
49751-0-2.sol,answer,"function payforproduct(amount){
    MyContract.transfer(web3.eth.accounts[0], 'the contract Address', amount, {from: web3.eth.accounts[0]}, function(err, res){})
}"
54681-0-1.sol,answer,"function get(uint256 y, address _owner) public{
   arraymapping[_owner].arrayvalue.push(y);
   emit logg(y,_owner);
}"
19524-6-0.sol,answer,"function(error, accounts) {

        if (error == null && accounts.length > 0) {
          userAccount = accounts[0];
        }"
50565-0-0.sol,answer,"function(myevent) {
    return new Promise(function(resolve, reject) {
        myevent.get(function(error, logs) {
            if (error !== null) {
                reject(error);
            }
            var log_info = {};
            for (var index = 0; index < logs.length; index++) {
                log_info[logs[index].blockHash] = 1;
                console.log(logs[index].blockHash);
            }                                                                                                                   
            resolve(log_info);
        });
    });
}"
50565-0-0.sol,answer,"function(resolve, reject) {
        myevent.get(function(error, logs) {
            if (error !== null) {
                reject(error);
            }
            var log_info = {};
            for (var index = 0; index < logs.length; index++) {
                log_info[logs[index].blockHash] = 1;
                console.log(logs[index].blockHash);
            }                                                                                                                   
            resolve(log_info);
        });
    }"
50565-0-0.sol,answer,"function(error, logs) {
            if (error !== null) {
                reject(error);
            }
            var log_info = {};
            for (var index = 0; index < logs.length; index++) {
                log_info[logs[index].blockHash] = 1;
                console.log(logs[index].blockHash);
            }                                                                                                                   
            resolve(log_info);
        }"
19685-0-2.sol,answer,"function() {
    var instance = await Example.deployed()
    var contractAddress = instance.address

    var h = web3.sha3(contractAddress)
    var sig = web3.eth.sign(address, h).slice(2)
    var r = `0x${sig.slice(0, 64)}`
    var s = `0x${sig.slice(64, 128)}`
    var v = web3.toDecimal(sig.slice(128, 130)) + 27

    var result = await instance.testRecovery.call(h, v, r, s)
    assert.equal(result, address)
  }"
64082-0-0.sol,answer,"function() {
         return new Web3.providers.IpcProvider(""\\\\.\\pipe\\geth.ipc"", net);
      }"
16069-1-2.sol,answer,"function send(address receiver)  
  payable {  
            uint amount = msg.value;
            if (balances[msg.sender] < amount) return;
            balances[msg.sender] -= amount;
            balances[receiver] += amount;
            receiver.transfer(msg.value);
    
            Sent(msg.sender, receiver, amount);
        }"
67874-0-3.sol,answer,"function(instance) { 
  myNFT = instance;
  myNFT.changeBContract(BContract.deployed()); 
  ..."
24897-0-1.sol,answer,"function(accounts) {

    var basic;

    it(""Should set value to 40"", function() {

        return Basic.deployed().then(function(instance) { 
            basic = instance;

            return basic.getValue.call(); 

        }).then(function(result) {
            console.log(""#######################"");
            console.log(""result (hexa)="" + result); 
            console.log(""result (ascii)="" + web3.toAscii(result)); 

            return basic.setValue(web3.fromAscii(""40""), {from: accounts[0]}); 

        }).then(function(receipt) {
            console.log(""#######################"");
            console.log(""transaction receipt"");
            console.log(receipt);

            return basic.getValue.call(); 

        }).then(function(result) {
            console.log(""#######################"");
            console.log(""result (hexa)="" + result); 
            console.log(""result (ascii)="" + web3.toAscii(result)); 
            assert.equal(web3.toAscii(result), ""40"");
        });
    });


}"
24897-0-1.sol,answer,"function() {

        return Basic.deployed().then(function(instance) { 
            basic = instance;

            return basic.getValue.call(); 

        }).then(function(result) {
            console.log(""#######################"");
            console.log(""result (hexa)="" + result); 
            console.log(""result (ascii)="" + web3.toAscii(result)); 

            return basic.setValue(web3.fromAscii(""40""), {from: accounts[0]}); 

        }).then(function(receipt) {
            console.log(""#######################"");
            console.log(""transaction receipt"");
            console.log(receipt);

            return basic.getValue.call(); 

        }).then(function(result) {
            console.log(""#######################"");
            console.log(""result (hexa)="" + result); 
            console.log(""result (ascii)="" + web3.toAscii(result)); 
            assert.equal(web3.toAscii(result), ""40"");
        });
    }"
24897-0-1.sol,answer,"function(instance) { 
            basic = instance;

            return basic.getValue.call(); 

        }"
24897-0-1.sol,answer,"function(result) {
            console.log(""#######################"");
            console.log(""result (hexa)="" + result); 
            console.log(""result (ascii)="" + web3.toAscii(result)); 

            return basic.setValue(web3.fromAscii(""40""), {from: accounts[0]}); 

        }"
24897-0-1.sol,answer,"function(receipt) {
            console.log(""#######################"");
            console.log(""transaction receipt"");
            console.log(receipt);

            return basic.getValue.call(); 

        }"
78398-0-0.sol,answer,"function(error, result) {
    if(!error) {
        console.log(result, 'result');
    } else {
        console.log(error, 'error')
    }
}"
11136-0-3.sol,answer,"function(balanceReturned) {
  
  
  var bal = balanceReturned.toString(10);
  console.log(""Balance returned"", bal);   
}"
11136-0-3.sol,answer,"function(error) {
  console.error(""Error getting balance"", error):
}"
71372-1-0.sol,answer,"function(deployer) {
    deployer.deploy(Organ)
}"
19082-1-0.sol,answer,"function(error, trans){
        let input = trans.input.slice(10);
        let sample = [];
        if (trans) {
            let sliceFrom = 0;
            let sliceTo = 64;
            for (let i = 0; i < 12; i++) {
                sample[i] = (parseInt(input.slice(sliceFrom, sliceTo), 16));
                sliceFrom += 64;
                sliceTo += 64;
                console.log(i+"": ""+sample[i]);
            }
        }
    }"
8700-0-3.sol,answer,"function(hash){
      console.log(""transactionHash:"", colors.yellow(hash))
  }"
8700-0-3.sol,answer,"function(confirmationNumber, receipt){
      console.log(""   confirmation #"", colors.green(confirmationNumber))
  }"
8700-0-3.sol,answer,"function(err) {
      console.log(""error:"", colors.red(err.toString()))
  }"
44894-0-0.sol,answer,"function(deployer) {
    deployer.then(async () => {
        await deployer.deploy(ReentrancyPot);
        var reentrancyPotInstance = await ReentrancyPot.deployed();
        await deployer.deploy(ReentrancyAttack, reentrancyPotInstance.address)
    });
}"
34883-0-0.sol,answer,"function(receipt){
                          console.log('receipt',receipt);

                    this.escrowContract.methods.getValue().call({from: account})
                    .then(function(result){
                        console.log('getTestValue',result);
                    });
                      }"
17951-1-1.sol,answer,"function() {
     var self = this;

     
     var messages;
     Messages.deployed()
     .then(function(instance) {
       messages = instance;        
       return messages.retrieveMessage.call();
     })


     .then(function(value) {
       var message_element = document.getElementById(""secretMessage"");
       message_element.innerHTML = value + ""."";
     }).catch(function(e) {
       self.setStatus(""Error getting message; see log."");
     });
}"
17951-1-1.sol,answer,"function(instance) {
       messages = instance;        
       return messages.retrieveMessage.call();
     }"
22898-0-1.sol,answer,function(value) { state = value) }
56607-0-0.sol,answer,"function(deployer) {
  deployer.deploy(Ownable).then(
      Ownabledeployed =>{
        deployer.deploy(OmniCAT);
  });

}"
31567-1-0.sol,answer,"function PokeTheWaiter(){
            if(tokens[4] == 1){
                tokens[4] = 0;
                tokens[6]++;
                logStatus(orderNumber,""Waiter has been poked"", now);
            } else {
                revert();

            }}"
73951-0-0.sol,answer,"function() external payable {
    deposit();
}"
42521-1-2.sol,answer,"function() {
  Mutex(msg.sender).f();
}"
56834-0-3.sol,answer,"function(err, accounts) { 
  account = accounts[0]; 
}"
10185-1-0.sol,answer,"function() {
  return C.new() 
  .then(function(newInstance) {
    c = newInstance;
  });
}"
10185-1-0.sol,answer,"function(newInstance) {
    c = newInstance;
  }"
25716-0-0.sol,answer,"function(score) { 
  console.log(score.toString(10); 
}"
29290-0-0.sol,answer,"function(deployer) {
  deployer.deploy(ContractB, '750000000000000000000000000', 'MyCoinName', 18,{gas: 4700000})
}"
30894-0-0.sol,answer,"function(deployer, network, accounts) {
  deployer.deploy(Plant, <someNumberOfLeaves>, <someInitialCoin>, { from: accounts[0], value: 1e18 );
};"
16962-0-0.sol,answer,"function(error, accounts) {
    ...
}"
80742-0-2.sol,answer,"function(receipt) {
    console.log(JSON.stringify(receipt, null, 4));
}"
63617-1-2.sol,answer,"function(accounts) {
    it(""should not transfer 1 token from address[0] to address[1]"", async function() {
        await truffleAssert.reverts(erc20Instance.transfer(accounts[1], 1), null, ""No error was thrown trying to cheat balance"");
    });
}"
63617-1-2.sol,answer,"function() {
        await truffleAssert.reverts(erc20Instance.transfer(accounts[1], 1), null, ""No error was thrown trying to cheat balance"");
    }"
72284-0-4.sol,answer,"function(deployer) {
  deployer.deploy(DocRegistry);
}"
2453-0-0.sol,answer,"function(result) {
  account0 = result[0];
  contract.vote(2, {
    from: account0
  });
}"
75971-0-0.sol,answer,"function(err, accountList) {
        if(!err)
           console.log(accountList);
}"
21509-1-0.sol,answer,"function(duration) {
  const id = Date.now()

  return new Promise((resolve, reject) => {
    web3.currentProvider.sendAsync({
      jsonrpc: '2.0',
      method: 'evm_increaseTime',
      params: [duration],
      id: id,
    }, err1 => {
      if (err1) return reject(err1)

      web3.currentProvider.sendAsync({
        jsonrpc: '2.0',
        method: 'evm_mine',
        id: id+1,
      }, (err2, res) => {
        return err2 ? reject(err2) : resolve(res)
      })
    })
  })
}"
26582-0-0.sol,answer,"function(hash){
        console.log(""transactionHash: ""+transactionHash);
    }"
26582-0-0.sol,answer,"function(1, receipt){
        console.log(""Transaction confirmed"");
    }"
34405-2-0.sol,answer,"function(error,data){for (x in data){a.push(data[x])}}"
22898-0-2.sol,answer,"function(instance) { 
   escrow = instance; 
   return escrow.state(); 
}"
22898-0-2.sol,answer,"function(response) { 
   state = response;
   console.log(state.toString(10);
}"
39437-1-0.sol,answer,"function(error, accounts){
if(error){
    console.log(""error"")
    return;
 }
  console.log(accounts);
  for(var index=0;index<accounts.length;index++){
       getBalance(accounts[index]);
  }
}"
39437-1-0.sol,answer,"function getBalance(var account){
    var balance = web3.eth.getBalance(account); 
    balance = web3.toDecimal(balance);
    if(balance > web3.toWei(1,'ether')){
         console.log(""Address""+ account + "" and balance is "" +web3.toWei(balance,'ether'));
    }
}"
31712-1-0.sol,answer,"function(data, removed){
    
    
}"
59969-0-0.sol,answer,"function(deployer) {

    
    deployer.deploy()
    deployer.deploy(contractCopy2).then(function() {
        return deployer.deploy(contractMain, contractCopy1.address,contractCopy2.address);
    });

}"
59969-0-0.sol,answer,"function() {
        return deployer.deploy(contractMain, contractCopy1.address,contractCopy2.address);
    }"
70663-1-0.sol,answer,"function main(){
    const newtworkType = await web3.eth.net.getNetworkType();
    const networkId = await web3.eth.net.getId();
    console.log(""network type:""+newtworkType);
    console.log(""network id:""+networkId);
}"
9324-0-2.sol,answer,"function(transactionId) {
    console.log(""transactionId=""+transactionId);

    horseBetContract.getRaceInfos.call(0).then(function(raceDatas){

        assert.equal(raceDatas[0], 0, ""The raceId returned should be 0"");

        assert.equal(raceDatas[1].valueOf(), 100, ""The sum of all bets should be 100."");

        assert.equal(raceDatas[2], false, ""The race shouldn't be over"");

        var horsesRunningTheRaceParam = [];
        for(var i = 0 ; i < raceDatas[3].length; i++){
            horsesRunningTheRaceParam.push(Number(raceDatas[3][i]));
        }
        assert.deepEqual(horsesRunningTheRaceParam, horsesRunningTheRace, ""The horses running the race should be the one we initialized the race with."");

        assert.equal(raceDatas[4], false, ""The bets shouldn't be closed on the race."");
    });

}"
9324-0-2.sol,answer,"function(raceDatas){

        assert.equal(raceDatas[0], 0, ""The raceId returned should be 0"");

        assert.equal(raceDatas[1].valueOf(), 100, ""The sum of all bets should be 100."");

        assert.equal(raceDatas[2], false, ""The race shouldn't be over"");

        var horsesRunningTheRaceParam = [];
        for(var i = 0 ; i < raceDatas[3].length; i++){
            horsesRunningTheRaceParam.push(Number(raceDatas[3][i]));
        }
        assert.deepEqual(horsesRunningTheRaceParam, horsesRunningTheRace, ""The horses running the race should be the one we initialized the race with."");

        assert.equal(raceDatas[4], false, ""The bets shouldn't be closed on the race."");
    }"
51442-0-2.sol,answer,"function(err,response) { 
  account = response[0];
  
}"
36004-1-0.sol,answer,"function(data) {
      var SecondArtifact = data;
      App.contracts.Second = TruffleContract(SecondArtifact);

      App.contracts.Second.setProvider(App.web3Provider);

    }"
77187-0-0.sol,answer,"function(error, receipt) {
    if (receipt !== undefined) {
        
    }
    else {
        
    }
}"
24449-0-0.sol,answer,"function(err, result) {
    $(""#htmlelement"").html(result);
}"
41079-0-0.sol,answer,"function(error,result){
if (!error) {
    
    if (result.address) {
        
        console.log(createEtherscanIoUrl('address', result.address));
    } else {
        
        console.log(createEtherscanIoUrl('tx', result.transactionHash));
        
        pollTransactionReceipt(result.transactionHash);
    }
} else {
    console.log(""error contract.new: "" + error);
}
}"
62555-0-0.sol,answer,"function(accounts) {

    var owner = accounts[0];
    var seller = accounts[1];
    var buyer = accounts[2];"
11188-0-0.sol,answer,"function(req, res) {
    wait.launchFiber(handleRequest, req, res);
}"
57942-1-0.sol,answer,"function(deployer, network) {
    deployer.deploy(contractA);
}"
84338-0-1.sol,answer,"function(a, coinbase) {
    a = await web3.eth.getTransactionFromBlock(4461, 0);

    document.getElementById(""transaction"").append(""transaction input data  : "" + a.input + ""\n"");
    cb = coinbase;        
}"
17558-0-2.sol,answer,"function(deployer) {
    deployer.deploy(Converter);
    deployer.link(Converter, MainContract);
    deployer.deploy(MainContract);
}"
77692-0-1.sol,answer,"function(receipt){
  console.log(receipt.transactionHash);
  console.log(""ending balance:"");
  web3.eth.getBalance('0x9e5ef1c0a4b1619be3e83184a6549b5ee11a159c').then(console.log);
}"
44247-0-1.sol,answer,"function(deployer) {
  deployer.deploy(ParentContract);
}"
15353-2-1.sol,answer,"function(error, result){
    if (!error)
        alert(""wait for a while, check for block Synchronization or block creation"");
        console.log(result);
}"
30572-1-0.sol,answer,"function(deployer) {
  deployer.deploy(NppToken).then(() => {
    return deployer.deploy(CrowdSale, NppToken.address);
  }).then(async () => {
    var token = await NppToken.deployed();
    await token.transferOwnership(CrowdSale.address);       
  });      
}"
15154-0-1.sol,answer,function(instance) { userRegistry = instance; }
15154-0-1.sol,answer,"function(isIndeed) { console.log(""Is registered"", isIndeed); }"
15154-0-1.sol,answer,"function(userInfo) { console.log(""User Info:"", userInfo); }"
54715-2-1.sol,answer,"function(error, signing_address) {
    console.log(signing_address, error);
}"
83368-0-0.sol,answer,"function(event) {
        event.preventDefault();
        contract.setCandidate($('#nameone').val());
      }"
83368-0-0.sol,answer,"function(err, othercandidateName) {
        $('#othercandidateName').html(othercandidateName);
      }"
69525-1-0.sol,answer,"function() {
        return new HDWalletProvider(YOUR_MNEMONIC, ""https:
      }"
59256-0-0.sol,answer,"function (){

    var fromOwner = accounts[0];
    var coinFactory;
    var coinNewCoin;
    var coinAddress;
    return CoinFactory.deployed().then((instance) => {
        coinFactory = instance;
    }).then(() => {
        return coinFactory.getCoinAddress(fromOwner, {from: fromOwner});
    }).then((result) => {
        return CoinNewCoin.at(result).getAuthorizationKey();
    }).then((result) => {
        var testVal = result.toString().split("","");
        assert.equal(""00000000000000000000000000000000"",web3.toAscii(testVal[0]), ""Coin contract is was not created, fail!"")
    });
}"
41605-0-0.sol,answer,function(instance) { sum = instance; }
41605-0-0.sol,answer,function(r) { response = r.toString(10); }
60139-2-0.sol,answer,"function(seed){
    const hdWallet = hdkey.fromMasterSeed(seed);
    
    const masterNode = hdWallet.derivePath(""m/44'/60'/0'"");
    const masterExtendedPublicKey = masterNode.publicExtendedKey();

    
    const myWallet = hdkey.fromExtendedKey(masterExtendedPublicKey);

    for(let i=0;i<5;i++){
        const node = myWallet.derivePath(""m/""+i);
        const nodeWallet = node.getWallet();
        const address = nodeWallet.getAddressString();
        console.log(address);
    }

}"
56642-0-0.sol,answer,"function(){
  myContract.methods.get().call((error, result) => {console.log(result)})
}"
3245-0-0.sol,answer,"function setFreight(string contNumber,
             string s_Invoice,
            string c_Invoice,
            string s_number,
            uint t_Weight,
            uint t_Quantity) {

}"
67874-0-2.sol,answer,"function() {
 deployer.deploy(BContract, MyNFT721.deployed().address);
 ..."
45564-0-1.sol,answer,"function constructCluster(clusterData storage self){
      self.isRunning         = true;
  }"
49721-2-0.sol,answer,"function(deployer, network, accounts) {
  if (network == ""test"") return; 
  …
}"
49868-0-2.sol,answer,"function(deployer) {
  console.log(""----migration custom argument: "",argv['custom_argument']);
  ......
}"
73066-0-1.sol,answer,"function(deployer, network, accounts) {
  const _name = ""Dinar Coin"";
  const _symbol = ""DNC"";
  const _decimals = 18 ;
  await deployer.deploy(DinarCoin, _name, _symbol, _decimals);
  const deployedToken = await DinarCoin.deployed();

  const latestTime = (new Date).getTime();

  const _rate           = 500;
  const _wallet         = '0x7b179f369451782679aCc04f9799193E67f14f74'; 
  const _token          = deployedToken.address;
  const _openingTime    = latestTime + duration.minutes(1);
  const _closingTime    = _openingTime + duration.weeks(10);
  const _cap            = ether(100);
  const _goal           = ether(50);
  const _foundersFund   = '0x7b179f369451782679aCc04f9799193E67f14f74'; 
  const _foundationFund = '0x7b179f369451782679aCc04f9799193E67f14f74'; 
  const _partnersFund   = '0x7b179f369451782679aCc04f9799193E67f14f74'; 
  const _releaseTime    = _closingTime + duration.days(1);

  await deployer.deploy(
    DinarCrowdsale,
    _rate,
    _wallet,
    _token,
    _cap,
    _openingTime,
    _closingTime,
    _goal,
    _foundersFund,
    _foundationFund,
    _partnersFund,
    _releaseTime
  );

  return true;
}"
47445-0-0.sol,answer,"function withdrawBalance()
{
    uint amountToWithdraw = userBalances[msg.sender];
    userBalances[msg.sender] = 0;
    if (msg.sender.call.value(amountToWithdraw)() == false) {
        throw;
    }
}"
41023-0-0.sol,answer,"function(done) {
    
    (async () => {
            var singleton = await Singleton.deployed();
            var manyOfMeAt0 = await ManyOfMe.at(await singleton.tokens(0));
            console.log(await manyOfMeAt0.doSomething());           

            done();
    })();
}"
24684-0-0.sol,answer,"function(instance) {
    return instance.myFunction.call(arg1, arg2, {from: '0x************************'})

}"
33825-0-0.sol,answer,"function(instance){
    theContract = instance;
    return theContract.yourFunction({from: yourAccount})
    }"
33825-0-0.sol,answer,"function(theTransactionID){

    web3.getTransactionReceipt(theTransactionID, function(error, result){


    [handle error and result here]

    })
     }"
33825-0-0.sol,answer,"function(error, result){


    [handle error and result here]

    }"
50740-0-0.sol,answer,"function() {
    return myContract.deployed().then(function(instance){
      contract = instance;
      return contract.test.call(""hello"", [""0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8""])
      .then(function(testVals){
        assert.equal(testVals[0].valueOf(), testVals[1][0].valueOf())
      })
  });
}"
50740-0-0.sol,answer,"function(instance){
      contract = instance;
      return contract.test.call(""hello"", [""0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8""])
      .then(function(testVals){
        assert.equal(testVals[0].valueOf(), testVals[1][0].valueOf())
      })
  }"
54855-0-0.sol,answer,"function(accounts) {
    address owner;
    address user;

    beforeEach(function() {
        owner = accounts[0];
        user = accounts[1];
    });
}"
54855-0-0.sol,answer,"function() {
        owner = accounts[0];
        user = accounts[1];
    }"
29845-1-0.sol,answer,"function(){
    deployer.deploy(contractB, contractA.address)}"
74429-0-0.sol,answer,"function(deployer) {
  deployer.then(async () => {
    const t = await Test.deployed();
    await t.write(1);
    console.log('Completed!');
  });
}"
58077-0-2.sol,answer,"function(err, result) {
    console.log(""r-->""+result);
}"
68184-0-1.sol,answer,"function(deployer,network,accounts) {   
console.log(accounts);  
deployer.deploy(Migrations); 
}"
50961-1-0.sol,answer,"function(deployer) {
    mycontract.source = web3.toHex(mycountract.source);
}"
18575-0-0.sol,answer,"function(err, result) {
        if (err) {
          console.log(err)
        } else {
          _cb(_caller, result)
        }
      }"
11160-0-0.sol,answer,"function(t) {
      var date = new Date(block.timestamp * 1000);
      var day = date.toJSON().substring(0, 10);
      var time = date.toJSON().substring(11, 19);
      
      var key = day;
      var tx = eth.getTransaction(t.hash);
      var txR = eth.getTransactionReceipt(t.hash);
      var gasUsed = txR.gasUsed;
      var gasPrice = tx.gasPrice;
      var cost = new BigNumber(gasUsed).mul(gasPrice).div(1e18);
      if (count[key]) {
        count[key]++;
      } else {
        count[key] = 1;
      }
      if (costMap[key]) {
        costMap[key] = costMap[key].plus(cost);
      } else {
        costMap[key] = new BigNumber(cost);
      }
      console.log(""Data: "" + day + ""\t"" + time + ""\t"" + t.hash + ""\t"" + gasPrice + ""\t"" + gasUsed + ""\t"" + cost);
    }"
28813-0-3.sol,answer,"function p3 ( uint x ){
     uint temp = 0;
     for ( uint i = 0 ; i < x ; i++)
         temp += i; }"
29125-0-1.sol,answer,function(deployer) {   
66311-0-2.sol,answer,"function() {
    return truffleAssert.reverts(
        auctionInstance.bid(itemId[0], count[6], {from: account[1]}), 
        ""Failed to check remaining tokens less than count""
    );
}"
24327-1-0.sol,answer,"function TransferTokens(_TO, _AMOUNT){
    const ERC_CONTRACT_ADDR = ""0x0"" 
    const ABI_FILE = ""ABI.json""; 
    const ERC_CONTRACT = new web3.eth.Contract(JSON.parse(ABI_FILE), ERC_CONTRACT_ADDR);
    const fromAddress = """"; 
    const fromPrivateKey = ""XXX""; 
    return new Promise(async function(resolve, reject){
        let params = await ERC_CONTRACT.methods.transfer(_TO, _AMOUNT).encodeABI();
        let rawTX = await generateTransaction(params, fromAddress, fromPrivateKey, ERC_CONTRACT_ADDR);
        try{
            let hash = await broadcastTransaction(rawTX);
            resolve(hash);
        }catch(e){
            reject(e);
        }
    })

}"
24327-1-0.sol,answer,"function(resolve, reject){
        let params = await ERC_CONTRACT.methods.transfer(_TO, _AMOUNT).encodeABI();
        let rawTX = await generateTransaction(params, fromAddress, fromPrivateKey, ERC_CONTRACT_ADDR);
        try{
            let hash = await broadcastTransaction(rawTX);
            resolve(hash);
        }catch(e){
            reject(e);
        }
    }"
9026-1-0.sol,answer,"function(err, result) {
    if (err != null) {
        console.error(""Error while retrieving the balance for address[""+address+""]: ""+err);
    }

    var balance = Number(web3.fromWei(result, ""ether""));
    console.debug(""Balance for address[""+address+""]=""+balance);
}"
51477-0-0.sol,answer,"function transfer_ether() public payable{
   uint c = 60 ether;
   if(msg.value >= c){
       
   }
}"
26012-0-0.sol,answer,"function(deployer, network, accounts) {
  const startTime = 1504859321
  const endTime = 1536395321
  const rate = new web3.BigNumber(1000)
  const wallet = ""0x8005cEb675D2FF8c989CC95354438B9Fab568681""

  deployer.deploy(GustavoCoinCrowdsale, startTime, endTime, rate, wallet)
}"
47792-1-0.sol,answer,"function() {
        var _gas = URP.SendCoin.estimateGas($(""#x1"").val(), $(""#x2"").val(), $(""#y1"").val(), $(""#y2"").val(), $(""#z1"").val(), $(""#z2"").val(), $(""#retailer"").val(), $(""#value"").val(), $(""#x"").val(), $(""#y"").val(), $(""#z"").val(), $(""#shopper"").val());
        _gas = Math.floor(gas*1.2); 
        URP.SendCoin($(""#x1"").val(), $(""#x2"").val(), $(""#y1"").val(), $(""#y2"").val(), $(""#z1"").val(), $(""#z2"").val(), $(""#retailer"").val(), $(""#value"").val(), $(""#x"").val(), $(""#y"").val(), $(""#z"").val(), $(""#shopper"").val(), {from:'your account', gas:_gas});
    }"
50397-1-0.sol,answer,"function get_address (address _Address){   
        Address = _Address;
    }"
39805-3-0.sol,answer,"function burnAllTokens()
{
    for(uint i=0;i<accountCount;i++)
    {
        accountBalances[accountIndex[i]] = 0;
        _totalSupply = 0;
    }
}"
62859-0-0.sol,answer,"function insertOrigin(string _airportName, uint32 _checkInTime, uint8 _bagWeight) 
    public 
{
    ...
}"
42550-0-0.sol,answer,"function set_myVariable(bool newVal) public{
    myVariable = newVal;
}"
26244-0-1.sol,answer,"function() {


            
            
            if(typeof web3 !== 'undefined') {
                web3 = new Web3(web3.currentProvider);  

            
            } else {
                web3 = new Web3(new Web3.providers.HttpProvider(""http:
            }

            
            if(!web3.isConnected()) {
                console.error(""Not connected"");

            }

            var account = web3.eth.accounts[0];
            var accountInterval = setInterval(function() {
              if (web3.eth.accounts[0] !== account) {
                account = web3.eth.accounts[0];
                document.getElementById(""address"").innerHTML = account;
              }
            }, 100);

        }"
68621-0-0.sol,answer,"function(err, req, res, next) {
    try {
      

      next()
    } catch(err) {
      

      next(err)
    }
}"
47076-0-3.sol,answer,"function(instance) { 
    return instance.myFullMapping.call(0) 
}"
11233-1-1.sol,answer,"function(){
    var percentage = eth.syncing.currentBlock/eth.syncing.highestBlock*100;
    var percentagePerTime = percentage - lastPercentage;
    var blocksToGo = eth.syncing.highestBlock - eth.syncing.currentBlock;
    var bps = (lastBlocksToGo - blocksToGo) / (timeInterval / 1000)
    var etas = 100 / percentagePerTime * (timeInterval / 1000)

    var etaM = parseInt(etas/60,10);
    console.log(parseInt(percentage,10)+'% ETA: '+etaM+' minutes @ '+bps+'bps');

    lastPercentage = percentage;lastBlocksToGo = blocksToGo;
}"
23296-0-0.sol,answer,"function(accounts) {
  it(""Test max"", async function() {
    const instance = await MyContract.deployed();
    
  });
}"
23296-0-0.sol,answer,"function() {
    const instance = await MyContract.deployed();
    
  }"
74002-0-0.sol,answer,"function processDelegatedTransaction(
    address userAddress,
    uint8 v,
    bytes32 r,
    bytes32 s,
    uint16 param1,
    uint16 param2
) public requireOwner {
    bytes32 msgHash = keccak256(abi.encodePacked(param1, param2));
    require(userAddress == ecrecover(msgHash, v, r, s));
}"
49160-0-0.sol,answer,"function(deployer, network, accounts) {
    deployer.then(() => {
        return deployer.deploy(YourCoin);
    })
    .then(() => {
        var rate = 1;
        var wallet = accounts[0];
        return deployer.deploy(YourCrowdsale, rate, wallet, wallet, YourCoin.address);
    });
}"
82247-0-2.sol,answer,"function(q,r){ 
    var source2='E:/Alireza/contracts/customer.sol';
    var customercompiled=solc.compile(source2)
    var customerJson=""E:/Alireza/build/contracts/customer.json"";
    var customerJs=JSON.parse(fs.readFileSync(customerJson));
    var ByteCode=""..."";
    var customer=new web3.eth.Contract(customerJs.abi, null, {data: ByteCode});
        web3.eth.personal.unlockAccount(""0x83Ad536099658519ee6A40A3faCAf3dDcEf6178a"",""Alireza"").then(()=>{console.log(""Address unlocked"");}).catch(console.error);
        customer.deploy().send({from: ""0x6Db320B080b956c371c4bC5b00eF74e73bCE7798"", gas:2100000, gasPrice:200}).then((instance)=>{console.log(""Contract mined at ""+instance.options.address);
            customerInstance=instance; var deployedCustomer=new web3.eth.Contract(customer_abi, instance.options.address) ;deployedCustomer.methods.fill(q.body.firstname, q.body.lastname, q.body.id1, q.body.KYC, q.body.Level, q.body.hashValue, ""BankA"").send({from: ""0xF25e4413a9bB7cEf81239Ab5eD2352Da472330b8"", gas:3000000, gasPrice:200});
});
"
28813-0-2.sol,answer,"function p3 ( uint x ){
     for ( uint i = 0 ; i < x ; i++)
         sum += i; }"
43022-1-1.sol,answer,"function(err, estimate) {
    transactionObject.gas = estimate;
}"
38361-0-0.sol,answer,"function() {
  var token;
  return Token.deployed().then(function(instance){
    token = instance;
    return token.transfer(accounts[1], 100000);
  }).then(function(result){
    console.log(result.logs[0].event)
  })
}"
38361-0-0.sol,answer,"function(instance){
    token = instance;
    return token.transfer(accounts[1], 100000);
  }"
38361-0-0.sol,answer,"function(result){
    console.log(result.logs[0].event)
  }"
28813-0-4.sol,answer,"function p5 ( uint x ){
    uint m = 0;
    uint v = 0;
    for ( uint i = 0 ; i < x ; i++) 
        m += i;
    for ( uint j = 0 ; j < x ; j++) /loop-2
        v -= j; }"
41841-0-0.sol,answer,"function(){     
  deployer.deploy(SampleCrowdsale, openingTime, closingTime, ethRate, wallet, cap, YourToken.address, goal).then( async () => {
    const instance = await OurCrowdsale.deployed();
    const token = await instance.token.call();
    console.log('Token Address', token);
  });
}"
49192-0-0.sol,answer,"function(err,result){
    if(!err){
        accounts = result;
    }
}"
